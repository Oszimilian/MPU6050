
Gyrosensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000680c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  080068cc  080068cc  000168cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b08  08006b08  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08006b08  08006b08  00016b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b10  08006b10  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b10  08006b10  00016b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b14  08006b14  00016b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08006b18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  2000005c  08006b74  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08006b74  000202a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c2f3  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cc6  00000000  00000000  0002c3ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a98  00000000  00000000  0002e080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000848  00000000  00000000  0002eb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000149da  00000000  00000000  0002f360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dd00  00000000  00000000  00043d3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007e5ec  00000000  00000000  00051a3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002c2c  00000000  00000000  000d0028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000d2c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080068b4 	.word	0x080068b4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	080068b4 	.word	0x080068b4

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4699      	mov	r9, r3
 800027a:	0c03      	lsrs	r3, r0, #16
 800027c:	469c      	mov	ip, r3
 800027e:	0413      	lsls	r3, r2, #16
 8000280:	4647      	mov	r7, r8
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0404      	lsls	r4, r0, #16
 800028c:	0c24      	lsrs	r4, r4, #16
 800028e:	b580      	push	{r7, lr}
 8000290:	0007      	movs	r7, r0
 8000292:	0c10      	lsrs	r0, r2, #16
 8000294:	434b      	muls	r3, r1
 8000296:	4365      	muls	r5, r4
 8000298:	4341      	muls	r1, r0
 800029a:	4360      	muls	r0, r4
 800029c:	0c2c      	lsrs	r4, r5, #16
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	1820      	adds	r0, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	4283      	cmp	r3, r0
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4356      	muls	r6, r2
 80002b6:	0c03      	lsrs	r3, r0, #16
 80002b8:	042d      	lsls	r5, r5, #16
 80002ba:	0c2d      	lsrs	r5, r5, #16
 80002bc:	1989      	adds	r1, r1, r6
 80002be:	4463      	add	r3, ip
 80002c0:	0400      	lsls	r0, r0, #16
 80002c2:	1940      	adds	r0, r0, r5
 80002c4:	18c9      	adds	r1, r1, r3
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f001 fb3c 	bl	800196c <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f001 fb37 	bl	800196c <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	d434      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000306:	469b      	mov	fp, r3
 8000308:	4653      	mov	r3, sl
 800030a:	465a      	mov	r2, fp
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83b      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e079      	b.n	8000416 <__udivmoddi4+0x146>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e076      	b.n	800041c <__udivmoddi4+0x14c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e029      	b.n	800039c <__udivmoddi4+0xcc>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	469b      	mov	fp, r3
 8000374:	2320      	movs	r3, #32
 8000376:	1a9b      	subs	r3, r3, r2
 8000378:	4652      	mov	r2, sl
 800037a:	40da      	lsrs	r2, r3
 800037c:	4641      	mov	r1, r8
 800037e:	0013      	movs	r3, r2
 8000380:	464a      	mov	r2, r9
 8000382:	408a      	lsls	r2, r1
 8000384:	0017      	movs	r7, r2
 8000386:	4642      	mov	r2, r8
 8000388:	431f      	orrs	r7, r3
 800038a:	4653      	mov	r3, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	001e      	movs	r6, r3
 8000390:	42af      	cmp	r7, r5
 8000392:	d9c3      	bls.n	800031c <__udivmoddi4+0x4c>
 8000394:	2200      	movs	r2, #0
 8000396:	2300      	movs	r3, #0
 8000398:	9200      	str	r2, [sp, #0]
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	4643      	mov	r3, r8
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0d8      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a2:	07fb      	lsls	r3, r7, #31
 80003a4:	0872      	lsrs	r2, r6, #1
 80003a6:	431a      	orrs	r2, r3
 80003a8:	4646      	mov	r6, r8
 80003aa:	087b      	lsrs	r3, r7, #1
 80003ac:	e00e      	b.n	80003cc <__udivmoddi4+0xfc>
 80003ae:	42ab      	cmp	r3, r5
 80003b0:	d101      	bne.n	80003b6 <__udivmoddi4+0xe6>
 80003b2:	42a2      	cmp	r2, r4
 80003b4:	d80c      	bhi.n	80003d0 <__udivmoddi4+0x100>
 80003b6:	1aa4      	subs	r4, r4, r2
 80003b8:	419d      	sbcs	r5, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2100      	movs	r1, #0
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1824      	adds	r4, r4, r0
 80003c6:	414d      	adcs	r5, r1
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d006      	beq.n	80003da <__udivmoddi4+0x10a>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d9ee      	bls.n	80003ae <__udivmoddi4+0xde>
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1924      	adds	r4, r4, r4
 80003d4:	416d      	adcs	r5, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d1f8      	bne.n	80003cc <__udivmoddi4+0xfc>
 80003da:	9800      	ldr	r0, [sp, #0]
 80003dc:	9901      	ldr	r1, [sp, #4]
 80003de:	465b      	mov	r3, fp
 80003e0:	1900      	adds	r0, r0, r4
 80003e2:	4169      	adcs	r1, r5
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db24      	blt.n	8000432 <__udivmoddi4+0x162>
 80003e8:	002b      	movs	r3, r5
 80003ea:	465a      	mov	r2, fp
 80003ec:	4644      	mov	r4, r8
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	002a      	movs	r2, r5
 80003f2:	40e2      	lsrs	r2, r4
 80003f4:	001c      	movs	r4, r3
 80003f6:	465b      	mov	r3, fp
 80003f8:	0015      	movs	r5, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db2a      	blt.n	8000454 <__udivmoddi4+0x184>
 80003fe:	0026      	movs	r6, r4
 8000400:	409e      	lsls	r6, r3
 8000402:	0033      	movs	r3, r6
 8000404:	0026      	movs	r6, r4
 8000406:	4647      	mov	r7, r8
 8000408:	40be      	lsls	r6, r7
 800040a:	0032      	movs	r2, r6
 800040c:	1a80      	subs	r0, r0, r2
 800040e:	4199      	sbcs	r1, r3
 8000410:	9000      	str	r0, [sp, #0]
 8000412:	9101      	str	r1, [sp, #4]
 8000414:	e79e      	b.n	8000354 <__udivmoddi4+0x84>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d8bc      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800041a:	e782      	b.n	8000322 <__udivmoddi4+0x52>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	2100      	movs	r1, #0
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	2200      	movs	r2, #0
 8000426:	9100      	str	r1, [sp, #0]
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	2201      	movs	r2, #1
 800042c:	40da      	lsrs	r2, r3
 800042e:	9201      	str	r2, [sp, #4]
 8000430:	e785      	b.n	800033e <__udivmoddi4+0x6e>
 8000432:	4642      	mov	r2, r8
 8000434:	2320      	movs	r3, #32
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	4646      	mov	r6, r8
 800043c:	409a      	lsls	r2, r3
 800043e:	0023      	movs	r3, r4
 8000440:	40f3      	lsrs	r3, r6
 8000442:	4644      	mov	r4, r8
 8000444:	4313      	orrs	r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	40e2      	lsrs	r2, r4
 800044a:	001c      	movs	r4, r3
 800044c:	465b      	mov	r3, fp
 800044e:	0015      	movs	r5, r2
 8000450:	2b00      	cmp	r3, #0
 8000452:	dad4      	bge.n	80003fe <__udivmoddi4+0x12e>
 8000454:	4642      	mov	r2, r8
 8000456:	002f      	movs	r7, r5
 8000458:	2320      	movs	r3, #32
 800045a:	0026      	movs	r6, r4
 800045c:	4097      	lsls	r7, r2
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	40de      	lsrs	r6, r3
 8000462:	003b      	movs	r3, r7
 8000464:	4333      	orrs	r3, r6
 8000466:	e7cd      	b.n	8000404 <__udivmoddi4+0x134>

08000468 <__aeabi_fmul>:
 8000468:	0243      	lsls	r3, r0, #9
 800046a:	0a5b      	lsrs	r3, r3, #9
 800046c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800046e:	464f      	mov	r7, r9
 8000470:	4646      	mov	r6, r8
 8000472:	4699      	mov	r9, r3
 8000474:	46d6      	mov	lr, sl
 8000476:	0fc3      	lsrs	r3, r0, #31
 8000478:	0045      	lsls	r5, r0, #1
 800047a:	4698      	mov	r8, r3
 800047c:	b5c0      	push	{r6, r7, lr}
 800047e:	464b      	mov	r3, r9
 8000480:	1c0f      	adds	r7, r1, #0
 8000482:	0e2d      	lsrs	r5, r5, #24
 8000484:	d100      	bne.n	8000488 <__aeabi_fmul+0x20>
 8000486:	e0cb      	b.n	8000620 <__aeabi_fmul+0x1b8>
 8000488:	2dff      	cmp	r5, #255	; 0xff
 800048a:	d100      	bne.n	800048e <__aeabi_fmul+0x26>
 800048c:	e0cf      	b.n	800062e <__aeabi_fmul+0x1c6>
 800048e:	2280      	movs	r2, #128	; 0x80
 8000490:	00db      	lsls	r3, r3, #3
 8000492:	04d2      	lsls	r2, r2, #19
 8000494:	431a      	orrs	r2, r3
 8000496:	2300      	movs	r3, #0
 8000498:	4691      	mov	r9, r2
 800049a:	2600      	movs	r6, #0
 800049c:	469a      	mov	sl, r3
 800049e:	3d7f      	subs	r5, #127	; 0x7f
 80004a0:	027c      	lsls	r4, r7, #9
 80004a2:	007b      	lsls	r3, r7, #1
 80004a4:	0a64      	lsrs	r4, r4, #9
 80004a6:	0e1b      	lsrs	r3, r3, #24
 80004a8:	0fff      	lsrs	r7, r7, #31
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d100      	bne.n	80004b0 <__aeabi_fmul+0x48>
 80004ae:	e0a9      	b.n	8000604 <__aeabi_fmul+0x19c>
 80004b0:	2bff      	cmp	r3, #255	; 0xff
 80004b2:	d011      	beq.n	80004d8 <__aeabi_fmul+0x70>
 80004b4:	2280      	movs	r2, #128	; 0x80
 80004b6:	00e4      	lsls	r4, r4, #3
 80004b8:	04d2      	lsls	r2, r2, #19
 80004ba:	4314      	orrs	r4, r2
 80004bc:	4642      	mov	r2, r8
 80004be:	3b7f      	subs	r3, #127	; 0x7f
 80004c0:	195b      	adds	r3, r3, r5
 80004c2:	407a      	eors	r2, r7
 80004c4:	2000      	movs	r0, #0
 80004c6:	b2d2      	uxtb	r2, r2
 80004c8:	1c5d      	adds	r5, r3, #1
 80004ca:	2e0a      	cmp	r6, #10
 80004cc:	dd13      	ble.n	80004f6 <__aeabi_fmul+0x8e>
 80004ce:	003a      	movs	r2, r7
 80004d0:	2e0b      	cmp	r6, #11
 80004d2:	d047      	beq.n	8000564 <__aeabi_fmul+0xfc>
 80004d4:	4647      	mov	r7, r8
 80004d6:	e03f      	b.n	8000558 <__aeabi_fmul+0xf0>
 80004d8:	002b      	movs	r3, r5
 80004da:	33ff      	adds	r3, #255	; 0xff
 80004dc:	2c00      	cmp	r4, #0
 80004de:	d11e      	bne.n	800051e <__aeabi_fmul+0xb6>
 80004e0:	2202      	movs	r2, #2
 80004e2:	4316      	orrs	r6, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	3501      	adds	r5, #1
 80004e8:	407a      	eors	r2, r7
 80004ea:	b2d2      	uxtb	r2, r2
 80004ec:	35ff      	adds	r5, #255	; 0xff
 80004ee:	2e0a      	cmp	r6, #10
 80004f0:	dd00      	ble.n	80004f4 <__aeabi_fmul+0x8c>
 80004f2:	e0e4      	b.n	80006be <__aeabi_fmul+0x256>
 80004f4:	2002      	movs	r0, #2
 80004f6:	2e02      	cmp	r6, #2
 80004f8:	dc1c      	bgt.n	8000534 <__aeabi_fmul+0xcc>
 80004fa:	3e01      	subs	r6, #1
 80004fc:	2e01      	cmp	r6, #1
 80004fe:	d842      	bhi.n	8000586 <__aeabi_fmul+0x11e>
 8000500:	2802      	cmp	r0, #2
 8000502:	d03d      	beq.n	8000580 <__aeabi_fmul+0x118>
 8000504:	2801      	cmp	r0, #1
 8000506:	d166      	bne.n	80005d6 <__aeabi_fmul+0x16e>
 8000508:	2000      	movs	r0, #0
 800050a:	2100      	movs	r1, #0
 800050c:	05c0      	lsls	r0, r0, #23
 800050e:	4308      	orrs	r0, r1
 8000510:	07d2      	lsls	r2, r2, #31
 8000512:	4310      	orrs	r0, r2
 8000514:	bce0      	pop	{r5, r6, r7}
 8000516:	46ba      	mov	sl, r7
 8000518:	46b1      	mov	r9, r6
 800051a:	46a8      	mov	r8, r5
 800051c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800051e:	2203      	movs	r2, #3
 8000520:	4316      	orrs	r6, r2
 8000522:	4642      	mov	r2, r8
 8000524:	3501      	adds	r5, #1
 8000526:	407a      	eors	r2, r7
 8000528:	b2d2      	uxtb	r2, r2
 800052a:	35ff      	adds	r5, #255	; 0xff
 800052c:	2e0a      	cmp	r6, #10
 800052e:	dd00      	ble.n	8000532 <__aeabi_fmul+0xca>
 8000530:	e0e4      	b.n	80006fc <__aeabi_fmul+0x294>
 8000532:	2003      	movs	r0, #3
 8000534:	2101      	movs	r1, #1
 8000536:	40b1      	lsls	r1, r6
 8000538:	26a6      	movs	r6, #166	; 0xa6
 800053a:	00f6      	lsls	r6, r6, #3
 800053c:	4231      	tst	r1, r6
 800053e:	d10a      	bne.n	8000556 <__aeabi_fmul+0xee>
 8000540:	2690      	movs	r6, #144	; 0x90
 8000542:	00b6      	lsls	r6, r6, #2
 8000544:	4231      	tst	r1, r6
 8000546:	d116      	bne.n	8000576 <__aeabi_fmul+0x10e>
 8000548:	3eb9      	subs	r6, #185	; 0xb9
 800054a:	3eff      	subs	r6, #255	; 0xff
 800054c:	420e      	tst	r6, r1
 800054e:	d01a      	beq.n	8000586 <__aeabi_fmul+0x11e>
 8000550:	46a1      	mov	r9, r4
 8000552:	4682      	mov	sl, r0
 8000554:	e000      	b.n	8000558 <__aeabi_fmul+0xf0>
 8000556:	0017      	movs	r7, r2
 8000558:	4653      	mov	r3, sl
 800055a:	003a      	movs	r2, r7
 800055c:	2b02      	cmp	r3, #2
 800055e:	d00f      	beq.n	8000580 <__aeabi_fmul+0x118>
 8000560:	464c      	mov	r4, r9
 8000562:	4650      	mov	r0, sl
 8000564:	2803      	cmp	r0, #3
 8000566:	d1cd      	bne.n	8000504 <__aeabi_fmul+0x9c>
 8000568:	2180      	movs	r1, #128	; 0x80
 800056a:	03c9      	lsls	r1, r1, #15
 800056c:	4321      	orrs	r1, r4
 800056e:	0249      	lsls	r1, r1, #9
 8000570:	20ff      	movs	r0, #255	; 0xff
 8000572:	0a49      	lsrs	r1, r1, #9
 8000574:	e7ca      	b.n	800050c <__aeabi_fmul+0xa4>
 8000576:	2180      	movs	r1, #128	; 0x80
 8000578:	2200      	movs	r2, #0
 800057a:	20ff      	movs	r0, #255	; 0xff
 800057c:	03c9      	lsls	r1, r1, #15
 800057e:	e7c5      	b.n	800050c <__aeabi_fmul+0xa4>
 8000580:	20ff      	movs	r0, #255	; 0xff
 8000582:	2100      	movs	r1, #0
 8000584:	e7c2      	b.n	800050c <__aeabi_fmul+0xa4>
 8000586:	0c20      	lsrs	r0, r4, #16
 8000588:	4649      	mov	r1, r9
 800058a:	0424      	lsls	r4, r4, #16
 800058c:	0c24      	lsrs	r4, r4, #16
 800058e:	0027      	movs	r7, r4
 8000590:	0c0e      	lsrs	r6, r1, #16
 8000592:	0409      	lsls	r1, r1, #16
 8000594:	0c09      	lsrs	r1, r1, #16
 8000596:	4374      	muls	r4, r6
 8000598:	434f      	muls	r7, r1
 800059a:	4346      	muls	r6, r0
 800059c:	4348      	muls	r0, r1
 800059e:	0c39      	lsrs	r1, r7, #16
 80005a0:	1900      	adds	r0, r0, r4
 80005a2:	1809      	adds	r1, r1, r0
 80005a4:	428c      	cmp	r4, r1
 80005a6:	d903      	bls.n	80005b0 <__aeabi_fmul+0x148>
 80005a8:	2080      	movs	r0, #128	; 0x80
 80005aa:	0240      	lsls	r0, r0, #9
 80005ac:	4684      	mov	ip, r0
 80005ae:	4466      	add	r6, ip
 80005b0:	043f      	lsls	r7, r7, #16
 80005b2:	0408      	lsls	r0, r1, #16
 80005b4:	0c3f      	lsrs	r7, r7, #16
 80005b6:	19c0      	adds	r0, r0, r7
 80005b8:	0184      	lsls	r4, r0, #6
 80005ba:	1e67      	subs	r7, r4, #1
 80005bc:	41bc      	sbcs	r4, r7
 80005be:	0c09      	lsrs	r1, r1, #16
 80005c0:	0e80      	lsrs	r0, r0, #26
 80005c2:	1989      	adds	r1, r1, r6
 80005c4:	4304      	orrs	r4, r0
 80005c6:	0189      	lsls	r1, r1, #6
 80005c8:	430c      	orrs	r4, r1
 80005ca:	0109      	lsls	r1, r1, #4
 80005cc:	d571      	bpl.n	80006b2 <__aeabi_fmul+0x24a>
 80005ce:	2301      	movs	r3, #1
 80005d0:	0861      	lsrs	r1, r4, #1
 80005d2:	401c      	ands	r4, r3
 80005d4:	430c      	orrs	r4, r1
 80005d6:	002b      	movs	r3, r5
 80005d8:	337f      	adds	r3, #127	; 0x7f
 80005da:	2b00      	cmp	r3, #0
 80005dc:	dd51      	ble.n	8000682 <__aeabi_fmul+0x21a>
 80005de:	0761      	lsls	r1, r4, #29
 80005e0:	d004      	beq.n	80005ec <__aeabi_fmul+0x184>
 80005e2:	210f      	movs	r1, #15
 80005e4:	4021      	ands	r1, r4
 80005e6:	2904      	cmp	r1, #4
 80005e8:	d000      	beq.n	80005ec <__aeabi_fmul+0x184>
 80005ea:	3404      	adds	r4, #4
 80005ec:	0121      	lsls	r1, r4, #4
 80005ee:	d503      	bpl.n	80005f8 <__aeabi_fmul+0x190>
 80005f0:	4b43      	ldr	r3, [pc, #268]	; (8000700 <__aeabi_fmul+0x298>)
 80005f2:	401c      	ands	r4, r3
 80005f4:	002b      	movs	r3, r5
 80005f6:	3380      	adds	r3, #128	; 0x80
 80005f8:	2bfe      	cmp	r3, #254	; 0xfe
 80005fa:	dcc1      	bgt.n	8000580 <__aeabi_fmul+0x118>
 80005fc:	01a1      	lsls	r1, r4, #6
 80005fe:	0a49      	lsrs	r1, r1, #9
 8000600:	b2d8      	uxtb	r0, r3
 8000602:	e783      	b.n	800050c <__aeabi_fmul+0xa4>
 8000604:	2c00      	cmp	r4, #0
 8000606:	d12c      	bne.n	8000662 <__aeabi_fmul+0x1fa>
 8000608:	2301      	movs	r3, #1
 800060a:	4642      	mov	r2, r8
 800060c:	431e      	orrs	r6, r3
 800060e:	002b      	movs	r3, r5
 8000610:	407a      	eors	r2, r7
 8000612:	2001      	movs	r0, #1
 8000614:	b2d2      	uxtb	r2, r2
 8000616:	1c5d      	adds	r5, r3, #1
 8000618:	2e0a      	cmp	r6, #10
 800061a:	dd00      	ble.n	800061e <__aeabi_fmul+0x1b6>
 800061c:	e757      	b.n	80004ce <__aeabi_fmul+0x66>
 800061e:	e76a      	b.n	80004f6 <__aeabi_fmul+0x8e>
 8000620:	2b00      	cmp	r3, #0
 8000622:	d110      	bne.n	8000646 <__aeabi_fmul+0x1de>
 8000624:	2301      	movs	r3, #1
 8000626:	2604      	movs	r6, #4
 8000628:	2500      	movs	r5, #0
 800062a:	469a      	mov	sl, r3
 800062c:	e738      	b.n	80004a0 <__aeabi_fmul+0x38>
 800062e:	2b00      	cmp	r3, #0
 8000630:	d104      	bne.n	800063c <__aeabi_fmul+0x1d4>
 8000632:	2302      	movs	r3, #2
 8000634:	2608      	movs	r6, #8
 8000636:	25ff      	movs	r5, #255	; 0xff
 8000638:	469a      	mov	sl, r3
 800063a:	e731      	b.n	80004a0 <__aeabi_fmul+0x38>
 800063c:	2303      	movs	r3, #3
 800063e:	260c      	movs	r6, #12
 8000640:	25ff      	movs	r5, #255	; 0xff
 8000642:	469a      	mov	sl, r3
 8000644:	e72c      	b.n	80004a0 <__aeabi_fmul+0x38>
 8000646:	4648      	mov	r0, r9
 8000648:	f001 f972 	bl	8001930 <__clzsi2>
 800064c:	464a      	mov	r2, r9
 800064e:	1f43      	subs	r3, r0, #5
 8000650:	2576      	movs	r5, #118	; 0x76
 8000652:	409a      	lsls	r2, r3
 8000654:	2300      	movs	r3, #0
 8000656:	426d      	negs	r5, r5
 8000658:	4691      	mov	r9, r2
 800065a:	2600      	movs	r6, #0
 800065c:	469a      	mov	sl, r3
 800065e:	1a2d      	subs	r5, r5, r0
 8000660:	e71e      	b.n	80004a0 <__aeabi_fmul+0x38>
 8000662:	0020      	movs	r0, r4
 8000664:	f001 f964 	bl	8001930 <__clzsi2>
 8000668:	4642      	mov	r2, r8
 800066a:	1f43      	subs	r3, r0, #5
 800066c:	409c      	lsls	r4, r3
 800066e:	1a2b      	subs	r3, r5, r0
 8000670:	3b76      	subs	r3, #118	; 0x76
 8000672:	407a      	eors	r2, r7
 8000674:	2000      	movs	r0, #0
 8000676:	b2d2      	uxtb	r2, r2
 8000678:	1c5d      	adds	r5, r3, #1
 800067a:	2e0a      	cmp	r6, #10
 800067c:	dd00      	ble.n	8000680 <__aeabi_fmul+0x218>
 800067e:	e726      	b.n	80004ce <__aeabi_fmul+0x66>
 8000680:	e739      	b.n	80004f6 <__aeabi_fmul+0x8e>
 8000682:	2101      	movs	r1, #1
 8000684:	1acb      	subs	r3, r1, r3
 8000686:	2b1b      	cmp	r3, #27
 8000688:	dd00      	ble.n	800068c <__aeabi_fmul+0x224>
 800068a:	e73d      	b.n	8000508 <__aeabi_fmul+0xa0>
 800068c:	359e      	adds	r5, #158	; 0x9e
 800068e:	0021      	movs	r1, r4
 8000690:	40ac      	lsls	r4, r5
 8000692:	40d9      	lsrs	r1, r3
 8000694:	1e63      	subs	r3, r4, #1
 8000696:	419c      	sbcs	r4, r3
 8000698:	4321      	orrs	r1, r4
 800069a:	074b      	lsls	r3, r1, #29
 800069c:	d004      	beq.n	80006a8 <__aeabi_fmul+0x240>
 800069e:	230f      	movs	r3, #15
 80006a0:	400b      	ands	r3, r1
 80006a2:	2b04      	cmp	r3, #4
 80006a4:	d000      	beq.n	80006a8 <__aeabi_fmul+0x240>
 80006a6:	3104      	adds	r1, #4
 80006a8:	014b      	lsls	r3, r1, #5
 80006aa:	d504      	bpl.n	80006b6 <__aeabi_fmul+0x24e>
 80006ac:	2001      	movs	r0, #1
 80006ae:	2100      	movs	r1, #0
 80006b0:	e72c      	b.n	800050c <__aeabi_fmul+0xa4>
 80006b2:	001d      	movs	r5, r3
 80006b4:	e78f      	b.n	80005d6 <__aeabi_fmul+0x16e>
 80006b6:	0189      	lsls	r1, r1, #6
 80006b8:	2000      	movs	r0, #0
 80006ba:	0a49      	lsrs	r1, r1, #9
 80006bc:	e726      	b.n	800050c <__aeabi_fmul+0xa4>
 80006be:	2302      	movs	r3, #2
 80006c0:	2e0f      	cmp	r6, #15
 80006c2:	d10c      	bne.n	80006de <__aeabi_fmul+0x276>
 80006c4:	2180      	movs	r1, #128	; 0x80
 80006c6:	464b      	mov	r3, r9
 80006c8:	03c9      	lsls	r1, r1, #15
 80006ca:	420b      	tst	r3, r1
 80006cc:	d00d      	beq.n	80006ea <__aeabi_fmul+0x282>
 80006ce:	420c      	tst	r4, r1
 80006d0:	d10b      	bne.n	80006ea <__aeabi_fmul+0x282>
 80006d2:	4321      	orrs	r1, r4
 80006d4:	0249      	lsls	r1, r1, #9
 80006d6:	003a      	movs	r2, r7
 80006d8:	20ff      	movs	r0, #255	; 0xff
 80006da:	0a49      	lsrs	r1, r1, #9
 80006dc:	e716      	b.n	800050c <__aeabi_fmul+0xa4>
 80006de:	2e0b      	cmp	r6, #11
 80006e0:	d000      	beq.n	80006e4 <__aeabi_fmul+0x27c>
 80006e2:	e6f7      	b.n	80004d4 <__aeabi_fmul+0x6c>
 80006e4:	46a1      	mov	r9, r4
 80006e6:	469a      	mov	sl, r3
 80006e8:	e736      	b.n	8000558 <__aeabi_fmul+0xf0>
 80006ea:	2180      	movs	r1, #128	; 0x80
 80006ec:	464b      	mov	r3, r9
 80006ee:	03c9      	lsls	r1, r1, #15
 80006f0:	4319      	orrs	r1, r3
 80006f2:	0249      	lsls	r1, r1, #9
 80006f4:	4642      	mov	r2, r8
 80006f6:	20ff      	movs	r0, #255	; 0xff
 80006f8:	0a49      	lsrs	r1, r1, #9
 80006fa:	e707      	b.n	800050c <__aeabi_fmul+0xa4>
 80006fc:	2303      	movs	r3, #3
 80006fe:	e7df      	b.n	80006c0 <__aeabi_fmul+0x258>
 8000700:	f7ffffff 	.word	0xf7ffffff

08000704 <__aeabi_fsub>:
 8000704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000706:	46c6      	mov	lr, r8
 8000708:	0243      	lsls	r3, r0, #9
 800070a:	0a5b      	lsrs	r3, r3, #9
 800070c:	0045      	lsls	r5, r0, #1
 800070e:	00da      	lsls	r2, r3, #3
 8000710:	0fc4      	lsrs	r4, r0, #31
 8000712:	0248      	lsls	r0, r1, #9
 8000714:	004f      	lsls	r7, r1, #1
 8000716:	4694      	mov	ip, r2
 8000718:	0a42      	lsrs	r2, r0, #9
 800071a:	001e      	movs	r6, r3
 800071c:	4690      	mov	r8, r2
 800071e:	b500      	push	{lr}
 8000720:	0e2d      	lsrs	r5, r5, #24
 8000722:	0e3f      	lsrs	r7, r7, #24
 8000724:	0fc9      	lsrs	r1, r1, #31
 8000726:	0980      	lsrs	r0, r0, #6
 8000728:	2fff      	cmp	r7, #255	; 0xff
 800072a:	d059      	beq.n	80007e0 <__aeabi_fsub+0xdc>
 800072c:	2201      	movs	r2, #1
 800072e:	4051      	eors	r1, r2
 8000730:	428c      	cmp	r4, r1
 8000732:	d039      	beq.n	80007a8 <__aeabi_fsub+0xa4>
 8000734:	1bea      	subs	r2, r5, r7
 8000736:	2a00      	cmp	r2, #0
 8000738:	dd58      	ble.n	80007ec <__aeabi_fsub+0xe8>
 800073a:	2f00      	cmp	r7, #0
 800073c:	d068      	beq.n	8000810 <__aeabi_fsub+0x10c>
 800073e:	2dff      	cmp	r5, #255	; 0xff
 8000740:	d100      	bne.n	8000744 <__aeabi_fsub+0x40>
 8000742:	e0d1      	b.n	80008e8 <__aeabi_fsub+0x1e4>
 8000744:	2380      	movs	r3, #128	; 0x80
 8000746:	04db      	lsls	r3, r3, #19
 8000748:	4318      	orrs	r0, r3
 800074a:	2a1b      	cmp	r2, #27
 800074c:	dc00      	bgt.n	8000750 <__aeabi_fsub+0x4c>
 800074e:	e0e3      	b.n	8000918 <__aeabi_fsub+0x214>
 8000750:	2301      	movs	r3, #1
 8000752:	4662      	mov	r2, ip
 8000754:	1ad3      	subs	r3, r2, r3
 8000756:	015a      	lsls	r2, r3, #5
 8000758:	d400      	bmi.n	800075c <__aeabi_fsub+0x58>
 800075a:	e0ac      	b.n	80008b6 <__aeabi_fsub+0x1b2>
 800075c:	019b      	lsls	r3, r3, #6
 800075e:	099e      	lsrs	r6, r3, #6
 8000760:	0030      	movs	r0, r6
 8000762:	f001 f8e5 	bl	8001930 <__clzsi2>
 8000766:	0033      	movs	r3, r6
 8000768:	3805      	subs	r0, #5
 800076a:	4083      	lsls	r3, r0
 800076c:	4285      	cmp	r5, r0
 800076e:	dc00      	bgt.n	8000772 <__aeabi_fsub+0x6e>
 8000770:	e0c6      	b.n	8000900 <__aeabi_fsub+0x1fc>
 8000772:	4ab2      	ldr	r2, [pc, #712]	; (8000a3c <__aeabi_fsub+0x338>)
 8000774:	1a2d      	subs	r5, r5, r0
 8000776:	4013      	ands	r3, r2
 8000778:	075a      	lsls	r2, r3, #29
 800077a:	d004      	beq.n	8000786 <__aeabi_fsub+0x82>
 800077c:	220f      	movs	r2, #15
 800077e:	401a      	ands	r2, r3
 8000780:	2a04      	cmp	r2, #4
 8000782:	d000      	beq.n	8000786 <__aeabi_fsub+0x82>
 8000784:	3304      	adds	r3, #4
 8000786:	015a      	lsls	r2, r3, #5
 8000788:	d400      	bmi.n	800078c <__aeabi_fsub+0x88>
 800078a:	e097      	b.n	80008bc <__aeabi_fsub+0x1b8>
 800078c:	1c6a      	adds	r2, r5, #1
 800078e:	2dfe      	cmp	r5, #254	; 0xfe
 8000790:	d100      	bne.n	8000794 <__aeabi_fsub+0x90>
 8000792:	e084      	b.n	800089e <__aeabi_fsub+0x19a>
 8000794:	019b      	lsls	r3, r3, #6
 8000796:	0a5e      	lsrs	r6, r3, #9
 8000798:	b2d2      	uxtb	r2, r2
 800079a:	05d0      	lsls	r0, r2, #23
 800079c:	4330      	orrs	r0, r6
 800079e:	07e4      	lsls	r4, r4, #31
 80007a0:	4320      	orrs	r0, r4
 80007a2:	bc80      	pop	{r7}
 80007a4:	46b8      	mov	r8, r7
 80007a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007a8:	1bea      	subs	r2, r5, r7
 80007aa:	2a00      	cmp	r2, #0
 80007ac:	dd41      	ble.n	8000832 <__aeabi_fsub+0x12e>
 80007ae:	2f00      	cmp	r7, #0
 80007b0:	d06b      	beq.n	800088a <__aeabi_fsub+0x186>
 80007b2:	2dff      	cmp	r5, #255	; 0xff
 80007b4:	d100      	bne.n	80007b8 <__aeabi_fsub+0xb4>
 80007b6:	e097      	b.n	80008e8 <__aeabi_fsub+0x1e4>
 80007b8:	2380      	movs	r3, #128	; 0x80
 80007ba:	04db      	lsls	r3, r3, #19
 80007bc:	4318      	orrs	r0, r3
 80007be:	2a1b      	cmp	r2, #27
 80007c0:	dc00      	bgt.n	80007c4 <__aeabi_fsub+0xc0>
 80007c2:	e0cc      	b.n	800095e <__aeabi_fsub+0x25a>
 80007c4:	2301      	movs	r3, #1
 80007c6:	4463      	add	r3, ip
 80007c8:	015a      	lsls	r2, r3, #5
 80007ca:	d574      	bpl.n	80008b6 <__aeabi_fsub+0x1b2>
 80007cc:	3501      	adds	r5, #1
 80007ce:	2dff      	cmp	r5, #255	; 0xff
 80007d0:	d065      	beq.n	800089e <__aeabi_fsub+0x19a>
 80007d2:	2201      	movs	r2, #1
 80007d4:	499a      	ldr	r1, [pc, #616]	; (8000a40 <__aeabi_fsub+0x33c>)
 80007d6:	401a      	ands	r2, r3
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	400b      	ands	r3, r1
 80007dc:	4313      	orrs	r3, r2
 80007de:	e7cb      	b.n	8000778 <__aeabi_fsub+0x74>
 80007e0:	2800      	cmp	r0, #0
 80007e2:	d01f      	beq.n	8000824 <__aeabi_fsub+0x120>
 80007e4:	428c      	cmp	r4, r1
 80007e6:	d022      	beq.n	800082e <__aeabi_fsub+0x12a>
 80007e8:	002a      	movs	r2, r5
 80007ea:	3aff      	subs	r2, #255	; 0xff
 80007ec:	2a00      	cmp	r2, #0
 80007ee:	d035      	beq.n	800085c <__aeabi_fsub+0x158>
 80007f0:	1b7a      	subs	r2, r7, r5
 80007f2:	2d00      	cmp	r5, #0
 80007f4:	d000      	beq.n	80007f8 <__aeabi_fsub+0xf4>
 80007f6:	e099      	b.n	800092c <__aeabi_fsub+0x228>
 80007f8:	4663      	mov	r3, ip
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d100      	bne.n	8000800 <__aeabi_fsub+0xfc>
 80007fe:	e0dd      	b.n	80009bc <__aeabi_fsub+0x2b8>
 8000800:	1e53      	subs	r3, r2, #1
 8000802:	2a01      	cmp	r2, #1
 8000804:	d100      	bne.n	8000808 <__aeabi_fsub+0x104>
 8000806:	e105      	b.n	8000a14 <__aeabi_fsub+0x310>
 8000808:	2aff      	cmp	r2, #255	; 0xff
 800080a:	d06b      	beq.n	80008e4 <__aeabi_fsub+0x1e0>
 800080c:	001a      	movs	r2, r3
 800080e:	e094      	b.n	800093a <__aeabi_fsub+0x236>
 8000810:	2800      	cmp	r0, #0
 8000812:	d073      	beq.n	80008fc <__aeabi_fsub+0x1f8>
 8000814:	1e51      	subs	r1, r2, #1
 8000816:	2a01      	cmp	r2, #1
 8000818:	d100      	bne.n	800081c <__aeabi_fsub+0x118>
 800081a:	e0df      	b.n	80009dc <__aeabi_fsub+0x2d8>
 800081c:	2aff      	cmp	r2, #255	; 0xff
 800081e:	d063      	beq.n	80008e8 <__aeabi_fsub+0x1e4>
 8000820:	000a      	movs	r2, r1
 8000822:	e792      	b.n	800074a <__aeabi_fsub+0x46>
 8000824:	2201      	movs	r2, #1
 8000826:	4051      	eors	r1, r2
 8000828:	42a1      	cmp	r1, r4
 800082a:	d000      	beq.n	800082e <__aeabi_fsub+0x12a>
 800082c:	e782      	b.n	8000734 <__aeabi_fsub+0x30>
 800082e:	002a      	movs	r2, r5
 8000830:	3aff      	subs	r2, #255	; 0xff
 8000832:	2a00      	cmp	r2, #0
 8000834:	d036      	beq.n	80008a4 <__aeabi_fsub+0x1a0>
 8000836:	1b7a      	subs	r2, r7, r5
 8000838:	2d00      	cmp	r5, #0
 800083a:	d100      	bne.n	800083e <__aeabi_fsub+0x13a>
 800083c:	e0aa      	b.n	8000994 <__aeabi_fsub+0x290>
 800083e:	2fff      	cmp	r7, #255	; 0xff
 8000840:	d100      	bne.n	8000844 <__aeabi_fsub+0x140>
 8000842:	e0da      	b.n	80009fa <__aeabi_fsub+0x2f6>
 8000844:	2380      	movs	r3, #128	; 0x80
 8000846:	4661      	mov	r1, ip
 8000848:	04db      	lsls	r3, r3, #19
 800084a:	4319      	orrs	r1, r3
 800084c:	468c      	mov	ip, r1
 800084e:	2a1b      	cmp	r2, #27
 8000850:	dc00      	bgt.n	8000854 <__aeabi_fsub+0x150>
 8000852:	e0d4      	b.n	80009fe <__aeabi_fsub+0x2fa>
 8000854:	2301      	movs	r3, #1
 8000856:	003d      	movs	r5, r7
 8000858:	181b      	adds	r3, r3, r0
 800085a:	e7b5      	b.n	80007c8 <__aeabi_fsub+0xc4>
 800085c:	27fe      	movs	r7, #254	; 0xfe
 800085e:	1c6a      	adds	r2, r5, #1
 8000860:	4217      	tst	r7, r2
 8000862:	d171      	bne.n	8000948 <__aeabi_fsub+0x244>
 8000864:	2d00      	cmp	r5, #0
 8000866:	d000      	beq.n	800086a <__aeabi_fsub+0x166>
 8000868:	e09e      	b.n	80009a8 <__aeabi_fsub+0x2a4>
 800086a:	4663      	mov	r3, ip
 800086c:	2b00      	cmp	r3, #0
 800086e:	d100      	bne.n	8000872 <__aeabi_fsub+0x16e>
 8000870:	e0d5      	b.n	8000a1e <__aeabi_fsub+0x31a>
 8000872:	2200      	movs	r2, #0
 8000874:	2800      	cmp	r0, #0
 8000876:	d100      	bne.n	800087a <__aeabi_fsub+0x176>
 8000878:	e78f      	b.n	800079a <__aeabi_fsub+0x96>
 800087a:	1a1b      	subs	r3, r3, r0
 800087c:	015e      	lsls	r6, r3, #5
 800087e:	d400      	bmi.n	8000882 <__aeabi_fsub+0x17e>
 8000880:	e0d6      	b.n	8000a30 <__aeabi_fsub+0x32c>
 8000882:	4663      	mov	r3, ip
 8000884:	000c      	movs	r4, r1
 8000886:	1ac3      	subs	r3, r0, r3
 8000888:	e776      	b.n	8000778 <__aeabi_fsub+0x74>
 800088a:	2800      	cmp	r0, #0
 800088c:	d036      	beq.n	80008fc <__aeabi_fsub+0x1f8>
 800088e:	1e51      	subs	r1, r2, #1
 8000890:	2a01      	cmp	r2, #1
 8000892:	d100      	bne.n	8000896 <__aeabi_fsub+0x192>
 8000894:	e09a      	b.n	80009cc <__aeabi_fsub+0x2c8>
 8000896:	2aff      	cmp	r2, #255	; 0xff
 8000898:	d026      	beq.n	80008e8 <__aeabi_fsub+0x1e4>
 800089a:	000a      	movs	r2, r1
 800089c:	e78f      	b.n	80007be <__aeabi_fsub+0xba>
 800089e:	22ff      	movs	r2, #255	; 0xff
 80008a0:	2600      	movs	r6, #0
 80008a2:	e77a      	b.n	800079a <__aeabi_fsub+0x96>
 80008a4:	27fe      	movs	r7, #254	; 0xfe
 80008a6:	1c6a      	adds	r2, r5, #1
 80008a8:	4217      	tst	r7, r2
 80008aa:	d062      	beq.n	8000972 <__aeabi_fsub+0x26e>
 80008ac:	2aff      	cmp	r2, #255	; 0xff
 80008ae:	d0f6      	beq.n	800089e <__aeabi_fsub+0x19a>
 80008b0:	0015      	movs	r5, r2
 80008b2:	4460      	add	r0, ip
 80008b4:	0843      	lsrs	r3, r0, #1
 80008b6:	075a      	lsls	r2, r3, #29
 80008b8:	d000      	beq.n	80008bc <__aeabi_fsub+0x1b8>
 80008ba:	e75f      	b.n	800077c <__aeabi_fsub+0x78>
 80008bc:	08db      	lsrs	r3, r3, #3
 80008be:	2dff      	cmp	r5, #255	; 0xff
 80008c0:	d012      	beq.n	80008e8 <__aeabi_fsub+0x1e4>
 80008c2:	025b      	lsls	r3, r3, #9
 80008c4:	0a5e      	lsrs	r6, r3, #9
 80008c6:	b2ea      	uxtb	r2, r5
 80008c8:	e767      	b.n	800079a <__aeabi_fsub+0x96>
 80008ca:	4662      	mov	r2, ip
 80008cc:	2a00      	cmp	r2, #0
 80008ce:	d100      	bne.n	80008d2 <__aeabi_fsub+0x1ce>
 80008d0:	e093      	b.n	80009fa <__aeabi_fsub+0x2f6>
 80008d2:	2800      	cmp	r0, #0
 80008d4:	d008      	beq.n	80008e8 <__aeabi_fsub+0x1e4>
 80008d6:	2280      	movs	r2, #128	; 0x80
 80008d8:	03d2      	lsls	r2, r2, #15
 80008da:	4213      	tst	r3, r2
 80008dc:	d004      	beq.n	80008e8 <__aeabi_fsub+0x1e4>
 80008de:	4640      	mov	r0, r8
 80008e0:	4210      	tst	r0, r2
 80008e2:	d101      	bne.n	80008e8 <__aeabi_fsub+0x1e4>
 80008e4:	000c      	movs	r4, r1
 80008e6:	4643      	mov	r3, r8
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d0d8      	beq.n	800089e <__aeabi_fsub+0x19a>
 80008ec:	2680      	movs	r6, #128	; 0x80
 80008ee:	03f6      	lsls	r6, r6, #15
 80008f0:	431e      	orrs	r6, r3
 80008f2:	0276      	lsls	r6, r6, #9
 80008f4:	22ff      	movs	r2, #255	; 0xff
 80008f6:	0a76      	lsrs	r6, r6, #9
 80008f8:	e74f      	b.n	800079a <__aeabi_fsub+0x96>
 80008fa:	4643      	mov	r3, r8
 80008fc:	0015      	movs	r5, r2
 80008fe:	e7de      	b.n	80008be <__aeabi_fsub+0x1ba>
 8000900:	2220      	movs	r2, #32
 8000902:	1b40      	subs	r0, r0, r5
 8000904:	3001      	adds	r0, #1
 8000906:	1a12      	subs	r2, r2, r0
 8000908:	0019      	movs	r1, r3
 800090a:	4093      	lsls	r3, r2
 800090c:	40c1      	lsrs	r1, r0
 800090e:	1e5a      	subs	r2, r3, #1
 8000910:	4193      	sbcs	r3, r2
 8000912:	2500      	movs	r5, #0
 8000914:	430b      	orrs	r3, r1
 8000916:	e72f      	b.n	8000778 <__aeabi_fsub+0x74>
 8000918:	2320      	movs	r3, #32
 800091a:	1a9b      	subs	r3, r3, r2
 800091c:	0001      	movs	r1, r0
 800091e:	4098      	lsls	r0, r3
 8000920:	0003      	movs	r3, r0
 8000922:	40d1      	lsrs	r1, r2
 8000924:	1e5a      	subs	r2, r3, #1
 8000926:	4193      	sbcs	r3, r2
 8000928:	430b      	orrs	r3, r1
 800092a:	e712      	b.n	8000752 <__aeabi_fsub+0x4e>
 800092c:	2fff      	cmp	r7, #255	; 0xff
 800092e:	d0d9      	beq.n	80008e4 <__aeabi_fsub+0x1e0>
 8000930:	2380      	movs	r3, #128	; 0x80
 8000932:	4664      	mov	r4, ip
 8000934:	04db      	lsls	r3, r3, #19
 8000936:	431c      	orrs	r4, r3
 8000938:	46a4      	mov	ip, r4
 800093a:	2a1b      	cmp	r2, #27
 800093c:	dd52      	ble.n	80009e4 <__aeabi_fsub+0x2e0>
 800093e:	2301      	movs	r3, #1
 8000940:	000c      	movs	r4, r1
 8000942:	003d      	movs	r5, r7
 8000944:	1ac3      	subs	r3, r0, r3
 8000946:	e706      	b.n	8000756 <__aeabi_fsub+0x52>
 8000948:	4663      	mov	r3, ip
 800094a:	1a1e      	subs	r6, r3, r0
 800094c:	0173      	lsls	r3, r6, #5
 800094e:	d439      	bmi.n	80009c4 <__aeabi_fsub+0x2c0>
 8000950:	2e00      	cmp	r6, #0
 8000952:	d000      	beq.n	8000956 <__aeabi_fsub+0x252>
 8000954:	e704      	b.n	8000760 <__aeabi_fsub+0x5c>
 8000956:	2400      	movs	r4, #0
 8000958:	2200      	movs	r2, #0
 800095a:	2600      	movs	r6, #0
 800095c:	e71d      	b.n	800079a <__aeabi_fsub+0x96>
 800095e:	2320      	movs	r3, #32
 8000960:	1a9b      	subs	r3, r3, r2
 8000962:	0001      	movs	r1, r0
 8000964:	4098      	lsls	r0, r3
 8000966:	0003      	movs	r3, r0
 8000968:	40d1      	lsrs	r1, r2
 800096a:	1e5a      	subs	r2, r3, #1
 800096c:	4193      	sbcs	r3, r2
 800096e:	430b      	orrs	r3, r1
 8000970:	e729      	b.n	80007c6 <__aeabi_fsub+0xc2>
 8000972:	2d00      	cmp	r5, #0
 8000974:	d1a9      	bne.n	80008ca <__aeabi_fsub+0x1c6>
 8000976:	4663      	mov	r3, ip
 8000978:	2b00      	cmp	r3, #0
 800097a:	d056      	beq.n	8000a2a <__aeabi_fsub+0x326>
 800097c:	2200      	movs	r2, #0
 800097e:	2800      	cmp	r0, #0
 8000980:	d100      	bne.n	8000984 <__aeabi_fsub+0x280>
 8000982:	e70a      	b.n	800079a <__aeabi_fsub+0x96>
 8000984:	0003      	movs	r3, r0
 8000986:	4463      	add	r3, ip
 8000988:	015a      	lsls	r2, r3, #5
 800098a:	d594      	bpl.n	80008b6 <__aeabi_fsub+0x1b2>
 800098c:	4a2b      	ldr	r2, [pc, #172]	; (8000a3c <__aeabi_fsub+0x338>)
 800098e:	3501      	adds	r5, #1
 8000990:	4013      	ands	r3, r2
 8000992:	e790      	b.n	80008b6 <__aeabi_fsub+0x1b2>
 8000994:	4663      	mov	r3, ip
 8000996:	2b00      	cmp	r3, #0
 8000998:	d0af      	beq.n	80008fa <__aeabi_fsub+0x1f6>
 800099a:	1e53      	subs	r3, r2, #1
 800099c:	2a01      	cmp	r2, #1
 800099e:	d015      	beq.n	80009cc <__aeabi_fsub+0x2c8>
 80009a0:	2aff      	cmp	r2, #255	; 0xff
 80009a2:	d02a      	beq.n	80009fa <__aeabi_fsub+0x2f6>
 80009a4:	001a      	movs	r2, r3
 80009a6:	e752      	b.n	800084e <__aeabi_fsub+0x14a>
 80009a8:	4662      	mov	r2, ip
 80009aa:	2a00      	cmp	r2, #0
 80009ac:	d191      	bne.n	80008d2 <__aeabi_fsub+0x1ce>
 80009ae:	2800      	cmp	r0, #0
 80009b0:	d198      	bne.n	80008e4 <__aeabi_fsub+0x1e0>
 80009b2:	2680      	movs	r6, #128	; 0x80
 80009b4:	2400      	movs	r4, #0
 80009b6:	22ff      	movs	r2, #255	; 0xff
 80009b8:	03f6      	lsls	r6, r6, #15
 80009ba:	e6ee      	b.n	800079a <__aeabi_fsub+0x96>
 80009bc:	000c      	movs	r4, r1
 80009be:	4643      	mov	r3, r8
 80009c0:	0015      	movs	r5, r2
 80009c2:	e77c      	b.n	80008be <__aeabi_fsub+0x1ba>
 80009c4:	4663      	mov	r3, ip
 80009c6:	000c      	movs	r4, r1
 80009c8:	1ac6      	subs	r6, r0, r3
 80009ca:	e6c9      	b.n	8000760 <__aeabi_fsub+0x5c>
 80009cc:	0003      	movs	r3, r0
 80009ce:	4463      	add	r3, ip
 80009d0:	2501      	movs	r5, #1
 80009d2:	015a      	lsls	r2, r3, #5
 80009d4:	d400      	bmi.n	80009d8 <__aeabi_fsub+0x2d4>
 80009d6:	e76e      	b.n	80008b6 <__aeabi_fsub+0x1b2>
 80009d8:	2502      	movs	r5, #2
 80009da:	e6fa      	b.n	80007d2 <__aeabi_fsub+0xce>
 80009dc:	4663      	mov	r3, ip
 80009de:	2501      	movs	r5, #1
 80009e0:	1a1b      	subs	r3, r3, r0
 80009e2:	e6b8      	b.n	8000756 <__aeabi_fsub+0x52>
 80009e4:	4664      	mov	r4, ip
 80009e6:	2320      	movs	r3, #32
 80009e8:	40d4      	lsrs	r4, r2
 80009ea:	1a9b      	subs	r3, r3, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	409a      	lsls	r2, r3
 80009f0:	0013      	movs	r3, r2
 80009f2:	1e5a      	subs	r2, r3, #1
 80009f4:	4193      	sbcs	r3, r2
 80009f6:	4323      	orrs	r3, r4
 80009f8:	e7a2      	b.n	8000940 <__aeabi_fsub+0x23c>
 80009fa:	4643      	mov	r3, r8
 80009fc:	e774      	b.n	80008e8 <__aeabi_fsub+0x1e4>
 80009fe:	4661      	mov	r1, ip
 8000a00:	2320      	movs	r3, #32
 8000a02:	40d1      	lsrs	r1, r2
 8000a04:	1a9b      	subs	r3, r3, r2
 8000a06:	4662      	mov	r2, ip
 8000a08:	409a      	lsls	r2, r3
 8000a0a:	0013      	movs	r3, r2
 8000a0c:	1e5a      	subs	r2, r3, #1
 8000a0e:	4193      	sbcs	r3, r2
 8000a10:	430b      	orrs	r3, r1
 8000a12:	e720      	b.n	8000856 <__aeabi_fsub+0x152>
 8000a14:	4663      	mov	r3, ip
 8000a16:	000c      	movs	r4, r1
 8000a18:	2501      	movs	r5, #1
 8000a1a:	1ac3      	subs	r3, r0, r3
 8000a1c:	e69b      	b.n	8000756 <__aeabi_fsub+0x52>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	d099      	beq.n	8000956 <__aeabi_fsub+0x252>
 8000a22:	000c      	movs	r4, r1
 8000a24:	4646      	mov	r6, r8
 8000a26:	2200      	movs	r2, #0
 8000a28:	e6b7      	b.n	800079a <__aeabi_fsub+0x96>
 8000a2a:	4646      	mov	r6, r8
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	e6b4      	b.n	800079a <__aeabi_fsub+0x96>
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d000      	beq.n	8000a36 <__aeabi_fsub+0x332>
 8000a34:	e73f      	b.n	80008b6 <__aeabi_fsub+0x1b2>
 8000a36:	2400      	movs	r4, #0
 8000a38:	2600      	movs	r6, #0
 8000a3a:	e6ae      	b.n	800079a <__aeabi_fsub+0x96>
 8000a3c:	fbffffff 	.word	0xfbffffff
 8000a40:	7dffffff 	.word	0x7dffffff

08000a44 <__aeabi_f2iz>:
 8000a44:	0241      	lsls	r1, r0, #9
 8000a46:	0042      	lsls	r2, r0, #1
 8000a48:	0fc3      	lsrs	r3, r0, #31
 8000a4a:	0a49      	lsrs	r1, r1, #9
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	0e12      	lsrs	r2, r2, #24
 8000a50:	2a7e      	cmp	r2, #126	; 0x7e
 8000a52:	dd03      	ble.n	8000a5c <__aeabi_f2iz+0x18>
 8000a54:	2a9d      	cmp	r2, #157	; 0x9d
 8000a56:	dd02      	ble.n	8000a5e <__aeabi_f2iz+0x1a>
 8000a58:	4a09      	ldr	r2, [pc, #36]	; (8000a80 <__aeabi_f2iz+0x3c>)
 8000a5a:	1898      	adds	r0, r3, r2
 8000a5c:	4770      	bx	lr
 8000a5e:	2080      	movs	r0, #128	; 0x80
 8000a60:	0400      	lsls	r0, r0, #16
 8000a62:	4301      	orrs	r1, r0
 8000a64:	2a95      	cmp	r2, #149	; 0x95
 8000a66:	dc07      	bgt.n	8000a78 <__aeabi_f2iz+0x34>
 8000a68:	2096      	movs	r0, #150	; 0x96
 8000a6a:	1a82      	subs	r2, r0, r2
 8000a6c:	40d1      	lsrs	r1, r2
 8000a6e:	4248      	negs	r0, r1
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d1f3      	bne.n	8000a5c <__aeabi_f2iz+0x18>
 8000a74:	0008      	movs	r0, r1
 8000a76:	e7f1      	b.n	8000a5c <__aeabi_f2iz+0x18>
 8000a78:	3a96      	subs	r2, #150	; 0x96
 8000a7a:	4091      	lsls	r1, r2
 8000a7c:	e7f7      	b.n	8000a6e <__aeabi_f2iz+0x2a>
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	7fffffff 	.word	0x7fffffff

08000a84 <__aeabi_i2f>:
 8000a84:	b570      	push	{r4, r5, r6, lr}
 8000a86:	2800      	cmp	r0, #0
 8000a88:	d013      	beq.n	8000ab2 <__aeabi_i2f+0x2e>
 8000a8a:	17c3      	asrs	r3, r0, #31
 8000a8c:	18c5      	adds	r5, r0, r3
 8000a8e:	405d      	eors	r5, r3
 8000a90:	0fc4      	lsrs	r4, r0, #31
 8000a92:	0028      	movs	r0, r5
 8000a94:	f000 ff4c 	bl	8001930 <__clzsi2>
 8000a98:	239e      	movs	r3, #158	; 0x9e
 8000a9a:	0001      	movs	r1, r0
 8000a9c:	1a1b      	subs	r3, r3, r0
 8000a9e:	2b96      	cmp	r3, #150	; 0x96
 8000aa0:	dc0f      	bgt.n	8000ac2 <__aeabi_i2f+0x3e>
 8000aa2:	2808      	cmp	r0, #8
 8000aa4:	d031      	beq.n	8000b0a <__aeabi_i2f+0x86>
 8000aa6:	3908      	subs	r1, #8
 8000aa8:	408d      	lsls	r5, r1
 8000aaa:	026d      	lsls	r5, r5, #9
 8000aac:	0a6d      	lsrs	r5, r5, #9
 8000aae:	b2d8      	uxtb	r0, r3
 8000ab0:	e002      	b.n	8000ab8 <__aeabi_i2f+0x34>
 8000ab2:	2400      	movs	r4, #0
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	2500      	movs	r5, #0
 8000ab8:	05c0      	lsls	r0, r0, #23
 8000aba:	4328      	orrs	r0, r5
 8000abc:	07e4      	lsls	r4, r4, #31
 8000abe:	4320      	orrs	r0, r4
 8000ac0:	bd70      	pop	{r4, r5, r6, pc}
 8000ac2:	2b99      	cmp	r3, #153	; 0x99
 8000ac4:	dd0c      	ble.n	8000ae0 <__aeabi_i2f+0x5c>
 8000ac6:	2205      	movs	r2, #5
 8000ac8:	1a12      	subs	r2, r2, r0
 8000aca:	0028      	movs	r0, r5
 8000acc:	40d0      	lsrs	r0, r2
 8000ace:	0002      	movs	r2, r0
 8000ad0:	0008      	movs	r0, r1
 8000ad2:	301b      	adds	r0, #27
 8000ad4:	4085      	lsls	r5, r0
 8000ad6:	0028      	movs	r0, r5
 8000ad8:	1e45      	subs	r5, r0, #1
 8000ada:	41a8      	sbcs	r0, r5
 8000adc:	4302      	orrs	r2, r0
 8000ade:	0015      	movs	r5, r2
 8000ae0:	2905      	cmp	r1, #5
 8000ae2:	dc16      	bgt.n	8000b12 <__aeabi_i2f+0x8e>
 8000ae4:	002a      	movs	r2, r5
 8000ae6:	480f      	ldr	r0, [pc, #60]	; (8000b24 <__aeabi_i2f+0xa0>)
 8000ae8:	4002      	ands	r2, r0
 8000aea:	076e      	lsls	r6, r5, #29
 8000aec:	d009      	beq.n	8000b02 <__aeabi_i2f+0x7e>
 8000aee:	260f      	movs	r6, #15
 8000af0:	4035      	ands	r5, r6
 8000af2:	2d04      	cmp	r5, #4
 8000af4:	d005      	beq.n	8000b02 <__aeabi_i2f+0x7e>
 8000af6:	3204      	adds	r2, #4
 8000af8:	0155      	lsls	r5, r2, #5
 8000afa:	d502      	bpl.n	8000b02 <__aeabi_i2f+0x7e>
 8000afc:	239f      	movs	r3, #159	; 0x9f
 8000afe:	4002      	ands	r2, r0
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	0192      	lsls	r2, r2, #6
 8000b04:	0a55      	lsrs	r5, r2, #9
 8000b06:	b2d8      	uxtb	r0, r3
 8000b08:	e7d6      	b.n	8000ab8 <__aeabi_i2f+0x34>
 8000b0a:	026d      	lsls	r5, r5, #9
 8000b0c:	2096      	movs	r0, #150	; 0x96
 8000b0e:	0a6d      	lsrs	r5, r5, #9
 8000b10:	e7d2      	b.n	8000ab8 <__aeabi_i2f+0x34>
 8000b12:	1f4a      	subs	r2, r1, #5
 8000b14:	4095      	lsls	r5, r2
 8000b16:	002a      	movs	r2, r5
 8000b18:	4802      	ldr	r0, [pc, #8]	; (8000b24 <__aeabi_i2f+0xa0>)
 8000b1a:	4002      	ands	r2, r0
 8000b1c:	076e      	lsls	r6, r5, #29
 8000b1e:	d0f0      	beq.n	8000b02 <__aeabi_i2f+0x7e>
 8000b20:	e7e5      	b.n	8000aee <__aeabi_i2f+0x6a>
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	fbffffff 	.word	0xfbffffff

08000b28 <__aeabi_dadd>:
 8000b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b2a:	464f      	mov	r7, r9
 8000b2c:	4646      	mov	r6, r8
 8000b2e:	46d6      	mov	lr, sl
 8000b30:	0004      	movs	r4, r0
 8000b32:	b5c0      	push	{r6, r7, lr}
 8000b34:	001f      	movs	r7, r3
 8000b36:	030b      	lsls	r3, r1, #12
 8000b38:	0010      	movs	r0, r2
 8000b3a:	004e      	lsls	r6, r1, #1
 8000b3c:	0a5b      	lsrs	r3, r3, #9
 8000b3e:	0fcd      	lsrs	r5, r1, #31
 8000b40:	0f61      	lsrs	r1, r4, #29
 8000b42:	007a      	lsls	r2, r7, #1
 8000b44:	4319      	orrs	r1, r3
 8000b46:	00e3      	lsls	r3, r4, #3
 8000b48:	033c      	lsls	r4, r7, #12
 8000b4a:	0fff      	lsrs	r7, r7, #31
 8000b4c:	46bc      	mov	ip, r7
 8000b4e:	0a64      	lsrs	r4, r4, #9
 8000b50:	0f47      	lsrs	r7, r0, #29
 8000b52:	4327      	orrs	r7, r4
 8000b54:	0d76      	lsrs	r6, r6, #21
 8000b56:	0d52      	lsrs	r2, r2, #21
 8000b58:	00c0      	lsls	r0, r0, #3
 8000b5a:	46b9      	mov	r9, r7
 8000b5c:	4680      	mov	r8, r0
 8000b5e:	1ab7      	subs	r7, r6, r2
 8000b60:	4565      	cmp	r5, ip
 8000b62:	d100      	bne.n	8000b66 <__aeabi_dadd+0x3e>
 8000b64:	e09b      	b.n	8000c9e <__aeabi_dadd+0x176>
 8000b66:	2f00      	cmp	r7, #0
 8000b68:	dc00      	bgt.n	8000b6c <__aeabi_dadd+0x44>
 8000b6a:	e084      	b.n	8000c76 <__aeabi_dadd+0x14e>
 8000b6c:	2a00      	cmp	r2, #0
 8000b6e:	d100      	bne.n	8000b72 <__aeabi_dadd+0x4a>
 8000b70:	e0be      	b.n	8000cf0 <__aeabi_dadd+0x1c8>
 8000b72:	4ac8      	ldr	r2, [pc, #800]	; (8000e94 <__aeabi_dadd+0x36c>)
 8000b74:	4296      	cmp	r6, r2
 8000b76:	d100      	bne.n	8000b7a <__aeabi_dadd+0x52>
 8000b78:	e124      	b.n	8000dc4 <__aeabi_dadd+0x29c>
 8000b7a:	2280      	movs	r2, #128	; 0x80
 8000b7c:	464c      	mov	r4, r9
 8000b7e:	0412      	lsls	r2, r2, #16
 8000b80:	4314      	orrs	r4, r2
 8000b82:	46a1      	mov	r9, r4
 8000b84:	2f38      	cmp	r7, #56	; 0x38
 8000b86:	dd00      	ble.n	8000b8a <__aeabi_dadd+0x62>
 8000b88:	e167      	b.n	8000e5a <__aeabi_dadd+0x332>
 8000b8a:	2f1f      	cmp	r7, #31
 8000b8c:	dd00      	ble.n	8000b90 <__aeabi_dadd+0x68>
 8000b8e:	e1d6      	b.n	8000f3e <__aeabi_dadd+0x416>
 8000b90:	2220      	movs	r2, #32
 8000b92:	464c      	mov	r4, r9
 8000b94:	1bd2      	subs	r2, r2, r7
 8000b96:	4094      	lsls	r4, r2
 8000b98:	46a2      	mov	sl, r4
 8000b9a:	4644      	mov	r4, r8
 8000b9c:	40fc      	lsrs	r4, r7
 8000b9e:	0020      	movs	r0, r4
 8000ba0:	4654      	mov	r4, sl
 8000ba2:	4304      	orrs	r4, r0
 8000ba4:	4640      	mov	r0, r8
 8000ba6:	4090      	lsls	r0, r2
 8000ba8:	1e42      	subs	r2, r0, #1
 8000baa:	4190      	sbcs	r0, r2
 8000bac:	464a      	mov	r2, r9
 8000bae:	40fa      	lsrs	r2, r7
 8000bb0:	4304      	orrs	r4, r0
 8000bb2:	1a89      	subs	r1, r1, r2
 8000bb4:	1b1c      	subs	r4, r3, r4
 8000bb6:	42a3      	cmp	r3, r4
 8000bb8:	4192      	sbcs	r2, r2
 8000bba:	4252      	negs	r2, r2
 8000bbc:	1a8b      	subs	r3, r1, r2
 8000bbe:	469a      	mov	sl, r3
 8000bc0:	4653      	mov	r3, sl
 8000bc2:	021b      	lsls	r3, r3, #8
 8000bc4:	d400      	bmi.n	8000bc8 <__aeabi_dadd+0xa0>
 8000bc6:	e0d4      	b.n	8000d72 <__aeabi_dadd+0x24a>
 8000bc8:	4653      	mov	r3, sl
 8000bca:	025a      	lsls	r2, r3, #9
 8000bcc:	0a53      	lsrs	r3, r2, #9
 8000bce:	469a      	mov	sl, r3
 8000bd0:	4653      	mov	r3, sl
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_dadd+0xb0>
 8000bd6:	e104      	b.n	8000de2 <__aeabi_dadd+0x2ba>
 8000bd8:	4650      	mov	r0, sl
 8000bda:	f000 fea9 	bl	8001930 <__clzsi2>
 8000bde:	0003      	movs	r3, r0
 8000be0:	3b08      	subs	r3, #8
 8000be2:	2220      	movs	r2, #32
 8000be4:	0020      	movs	r0, r4
 8000be6:	1ad2      	subs	r2, r2, r3
 8000be8:	4651      	mov	r1, sl
 8000bea:	40d0      	lsrs	r0, r2
 8000bec:	4099      	lsls	r1, r3
 8000bee:	0002      	movs	r2, r0
 8000bf0:	409c      	lsls	r4, r3
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	42b3      	cmp	r3, r6
 8000bf6:	da00      	bge.n	8000bfa <__aeabi_dadd+0xd2>
 8000bf8:	e102      	b.n	8000e00 <__aeabi_dadd+0x2d8>
 8000bfa:	1b9b      	subs	r3, r3, r6
 8000bfc:	1c59      	adds	r1, r3, #1
 8000bfe:	291f      	cmp	r1, #31
 8000c00:	dd00      	ble.n	8000c04 <__aeabi_dadd+0xdc>
 8000c02:	e0a7      	b.n	8000d54 <__aeabi_dadd+0x22c>
 8000c04:	2320      	movs	r3, #32
 8000c06:	0010      	movs	r0, r2
 8000c08:	0026      	movs	r6, r4
 8000c0a:	1a5b      	subs	r3, r3, r1
 8000c0c:	409c      	lsls	r4, r3
 8000c0e:	4098      	lsls	r0, r3
 8000c10:	40ce      	lsrs	r6, r1
 8000c12:	40ca      	lsrs	r2, r1
 8000c14:	1e63      	subs	r3, r4, #1
 8000c16:	419c      	sbcs	r4, r3
 8000c18:	4330      	orrs	r0, r6
 8000c1a:	4692      	mov	sl, r2
 8000c1c:	2600      	movs	r6, #0
 8000c1e:	4304      	orrs	r4, r0
 8000c20:	0763      	lsls	r3, r4, #29
 8000c22:	d009      	beq.n	8000c38 <__aeabi_dadd+0x110>
 8000c24:	230f      	movs	r3, #15
 8000c26:	4023      	ands	r3, r4
 8000c28:	2b04      	cmp	r3, #4
 8000c2a:	d005      	beq.n	8000c38 <__aeabi_dadd+0x110>
 8000c2c:	1d23      	adds	r3, r4, #4
 8000c2e:	42a3      	cmp	r3, r4
 8000c30:	41a4      	sbcs	r4, r4
 8000c32:	4264      	negs	r4, r4
 8000c34:	44a2      	add	sl, r4
 8000c36:	001c      	movs	r4, r3
 8000c38:	4653      	mov	r3, sl
 8000c3a:	021b      	lsls	r3, r3, #8
 8000c3c:	d400      	bmi.n	8000c40 <__aeabi_dadd+0x118>
 8000c3e:	e09b      	b.n	8000d78 <__aeabi_dadd+0x250>
 8000c40:	4b94      	ldr	r3, [pc, #592]	; (8000e94 <__aeabi_dadd+0x36c>)
 8000c42:	3601      	adds	r6, #1
 8000c44:	429e      	cmp	r6, r3
 8000c46:	d100      	bne.n	8000c4a <__aeabi_dadd+0x122>
 8000c48:	e0b8      	b.n	8000dbc <__aeabi_dadd+0x294>
 8000c4a:	4653      	mov	r3, sl
 8000c4c:	4992      	ldr	r1, [pc, #584]	; (8000e98 <__aeabi_dadd+0x370>)
 8000c4e:	08e4      	lsrs	r4, r4, #3
 8000c50:	400b      	ands	r3, r1
 8000c52:	0019      	movs	r1, r3
 8000c54:	075b      	lsls	r3, r3, #29
 8000c56:	4323      	orrs	r3, r4
 8000c58:	0572      	lsls	r2, r6, #21
 8000c5a:	024c      	lsls	r4, r1, #9
 8000c5c:	0b24      	lsrs	r4, r4, #12
 8000c5e:	0d52      	lsrs	r2, r2, #21
 8000c60:	0512      	lsls	r2, r2, #20
 8000c62:	07ed      	lsls	r5, r5, #31
 8000c64:	4322      	orrs	r2, r4
 8000c66:	432a      	orrs	r2, r5
 8000c68:	0018      	movs	r0, r3
 8000c6a:	0011      	movs	r1, r2
 8000c6c:	bce0      	pop	{r5, r6, r7}
 8000c6e:	46ba      	mov	sl, r7
 8000c70:	46b1      	mov	r9, r6
 8000c72:	46a8      	mov	r8, r5
 8000c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c76:	2f00      	cmp	r7, #0
 8000c78:	d048      	beq.n	8000d0c <__aeabi_dadd+0x1e4>
 8000c7a:	1b97      	subs	r7, r2, r6
 8000c7c:	2e00      	cmp	r6, #0
 8000c7e:	d000      	beq.n	8000c82 <__aeabi_dadd+0x15a>
 8000c80:	e10e      	b.n	8000ea0 <__aeabi_dadd+0x378>
 8000c82:	000c      	movs	r4, r1
 8000c84:	431c      	orrs	r4, r3
 8000c86:	d100      	bne.n	8000c8a <__aeabi_dadd+0x162>
 8000c88:	e1b7      	b.n	8000ffa <__aeabi_dadd+0x4d2>
 8000c8a:	1e7c      	subs	r4, r7, #1
 8000c8c:	2f01      	cmp	r7, #1
 8000c8e:	d100      	bne.n	8000c92 <__aeabi_dadd+0x16a>
 8000c90:	e226      	b.n	80010e0 <__aeabi_dadd+0x5b8>
 8000c92:	4d80      	ldr	r5, [pc, #512]	; (8000e94 <__aeabi_dadd+0x36c>)
 8000c94:	42af      	cmp	r7, r5
 8000c96:	d100      	bne.n	8000c9a <__aeabi_dadd+0x172>
 8000c98:	e1d5      	b.n	8001046 <__aeabi_dadd+0x51e>
 8000c9a:	0027      	movs	r7, r4
 8000c9c:	e107      	b.n	8000eae <__aeabi_dadd+0x386>
 8000c9e:	2f00      	cmp	r7, #0
 8000ca0:	dc00      	bgt.n	8000ca4 <__aeabi_dadd+0x17c>
 8000ca2:	e0b2      	b.n	8000e0a <__aeabi_dadd+0x2e2>
 8000ca4:	2a00      	cmp	r2, #0
 8000ca6:	d047      	beq.n	8000d38 <__aeabi_dadd+0x210>
 8000ca8:	4a7a      	ldr	r2, [pc, #488]	; (8000e94 <__aeabi_dadd+0x36c>)
 8000caa:	4296      	cmp	r6, r2
 8000cac:	d100      	bne.n	8000cb0 <__aeabi_dadd+0x188>
 8000cae:	e089      	b.n	8000dc4 <__aeabi_dadd+0x29c>
 8000cb0:	2280      	movs	r2, #128	; 0x80
 8000cb2:	464c      	mov	r4, r9
 8000cb4:	0412      	lsls	r2, r2, #16
 8000cb6:	4314      	orrs	r4, r2
 8000cb8:	46a1      	mov	r9, r4
 8000cba:	2f38      	cmp	r7, #56	; 0x38
 8000cbc:	dc6b      	bgt.n	8000d96 <__aeabi_dadd+0x26e>
 8000cbe:	2f1f      	cmp	r7, #31
 8000cc0:	dc00      	bgt.n	8000cc4 <__aeabi_dadd+0x19c>
 8000cc2:	e16e      	b.n	8000fa2 <__aeabi_dadd+0x47a>
 8000cc4:	003a      	movs	r2, r7
 8000cc6:	4648      	mov	r0, r9
 8000cc8:	3a20      	subs	r2, #32
 8000cca:	40d0      	lsrs	r0, r2
 8000ccc:	4684      	mov	ip, r0
 8000cce:	2f20      	cmp	r7, #32
 8000cd0:	d007      	beq.n	8000ce2 <__aeabi_dadd+0x1ba>
 8000cd2:	2240      	movs	r2, #64	; 0x40
 8000cd4:	4648      	mov	r0, r9
 8000cd6:	1bd2      	subs	r2, r2, r7
 8000cd8:	4090      	lsls	r0, r2
 8000cda:	0002      	movs	r2, r0
 8000cdc:	4640      	mov	r0, r8
 8000cde:	4310      	orrs	r0, r2
 8000ce0:	4680      	mov	r8, r0
 8000ce2:	4640      	mov	r0, r8
 8000ce4:	1e42      	subs	r2, r0, #1
 8000ce6:	4190      	sbcs	r0, r2
 8000ce8:	4662      	mov	r2, ip
 8000cea:	0004      	movs	r4, r0
 8000cec:	4314      	orrs	r4, r2
 8000cee:	e057      	b.n	8000da0 <__aeabi_dadd+0x278>
 8000cf0:	464a      	mov	r2, r9
 8000cf2:	4302      	orrs	r2, r0
 8000cf4:	d100      	bne.n	8000cf8 <__aeabi_dadd+0x1d0>
 8000cf6:	e103      	b.n	8000f00 <__aeabi_dadd+0x3d8>
 8000cf8:	1e7a      	subs	r2, r7, #1
 8000cfa:	2f01      	cmp	r7, #1
 8000cfc:	d100      	bne.n	8000d00 <__aeabi_dadd+0x1d8>
 8000cfe:	e193      	b.n	8001028 <__aeabi_dadd+0x500>
 8000d00:	4c64      	ldr	r4, [pc, #400]	; (8000e94 <__aeabi_dadd+0x36c>)
 8000d02:	42a7      	cmp	r7, r4
 8000d04:	d100      	bne.n	8000d08 <__aeabi_dadd+0x1e0>
 8000d06:	e18a      	b.n	800101e <__aeabi_dadd+0x4f6>
 8000d08:	0017      	movs	r7, r2
 8000d0a:	e73b      	b.n	8000b84 <__aeabi_dadd+0x5c>
 8000d0c:	4c63      	ldr	r4, [pc, #396]	; (8000e9c <__aeabi_dadd+0x374>)
 8000d0e:	1c72      	adds	r2, r6, #1
 8000d10:	4222      	tst	r2, r4
 8000d12:	d000      	beq.n	8000d16 <__aeabi_dadd+0x1ee>
 8000d14:	e0e0      	b.n	8000ed8 <__aeabi_dadd+0x3b0>
 8000d16:	000a      	movs	r2, r1
 8000d18:	431a      	orrs	r2, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d000      	beq.n	8000d20 <__aeabi_dadd+0x1f8>
 8000d1e:	e174      	b.n	800100a <__aeabi_dadd+0x4e2>
 8000d20:	2a00      	cmp	r2, #0
 8000d22:	d100      	bne.n	8000d26 <__aeabi_dadd+0x1fe>
 8000d24:	e1d0      	b.n	80010c8 <__aeabi_dadd+0x5a0>
 8000d26:	464a      	mov	r2, r9
 8000d28:	4302      	orrs	r2, r0
 8000d2a:	d000      	beq.n	8000d2e <__aeabi_dadd+0x206>
 8000d2c:	e1e3      	b.n	80010f6 <__aeabi_dadd+0x5ce>
 8000d2e:	074a      	lsls	r2, r1, #29
 8000d30:	08db      	lsrs	r3, r3, #3
 8000d32:	4313      	orrs	r3, r2
 8000d34:	08c9      	lsrs	r1, r1, #3
 8000d36:	e029      	b.n	8000d8c <__aeabi_dadd+0x264>
 8000d38:	464a      	mov	r2, r9
 8000d3a:	4302      	orrs	r2, r0
 8000d3c:	d100      	bne.n	8000d40 <__aeabi_dadd+0x218>
 8000d3e:	e17d      	b.n	800103c <__aeabi_dadd+0x514>
 8000d40:	1e7a      	subs	r2, r7, #1
 8000d42:	2f01      	cmp	r7, #1
 8000d44:	d100      	bne.n	8000d48 <__aeabi_dadd+0x220>
 8000d46:	e0e0      	b.n	8000f0a <__aeabi_dadd+0x3e2>
 8000d48:	4c52      	ldr	r4, [pc, #328]	; (8000e94 <__aeabi_dadd+0x36c>)
 8000d4a:	42a7      	cmp	r7, r4
 8000d4c:	d100      	bne.n	8000d50 <__aeabi_dadd+0x228>
 8000d4e:	e166      	b.n	800101e <__aeabi_dadd+0x4f6>
 8000d50:	0017      	movs	r7, r2
 8000d52:	e7b2      	b.n	8000cba <__aeabi_dadd+0x192>
 8000d54:	0010      	movs	r0, r2
 8000d56:	3b1f      	subs	r3, #31
 8000d58:	40d8      	lsrs	r0, r3
 8000d5a:	2920      	cmp	r1, #32
 8000d5c:	d003      	beq.n	8000d66 <__aeabi_dadd+0x23e>
 8000d5e:	2340      	movs	r3, #64	; 0x40
 8000d60:	1a5b      	subs	r3, r3, r1
 8000d62:	409a      	lsls	r2, r3
 8000d64:	4314      	orrs	r4, r2
 8000d66:	1e63      	subs	r3, r4, #1
 8000d68:	419c      	sbcs	r4, r3
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	469a      	mov	sl, r3
 8000d70:	4304      	orrs	r4, r0
 8000d72:	0763      	lsls	r3, r4, #29
 8000d74:	d000      	beq.n	8000d78 <__aeabi_dadd+0x250>
 8000d76:	e755      	b.n	8000c24 <__aeabi_dadd+0xfc>
 8000d78:	4652      	mov	r2, sl
 8000d7a:	08e3      	lsrs	r3, r4, #3
 8000d7c:	0752      	lsls	r2, r2, #29
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	4652      	mov	r2, sl
 8000d82:	0037      	movs	r7, r6
 8000d84:	08d1      	lsrs	r1, r2, #3
 8000d86:	4a43      	ldr	r2, [pc, #268]	; (8000e94 <__aeabi_dadd+0x36c>)
 8000d88:	4297      	cmp	r7, r2
 8000d8a:	d01f      	beq.n	8000dcc <__aeabi_dadd+0x2a4>
 8000d8c:	0309      	lsls	r1, r1, #12
 8000d8e:	057a      	lsls	r2, r7, #21
 8000d90:	0b0c      	lsrs	r4, r1, #12
 8000d92:	0d52      	lsrs	r2, r2, #21
 8000d94:	e764      	b.n	8000c60 <__aeabi_dadd+0x138>
 8000d96:	4642      	mov	r2, r8
 8000d98:	464c      	mov	r4, r9
 8000d9a:	4314      	orrs	r4, r2
 8000d9c:	1e62      	subs	r2, r4, #1
 8000d9e:	4194      	sbcs	r4, r2
 8000da0:	18e4      	adds	r4, r4, r3
 8000da2:	429c      	cmp	r4, r3
 8000da4:	4192      	sbcs	r2, r2
 8000da6:	4252      	negs	r2, r2
 8000da8:	4692      	mov	sl, r2
 8000daa:	448a      	add	sl, r1
 8000dac:	4653      	mov	r3, sl
 8000dae:	021b      	lsls	r3, r3, #8
 8000db0:	d5df      	bpl.n	8000d72 <__aeabi_dadd+0x24a>
 8000db2:	4b38      	ldr	r3, [pc, #224]	; (8000e94 <__aeabi_dadd+0x36c>)
 8000db4:	3601      	adds	r6, #1
 8000db6:	429e      	cmp	r6, r3
 8000db8:	d000      	beq.n	8000dbc <__aeabi_dadd+0x294>
 8000dba:	e0b3      	b.n	8000f24 <__aeabi_dadd+0x3fc>
 8000dbc:	0032      	movs	r2, r6
 8000dbe:	2400      	movs	r4, #0
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e74d      	b.n	8000c60 <__aeabi_dadd+0x138>
 8000dc4:	074a      	lsls	r2, r1, #29
 8000dc6:	08db      	lsrs	r3, r3, #3
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	08c9      	lsrs	r1, r1, #3
 8000dcc:	001a      	movs	r2, r3
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_dadd+0x2ac>
 8000dd2:	e200      	b.n	80011d6 <__aeabi_dadd+0x6ae>
 8000dd4:	2480      	movs	r4, #128	; 0x80
 8000dd6:	0324      	lsls	r4, r4, #12
 8000dd8:	430c      	orrs	r4, r1
 8000dda:	0324      	lsls	r4, r4, #12
 8000ddc:	4a2d      	ldr	r2, [pc, #180]	; (8000e94 <__aeabi_dadd+0x36c>)
 8000dde:	0b24      	lsrs	r4, r4, #12
 8000de0:	e73e      	b.n	8000c60 <__aeabi_dadd+0x138>
 8000de2:	0020      	movs	r0, r4
 8000de4:	f000 fda4 	bl	8001930 <__clzsi2>
 8000de8:	0003      	movs	r3, r0
 8000dea:	3318      	adds	r3, #24
 8000dec:	2b1f      	cmp	r3, #31
 8000dee:	dc00      	bgt.n	8000df2 <__aeabi_dadd+0x2ca>
 8000df0:	e6f7      	b.n	8000be2 <__aeabi_dadd+0xba>
 8000df2:	0022      	movs	r2, r4
 8000df4:	3808      	subs	r0, #8
 8000df6:	4082      	lsls	r2, r0
 8000df8:	2400      	movs	r4, #0
 8000dfa:	42b3      	cmp	r3, r6
 8000dfc:	db00      	blt.n	8000e00 <__aeabi_dadd+0x2d8>
 8000dfe:	e6fc      	b.n	8000bfa <__aeabi_dadd+0xd2>
 8000e00:	1af6      	subs	r6, r6, r3
 8000e02:	4b25      	ldr	r3, [pc, #148]	; (8000e98 <__aeabi_dadd+0x370>)
 8000e04:	401a      	ands	r2, r3
 8000e06:	4692      	mov	sl, r2
 8000e08:	e70a      	b.n	8000c20 <__aeabi_dadd+0xf8>
 8000e0a:	2f00      	cmp	r7, #0
 8000e0c:	d02b      	beq.n	8000e66 <__aeabi_dadd+0x33e>
 8000e0e:	1b97      	subs	r7, r2, r6
 8000e10:	2e00      	cmp	r6, #0
 8000e12:	d100      	bne.n	8000e16 <__aeabi_dadd+0x2ee>
 8000e14:	e0b8      	b.n	8000f88 <__aeabi_dadd+0x460>
 8000e16:	4c1f      	ldr	r4, [pc, #124]	; (8000e94 <__aeabi_dadd+0x36c>)
 8000e18:	42a2      	cmp	r2, r4
 8000e1a:	d100      	bne.n	8000e1e <__aeabi_dadd+0x2f6>
 8000e1c:	e11c      	b.n	8001058 <__aeabi_dadd+0x530>
 8000e1e:	2480      	movs	r4, #128	; 0x80
 8000e20:	0424      	lsls	r4, r4, #16
 8000e22:	4321      	orrs	r1, r4
 8000e24:	2f38      	cmp	r7, #56	; 0x38
 8000e26:	dd00      	ble.n	8000e2a <__aeabi_dadd+0x302>
 8000e28:	e11e      	b.n	8001068 <__aeabi_dadd+0x540>
 8000e2a:	2f1f      	cmp	r7, #31
 8000e2c:	dd00      	ble.n	8000e30 <__aeabi_dadd+0x308>
 8000e2e:	e19e      	b.n	800116e <__aeabi_dadd+0x646>
 8000e30:	2620      	movs	r6, #32
 8000e32:	000c      	movs	r4, r1
 8000e34:	1bf6      	subs	r6, r6, r7
 8000e36:	0018      	movs	r0, r3
 8000e38:	40b3      	lsls	r3, r6
 8000e3a:	40b4      	lsls	r4, r6
 8000e3c:	40f8      	lsrs	r0, r7
 8000e3e:	1e5e      	subs	r6, r3, #1
 8000e40:	41b3      	sbcs	r3, r6
 8000e42:	40f9      	lsrs	r1, r7
 8000e44:	4304      	orrs	r4, r0
 8000e46:	431c      	orrs	r4, r3
 8000e48:	4489      	add	r9, r1
 8000e4a:	4444      	add	r4, r8
 8000e4c:	4544      	cmp	r4, r8
 8000e4e:	419b      	sbcs	r3, r3
 8000e50:	425b      	negs	r3, r3
 8000e52:	444b      	add	r3, r9
 8000e54:	469a      	mov	sl, r3
 8000e56:	0016      	movs	r6, r2
 8000e58:	e7a8      	b.n	8000dac <__aeabi_dadd+0x284>
 8000e5a:	4642      	mov	r2, r8
 8000e5c:	464c      	mov	r4, r9
 8000e5e:	4314      	orrs	r4, r2
 8000e60:	1e62      	subs	r2, r4, #1
 8000e62:	4194      	sbcs	r4, r2
 8000e64:	e6a6      	b.n	8000bb4 <__aeabi_dadd+0x8c>
 8000e66:	4c0d      	ldr	r4, [pc, #52]	; (8000e9c <__aeabi_dadd+0x374>)
 8000e68:	1c72      	adds	r2, r6, #1
 8000e6a:	4222      	tst	r2, r4
 8000e6c:	d000      	beq.n	8000e70 <__aeabi_dadd+0x348>
 8000e6e:	e0a8      	b.n	8000fc2 <__aeabi_dadd+0x49a>
 8000e70:	000a      	movs	r2, r1
 8000e72:	431a      	orrs	r2, r3
 8000e74:	2e00      	cmp	r6, #0
 8000e76:	d000      	beq.n	8000e7a <__aeabi_dadd+0x352>
 8000e78:	e10a      	b.n	8001090 <__aeabi_dadd+0x568>
 8000e7a:	2a00      	cmp	r2, #0
 8000e7c:	d100      	bne.n	8000e80 <__aeabi_dadd+0x358>
 8000e7e:	e15e      	b.n	800113e <__aeabi_dadd+0x616>
 8000e80:	464a      	mov	r2, r9
 8000e82:	4302      	orrs	r2, r0
 8000e84:	d000      	beq.n	8000e88 <__aeabi_dadd+0x360>
 8000e86:	e161      	b.n	800114c <__aeabi_dadd+0x624>
 8000e88:	074a      	lsls	r2, r1, #29
 8000e8a:	08db      	lsrs	r3, r3, #3
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	08c9      	lsrs	r1, r1, #3
 8000e90:	e77c      	b.n	8000d8c <__aeabi_dadd+0x264>
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	000007ff 	.word	0x000007ff
 8000e98:	ff7fffff 	.word	0xff7fffff
 8000e9c:	000007fe 	.word	0x000007fe
 8000ea0:	4ccf      	ldr	r4, [pc, #828]	; (80011e0 <__aeabi_dadd+0x6b8>)
 8000ea2:	42a2      	cmp	r2, r4
 8000ea4:	d100      	bne.n	8000ea8 <__aeabi_dadd+0x380>
 8000ea6:	e0ce      	b.n	8001046 <__aeabi_dadd+0x51e>
 8000ea8:	2480      	movs	r4, #128	; 0x80
 8000eaa:	0424      	lsls	r4, r4, #16
 8000eac:	4321      	orrs	r1, r4
 8000eae:	2f38      	cmp	r7, #56	; 0x38
 8000eb0:	dc5b      	bgt.n	8000f6a <__aeabi_dadd+0x442>
 8000eb2:	2f1f      	cmp	r7, #31
 8000eb4:	dd00      	ble.n	8000eb8 <__aeabi_dadd+0x390>
 8000eb6:	e0dc      	b.n	8001072 <__aeabi_dadd+0x54a>
 8000eb8:	2520      	movs	r5, #32
 8000eba:	000c      	movs	r4, r1
 8000ebc:	1bed      	subs	r5, r5, r7
 8000ebe:	001e      	movs	r6, r3
 8000ec0:	40ab      	lsls	r3, r5
 8000ec2:	40ac      	lsls	r4, r5
 8000ec4:	40fe      	lsrs	r6, r7
 8000ec6:	1e5d      	subs	r5, r3, #1
 8000ec8:	41ab      	sbcs	r3, r5
 8000eca:	4334      	orrs	r4, r6
 8000ecc:	40f9      	lsrs	r1, r7
 8000ece:	431c      	orrs	r4, r3
 8000ed0:	464b      	mov	r3, r9
 8000ed2:	1a5b      	subs	r3, r3, r1
 8000ed4:	4699      	mov	r9, r3
 8000ed6:	e04c      	b.n	8000f72 <__aeabi_dadd+0x44a>
 8000ed8:	464a      	mov	r2, r9
 8000eda:	1a1c      	subs	r4, r3, r0
 8000edc:	1a88      	subs	r0, r1, r2
 8000ede:	42a3      	cmp	r3, r4
 8000ee0:	4192      	sbcs	r2, r2
 8000ee2:	4252      	negs	r2, r2
 8000ee4:	4692      	mov	sl, r2
 8000ee6:	0002      	movs	r2, r0
 8000ee8:	4650      	mov	r0, sl
 8000eea:	1a12      	subs	r2, r2, r0
 8000eec:	4692      	mov	sl, r2
 8000eee:	0212      	lsls	r2, r2, #8
 8000ef0:	d478      	bmi.n	8000fe4 <__aeabi_dadd+0x4bc>
 8000ef2:	4653      	mov	r3, sl
 8000ef4:	4323      	orrs	r3, r4
 8000ef6:	d000      	beq.n	8000efa <__aeabi_dadd+0x3d2>
 8000ef8:	e66a      	b.n	8000bd0 <__aeabi_dadd+0xa8>
 8000efa:	2100      	movs	r1, #0
 8000efc:	2500      	movs	r5, #0
 8000efe:	e745      	b.n	8000d8c <__aeabi_dadd+0x264>
 8000f00:	074a      	lsls	r2, r1, #29
 8000f02:	08db      	lsrs	r3, r3, #3
 8000f04:	4313      	orrs	r3, r2
 8000f06:	08c9      	lsrs	r1, r1, #3
 8000f08:	e73d      	b.n	8000d86 <__aeabi_dadd+0x25e>
 8000f0a:	181c      	adds	r4, r3, r0
 8000f0c:	429c      	cmp	r4, r3
 8000f0e:	419b      	sbcs	r3, r3
 8000f10:	4449      	add	r1, r9
 8000f12:	468a      	mov	sl, r1
 8000f14:	425b      	negs	r3, r3
 8000f16:	449a      	add	sl, r3
 8000f18:	4653      	mov	r3, sl
 8000f1a:	2601      	movs	r6, #1
 8000f1c:	021b      	lsls	r3, r3, #8
 8000f1e:	d400      	bmi.n	8000f22 <__aeabi_dadd+0x3fa>
 8000f20:	e727      	b.n	8000d72 <__aeabi_dadd+0x24a>
 8000f22:	2602      	movs	r6, #2
 8000f24:	4652      	mov	r2, sl
 8000f26:	4baf      	ldr	r3, [pc, #700]	; (80011e4 <__aeabi_dadd+0x6bc>)
 8000f28:	2101      	movs	r1, #1
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	0013      	movs	r3, r2
 8000f2e:	4021      	ands	r1, r4
 8000f30:	0862      	lsrs	r2, r4, #1
 8000f32:	430a      	orrs	r2, r1
 8000f34:	07dc      	lsls	r4, r3, #31
 8000f36:	085b      	lsrs	r3, r3, #1
 8000f38:	469a      	mov	sl, r3
 8000f3a:	4314      	orrs	r4, r2
 8000f3c:	e670      	b.n	8000c20 <__aeabi_dadd+0xf8>
 8000f3e:	003a      	movs	r2, r7
 8000f40:	464c      	mov	r4, r9
 8000f42:	3a20      	subs	r2, #32
 8000f44:	40d4      	lsrs	r4, r2
 8000f46:	46a4      	mov	ip, r4
 8000f48:	2f20      	cmp	r7, #32
 8000f4a:	d007      	beq.n	8000f5c <__aeabi_dadd+0x434>
 8000f4c:	2240      	movs	r2, #64	; 0x40
 8000f4e:	4648      	mov	r0, r9
 8000f50:	1bd2      	subs	r2, r2, r7
 8000f52:	4090      	lsls	r0, r2
 8000f54:	0002      	movs	r2, r0
 8000f56:	4640      	mov	r0, r8
 8000f58:	4310      	orrs	r0, r2
 8000f5a:	4680      	mov	r8, r0
 8000f5c:	4640      	mov	r0, r8
 8000f5e:	1e42      	subs	r2, r0, #1
 8000f60:	4190      	sbcs	r0, r2
 8000f62:	4662      	mov	r2, ip
 8000f64:	0004      	movs	r4, r0
 8000f66:	4314      	orrs	r4, r2
 8000f68:	e624      	b.n	8000bb4 <__aeabi_dadd+0x8c>
 8000f6a:	4319      	orrs	r1, r3
 8000f6c:	000c      	movs	r4, r1
 8000f6e:	1e63      	subs	r3, r4, #1
 8000f70:	419c      	sbcs	r4, r3
 8000f72:	4643      	mov	r3, r8
 8000f74:	1b1c      	subs	r4, r3, r4
 8000f76:	45a0      	cmp	r8, r4
 8000f78:	419b      	sbcs	r3, r3
 8000f7a:	4649      	mov	r1, r9
 8000f7c:	425b      	negs	r3, r3
 8000f7e:	1acb      	subs	r3, r1, r3
 8000f80:	469a      	mov	sl, r3
 8000f82:	4665      	mov	r5, ip
 8000f84:	0016      	movs	r6, r2
 8000f86:	e61b      	b.n	8000bc0 <__aeabi_dadd+0x98>
 8000f88:	000c      	movs	r4, r1
 8000f8a:	431c      	orrs	r4, r3
 8000f8c:	d100      	bne.n	8000f90 <__aeabi_dadd+0x468>
 8000f8e:	e0c7      	b.n	8001120 <__aeabi_dadd+0x5f8>
 8000f90:	1e7c      	subs	r4, r7, #1
 8000f92:	2f01      	cmp	r7, #1
 8000f94:	d100      	bne.n	8000f98 <__aeabi_dadd+0x470>
 8000f96:	e0f9      	b.n	800118c <__aeabi_dadd+0x664>
 8000f98:	4e91      	ldr	r6, [pc, #580]	; (80011e0 <__aeabi_dadd+0x6b8>)
 8000f9a:	42b7      	cmp	r7, r6
 8000f9c:	d05c      	beq.n	8001058 <__aeabi_dadd+0x530>
 8000f9e:	0027      	movs	r7, r4
 8000fa0:	e740      	b.n	8000e24 <__aeabi_dadd+0x2fc>
 8000fa2:	2220      	movs	r2, #32
 8000fa4:	464c      	mov	r4, r9
 8000fa6:	4640      	mov	r0, r8
 8000fa8:	1bd2      	subs	r2, r2, r7
 8000faa:	4094      	lsls	r4, r2
 8000fac:	40f8      	lsrs	r0, r7
 8000fae:	4304      	orrs	r4, r0
 8000fb0:	4640      	mov	r0, r8
 8000fb2:	4090      	lsls	r0, r2
 8000fb4:	1e42      	subs	r2, r0, #1
 8000fb6:	4190      	sbcs	r0, r2
 8000fb8:	464a      	mov	r2, r9
 8000fba:	40fa      	lsrs	r2, r7
 8000fbc:	4304      	orrs	r4, r0
 8000fbe:	1889      	adds	r1, r1, r2
 8000fc0:	e6ee      	b.n	8000da0 <__aeabi_dadd+0x278>
 8000fc2:	4c87      	ldr	r4, [pc, #540]	; (80011e0 <__aeabi_dadd+0x6b8>)
 8000fc4:	42a2      	cmp	r2, r4
 8000fc6:	d100      	bne.n	8000fca <__aeabi_dadd+0x4a2>
 8000fc8:	e6f9      	b.n	8000dbe <__aeabi_dadd+0x296>
 8000fca:	1818      	adds	r0, r3, r0
 8000fcc:	4298      	cmp	r0, r3
 8000fce:	419b      	sbcs	r3, r3
 8000fd0:	4449      	add	r1, r9
 8000fd2:	425b      	negs	r3, r3
 8000fd4:	18cb      	adds	r3, r1, r3
 8000fd6:	07dc      	lsls	r4, r3, #31
 8000fd8:	0840      	lsrs	r0, r0, #1
 8000fda:	085b      	lsrs	r3, r3, #1
 8000fdc:	469a      	mov	sl, r3
 8000fde:	0016      	movs	r6, r2
 8000fe0:	4304      	orrs	r4, r0
 8000fe2:	e6c6      	b.n	8000d72 <__aeabi_dadd+0x24a>
 8000fe4:	4642      	mov	r2, r8
 8000fe6:	1ad4      	subs	r4, r2, r3
 8000fe8:	45a0      	cmp	r8, r4
 8000fea:	4180      	sbcs	r0, r0
 8000fec:	464b      	mov	r3, r9
 8000fee:	4240      	negs	r0, r0
 8000ff0:	1a59      	subs	r1, r3, r1
 8000ff2:	1a0b      	subs	r3, r1, r0
 8000ff4:	469a      	mov	sl, r3
 8000ff6:	4665      	mov	r5, ip
 8000ff8:	e5ea      	b.n	8000bd0 <__aeabi_dadd+0xa8>
 8000ffa:	464b      	mov	r3, r9
 8000ffc:	464a      	mov	r2, r9
 8000ffe:	08c0      	lsrs	r0, r0, #3
 8001000:	075b      	lsls	r3, r3, #29
 8001002:	4665      	mov	r5, ip
 8001004:	4303      	orrs	r3, r0
 8001006:	08d1      	lsrs	r1, r2, #3
 8001008:	e6bd      	b.n	8000d86 <__aeabi_dadd+0x25e>
 800100a:	2a00      	cmp	r2, #0
 800100c:	d000      	beq.n	8001010 <__aeabi_dadd+0x4e8>
 800100e:	e08e      	b.n	800112e <__aeabi_dadd+0x606>
 8001010:	464b      	mov	r3, r9
 8001012:	4303      	orrs	r3, r0
 8001014:	d117      	bne.n	8001046 <__aeabi_dadd+0x51e>
 8001016:	2180      	movs	r1, #128	; 0x80
 8001018:	2500      	movs	r5, #0
 800101a:	0309      	lsls	r1, r1, #12
 800101c:	e6da      	b.n	8000dd4 <__aeabi_dadd+0x2ac>
 800101e:	074a      	lsls	r2, r1, #29
 8001020:	08db      	lsrs	r3, r3, #3
 8001022:	4313      	orrs	r3, r2
 8001024:	08c9      	lsrs	r1, r1, #3
 8001026:	e6d1      	b.n	8000dcc <__aeabi_dadd+0x2a4>
 8001028:	1a1c      	subs	r4, r3, r0
 800102a:	464a      	mov	r2, r9
 800102c:	42a3      	cmp	r3, r4
 800102e:	419b      	sbcs	r3, r3
 8001030:	1a89      	subs	r1, r1, r2
 8001032:	425b      	negs	r3, r3
 8001034:	1acb      	subs	r3, r1, r3
 8001036:	469a      	mov	sl, r3
 8001038:	2601      	movs	r6, #1
 800103a:	e5c1      	b.n	8000bc0 <__aeabi_dadd+0x98>
 800103c:	074a      	lsls	r2, r1, #29
 800103e:	08db      	lsrs	r3, r3, #3
 8001040:	4313      	orrs	r3, r2
 8001042:	08c9      	lsrs	r1, r1, #3
 8001044:	e69f      	b.n	8000d86 <__aeabi_dadd+0x25e>
 8001046:	4643      	mov	r3, r8
 8001048:	08d8      	lsrs	r0, r3, #3
 800104a:	464b      	mov	r3, r9
 800104c:	464a      	mov	r2, r9
 800104e:	075b      	lsls	r3, r3, #29
 8001050:	4665      	mov	r5, ip
 8001052:	4303      	orrs	r3, r0
 8001054:	08d1      	lsrs	r1, r2, #3
 8001056:	e6b9      	b.n	8000dcc <__aeabi_dadd+0x2a4>
 8001058:	4643      	mov	r3, r8
 800105a:	08d8      	lsrs	r0, r3, #3
 800105c:	464b      	mov	r3, r9
 800105e:	464a      	mov	r2, r9
 8001060:	075b      	lsls	r3, r3, #29
 8001062:	4303      	orrs	r3, r0
 8001064:	08d1      	lsrs	r1, r2, #3
 8001066:	e6b1      	b.n	8000dcc <__aeabi_dadd+0x2a4>
 8001068:	4319      	orrs	r1, r3
 800106a:	000c      	movs	r4, r1
 800106c:	1e63      	subs	r3, r4, #1
 800106e:	419c      	sbcs	r4, r3
 8001070:	e6eb      	b.n	8000e4a <__aeabi_dadd+0x322>
 8001072:	003c      	movs	r4, r7
 8001074:	000d      	movs	r5, r1
 8001076:	3c20      	subs	r4, #32
 8001078:	40e5      	lsrs	r5, r4
 800107a:	2f20      	cmp	r7, #32
 800107c:	d003      	beq.n	8001086 <__aeabi_dadd+0x55e>
 800107e:	2440      	movs	r4, #64	; 0x40
 8001080:	1be4      	subs	r4, r4, r7
 8001082:	40a1      	lsls	r1, r4
 8001084:	430b      	orrs	r3, r1
 8001086:	001c      	movs	r4, r3
 8001088:	1e63      	subs	r3, r4, #1
 800108a:	419c      	sbcs	r4, r3
 800108c:	432c      	orrs	r4, r5
 800108e:	e770      	b.n	8000f72 <__aeabi_dadd+0x44a>
 8001090:	2a00      	cmp	r2, #0
 8001092:	d0e1      	beq.n	8001058 <__aeabi_dadd+0x530>
 8001094:	464a      	mov	r2, r9
 8001096:	4302      	orrs	r2, r0
 8001098:	d0c1      	beq.n	800101e <__aeabi_dadd+0x4f6>
 800109a:	074a      	lsls	r2, r1, #29
 800109c:	08db      	lsrs	r3, r3, #3
 800109e:	4313      	orrs	r3, r2
 80010a0:	2280      	movs	r2, #128	; 0x80
 80010a2:	08c9      	lsrs	r1, r1, #3
 80010a4:	0312      	lsls	r2, r2, #12
 80010a6:	4211      	tst	r1, r2
 80010a8:	d008      	beq.n	80010bc <__aeabi_dadd+0x594>
 80010aa:	4648      	mov	r0, r9
 80010ac:	08c4      	lsrs	r4, r0, #3
 80010ae:	4214      	tst	r4, r2
 80010b0:	d104      	bne.n	80010bc <__aeabi_dadd+0x594>
 80010b2:	4643      	mov	r3, r8
 80010b4:	0021      	movs	r1, r4
 80010b6:	08db      	lsrs	r3, r3, #3
 80010b8:	0742      	lsls	r2, r0, #29
 80010ba:	4313      	orrs	r3, r2
 80010bc:	0f5a      	lsrs	r2, r3, #29
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	0752      	lsls	r2, r2, #29
 80010c2:	08db      	lsrs	r3, r3, #3
 80010c4:	4313      	orrs	r3, r2
 80010c6:	e681      	b.n	8000dcc <__aeabi_dadd+0x2a4>
 80010c8:	464b      	mov	r3, r9
 80010ca:	4303      	orrs	r3, r0
 80010cc:	d100      	bne.n	80010d0 <__aeabi_dadd+0x5a8>
 80010ce:	e714      	b.n	8000efa <__aeabi_dadd+0x3d2>
 80010d0:	464b      	mov	r3, r9
 80010d2:	464a      	mov	r2, r9
 80010d4:	08c0      	lsrs	r0, r0, #3
 80010d6:	075b      	lsls	r3, r3, #29
 80010d8:	4665      	mov	r5, ip
 80010da:	4303      	orrs	r3, r0
 80010dc:	08d1      	lsrs	r1, r2, #3
 80010de:	e655      	b.n	8000d8c <__aeabi_dadd+0x264>
 80010e0:	1ac4      	subs	r4, r0, r3
 80010e2:	45a0      	cmp	r8, r4
 80010e4:	4180      	sbcs	r0, r0
 80010e6:	464b      	mov	r3, r9
 80010e8:	4240      	negs	r0, r0
 80010ea:	1a59      	subs	r1, r3, r1
 80010ec:	1a0b      	subs	r3, r1, r0
 80010ee:	469a      	mov	sl, r3
 80010f0:	4665      	mov	r5, ip
 80010f2:	2601      	movs	r6, #1
 80010f4:	e564      	b.n	8000bc0 <__aeabi_dadd+0x98>
 80010f6:	1a1c      	subs	r4, r3, r0
 80010f8:	464a      	mov	r2, r9
 80010fa:	42a3      	cmp	r3, r4
 80010fc:	4180      	sbcs	r0, r0
 80010fe:	1a8a      	subs	r2, r1, r2
 8001100:	4240      	negs	r0, r0
 8001102:	1a12      	subs	r2, r2, r0
 8001104:	4692      	mov	sl, r2
 8001106:	0212      	lsls	r2, r2, #8
 8001108:	d549      	bpl.n	800119e <__aeabi_dadd+0x676>
 800110a:	4642      	mov	r2, r8
 800110c:	1ad4      	subs	r4, r2, r3
 800110e:	45a0      	cmp	r8, r4
 8001110:	4180      	sbcs	r0, r0
 8001112:	464b      	mov	r3, r9
 8001114:	4240      	negs	r0, r0
 8001116:	1a59      	subs	r1, r3, r1
 8001118:	1a0b      	subs	r3, r1, r0
 800111a:	469a      	mov	sl, r3
 800111c:	4665      	mov	r5, ip
 800111e:	e57f      	b.n	8000c20 <__aeabi_dadd+0xf8>
 8001120:	464b      	mov	r3, r9
 8001122:	464a      	mov	r2, r9
 8001124:	08c0      	lsrs	r0, r0, #3
 8001126:	075b      	lsls	r3, r3, #29
 8001128:	4303      	orrs	r3, r0
 800112a:	08d1      	lsrs	r1, r2, #3
 800112c:	e62b      	b.n	8000d86 <__aeabi_dadd+0x25e>
 800112e:	464a      	mov	r2, r9
 8001130:	08db      	lsrs	r3, r3, #3
 8001132:	4302      	orrs	r2, r0
 8001134:	d138      	bne.n	80011a8 <__aeabi_dadd+0x680>
 8001136:	074a      	lsls	r2, r1, #29
 8001138:	4313      	orrs	r3, r2
 800113a:	08c9      	lsrs	r1, r1, #3
 800113c:	e646      	b.n	8000dcc <__aeabi_dadd+0x2a4>
 800113e:	464b      	mov	r3, r9
 8001140:	464a      	mov	r2, r9
 8001142:	08c0      	lsrs	r0, r0, #3
 8001144:	075b      	lsls	r3, r3, #29
 8001146:	4303      	orrs	r3, r0
 8001148:	08d1      	lsrs	r1, r2, #3
 800114a:	e61f      	b.n	8000d8c <__aeabi_dadd+0x264>
 800114c:	181c      	adds	r4, r3, r0
 800114e:	429c      	cmp	r4, r3
 8001150:	419b      	sbcs	r3, r3
 8001152:	4449      	add	r1, r9
 8001154:	468a      	mov	sl, r1
 8001156:	425b      	negs	r3, r3
 8001158:	449a      	add	sl, r3
 800115a:	4653      	mov	r3, sl
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	d400      	bmi.n	8001162 <__aeabi_dadd+0x63a>
 8001160:	e607      	b.n	8000d72 <__aeabi_dadd+0x24a>
 8001162:	4652      	mov	r2, sl
 8001164:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <__aeabi_dadd+0x6bc>)
 8001166:	2601      	movs	r6, #1
 8001168:	401a      	ands	r2, r3
 800116a:	4692      	mov	sl, r2
 800116c:	e601      	b.n	8000d72 <__aeabi_dadd+0x24a>
 800116e:	003c      	movs	r4, r7
 8001170:	000e      	movs	r6, r1
 8001172:	3c20      	subs	r4, #32
 8001174:	40e6      	lsrs	r6, r4
 8001176:	2f20      	cmp	r7, #32
 8001178:	d003      	beq.n	8001182 <__aeabi_dadd+0x65a>
 800117a:	2440      	movs	r4, #64	; 0x40
 800117c:	1be4      	subs	r4, r4, r7
 800117e:	40a1      	lsls	r1, r4
 8001180:	430b      	orrs	r3, r1
 8001182:	001c      	movs	r4, r3
 8001184:	1e63      	subs	r3, r4, #1
 8001186:	419c      	sbcs	r4, r3
 8001188:	4334      	orrs	r4, r6
 800118a:	e65e      	b.n	8000e4a <__aeabi_dadd+0x322>
 800118c:	4443      	add	r3, r8
 800118e:	4283      	cmp	r3, r0
 8001190:	4180      	sbcs	r0, r0
 8001192:	4449      	add	r1, r9
 8001194:	468a      	mov	sl, r1
 8001196:	4240      	negs	r0, r0
 8001198:	001c      	movs	r4, r3
 800119a:	4482      	add	sl, r0
 800119c:	e6bc      	b.n	8000f18 <__aeabi_dadd+0x3f0>
 800119e:	4653      	mov	r3, sl
 80011a0:	4323      	orrs	r3, r4
 80011a2:	d100      	bne.n	80011a6 <__aeabi_dadd+0x67e>
 80011a4:	e6a9      	b.n	8000efa <__aeabi_dadd+0x3d2>
 80011a6:	e5e4      	b.n	8000d72 <__aeabi_dadd+0x24a>
 80011a8:	074a      	lsls	r2, r1, #29
 80011aa:	4313      	orrs	r3, r2
 80011ac:	2280      	movs	r2, #128	; 0x80
 80011ae:	08c9      	lsrs	r1, r1, #3
 80011b0:	0312      	lsls	r2, r2, #12
 80011b2:	4211      	tst	r1, r2
 80011b4:	d009      	beq.n	80011ca <__aeabi_dadd+0x6a2>
 80011b6:	4648      	mov	r0, r9
 80011b8:	08c4      	lsrs	r4, r0, #3
 80011ba:	4214      	tst	r4, r2
 80011bc:	d105      	bne.n	80011ca <__aeabi_dadd+0x6a2>
 80011be:	4643      	mov	r3, r8
 80011c0:	4665      	mov	r5, ip
 80011c2:	0021      	movs	r1, r4
 80011c4:	08db      	lsrs	r3, r3, #3
 80011c6:	0742      	lsls	r2, r0, #29
 80011c8:	4313      	orrs	r3, r2
 80011ca:	0f5a      	lsrs	r2, r3, #29
 80011cc:	00db      	lsls	r3, r3, #3
 80011ce:	08db      	lsrs	r3, r3, #3
 80011d0:	0752      	lsls	r2, r2, #29
 80011d2:	4313      	orrs	r3, r2
 80011d4:	e5fa      	b.n	8000dcc <__aeabi_dadd+0x2a4>
 80011d6:	2300      	movs	r3, #0
 80011d8:	4a01      	ldr	r2, [pc, #4]	; (80011e0 <__aeabi_dadd+0x6b8>)
 80011da:	001c      	movs	r4, r3
 80011dc:	e540      	b.n	8000c60 <__aeabi_dadd+0x138>
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	000007ff 	.word	0x000007ff
 80011e4:	ff7fffff 	.word	0xff7fffff

080011e8 <__aeabi_ddiv>:
 80011e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ea:	4657      	mov	r7, sl
 80011ec:	464e      	mov	r6, r9
 80011ee:	4645      	mov	r5, r8
 80011f0:	46de      	mov	lr, fp
 80011f2:	b5e0      	push	{r5, r6, r7, lr}
 80011f4:	030c      	lsls	r4, r1, #12
 80011f6:	001f      	movs	r7, r3
 80011f8:	004b      	lsls	r3, r1, #1
 80011fa:	4681      	mov	r9, r0
 80011fc:	4692      	mov	sl, r2
 80011fe:	0005      	movs	r5, r0
 8001200:	b085      	sub	sp, #20
 8001202:	0b24      	lsrs	r4, r4, #12
 8001204:	0d5b      	lsrs	r3, r3, #21
 8001206:	0fce      	lsrs	r6, r1, #31
 8001208:	2b00      	cmp	r3, #0
 800120a:	d100      	bne.n	800120e <__aeabi_ddiv+0x26>
 800120c:	e152      	b.n	80014b4 <__aeabi_ddiv+0x2cc>
 800120e:	4ad2      	ldr	r2, [pc, #840]	; (8001558 <__aeabi_ddiv+0x370>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d100      	bne.n	8001216 <__aeabi_ddiv+0x2e>
 8001214:	e16e      	b.n	80014f4 <__aeabi_ddiv+0x30c>
 8001216:	0f42      	lsrs	r2, r0, #29
 8001218:	00e4      	lsls	r4, r4, #3
 800121a:	4314      	orrs	r4, r2
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	0412      	lsls	r2, r2, #16
 8001220:	4322      	orrs	r2, r4
 8001222:	4690      	mov	r8, r2
 8001224:	4acd      	ldr	r2, [pc, #820]	; (800155c <__aeabi_ddiv+0x374>)
 8001226:	00c5      	lsls	r5, r0, #3
 8001228:	4693      	mov	fp, r2
 800122a:	449b      	add	fp, r3
 800122c:	2300      	movs	r3, #0
 800122e:	4699      	mov	r9, r3
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	033c      	lsls	r4, r7, #12
 8001234:	007b      	lsls	r3, r7, #1
 8001236:	4650      	mov	r0, sl
 8001238:	0b24      	lsrs	r4, r4, #12
 800123a:	0d5b      	lsrs	r3, r3, #21
 800123c:	0fff      	lsrs	r7, r7, #31
 800123e:	2b00      	cmp	r3, #0
 8001240:	d100      	bne.n	8001244 <__aeabi_ddiv+0x5c>
 8001242:	e11a      	b.n	800147a <__aeabi_ddiv+0x292>
 8001244:	4ac4      	ldr	r2, [pc, #784]	; (8001558 <__aeabi_ddiv+0x370>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d100      	bne.n	800124c <__aeabi_ddiv+0x64>
 800124a:	e15e      	b.n	800150a <__aeabi_ddiv+0x322>
 800124c:	0f42      	lsrs	r2, r0, #29
 800124e:	00e4      	lsls	r4, r4, #3
 8001250:	4322      	orrs	r2, r4
 8001252:	2480      	movs	r4, #128	; 0x80
 8001254:	0424      	lsls	r4, r4, #16
 8001256:	4314      	orrs	r4, r2
 8001258:	4ac0      	ldr	r2, [pc, #768]	; (800155c <__aeabi_ddiv+0x374>)
 800125a:	00c1      	lsls	r1, r0, #3
 800125c:	4694      	mov	ip, r2
 800125e:	465a      	mov	r2, fp
 8001260:	4463      	add	r3, ip
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	469b      	mov	fp, r3
 8001266:	2000      	movs	r0, #0
 8001268:	0033      	movs	r3, r6
 800126a:	407b      	eors	r3, r7
 800126c:	469a      	mov	sl, r3
 800126e:	464b      	mov	r3, r9
 8001270:	2b0f      	cmp	r3, #15
 8001272:	d827      	bhi.n	80012c4 <__aeabi_ddiv+0xdc>
 8001274:	4aba      	ldr	r2, [pc, #744]	; (8001560 <__aeabi_ddiv+0x378>)
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	58d3      	ldr	r3, [r2, r3]
 800127a:	469f      	mov	pc, r3
 800127c:	46b2      	mov	sl, r6
 800127e:	9b00      	ldr	r3, [sp, #0]
 8001280:	2b02      	cmp	r3, #2
 8001282:	d016      	beq.n	80012b2 <__aeabi_ddiv+0xca>
 8001284:	2b03      	cmp	r3, #3
 8001286:	d100      	bne.n	800128a <__aeabi_ddiv+0xa2>
 8001288:	e287      	b.n	800179a <__aeabi_ddiv+0x5b2>
 800128a:	2b01      	cmp	r3, #1
 800128c:	d000      	beq.n	8001290 <__aeabi_ddiv+0xa8>
 800128e:	e0d5      	b.n	800143c <__aeabi_ddiv+0x254>
 8001290:	2300      	movs	r3, #0
 8001292:	2200      	movs	r2, #0
 8001294:	2500      	movs	r5, #0
 8001296:	051b      	lsls	r3, r3, #20
 8001298:	4313      	orrs	r3, r2
 800129a:	4652      	mov	r2, sl
 800129c:	07d2      	lsls	r2, r2, #31
 800129e:	4313      	orrs	r3, r2
 80012a0:	0028      	movs	r0, r5
 80012a2:	0019      	movs	r1, r3
 80012a4:	b005      	add	sp, #20
 80012a6:	bcf0      	pop	{r4, r5, r6, r7}
 80012a8:	46bb      	mov	fp, r7
 80012aa:	46b2      	mov	sl, r6
 80012ac:	46a9      	mov	r9, r5
 80012ae:	46a0      	mov	r8, r4
 80012b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012b2:	2200      	movs	r2, #0
 80012b4:	2500      	movs	r5, #0
 80012b6:	4ba8      	ldr	r3, [pc, #672]	; (8001558 <__aeabi_ddiv+0x370>)
 80012b8:	e7ed      	b.n	8001296 <__aeabi_ddiv+0xae>
 80012ba:	46ba      	mov	sl, r7
 80012bc:	46a0      	mov	r8, r4
 80012be:	000d      	movs	r5, r1
 80012c0:	9000      	str	r0, [sp, #0]
 80012c2:	e7dc      	b.n	800127e <__aeabi_ddiv+0x96>
 80012c4:	4544      	cmp	r4, r8
 80012c6:	d200      	bcs.n	80012ca <__aeabi_ddiv+0xe2>
 80012c8:	e1c4      	b.n	8001654 <__aeabi_ddiv+0x46c>
 80012ca:	d100      	bne.n	80012ce <__aeabi_ddiv+0xe6>
 80012cc:	e1bf      	b.n	800164e <__aeabi_ddiv+0x466>
 80012ce:	2301      	movs	r3, #1
 80012d0:	425b      	negs	r3, r3
 80012d2:	469c      	mov	ip, r3
 80012d4:	002e      	movs	r6, r5
 80012d6:	4640      	mov	r0, r8
 80012d8:	2500      	movs	r5, #0
 80012da:	44e3      	add	fp, ip
 80012dc:	0223      	lsls	r3, r4, #8
 80012de:	0e0c      	lsrs	r4, r1, #24
 80012e0:	431c      	orrs	r4, r3
 80012e2:	0c1b      	lsrs	r3, r3, #16
 80012e4:	4699      	mov	r9, r3
 80012e6:	0423      	lsls	r3, r4, #16
 80012e8:	020a      	lsls	r2, r1, #8
 80012ea:	0c1f      	lsrs	r7, r3, #16
 80012ec:	4649      	mov	r1, r9
 80012ee:	9200      	str	r2, [sp, #0]
 80012f0:	9701      	str	r7, [sp, #4]
 80012f2:	f7fe ff99 	bl	8000228 <__aeabi_uidivmod>
 80012f6:	0002      	movs	r2, r0
 80012f8:	437a      	muls	r2, r7
 80012fa:	040b      	lsls	r3, r1, #16
 80012fc:	0c31      	lsrs	r1, r6, #16
 80012fe:	4680      	mov	r8, r0
 8001300:	4319      	orrs	r1, r3
 8001302:	428a      	cmp	r2, r1
 8001304:	d907      	bls.n	8001316 <__aeabi_ddiv+0x12e>
 8001306:	2301      	movs	r3, #1
 8001308:	425b      	negs	r3, r3
 800130a:	469c      	mov	ip, r3
 800130c:	1909      	adds	r1, r1, r4
 800130e:	44e0      	add	r8, ip
 8001310:	428c      	cmp	r4, r1
 8001312:	d800      	bhi.n	8001316 <__aeabi_ddiv+0x12e>
 8001314:	e201      	b.n	800171a <__aeabi_ddiv+0x532>
 8001316:	1a88      	subs	r0, r1, r2
 8001318:	4649      	mov	r1, r9
 800131a:	f7fe ff85 	bl	8000228 <__aeabi_uidivmod>
 800131e:	9a01      	ldr	r2, [sp, #4]
 8001320:	0436      	lsls	r6, r6, #16
 8001322:	4342      	muls	r2, r0
 8001324:	0409      	lsls	r1, r1, #16
 8001326:	0c36      	lsrs	r6, r6, #16
 8001328:	0003      	movs	r3, r0
 800132a:	430e      	orrs	r6, r1
 800132c:	42b2      	cmp	r2, r6
 800132e:	d904      	bls.n	800133a <__aeabi_ddiv+0x152>
 8001330:	1936      	adds	r6, r6, r4
 8001332:	3b01      	subs	r3, #1
 8001334:	42b4      	cmp	r4, r6
 8001336:	d800      	bhi.n	800133a <__aeabi_ddiv+0x152>
 8001338:	e1e9      	b.n	800170e <__aeabi_ddiv+0x526>
 800133a:	1ab0      	subs	r0, r6, r2
 800133c:	4642      	mov	r2, r8
 800133e:	9e00      	ldr	r6, [sp, #0]
 8001340:	0412      	lsls	r2, r2, #16
 8001342:	431a      	orrs	r2, r3
 8001344:	0c33      	lsrs	r3, r6, #16
 8001346:	001f      	movs	r7, r3
 8001348:	0c11      	lsrs	r1, r2, #16
 800134a:	4690      	mov	r8, r2
 800134c:	9302      	str	r3, [sp, #8]
 800134e:	0413      	lsls	r3, r2, #16
 8001350:	0432      	lsls	r2, r6, #16
 8001352:	0c16      	lsrs	r6, r2, #16
 8001354:	0032      	movs	r2, r6
 8001356:	0c1b      	lsrs	r3, r3, #16
 8001358:	435a      	muls	r2, r3
 800135a:	9603      	str	r6, [sp, #12]
 800135c:	437b      	muls	r3, r7
 800135e:	434e      	muls	r6, r1
 8001360:	4379      	muls	r1, r7
 8001362:	0c17      	lsrs	r7, r2, #16
 8001364:	46bc      	mov	ip, r7
 8001366:	199b      	adds	r3, r3, r6
 8001368:	4463      	add	r3, ip
 800136a:	429e      	cmp	r6, r3
 800136c:	d903      	bls.n	8001376 <__aeabi_ddiv+0x18e>
 800136e:	2680      	movs	r6, #128	; 0x80
 8001370:	0276      	lsls	r6, r6, #9
 8001372:	46b4      	mov	ip, r6
 8001374:	4461      	add	r1, ip
 8001376:	0c1e      	lsrs	r6, r3, #16
 8001378:	1871      	adds	r1, r6, r1
 800137a:	0416      	lsls	r6, r2, #16
 800137c:	041b      	lsls	r3, r3, #16
 800137e:	0c36      	lsrs	r6, r6, #16
 8001380:	199e      	adds	r6, r3, r6
 8001382:	4288      	cmp	r0, r1
 8001384:	d302      	bcc.n	800138c <__aeabi_ddiv+0x1a4>
 8001386:	d112      	bne.n	80013ae <__aeabi_ddiv+0x1c6>
 8001388:	42b5      	cmp	r5, r6
 800138a:	d210      	bcs.n	80013ae <__aeabi_ddiv+0x1c6>
 800138c:	4643      	mov	r3, r8
 800138e:	1e5a      	subs	r2, r3, #1
 8001390:	9b00      	ldr	r3, [sp, #0]
 8001392:	469c      	mov	ip, r3
 8001394:	4465      	add	r5, ip
 8001396:	001f      	movs	r7, r3
 8001398:	429d      	cmp	r5, r3
 800139a:	419b      	sbcs	r3, r3
 800139c:	425b      	negs	r3, r3
 800139e:	191b      	adds	r3, r3, r4
 80013a0:	18c0      	adds	r0, r0, r3
 80013a2:	4284      	cmp	r4, r0
 80013a4:	d200      	bcs.n	80013a8 <__aeabi_ddiv+0x1c0>
 80013a6:	e19e      	b.n	80016e6 <__aeabi_ddiv+0x4fe>
 80013a8:	d100      	bne.n	80013ac <__aeabi_ddiv+0x1c4>
 80013aa:	e199      	b.n	80016e0 <__aeabi_ddiv+0x4f8>
 80013ac:	4690      	mov	r8, r2
 80013ae:	1bae      	subs	r6, r5, r6
 80013b0:	42b5      	cmp	r5, r6
 80013b2:	41ad      	sbcs	r5, r5
 80013b4:	1a40      	subs	r0, r0, r1
 80013b6:	426d      	negs	r5, r5
 80013b8:	1b40      	subs	r0, r0, r5
 80013ba:	4284      	cmp	r4, r0
 80013bc:	d100      	bne.n	80013c0 <__aeabi_ddiv+0x1d8>
 80013be:	e1d2      	b.n	8001766 <__aeabi_ddiv+0x57e>
 80013c0:	4649      	mov	r1, r9
 80013c2:	f7fe ff31 	bl	8000228 <__aeabi_uidivmod>
 80013c6:	9a01      	ldr	r2, [sp, #4]
 80013c8:	040b      	lsls	r3, r1, #16
 80013ca:	4342      	muls	r2, r0
 80013cc:	0c31      	lsrs	r1, r6, #16
 80013ce:	0005      	movs	r5, r0
 80013d0:	4319      	orrs	r1, r3
 80013d2:	428a      	cmp	r2, r1
 80013d4:	d900      	bls.n	80013d8 <__aeabi_ddiv+0x1f0>
 80013d6:	e16c      	b.n	80016b2 <__aeabi_ddiv+0x4ca>
 80013d8:	1a88      	subs	r0, r1, r2
 80013da:	4649      	mov	r1, r9
 80013dc:	f7fe ff24 	bl	8000228 <__aeabi_uidivmod>
 80013e0:	9a01      	ldr	r2, [sp, #4]
 80013e2:	0436      	lsls	r6, r6, #16
 80013e4:	4342      	muls	r2, r0
 80013e6:	0409      	lsls	r1, r1, #16
 80013e8:	0c36      	lsrs	r6, r6, #16
 80013ea:	0003      	movs	r3, r0
 80013ec:	430e      	orrs	r6, r1
 80013ee:	42b2      	cmp	r2, r6
 80013f0:	d900      	bls.n	80013f4 <__aeabi_ddiv+0x20c>
 80013f2:	e153      	b.n	800169c <__aeabi_ddiv+0x4b4>
 80013f4:	9803      	ldr	r0, [sp, #12]
 80013f6:	1ab6      	subs	r6, r6, r2
 80013f8:	0002      	movs	r2, r0
 80013fa:	042d      	lsls	r5, r5, #16
 80013fc:	431d      	orrs	r5, r3
 80013fe:	9f02      	ldr	r7, [sp, #8]
 8001400:	042b      	lsls	r3, r5, #16
 8001402:	0c1b      	lsrs	r3, r3, #16
 8001404:	435a      	muls	r2, r3
 8001406:	437b      	muls	r3, r7
 8001408:	469c      	mov	ip, r3
 800140a:	0c29      	lsrs	r1, r5, #16
 800140c:	4348      	muls	r0, r1
 800140e:	0c13      	lsrs	r3, r2, #16
 8001410:	4484      	add	ip, r0
 8001412:	4463      	add	r3, ip
 8001414:	4379      	muls	r1, r7
 8001416:	4298      	cmp	r0, r3
 8001418:	d903      	bls.n	8001422 <__aeabi_ddiv+0x23a>
 800141a:	2080      	movs	r0, #128	; 0x80
 800141c:	0240      	lsls	r0, r0, #9
 800141e:	4684      	mov	ip, r0
 8001420:	4461      	add	r1, ip
 8001422:	0c18      	lsrs	r0, r3, #16
 8001424:	0412      	lsls	r2, r2, #16
 8001426:	041b      	lsls	r3, r3, #16
 8001428:	0c12      	lsrs	r2, r2, #16
 800142a:	1840      	adds	r0, r0, r1
 800142c:	189b      	adds	r3, r3, r2
 800142e:	4286      	cmp	r6, r0
 8001430:	d200      	bcs.n	8001434 <__aeabi_ddiv+0x24c>
 8001432:	e100      	b.n	8001636 <__aeabi_ddiv+0x44e>
 8001434:	d100      	bne.n	8001438 <__aeabi_ddiv+0x250>
 8001436:	e0fb      	b.n	8001630 <__aeabi_ddiv+0x448>
 8001438:	2301      	movs	r3, #1
 800143a:	431d      	orrs	r5, r3
 800143c:	4b49      	ldr	r3, [pc, #292]	; (8001564 <__aeabi_ddiv+0x37c>)
 800143e:	445b      	add	r3, fp
 8001440:	2b00      	cmp	r3, #0
 8001442:	dc00      	bgt.n	8001446 <__aeabi_ddiv+0x25e>
 8001444:	e0aa      	b.n	800159c <__aeabi_ddiv+0x3b4>
 8001446:	076a      	lsls	r2, r5, #29
 8001448:	d000      	beq.n	800144c <__aeabi_ddiv+0x264>
 800144a:	e13d      	b.n	80016c8 <__aeabi_ddiv+0x4e0>
 800144c:	08e9      	lsrs	r1, r5, #3
 800144e:	4642      	mov	r2, r8
 8001450:	01d2      	lsls	r2, r2, #7
 8001452:	d506      	bpl.n	8001462 <__aeabi_ddiv+0x27a>
 8001454:	4642      	mov	r2, r8
 8001456:	4b44      	ldr	r3, [pc, #272]	; (8001568 <__aeabi_ddiv+0x380>)
 8001458:	401a      	ands	r2, r3
 800145a:	2380      	movs	r3, #128	; 0x80
 800145c:	4690      	mov	r8, r2
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	445b      	add	r3, fp
 8001462:	4a42      	ldr	r2, [pc, #264]	; (800156c <__aeabi_ddiv+0x384>)
 8001464:	4293      	cmp	r3, r2
 8001466:	dd00      	ble.n	800146a <__aeabi_ddiv+0x282>
 8001468:	e723      	b.n	80012b2 <__aeabi_ddiv+0xca>
 800146a:	4642      	mov	r2, r8
 800146c:	055b      	lsls	r3, r3, #21
 800146e:	0755      	lsls	r5, r2, #29
 8001470:	0252      	lsls	r2, r2, #9
 8001472:	430d      	orrs	r5, r1
 8001474:	0b12      	lsrs	r2, r2, #12
 8001476:	0d5b      	lsrs	r3, r3, #21
 8001478:	e70d      	b.n	8001296 <__aeabi_ddiv+0xae>
 800147a:	4651      	mov	r1, sl
 800147c:	4321      	orrs	r1, r4
 800147e:	d100      	bne.n	8001482 <__aeabi_ddiv+0x29a>
 8001480:	e07c      	b.n	800157c <__aeabi_ddiv+0x394>
 8001482:	2c00      	cmp	r4, #0
 8001484:	d100      	bne.n	8001488 <__aeabi_ddiv+0x2a0>
 8001486:	e0fb      	b.n	8001680 <__aeabi_ddiv+0x498>
 8001488:	0020      	movs	r0, r4
 800148a:	f000 fa51 	bl	8001930 <__clzsi2>
 800148e:	0002      	movs	r2, r0
 8001490:	3a0b      	subs	r2, #11
 8001492:	231d      	movs	r3, #29
 8001494:	1a9b      	subs	r3, r3, r2
 8001496:	4652      	mov	r2, sl
 8001498:	0001      	movs	r1, r0
 800149a:	40da      	lsrs	r2, r3
 800149c:	4653      	mov	r3, sl
 800149e:	3908      	subs	r1, #8
 80014a0:	408b      	lsls	r3, r1
 80014a2:	408c      	lsls	r4, r1
 80014a4:	0019      	movs	r1, r3
 80014a6:	4314      	orrs	r4, r2
 80014a8:	4b31      	ldr	r3, [pc, #196]	; (8001570 <__aeabi_ddiv+0x388>)
 80014aa:	4458      	add	r0, fp
 80014ac:	469b      	mov	fp, r3
 80014ae:	4483      	add	fp, r0
 80014b0:	2000      	movs	r0, #0
 80014b2:	e6d9      	b.n	8001268 <__aeabi_ddiv+0x80>
 80014b4:	0003      	movs	r3, r0
 80014b6:	4323      	orrs	r3, r4
 80014b8:	4698      	mov	r8, r3
 80014ba:	d044      	beq.n	8001546 <__aeabi_ddiv+0x35e>
 80014bc:	2c00      	cmp	r4, #0
 80014be:	d100      	bne.n	80014c2 <__aeabi_ddiv+0x2da>
 80014c0:	e0cf      	b.n	8001662 <__aeabi_ddiv+0x47a>
 80014c2:	0020      	movs	r0, r4
 80014c4:	f000 fa34 	bl	8001930 <__clzsi2>
 80014c8:	0001      	movs	r1, r0
 80014ca:	0002      	movs	r2, r0
 80014cc:	390b      	subs	r1, #11
 80014ce:	231d      	movs	r3, #29
 80014d0:	1a5b      	subs	r3, r3, r1
 80014d2:	4649      	mov	r1, r9
 80014d4:	0010      	movs	r0, r2
 80014d6:	40d9      	lsrs	r1, r3
 80014d8:	3808      	subs	r0, #8
 80014da:	4084      	lsls	r4, r0
 80014dc:	000b      	movs	r3, r1
 80014de:	464d      	mov	r5, r9
 80014e0:	4323      	orrs	r3, r4
 80014e2:	4698      	mov	r8, r3
 80014e4:	4085      	lsls	r5, r0
 80014e6:	4b23      	ldr	r3, [pc, #140]	; (8001574 <__aeabi_ddiv+0x38c>)
 80014e8:	1a9b      	subs	r3, r3, r2
 80014ea:	469b      	mov	fp, r3
 80014ec:	2300      	movs	r3, #0
 80014ee:	4699      	mov	r9, r3
 80014f0:	9300      	str	r3, [sp, #0]
 80014f2:	e69e      	b.n	8001232 <__aeabi_ddiv+0x4a>
 80014f4:	0002      	movs	r2, r0
 80014f6:	4322      	orrs	r2, r4
 80014f8:	4690      	mov	r8, r2
 80014fa:	d11d      	bne.n	8001538 <__aeabi_ddiv+0x350>
 80014fc:	2208      	movs	r2, #8
 80014fe:	469b      	mov	fp, r3
 8001500:	2302      	movs	r3, #2
 8001502:	2500      	movs	r5, #0
 8001504:	4691      	mov	r9, r2
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	e693      	b.n	8001232 <__aeabi_ddiv+0x4a>
 800150a:	4651      	mov	r1, sl
 800150c:	4321      	orrs	r1, r4
 800150e:	d109      	bne.n	8001524 <__aeabi_ddiv+0x33c>
 8001510:	2302      	movs	r3, #2
 8001512:	464a      	mov	r2, r9
 8001514:	431a      	orrs	r2, r3
 8001516:	4b18      	ldr	r3, [pc, #96]	; (8001578 <__aeabi_ddiv+0x390>)
 8001518:	4691      	mov	r9, r2
 800151a:	469c      	mov	ip, r3
 800151c:	2400      	movs	r4, #0
 800151e:	2002      	movs	r0, #2
 8001520:	44e3      	add	fp, ip
 8001522:	e6a1      	b.n	8001268 <__aeabi_ddiv+0x80>
 8001524:	2303      	movs	r3, #3
 8001526:	464a      	mov	r2, r9
 8001528:	431a      	orrs	r2, r3
 800152a:	4b13      	ldr	r3, [pc, #76]	; (8001578 <__aeabi_ddiv+0x390>)
 800152c:	4691      	mov	r9, r2
 800152e:	469c      	mov	ip, r3
 8001530:	4651      	mov	r1, sl
 8001532:	2003      	movs	r0, #3
 8001534:	44e3      	add	fp, ip
 8001536:	e697      	b.n	8001268 <__aeabi_ddiv+0x80>
 8001538:	220c      	movs	r2, #12
 800153a:	469b      	mov	fp, r3
 800153c:	2303      	movs	r3, #3
 800153e:	46a0      	mov	r8, r4
 8001540:	4691      	mov	r9, r2
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	e675      	b.n	8001232 <__aeabi_ddiv+0x4a>
 8001546:	2304      	movs	r3, #4
 8001548:	4699      	mov	r9, r3
 800154a:	2300      	movs	r3, #0
 800154c:	469b      	mov	fp, r3
 800154e:	3301      	adds	r3, #1
 8001550:	2500      	movs	r5, #0
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	e66d      	b.n	8001232 <__aeabi_ddiv+0x4a>
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	000007ff 	.word	0x000007ff
 800155c:	fffffc01 	.word	0xfffffc01
 8001560:	08006a28 	.word	0x08006a28
 8001564:	000003ff 	.word	0x000003ff
 8001568:	feffffff 	.word	0xfeffffff
 800156c:	000007fe 	.word	0x000007fe
 8001570:	000003f3 	.word	0x000003f3
 8001574:	fffffc0d 	.word	0xfffffc0d
 8001578:	fffff801 	.word	0xfffff801
 800157c:	464a      	mov	r2, r9
 800157e:	2301      	movs	r3, #1
 8001580:	431a      	orrs	r2, r3
 8001582:	4691      	mov	r9, r2
 8001584:	2400      	movs	r4, #0
 8001586:	2001      	movs	r0, #1
 8001588:	e66e      	b.n	8001268 <__aeabi_ddiv+0x80>
 800158a:	2300      	movs	r3, #0
 800158c:	2280      	movs	r2, #128	; 0x80
 800158e:	469a      	mov	sl, r3
 8001590:	2500      	movs	r5, #0
 8001592:	4b88      	ldr	r3, [pc, #544]	; (80017b4 <__aeabi_ddiv+0x5cc>)
 8001594:	0312      	lsls	r2, r2, #12
 8001596:	e67e      	b.n	8001296 <__aeabi_ddiv+0xae>
 8001598:	2501      	movs	r5, #1
 800159a:	426d      	negs	r5, r5
 800159c:	2201      	movs	r2, #1
 800159e:	1ad2      	subs	r2, r2, r3
 80015a0:	2a38      	cmp	r2, #56	; 0x38
 80015a2:	dd00      	ble.n	80015a6 <__aeabi_ddiv+0x3be>
 80015a4:	e674      	b.n	8001290 <__aeabi_ddiv+0xa8>
 80015a6:	2a1f      	cmp	r2, #31
 80015a8:	dc00      	bgt.n	80015ac <__aeabi_ddiv+0x3c4>
 80015aa:	e0bd      	b.n	8001728 <__aeabi_ddiv+0x540>
 80015ac:	211f      	movs	r1, #31
 80015ae:	4249      	negs	r1, r1
 80015b0:	1acb      	subs	r3, r1, r3
 80015b2:	4641      	mov	r1, r8
 80015b4:	40d9      	lsrs	r1, r3
 80015b6:	000b      	movs	r3, r1
 80015b8:	2a20      	cmp	r2, #32
 80015ba:	d004      	beq.n	80015c6 <__aeabi_ddiv+0x3de>
 80015bc:	4641      	mov	r1, r8
 80015be:	4a7e      	ldr	r2, [pc, #504]	; (80017b8 <__aeabi_ddiv+0x5d0>)
 80015c0:	445a      	add	r2, fp
 80015c2:	4091      	lsls	r1, r2
 80015c4:	430d      	orrs	r5, r1
 80015c6:	0029      	movs	r1, r5
 80015c8:	1e4a      	subs	r2, r1, #1
 80015ca:	4191      	sbcs	r1, r2
 80015cc:	4319      	orrs	r1, r3
 80015ce:	2307      	movs	r3, #7
 80015d0:	001d      	movs	r5, r3
 80015d2:	2200      	movs	r2, #0
 80015d4:	400d      	ands	r5, r1
 80015d6:	420b      	tst	r3, r1
 80015d8:	d100      	bne.n	80015dc <__aeabi_ddiv+0x3f4>
 80015da:	e0d0      	b.n	800177e <__aeabi_ddiv+0x596>
 80015dc:	220f      	movs	r2, #15
 80015de:	2300      	movs	r3, #0
 80015e0:	400a      	ands	r2, r1
 80015e2:	2a04      	cmp	r2, #4
 80015e4:	d100      	bne.n	80015e8 <__aeabi_ddiv+0x400>
 80015e6:	e0c7      	b.n	8001778 <__aeabi_ddiv+0x590>
 80015e8:	1d0a      	adds	r2, r1, #4
 80015ea:	428a      	cmp	r2, r1
 80015ec:	4189      	sbcs	r1, r1
 80015ee:	4249      	negs	r1, r1
 80015f0:	185b      	adds	r3, r3, r1
 80015f2:	0011      	movs	r1, r2
 80015f4:	021a      	lsls	r2, r3, #8
 80015f6:	d400      	bmi.n	80015fa <__aeabi_ddiv+0x412>
 80015f8:	e0be      	b.n	8001778 <__aeabi_ddiv+0x590>
 80015fa:	2301      	movs	r3, #1
 80015fc:	2200      	movs	r2, #0
 80015fe:	2500      	movs	r5, #0
 8001600:	e649      	b.n	8001296 <__aeabi_ddiv+0xae>
 8001602:	2280      	movs	r2, #128	; 0x80
 8001604:	4643      	mov	r3, r8
 8001606:	0312      	lsls	r2, r2, #12
 8001608:	4213      	tst	r3, r2
 800160a:	d008      	beq.n	800161e <__aeabi_ddiv+0x436>
 800160c:	4214      	tst	r4, r2
 800160e:	d106      	bne.n	800161e <__aeabi_ddiv+0x436>
 8001610:	4322      	orrs	r2, r4
 8001612:	0312      	lsls	r2, r2, #12
 8001614:	46ba      	mov	sl, r7
 8001616:	000d      	movs	r5, r1
 8001618:	4b66      	ldr	r3, [pc, #408]	; (80017b4 <__aeabi_ddiv+0x5cc>)
 800161a:	0b12      	lsrs	r2, r2, #12
 800161c:	e63b      	b.n	8001296 <__aeabi_ddiv+0xae>
 800161e:	2280      	movs	r2, #128	; 0x80
 8001620:	4643      	mov	r3, r8
 8001622:	0312      	lsls	r2, r2, #12
 8001624:	431a      	orrs	r2, r3
 8001626:	0312      	lsls	r2, r2, #12
 8001628:	46b2      	mov	sl, r6
 800162a:	4b62      	ldr	r3, [pc, #392]	; (80017b4 <__aeabi_ddiv+0x5cc>)
 800162c:	0b12      	lsrs	r2, r2, #12
 800162e:	e632      	b.n	8001296 <__aeabi_ddiv+0xae>
 8001630:	2b00      	cmp	r3, #0
 8001632:	d100      	bne.n	8001636 <__aeabi_ddiv+0x44e>
 8001634:	e702      	b.n	800143c <__aeabi_ddiv+0x254>
 8001636:	19a6      	adds	r6, r4, r6
 8001638:	1e6a      	subs	r2, r5, #1
 800163a:	42a6      	cmp	r6, r4
 800163c:	d200      	bcs.n	8001640 <__aeabi_ddiv+0x458>
 800163e:	e089      	b.n	8001754 <__aeabi_ddiv+0x56c>
 8001640:	4286      	cmp	r6, r0
 8001642:	d200      	bcs.n	8001646 <__aeabi_ddiv+0x45e>
 8001644:	e09f      	b.n	8001786 <__aeabi_ddiv+0x59e>
 8001646:	d100      	bne.n	800164a <__aeabi_ddiv+0x462>
 8001648:	e0af      	b.n	80017aa <__aeabi_ddiv+0x5c2>
 800164a:	0015      	movs	r5, r2
 800164c:	e6f4      	b.n	8001438 <__aeabi_ddiv+0x250>
 800164e:	42a9      	cmp	r1, r5
 8001650:	d900      	bls.n	8001654 <__aeabi_ddiv+0x46c>
 8001652:	e63c      	b.n	80012ce <__aeabi_ddiv+0xe6>
 8001654:	4643      	mov	r3, r8
 8001656:	07de      	lsls	r6, r3, #31
 8001658:	0858      	lsrs	r0, r3, #1
 800165a:	086b      	lsrs	r3, r5, #1
 800165c:	431e      	orrs	r6, r3
 800165e:	07ed      	lsls	r5, r5, #31
 8001660:	e63c      	b.n	80012dc <__aeabi_ddiv+0xf4>
 8001662:	f000 f965 	bl	8001930 <__clzsi2>
 8001666:	0001      	movs	r1, r0
 8001668:	0002      	movs	r2, r0
 800166a:	3115      	adds	r1, #21
 800166c:	3220      	adds	r2, #32
 800166e:	291c      	cmp	r1, #28
 8001670:	dc00      	bgt.n	8001674 <__aeabi_ddiv+0x48c>
 8001672:	e72c      	b.n	80014ce <__aeabi_ddiv+0x2e6>
 8001674:	464b      	mov	r3, r9
 8001676:	3808      	subs	r0, #8
 8001678:	4083      	lsls	r3, r0
 800167a:	2500      	movs	r5, #0
 800167c:	4698      	mov	r8, r3
 800167e:	e732      	b.n	80014e6 <__aeabi_ddiv+0x2fe>
 8001680:	f000 f956 	bl	8001930 <__clzsi2>
 8001684:	0003      	movs	r3, r0
 8001686:	001a      	movs	r2, r3
 8001688:	3215      	adds	r2, #21
 800168a:	3020      	adds	r0, #32
 800168c:	2a1c      	cmp	r2, #28
 800168e:	dc00      	bgt.n	8001692 <__aeabi_ddiv+0x4aa>
 8001690:	e6ff      	b.n	8001492 <__aeabi_ddiv+0x2aa>
 8001692:	4654      	mov	r4, sl
 8001694:	3b08      	subs	r3, #8
 8001696:	2100      	movs	r1, #0
 8001698:	409c      	lsls	r4, r3
 800169a:	e705      	b.n	80014a8 <__aeabi_ddiv+0x2c0>
 800169c:	1936      	adds	r6, r6, r4
 800169e:	3b01      	subs	r3, #1
 80016a0:	42b4      	cmp	r4, r6
 80016a2:	d900      	bls.n	80016a6 <__aeabi_ddiv+0x4be>
 80016a4:	e6a6      	b.n	80013f4 <__aeabi_ddiv+0x20c>
 80016a6:	42b2      	cmp	r2, r6
 80016a8:	d800      	bhi.n	80016ac <__aeabi_ddiv+0x4c4>
 80016aa:	e6a3      	b.n	80013f4 <__aeabi_ddiv+0x20c>
 80016ac:	1e83      	subs	r3, r0, #2
 80016ae:	1936      	adds	r6, r6, r4
 80016b0:	e6a0      	b.n	80013f4 <__aeabi_ddiv+0x20c>
 80016b2:	1909      	adds	r1, r1, r4
 80016b4:	3d01      	subs	r5, #1
 80016b6:	428c      	cmp	r4, r1
 80016b8:	d900      	bls.n	80016bc <__aeabi_ddiv+0x4d4>
 80016ba:	e68d      	b.n	80013d8 <__aeabi_ddiv+0x1f0>
 80016bc:	428a      	cmp	r2, r1
 80016be:	d800      	bhi.n	80016c2 <__aeabi_ddiv+0x4da>
 80016c0:	e68a      	b.n	80013d8 <__aeabi_ddiv+0x1f0>
 80016c2:	1e85      	subs	r5, r0, #2
 80016c4:	1909      	adds	r1, r1, r4
 80016c6:	e687      	b.n	80013d8 <__aeabi_ddiv+0x1f0>
 80016c8:	220f      	movs	r2, #15
 80016ca:	402a      	ands	r2, r5
 80016cc:	2a04      	cmp	r2, #4
 80016ce:	d100      	bne.n	80016d2 <__aeabi_ddiv+0x4ea>
 80016d0:	e6bc      	b.n	800144c <__aeabi_ddiv+0x264>
 80016d2:	1d29      	adds	r1, r5, #4
 80016d4:	42a9      	cmp	r1, r5
 80016d6:	41ad      	sbcs	r5, r5
 80016d8:	426d      	negs	r5, r5
 80016da:	08c9      	lsrs	r1, r1, #3
 80016dc:	44a8      	add	r8, r5
 80016de:	e6b6      	b.n	800144e <__aeabi_ddiv+0x266>
 80016e0:	42af      	cmp	r7, r5
 80016e2:	d900      	bls.n	80016e6 <__aeabi_ddiv+0x4fe>
 80016e4:	e662      	b.n	80013ac <__aeabi_ddiv+0x1c4>
 80016e6:	4281      	cmp	r1, r0
 80016e8:	d804      	bhi.n	80016f4 <__aeabi_ddiv+0x50c>
 80016ea:	d000      	beq.n	80016ee <__aeabi_ddiv+0x506>
 80016ec:	e65e      	b.n	80013ac <__aeabi_ddiv+0x1c4>
 80016ee:	42ae      	cmp	r6, r5
 80016f0:	d800      	bhi.n	80016f4 <__aeabi_ddiv+0x50c>
 80016f2:	e65b      	b.n	80013ac <__aeabi_ddiv+0x1c4>
 80016f4:	2302      	movs	r3, #2
 80016f6:	425b      	negs	r3, r3
 80016f8:	469c      	mov	ip, r3
 80016fa:	9b00      	ldr	r3, [sp, #0]
 80016fc:	44e0      	add	r8, ip
 80016fe:	469c      	mov	ip, r3
 8001700:	4465      	add	r5, ip
 8001702:	429d      	cmp	r5, r3
 8001704:	419b      	sbcs	r3, r3
 8001706:	425b      	negs	r3, r3
 8001708:	191b      	adds	r3, r3, r4
 800170a:	18c0      	adds	r0, r0, r3
 800170c:	e64f      	b.n	80013ae <__aeabi_ddiv+0x1c6>
 800170e:	42b2      	cmp	r2, r6
 8001710:	d800      	bhi.n	8001714 <__aeabi_ddiv+0x52c>
 8001712:	e612      	b.n	800133a <__aeabi_ddiv+0x152>
 8001714:	1e83      	subs	r3, r0, #2
 8001716:	1936      	adds	r6, r6, r4
 8001718:	e60f      	b.n	800133a <__aeabi_ddiv+0x152>
 800171a:	428a      	cmp	r2, r1
 800171c:	d800      	bhi.n	8001720 <__aeabi_ddiv+0x538>
 800171e:	e5fa      	b.n	8001316 <__aeabi_ddiv+0x12e>
 8001720:	1e83      	subs	r3, r0, #2
 8001722:	4698      	mov	r8, r3
 8001724:	1909      	adds	r1, r1, r4
 8001726:	e5f6      	b.n	8001316 <__aeabi_ddiv+0x12e>
 8001728:	4b24      	ldr	r3, [pc, #144]	; (80017bc <__aeabi_ddiv+0x5d4>)
 800172a:	0028      	movs	r0, r5
 800172c:	445b      	add	r3, fp
 800172e:	4641      	mov	r1, r8
 8001730:	409d      	lsls	r5, r3
 8001732:	4099      	lsls	r1, r3
 8001734:	40d0      	lsrs	r0, r2
 8001736:	1e6b      	subs	r3, r5, #1
 8001738:	419d      	sbcs	r5, r3
 800173a:	4643      	mov	r3, r8
 800173c:	4301      	orrs	r1, r0
 800173e:	4329      	orrs	r1, r5
 8001740:	40d3      	lsrs	r3, r2
 8001742:	074a      	lsls	r2, r1, #29
 8001744:	d100      	bne.n	8001748 <__aeabi_ddiv+0x560>
 8001746:	e755      	b.n	80015f4 <__aeabi_ddiv+0x40c>
 8001748:	220f      	movs	r2, #15
 800174a:	400a      	ands	r2, r1
 800174c:	2a04      	cmp	r2, #4
 800174e:	d000      	beq.n	8001752 <__aeabi_ddiv+0x56a>
 8001750:	e74a      	b.n	80015e8 <__aeabi_ddiv+0x400>
 8001752:	e74f      	b.n	80015f4 <__aeabi_ddiv+0x40c>
 8001754:	0015      	movs	r5, r2
 8001756:	4286      	cmp	r6, r0
 8001758:	d000      	beq.n	800175c <__aeabi_ddiv+0x574>
 800175a:	e66d      	b.n	8001438 <__aeabi_ddiv+0x250>
 800175c:	9a00      	ldr	r2, [sp, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	d000      	beq.n	8001764 <__aeabi_ddiv+0x57c>
 8001762:	e669      	b.n	8001438 <__aeabi_ddiv+0x250>
 8001764:	e66a      	b.n	800143c <__aeabi_ddiv+0x254>
 8001766:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <__aeabi_ddiv+0x5d8>)
 8001768:	445b      	add	r3, fp
 800176a:	2b00      	cmp	r3, #0
 800176c:	dc00      	bgt.n	8001770 <__aeabi_ddiv+0x588>
 800176e:	e713      	b.n	8001598 <__aeabi_ddiv+0x3b0>
 8001770:	2501      	movs	r5, #1
 8001772:	2100      	movs	r1, #0
 8001774:	44a8      	add	r8, r5
 8001776:	e66a      	b.n	800144e <__aeabi_ddiv+0x266>
 8001778:	075d      	lsls	r5, r3, #29
 800177a:	025b      	lsls	r3, r3, #9
 800177c:	0b1a      	lsrs	r2, r3, #12
 800177e:	08c9      	lsrs	r1, r1, #3
 8001780:	2300      	movs	r3, #0
 8001782:	430d      	orrs	r5, r1
 8001784:	e587      	b.n	8001296 <__aeabi_ddiv+0xae>
 8001786:	9900      	ldr	r1, [sp, #0]
 8001788:	3d02      	subs	r5, #2
 800178a:	004a      	lsls	r2, r1, #1
 800178c:	428a      	cmp	r2, r1
 800178e:	41bf      	sbcs	r7, r7
 8001790:	427f      	negs	r7, r7
 8001792:	193f      	adds	r7, r7, r4
 8001794:	19f6      	adds	r6, r6, r7
 8001796:	9200      	str	r2, [sp, #0]
 8001798:	e7dd      	b.n	8001756 <__aeabi_ddiv+0x56e>
 800179a:	2280      	movs	r2, #128	; 0x80
 800179c:	4643      	mov	r3, r8
 800179e:	0312      	lsls	r2, r2, #12
 80017a0:	431a      	orrs	r2, r3
 80017a2:	0312      	lsls	r2, r2, #12
 80017a4:	4b03      	ldr	r3, [pc, #12]	; (80017b4 <__aeabi_ddiv+0x5cc>)
 80017a6:	0b12      	lsrs	r2, r2, #12
 80017a8:	e575      	b.n	8001296 <__aeabi_ddiv+0xae>
 80017aa:	9900      	ldr	r1, [sp, #0]
 80017ac:	4299      	cmp	r1, r3
 80017ae:	d3ea      	bcc.n	8001786 <__aeabi_ddiv+0x59e>
 80017b0:	0015      	movs	r5, r2
 80017b2:	e7d3      	b.n	800175c <__aeabi_ddiv+0x574>
 80017b4:	000007ff 	.word	0x000007ff
 80017b8:	0000043e 	.word	0x0000043e
 80017bc:	0000041e 	.word	0x0000041e
 80017c0:	000003ff 	.word	0x000003ff

080017c4 <__aeabi_i2d>:
 80017c4:	b570      	push	{r4, r5, r6, lr}
 80017c6:	2800      	cmp	r0, #0
 80017c8:	d016      	beq.n	80017f8 <__aeabi_i2d+0x34>
 80017ca:	17c3      	asrs	r3, r0, #31
 80017cc:	18c5      	adds	r5, r0, r3
 80017ce:	405d      	eors	r5, r3
 80017d0:	0fc4      	lsrs	r4, r0, #31
 80017d2:	0028      	movs	r0, r5
 80017d4:	f000 f8ac 	bl	8001930 <__clzsi2>
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <__aeabi_i2d+0x5c>)
 80017da:	1a1b      	subs	r3, r3, r0
 80017dc:	280a      	cmp	r0, #10
 80017de:	dc16      	bgt.n	800180e <__aeabi_i2d+0x4a>
 80017e0:	0002      	movs	r2, r0
 80017e2:	002e      	movs	r6, r5
 80017e4:	3215      	adds	r2, #21
 80017e6:	4096      	lsls	r6, r2
 80017e8:	220b      	movs	r2, #11
 80017ea:	1a12      	subs	r2, r2, r0
 80017ec:	40d5      	lsrs	r5, r2
 80017ee:	055b      	lsls	r3, r3, #21
 80017f0:	032d      	lsls	r5, r5, #12
 80017f2:	0b2d      	lsrs	r5, r5, #12
 80017f4:	0d5b      	lsrs	r3, r3, #21
 80017f6:	e003      	b.n	8001800 <__aeabi_i2d+0x3c>
 80017f8:	2400      	movs	r4, #0
 80017fa:	2300      	movs	r3, #0
 80017fc:	2500      	movs	r5, #0
 80017fe:	2600      	movs	r6, #0
 8001800:	051b      	lsls	r3, r3, #20
 8001802:	432b      	orrs	r3, r5
 8001804:	07e4      	lsls	r4, r4, #31
 8001806:	4323      	orrs	r3, r4
 8001808:	0030      	movs	r0, r6
 800180a:	0019      	movs	r1, r3
 800180c:	bd70      	pop	{r4, r5, r6, pc}
 800180e:	380b      	subs	r0, #11
 8001810:	4085      	lsls	r5, r0
 8001812:	055b      	lsls	r3, r3, #21
 8001814:	032d      	lsls	r5, r5, #12
 8001816:	2600      	movs	r6, #0
 8001818:	0b2d      	lsrs	r5, r5, #12
 800181a:	0d5b      	lsrs	r3, r3, #21
 800181c:	e7f0      	b.n	8001800 <__aeabi_i2d+0x3c>
 800181e:	46c0      	nop			; (mov r8, r8)
 8001820:	0000041e 	.word	0x0000041e

08001824 <__aeabi_d2f>:
 8001824:	0002      	movs	r2, r0
 8001826:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001828:	004b      	lsls	r3, r1, #1
 800182a:	030d      	lsls	r5, r1, #12
 800182c:	0f40      	lsrs	r0, r0, #29
 800182e:	0d5b      	lsrs	r3, r3, #21
 8001830:	0fcc      	lsrs	r4, r1, #31
 8001832:	0a6d      	lsrs	r5, r5, #9
 8001834:	493a      	ldr	r1, [pc, #232]	; (8001920 <__aeabi_d2f+0xfc>)
 8001836:	4305      	orrs	r5, r0
 8001838:	1c58      	adds	r0, r3, #1
 800183a:	00d7      	lsls	r7, r2, #3
 800183c:	4208      	tst	r0, r1
 800183e:	d00a      	beq.n	8001856 <__aeabi_d2f+0x32>
 8001840:	4938      	ldr	r1, [pc, #224]	; (8001924 <__aeabi_d2f+0x100>)
 8001842:	1859      	adds	r1, r3, r1
 8001844:	29fe      	cmp	r1, #254	; 0xfe
 8001846:	dd16      	ble.n	8001876 <__aeabi_d2f+0x52>
 8001848:	20ff      	movs	r0, #255	; 0xff
 800184a:	2200      	movs	r2, #0
 800184c:	05c0      	lsls	r0, r0, #23
 800184e:	4310      	orrs	r0, r2
 8001850:	07e4      	lsls	r4, r4, #31
 8001852:	4320      	orrs	r0, r4
 8001854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001856:	2b00      	cmp	r3, #0
 8001858:	d106      	bne.n	8001868 <__aeabi_d2f+0x44>
 800185a:	433d      	orrs	r5, r7
 800185c:	d026      	beq.n	80018ac <__aeabi_d2f+0x88>
 800185e:	2205      	movs	r2, #5
 8001860:	0192      	lsls	r2, r2, #6
 8001862:	0a52      	lsrs	r2, r2, #9
 8001864:	b2d8      	uxtb	r0, r3
 8001866:	e7f1      	b.n	800184c <__aeabi_d2f+0x28>
 8001868:	432f      	orrs	r7, r5
 800186a:	d0ed      	beq.n	8001848 <__aeabi_d2f+0x24>
 800186c:	2280      	movs	r2, #128	; 0x80
 800186e:	03d2      	lsls	r2, r2, #15
 8001870:	20ff      	movs	r0, #255	; 0xff
 8001872:	432a      	orrs	r2, r5
 8001874:	e7ea      	b.n	800184c <__aeabi_d2f+0x28>
 8001876:	2900      	cmp	r1, #0
 8001878:	dd1b      	ble.n	80018b2 <__aeabi_d2f+0x8e>
 800187a:	0192      	lsls	r2, r2, #6
 800187c:	1e50      	subs	r0, r2, #1
 800187e:	4182      	sbcs	r2, r0
 8001880:	00ed      	lsls	r5, r5, #3
 8001882:	0f7f      	lsrs	r7, r7, #29
 8001884:	432a      	orrs	r2, r5
 8001886:	433a      	orrs	r2, r7
 8001888:	0753      	lsls	r3, r2, #29
 800188a:	d047      	beq.n	800191c <__aeabi_d2f+0xf8>
 800188c:	230f      	movs	r3, #15
 800188e:	4013      	ands	r3, r2
 8001890:	2b04      	cmp	r3, #4
 8001892:	d000      	beq.n	8001896 <__aeabi_d2f+0x72>
 8001894:	3204      	adds	r2, #4
 8001896:	2380      	movs	r3, #128	; 0x80
 8001898:	04db      	lsls	r3, r3, #19
 800189a:	4013      	ands	r3, r2
 800189c:	d03e      	beq.n	800191c <__aeabi_d2f+0xf8>
 800189e:	1c48      	adds	r0, r1, #1
 80018a0:	29fe      	cmp	r1, #254	; 0xfe
 80018a2:	d0d1      	beq.n	8001848 <__aeabi_d2f+0x24>
 80018a4:	0192      	lsls	r2, r2, #6
 80018a6:	0a52      	lsrs	r2, r2, #9
 80018a8:	b2c0      	uxtb	r0, r0
 80018aa:	e7cf      	b.n	800184c <__aeabi_d2f+0x28>
 80018ac:	2000      	movs	r0, #0
 80018ae:	2200      	movs	r2, #0
 80018b0:	e7cc      	b.n	800184c <__aeabi_d2f+0x28>
 80018b2:	000a      	movs	r2, r1
 80018b4:	3217      	adds	r2, #23
 80018b6:	db2f      	blt.n	8001918 <__aeabi_d2f+0xf4>
 80018b8:	2680      	movs	r6, #128	; 0x80
 80018ba:	0436      	lsls	r6, r6, #16
 80018bc:	432e      	orrs	r6, r5
 80018be:	251e      	movs	r5, #30
 80018c0:	1a6d      	subs	r5, r5, r1
 80018c2:	2d1f      	cmp	r5, #31
 80018c4:	dd11      	ble.n	80018ea <__aeabi_d2f+0xc6>
 80018c6:	2202      	movs	r2, #2
 80018c8:	4252      	negs	r2, r2
 80018ca:	1a52      	subs	r2, r2, r1
 80018cc:	0031      	movs	r1, r6
 80018ce:	40d1      	lsrs	r1, r2
 80018d0:	2d20      	cmp	r5, #32
 80018d2:	d004      	beq.n	80018de <__aeabi_d2f+0xba>
 80018d4:	4a14      	ldr	r2, [pc, #80]	; (8001928 <__aeabi_d2f+0x104>)
 80018d6:	4694      	mov	ip, r2
 80018d8:	4463      	add	r3, ip
 80018da:	409e      	lsls	r6, r3
 80018dc:	4337      	orrs	r7, r6
 80018de:	003a      	movs	r2, r7
 80018e0:	1e53      	subs	r3, r2, #1
 80018e2:	419a      	sbcs	r2, r3
 80018e4:	430a      	orrs	r2, r1
 80018e6:	2100      	movs	r1, #0
 80018e8:	e7ce      	b.n	8001888 <__aeabi_d2f+0x64>
 80018ea:	4a10      	ldr	r2, [pc, #64]	; (800192c <__aeabi_d2f+0x108>)
 80018ec:	0038      	movs	r0, r7
 80018ee:	4694      	mov	ip, r2
 80018f0:	4463      	add	r3, ip
 80018f2:	4098      	lsls	r0, r3
 80018f4:	003a      	movs	r2, r7
 80018f6:	1e41      	subs	r1, r0, #1
 80018f8:	4188      	sbcs	r0, r1
 80018fa:	409e      	lsls	r6, r3
 80018fc:	40ea      	lsrs	r2, r5
 80018fe:	4330      	orrs	r0, r6
 8001900:	4302      	orrs	r2, r0
 8001902:	2100      	movs	r1, #0
 8001904:	0753      	lsls	r3, r2, #29
 8001906:	d1c1      	bne.n	800188c <__aeabi_d2f+0x68>
 8001908:	2180      	movs	r1, #128	; 0x80
 800190a:	0013      	movs	r3, r2
 800190c:	04c9      	lsls	r1, r1, #19
 800190e:	2001      	movs	r0, #1
 8001910:	400b      	ands	r3, r1
 8001912:	420a      	tst	r2, r1
 8001914:	d1c6      	bne.n	80018a4 <__aeabi_d2f+0x80>
 8001916:	e7a3      	b.n	8001860 <__aeabi_d2f+0x3c>
 8001918:	2300      	movs	r3, #0
 800191a:	e7a0      	b.n	800185e <__aeabi_d2f+0x3a>
 800191c:	000b      	movs	r3, r1
 800191e:	e79f      	b.n	8001860 <__aeabi_d2f+0x3c>
 8001920:	000007fe 	.word	0x000007fe
 8001924:	fffffc80 	.word	0xfffffc80
 8001928:	fffffca2 	.word	0xfffffca2
 800192c:	fffffc82 	.word	0xfffffc82

08001930 <__clzsi2>:
 8001930:	211c      	movs	r1, #28
 8001932:	2301      	movs	r3, #1
 8001934:	041b      	lsls	r3, r3, #16
 8001936:	4298      	cmp	r0, r3
 8001938:	d301      	bcc.n	800193e <__clzsi2+0xe>
 800193a:	0c00      	lsrs	r0, r0, #16
 800193c:	3910      	subs	r1, #16
 800193e:	0a1b      	lsrs	r3, r3, #8
 8001940:	4298      	cmp	r0, r3
 8001942:	d301      	bcc.n	8001948 <__clzsi2+0x18>
 8001944:	0a00      	lsrs	r0, r0, #8
 8001946:	3908      	subs	r1, #8
 8001948:	091b      	lsrs	r3, r3, #4
 800194a:	4298      	cmp	r0, r3
 800194c:	d301      	bcc.n	8001952 <__clzsi2+0x22>
 800194e:	0900      	lsrs	r0, r0, #4
 8001950:	3904      	subs	r1, #4
 8001952:	a202      	add	r2, pc, #8	; (adr r2, 800195c <__clzsi2+0x2c>)
 8001954:	5c10      	ldrb	r0, [r2, r0]
 8001956:	1840      	adds	r0, r0, r1
 8001958:	4770      	bx	lr
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	02020304 	.word	0x02020304
 8001960:	01010101 	.word	0x01010101
	...

0800196c <__clzdi2>:
 800196c:	b510      	push	{r4, lr}
 800196e:	2900      	cmp	r1, #0
 8001970:	d103      	bne.n	800197a <__clzdi2+0xe>
 8001972:	f7ff ffdd 	bl	8001930 <__clzsi2>
 8001976:	3020      	adds	r0, #32
 8001978:	e002      	b.n	8001980 <__clzdi2+0x14>
 800197a:	0008      	movs	r0, r1
 800197c:	f7ff ffd8 	bl	8001930 <__clzsi2>
 8001980:	bd10      	pop	{r4, pc}
 8001982:	46c0      	nop			; (mov r8, r8)

08001984 <strlen>:
/* USER CODE BEGIN 0 */

int16_t accX, accY, accZ, gyrX, gyrY, gyrZ, tVal;
double temperature = 0.0;

uint16_t strlen(char* str) {
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
	int len = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	60fb      	str	r3, [r7, #12]
	while(*str != '\0') {
 8001990:	e005      	b.n	800199e <strlen+0x1a>
		str++;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3301      	adds	r3, #1
 8001996:	607b      	str	r3, [r7, #4]
		len++;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	3301      	adds	r3, #1
 800199c:	60fb      	str	r3, [r7, #12]
	while(*str != '\0') {
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f5      	bne.n	8001992 <strlen+0xe>
	}
	return len;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	b29b      	uxth	r3, r3
}
 80019aa:	0018      	movs	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	b004      	add	sp, #16
 80019b0:	bd80      	pop	{r7, pc}
	...

080019b4 <uart_send_string>:

void uart_send_string(char *ptr) {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
	  if(HAL_UART_Transmit(&huart2, (uint8_t*)ptr, strlen(ptr), 100) == HAL_OK) {
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	0018      	movs	r0, r3
 80019c0:	f7ff ffe0 	bl	8001984 <strlen>
 80019c4:	0003      	movs	r3, r0
 80019c6:	001a      	movs	r2, r3
 80019c8:	6879      	ldr	r1, [r7, #4]
 80019ca:	480b      	ldr	r0, [pc, #44]	; (80019f8 <uart_send_string+0x44>)
 80019cc:	2364      	movs	r3, #100	; 0x64
 80019ce:	f003 fd63 	bl	8005498 <HAL_UART_Transmit>
 80019d2:	1e03      	subs	r3, r0, #0
 80019d4:	d106      	bne.n	80019e4 <uart_send_string+0x30>
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80019d6:	23a0      	movs	r3, #160	; 0xa0
 80019d8:	05db      	lsls	r3, r3, #23
 80019da:	2120      	movs	r1, #32
 80019dc:	0018      	movs	r0, r3
 80019de:	f001 f8f1 	bl	8002bc4 <HAL_GPIO_TogglePin>
	  } else {
		  while(1) {
			  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		  }
	  }
}
 80019e2:	e006      	b.n	80019f2 <uart_send_string+0x3e>
			  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80019e4:	23a0      	movs	r3, #160	; 0xa0
 80019e6:	05db      	lsls	r3, r3, #23
 80019e8:	2120      	movs	r1, #32
 80019ea:	0018      	movs	r0, r3
 80019ec:	f001 f8ea 	bl	8002bc4 <HAL_GPIO_TogglePin>
 80019f0:	e7f8      	b.n	80019e4 <uart_send_string+0x30>
}
 80019f2:	46bd      	mov	sp, r7
 80019f4:	b002      	add	sp, #8
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	200000cc 	.word	0x200000cc

080019fc <uart_send_temp>:
	char c[20];
	snprintf(c, sizeof(c), "%d  \r\n", *data);
	uart_send_string(c);
}

void uart_send_temp(Temp* temperature) {
 80019fc:	b590      	push	{r4, r7, lr}
 80019fe:	b089      	sub	sp, #36	; 0x24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
	char c[20];
	sprintf(c, "Temp: %d.%d °C \r\n", temperature->t.l, temperature->t.r);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	5e9b      	ldrsh	r3, [r3, r2]
 8001a0a:	001a      	movs	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2102      	movs	r1, #2
 8001a10:	5e5b      	ldrsh	r3, [r3, r1]
 8001a12:	4906      	ldr	r1, [pc, #24]	; (8001a2c <uart_send_temp+0x30>)
 8001a14:	240c      	movs	r4, #12
 8001a16:	1938      	adds	r0, r7, r4
 8001a18:	f004 faa6 	bl	8005f68 <siprintf>
	uart_send_string(c);
 8001a1c:	193b      	adds	r3, r7, r4
 8001a1e:	0018      	movs	r0, r3
 8001a20:	f7ff ffc8 	bl	80019b4 <uart_send_string>
}
 8001a24:	46c0      	nop			; (mov r8, r8)
 8001a26:	46bd      	mov	sp, r7
 8001a28:	b009      	add	sp, #36	; 0x24
 8001a2a:	bd90      	pop	{r4, r7, pc}
 8001a2c:	080068d4 	.word	0x080068d4

08001a30 <uart_send_gyro>:

void uart_send_gyro(Gyro* gyro) {
 8001a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a32:	b0a1      	sub	sp, #132	; 0x84
 8001a34:	af04      	add	r7, sp, #16
 8001a36:	6078      	str	r0, [r7, #4]
	char c[100];
	sprintf(c, "Gyro x: %d.%d ° \r\nGyro y: %d.%d ° \r\nGyro z: %d.%d ° \r\n", gyro->x.l, gyro->x.r, gyro->y.l, gyro->y.r, gyro->z.l, gyro->z.r);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	5e9b      	ldrsh	r3, [r3, r2]
 8001a3e:	001e      	movs	r6, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2202      	movs	r2, #2
 8001a44:	5e9b      	ldrsh	r3, [r3, r2]
 8001a46:	469c      	mov	ip, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2208      	movs	r2, #8
 8001a4c:	5e9b      	ldrsh	r3, [r3, r2]
 8001a4e:	001a      	movs	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	210a      	movs	r1, #10
 8001a54:	5e5b      	ldrsh	r3, [r3, r1]
 8001a56:	001c      	movs	r4, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2110      	movs	r1, #16
 8001a5c:	5e5b      	ldrsh	r3, [r3, r1]
 8001a5e:	001d      	movs	r5, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2112      	movs	r1, #18
 8001a64:	5e5b      	ldrsh	r3, [r3, r1]
 8001a66:	490a      	ldr	r1, [pc, #40]	; (8001a90 <uart_send_gyro+0x60>)
 8001a68:	200c      	movs	r0, #12
 8001a6a:	1838      	adds	r0, r7, r0
 8001a6c:	9303      	str	r3, [sp, #12]
 8001a6e:	9502      	str	r5, [sp, #8]
 8001a70:	9401      	str	r4, [sp, #4]
 8001a72:	9200      	str	r2, [sp, #0]
 8001a74:	4663      	mov	r3, ip
 8001a76:	0032      	movs	r2, r6
 8001a78:	f004 fa76 	bl	8005f68 <siprintf>
	uart_send_string(c);
 8001a7c:	200c      	movs	r0, #12
 8001a7e:	183b      	adds	r3, r7, r0
 8001a80:	0018      	movs	r0, r3
 8001a82:	f7ff ff97 	bl	80019b4 <uart_send_string>
}
 8001a86:	46c0      	nop			; (mov r8, r8)
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	b01d      	add	sp, #116	; 0x74
 8001a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a8e:	46c0      	nop			; (mov r8, r8)
 8001a90:	080068e8 	.word	0x080068e8

08001a94 <uart_send_acc>:

void uart_send_acc(Accel* acc) {
 8001a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a96:	b0a1      	sub	sp, #132	; 0x84
 8001a98:	af04      	add	r7, sp, #16
 8001a9a:	6078      	str	r0, [r7, #4]
	char c[100];
	sprintf(c, "Accel x: %d.%d  \r\nAccel y: %d.%d  \r\nAccel z: %d.%d  \r\n", acc->x.l, acc->x.r, acc->y.l, acc->y.r, acc->z.l, acc->z.r);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	5e9b      	ldrsh	r3, [r3, r2]
 8001aa2:	001e      	movs	r6, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	5e9b      	ldrsh	r3, [r3, r2]
 8001aaa:	469c      	mov	ip, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2208      	movs	r2, #8
 8001ab0:	5e9b      	ldrsh	r3, [r3, r2]
 8001ab2:	001a      	movs	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	210a      	movs	r1, #10
 8001ab8:	5e5b      	ldrsh	r3, [r3, r1]
 8001aba:	001c      	movs	r4, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2110      	movs	r1, #16
 8001ac0:	5e5b      	ldrsh	r3, [r3, r1]
 8001ac2:	001d      	movs	r5, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2112      	movs	r1, #18
 8001ac8:	5e5b      	ldrsh	r3, [r3, r1]
 8001aca:	490a      	ldr	r1, [pc, #40]	; (8001af4 <uart_send_acc+0x60>)
 8001acc:	200c      	movs	r0, #12
 8001ace:	1838      	adds	r0, r7, r0
 8001ad0:	9303      	str	r3, [sp, #12]
 8001ad2:	9502      	str	r5, [sp, #8]
 8001ad4:	9401      	str	r4, [sp, #4]
 8001ad6:	9200      	str	r2, [sp, #0]
 8001ad8:	4663      	mov	r3, ip
 8001ada:	0032      	movs	r2, r6
 8001adc:	f004 fa44 	bl	8005f68 <siprintf>
	uart_send_string(c);
 8001ae0:	200c      	movs	r0, #12
 8001ae2:	183b      	adds	r3, r7, r0
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	f7ff ff65 	bl	80019b4 <uart_send_string>
}
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	46bd      	mov	sp, r7
 8001aee:	b01d      	add	sp, #116	; 0x74
 8001af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001af2:	46c0      	nop			; (mov r8, r8)
 8001af4:	08006924 	.word	0x08006924

08001af8 <float_to_myfloat>:

void float_to_myfloat(float* val, MyFloat* myfloat) {
 8001af8:	b590      	push	{r4, r7, lr}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
	myfloat->l = (int16_t) *val;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	1c18      	adds	r0, r3, #0
 8001b08:	f7fe ff9c 	bl	8000a44 <__aeabi_f2iz>
 8001b0c:	0003      	movs	r3, r0
 8001b0e:	b21a      	sxth	r2, r3
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	801a      	strh	r2, [r3, #0]
	myfloat->r = (int16_t)((*val - myfloat->l) * 1000);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681c      	ldr	r4, [r3, #0]
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	5e9b      	ldrsh	r3, [r3, r2]
 8001b1e:	0018      	movs	r0, r3
 8001b20:	f7fe ffb0 	bl	8000a84 <__aeabi_i2f>
 8001b24:	1c03      	adds	r3, r0, #0
 8001b26:	1c19      	adds	r1, r3, #0
 8001b28:	1c20      	adds	r0, r4, #0
 8001b2a:	f7fe fdeb 	bl	8000704 <__aeabi_fsub>
 8001b2e:	1c03      	adds	r3, r0, #0
 8001b30:	4907      	ldr	r1, [pc, #28]	; (8001b50 <float_to_myfloat+0x58>)
 8001b32:	1c18      	adds	r0, r3, #0
 8001b34:	f7fe fc98 	bl	8000468 <__aeabi_fmul>
 8001b38:	1c03      	adds	r3, r0, #0
 8001b3a:	1c18      	adds	r0, r3, #0
 8001b3c:	f7fe ff82 	bl	8000a44 <__aeabi_f2iz>
 8001b40:	0003      	movs	r3, r0
 8001b42:	b21a      	sxth	r2, r3
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	805a      	strh	r2, [r3, #2]
}
 8001b48:	46c0      	nop			; (mov r8, r8)
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	b003      	add	sp, #12
 8001b4e:	bd90      	pop	{r4, r7, pc}
 8001b50:	447a0000 	.word	0x447a0000

08001b54 <init_mpu6050>:

uint8_t init_mpu6050(I2C_HandleTypeDef* i2c_ptr) {
 8001b54:	b590      	push	{r4, r7, lr}
 8001b56:	b089      	sub	sp, #36	; 0x24
 8001b58:	af04      	add	r7, sp, #16
 8001b5a:	6078      	str	r0, [r7, #4]
	uint8_t check;
	uint8_t data;

	HAL_I2C_Mem_Read(i2c_ptr, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 100);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	2364      	movs	r3, #100	; 0x64
 8001b60:	9302      	str	r3, [sp, #8]
 8001b62:	2301      	movs	r3, #1
 8001b64:	9301      	str	r3, [sp, #4]
 8001b66:	240f      	movs	r4, #15
 8001b68:	193b      	adds	r3, r7, r4
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	2275      	movs	r2, #117	; 0x75
 8001b70:	21d0      	movs	r1, #208	; 0xd0
 8001b72:	f001 fa07 	bl	8002f84 <HAL_I2C_Mem_Read>

	if(check == (MPU6050_ADDR >> 1)) {
 8001b76:	193b      	adds	r3, r7, r4
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b68      	cmp	r3, #104	; 0x68
 8001b7c:	d159      	bne.n	8001c32 <init_mpu6050+0xde>
		data = 0x00;
 8001b7e:	210e      	movs	r1, #14
 8001b80:	187b      	adds	r3, r7, r1
 8001b82:	2200      	movs	r2, #0
 8001b84:	701a      	strb	r2, [r3, #0]
		if(HAL_I2C_Mem_Write(i2c_ptr, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, 100) == HAL_OK) uart_send_string("wake up sensor! \r\n");
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	2364      	movs	r3, #100	; 0x64
 8001b8a:	9302      	str	r3, [sp, #8]
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	9301      	str	r3, [sp, #4]
 8001b90:	187b      	adds	r3, r7, r1
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	2301      	movs	r3, #1
 8001b96:	226b      	movs	r2, #107	; 0x6b
 8001b98:	21d0      	movs	r1, #208	; 0xd0
 8001b9a:	f001 f8c5 	bl	8002d28 <HAL_I2C_Mem_Write>
 8001b9e:	1e03      	subs	r3, r0, #0
 8001ba0:	d103      	bne.n	8001baa <init_mpu6050+0x56>
 8001ba2:	4b28      	ldr	r3, [pc, #160]	; (8001c44 <init_mpu6050+0xf0>)
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	f7ff ff05 	bl	80019b4 <uart_send_string>

		data = 0x07;
 8001baa:	210e      	movs	r1, #14
 8001bac:	187b      	adds	r3, r7, r1
 8001bae:	2207      	movs	r2, #7
 8001bb0:	701a      	strb	r2, [r3, #0]
		if(HAL_I2C_Mem_Write(i2c_ptr, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 100) == HAL_OK) uart_send_string("set data rate to 1kHz \r\n");
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	2364      	movs	r3, #100	; 0x64
 8001bb6:	9302      	str	r3, [sp, #8]
 8001bb8:	2301      	movs	r3, #1
 8001bba:	9301      	str	r3, [sp, #4]
 8001bbc:	187b      	adds	r3, r7, r1
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	2219      	movs	r2, #25
 8001bc4:	21d0      	movs	r1, #208	; 0xd0
 8001bc6:	f001 f8af 	bl	8002d28 <HAL_I2C_Mem_Write>
 8001bca:	1e03      	subs	r3, r0, #0
 8001bcc:	d103      	bne.n	8001bd6 <init_mpu6050+0x82>
 8001bce:	4b1e      	ldr	r3, [pc, #120]	; (8001c48 <init_mpu6050+0xf4>)
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	f7ff feef 	bl	80019b4 <uart_send_string>

		data = 0x00;
 8001bd6:	210e      	movs	r1, #14
 8001bd8:	187b      	adds	r3, r7, r1
 8001bda:	2200      	movs	r2, #0
 8001bdc:	701a      	strb	r2, [r3, #0]
		if(HAL_I2C_Mem_Write(i2c_ptr, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, 100) == HAL_OK) uart_send_string("set accelerometer config \r\n");
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	2364      	movs	r3, #100	; 0x64
 8001be2:	9302      	str	r3, [sp, #8]
 8001be4:	2301      	movs	r3, #1
 8001be6:	9301      	str	r3, [sp, #4]
 8001be8:	187b      	adds	r3, r7, r1
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	2301      	movs	r3, #1
 8001bee:	221c      	movs	r2, #28
 8001bf0:	21d0      	movs	r1, #208	; 0xd0
 8001bf2:	f001 f899 	bl	8002d28 <HAL_I2C_Mem_Write>
 8001bf6:	1e03      	subs	r3, r0, #0
 8001bf8:	d103      	bne.n	8001c02 <init_mpu6050+0xae>
 8001bfa:	4b14      	ldr	r3, [pc, #80]	; (8001c4c <init_mpu6050+0xf8>)
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	f7ff fed9 	bl	80019b4 <uart_send_string>

		data = 0x00;
 8001c02:	210e      	movs	r1, #14
 8001c04:	187b      	adds	r3, r7, r1
 8001c06:	2200      	movs	r2, #0
 8001c08:	701a      	strb	r2, [r3, #0]
		if(HAL_I2C_Mem_Write(i2c_ptr, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, 100) == HAL_OK) uart_send_string("set gyroscopic config \r\n");
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	2364      	movs	r3, #100	; 0x64
 8001c0e:	9302      	str	r3, [sp, #8]
 8001c10:	2301      	movs	r3, #1
 8001c12:	9301      	str	r3, [sp, #4]
 8001c14:	187b      	adds	r3, r7, r1
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	2301      	movs	r3, #1
 8001c1a:	221b      	movs	r2, #27
 8001c1c:	21d0      	movs	r1, #208	; 0xd0
 8001c1e:	f001 f883 	bl	8002d28 <HAL_I2C_Mem_Write>
 8001c22:	1e03      	subs	r3, r0, #0
 8001c24:	d103      	bne.n	8001c2e <init_mpu6050+0xda>
 8001c26:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <init_mpu6050+0xfc>)
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f7ff fec3 	bl	80019b4 <uart_send_string>

		return SUCCESS;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	e004      	b.n	8001c3c <init_mpu6050+0xe8>
	} else {
		uart_send_string("Error: device is not reachable  \r\n");
 8001c32:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <init_mpu6050+0x100>)
 8001c34:	0018      	movs	r0, r3
 8001c36:	f7ff febd 	bl	80019b4 <uart_send_string>
		return ERROR;
 8001c3a:	2301      	movs	r3, #1
	}
}
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	b005      	add	sp, #20
 8001c42:	bd90      	pop	{r4, r7, pc}
 8001c44:	0800695c 	.word	0x0800695c
 8001c48:	08006970 	.word	0x08006970
 8001c4c:	0800698c 	.word	0x0800698c
 8001c50:	080069a8 	.word	0x080069a8
 8001c54:	080069c4 	.word	0x080069c4

08001c58 <read_mpu6050_temp>:


uint8_t read_mpu6050_temp(I2C_HandleTypeDef* i2c_ptr, Temp* temperature) {
 8001c58:	b590      	push	{r4, r7, lr}
 8001c5a:	b089      	sub	sp, #36	; 0x24
 8001c5c:	af04      	add	r7, sp, #16
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
	uint8_t data[2];
	int16_t temp;

	if(HAL_I2C_Mem_Read(i2c_ptr, MPU6050_ADDR, TEMP_OUT_H_REG, 1, data, 2, 10) == HAL_OK) {
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	230a      	movs	r3, #10
 8001c66:	9302      	str	r3, [sp, #8]
 8001c68:	2302      	movs	r3, #2
 8001c6a:	9301      	str	r3, [sp, #4]
 8001c6c:	240c      	movs	r4, #12
 8001c6e:	193b      	adds	r3, r7, r4
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	2301      	movs	r3, #1
 8001c74:	2241      	movs	r2, #65	; 0x41
 8001c76:	21d0      	movs	r1, #208	; 0xd0
 8001c78:	f001 f984 	bl	8002f84 <HAL_I2C_Mem_Read>
 8001c7c:	1e03      	subs	r3, r0, #0
 8001c7e:	d12f      	bne.n	8001ce0 <read_mpu6050_temp+0x88>
		temp = (int16_t)((data[0] << 8) | data[0]);
 8001c80:	0022      	movs	r2, r4
 8001c82:	18bb      	adds	r3, r7, r2
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	021b      	lsls	r3, r3, #8
 8001c88:	b219      	sxth	r1, r3
 8001c8a:	18bb      	adds	r3, r7, r2
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	b21a      	sxth	r2, r3
 8001c90:	200e      	movs	r0, #14
 8001c92:	183b      	adds	r3, r7, r0
 8001c94:	430a      	orrs	r2, r1
 8001c96:	801a      	strh	r2, [r3, #0]
		temperature->t.val = (double)((int16_t)temp / 340.0 + 36.53);
 8001c98:	183b      	adds	r3, r7, r0
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	5e9b      	ldrsh	r3, [r3, r2]
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	f7ff fd90 	bl	80017c4 <__aeabi_i2d>
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <read_mpu6050_temp+0x9c>)
 8001ca8:	f7ff fa9e 	bl	80011e8 <__aeabi_ddiv>
 8001cac:	0002      	movs	r2, r0
 8001cae:	000b      	movs	r3, r1
 8001cb0:	0010      	movs	r0, r2
 8001cb2:	0019      	movs	r1, r3
 8001cb4:	4a10      	ldr	r2, [pc, #64]	; (8001cf8 <read_mpu6050_temp+0xa0>)
 8001cb6:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <read_mpu6050_temp+0xa4>)
 8001cb8:	f7fe ff36 	bl	8000b28 <__aeabi_dadd>
 8001cbc:	0002      	movs	r2, r0
 8001cbe:	000b      	movs	r3, r1
 8001cc0:	0010      	movs	r0, r2
 8001cc2:	0019      	movs	r1, r3
 8001cc4:	f7ff fdae 	bl	8001824 <__aeabi_d2f>
 8001cc8:	1c02      	adds	r2, r0, #0
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
		float_to_myfloat(&temperature->t.val, &temperature->t);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	0011      	movs	r1, r2
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f7ff ff0e 	bl	8001af8 <float_to_myfloat>

		return SUCCESS;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	e004      	b.n	8001cea <read_mpu6050_temp+0x92>
	} else {
		uart_send_string("Error: cant read temp\r\n ");
 8001ce0:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <read_mpu6050_temp+0xa8>)
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	f7ff fe66 	bl	80019b4 <uart_send_string>
		return ERROR;
 8001ce8:	2301      	movs	r3, #1
	}
}
 8001cea:	0018      	movs	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	b005      	add	sp, #20
 8001cf0:	bd90      	pop	{r4, r7, pc}
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	40754000 	.word	0x40754000
 8001cf8:	0a3d70a4 	.word	0x0a3d70a4
 8001cfc:	404243d7 	.word	0x404243d7
 8001d00:	080069e8 	.word	0x080069e8

08001d04 <read_mpu6050_gyro>:

uint8_t read_mpu6050_gyro(I2C_HandleTypeDef* i2c_ptr, Gyro* gyrovalue) {
 8001d04:	b590      	push	{r4, r7, lr}
 8001d06:	b089      	sub	sp, #36	; 0x24
 8001d08:	af04      	add	r7, sp, #16
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
	uint8_t data[6];

	if(HAL_I2C_Mem_Read(i2c_ptr, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, data, 6, 100) == HAL_OK) {
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	2364      	movs	r3, #100	; 0x64
 8001d12:	9302      	str	r3, [sp, #8]
 8001d14:	2306      	movs	r3, #6
 8001d16:	9301      	str	r3, [sp, #4]
 8001d18:	2408      	movs	r4, #8
 8001d1a:	193b      	adds	r3, r7, r4
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	2301      	movs	r3, #1
 8001d20:	2243      	movs	r2, #67	; 0x43
 8001d22:	21d0      	movs	r1, #208	; 0xd0
 8001d24:	f001 f92e 	bl	8002f84 <HAL_I2C_Mem_Read>
 8001d28:	1e03      	subs	r3, r0, #0
 8001d2a:	d164      	bne.n	8001df6 <read_mpu6050_gyro+0xf2>
		uint16_t x = ((data[0] << 8) | data[1]);
 8001d2c:	193b      	adds	r3, r7, r4
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	021b      	lsls	r3, r3, #8
 8001d32:	b21a      	sxth	r2, r3
 8001d34:	193b      	adds	r3, r7, r4
 8001d36:	785b      	ldrb	r3, [r3, #1]
 8001d38:	b21b      	sxth	r3, r3
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	b21a      	sxth	r2, r3
 8001d3e:	210e      	movs	r1, #14
 8001d40:	187b      	adds	r3, r7, r1
 8001d42:	801a      	strh	r2, [r3, #0]
		gyrovalue->x.val = x / 131.0;
 8001d44:	187b      	adds	r3, r7, r1
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f7ff fd3b 	bl	80017c4 <__aeabi_i2d>
 8001d4e:	2200      	movs	r2, #0
 8001d50:	4b2d      	ldr	r3, [pc, #180]	; (8001e08 <read_mpu6050_gyro+0x104>)
 8001d52:	f7ff fa49 	bl	80011e8 <__aeabi_ddiv>
 8001d56:	0002      	movs	r2, r0
 8001d58:	000b      	movs	r3, r1
 8001d5a:	0010      	movs	r0, r2
 8001d5c:	0019      	movs	r1, r3
 8001d5e:	f7ff fd61 	bl	8001824 <__aeabi_d2f>
 8001d62:	1c02      	adds	r2, r0, #0
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	605a      	str	r2, [r3, #4]
		float_to_myfloat(&gyrovalue->x.val, &gyrovalue->x);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	0011      	movs	r1, r2
 8001d70:	0018      	movs	r0, r3
 8001d72:	f7ff fec1 	bl	8001af8 <float_to_myfloat>


		gyrovalue->y.val = (float)(((data[2] << 8) | data[3]) / 131.0);
 8001d76:	193b      	adds	r3, r7, r4
 8001d78:	789b      	ldrb	r3, [r3, #2]
 8001d7a:	021b      	lsls	r3, r3, #8
 8001d7c:	193a      	adds	r2, r7, r4
 8001d7e:	78d2      	ldrb	r2, [r2, #3]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	0018      	movs	r0, r3
 8001d84:	f7ff fd1e 	bl	80017c4 <__aeabi_i2d>
 8001d88:	2200      	movs	r2, #0
 8001d8a:	4b1f      	ldr	r3, [pc, #124]	; (8001e08 <read_mpu6050_gyro+0x104>)
 8001d8c:	f7ff fa2c 	bl	80011e8 <__aeabi_ddiv>
 8001d90:	0002      	movs	r2, r0
 8001d92:	000b      	movs	r3, r1
 8001d94:	0010      	movs	r0, r2
 8001d96:	0019      	movs	r1, r3
 8001d98:	f7ff fd44 	bl	8001824 <__aeabi_d2f>
 8001d9c:	1c02      	adds	r2, r0, #0
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	60da      	str	r2, [r3, #12]
		float_to_myfloat(&gyrovalue->y.val, &gyrovalue->y);
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	330c      	adds	r3, #12
 8001da6:	001a      	movs	r2, r3
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	3308      	adds	r3, #8
 8001dac:	0019      	movs	r1, r3
 8001dae:	0010      	movs	r0, r2
 8001db0:	f7ff fea2 	bl	8001af8 <float_to_myfloat>

		gyrovalue->z.val = (float)(((data[4] << 8) | data[5]) / 131.0);
 8001db4:	193b      	adds	r3, r7, r4
 8001db6:	791b      	ldrb	r3, [r3, #4]
 8001db8:	021b      	lsls	r3, r3, #8
 8001dba:	193a      	adds	r2, r7, r4
 8001dbc:	7952      	ldrb	r2, [r2, #5]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	f7ff fcff 	bl	80017c4 <__aeabi_i2d>
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <read_mpu6050_gyro+0x104>)
 8001dca:	f7ff fa0d 	bl	80011e8 <__aeabi_ddiv>
 8001dce:	0002      	movs	r2, r0
 8001dd0:	000b      	movs	r3, r1
 8001dd2:	0010      	movs	r0, r2
 8001dd4:	0019      	movs	r1, r3
 8001dd6:	f7ff fd25 	bl	8001824 <__aeabi_d2f>
 8001dda:	1c02      	adds	r2, r0, #0
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	615a      	str	r2, [r3, #20]
		float_to_myfloat(&gyrovalue->z.val, &gyrovalue->z);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	3314      	adds	r3, #20
 8001de4:	001a      	movs	r2, r3
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	3310      	adds	r3, #16
 8001dea:	0019      	movs	r1, r3
 8001dec:	0010      	movs	r0, r2
 8001dee:	f7ff fe83 	bl	8001af8 <float_to_myfloat>

		return SUCCESS;
 8001df2:	2300      	movs	r3, #0
 8001df4:	e004      	b.n	8001e00 <read_mpu6050_gyro+0xfc>
	} else {
		uart_send_string("Error: cant read gyro \r\n");
 8001df6:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <read_mpu6050_gyro+0x108>)
 8001df8:	0018      	movs	r0, r3
 8001dfa:	f7ff fddb 	bl	80019b4 <uart_send_string>
		return ERROR;
 8001dfe:	2301      	movs	r3, #1
	}
}
 8001e00:	0018      	movs	r0, r3
 8001e02:	46bd      	mov	sp, r7
 8001e04:	b005      	add	sp, #20
 8001e06:	bd90      	pop	{r4, r7, pc}
 8001e08:	40606000 	.word	0x40606000
 8001e0c:	08006a04 	.word	0x08006a04

08001e10 <read_mpu6050_acc>:

uint8_t read_mpu6050_acc(I2C_HandleTypeDef* i2c_ptr, Accel* acc) {
 8001e10:	b590      	push	{r4, r7, lr}
 8001e12:	b089      	sub	sp, #36	; 0x24
 8001e14:	af04      	add	r7, sp, #16
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
	uint8_t data[6];

	if(HAL_I2C_Mem_Read(i2c_ptr, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, data, 6, 10) == HAL_OK) {
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	230a      	movs	r3, #10
 8001e1e:	9302      	str	r3, [sp, #8]
 8001e20:	2306      	movs	r3, #6
 8001e22:	9301      	str	r3, [sp, #4]
 8001e24:	2408      	movs	r4, #8
 8001e26:	193b      	adds	r3, r7, r4
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	223b      	movs	r2, #59	; 0x3b
 8001e2e:	21d0      	movs	r1, #208	; 0xd0
 8001e30:	f001 f8a8 	bl	8002f84 <HAL_I2C_Mem_Read>
 8001e34:	1e03      	subs	r3, r0, #0
 8001e36:	d15c      	bne.n	8001ef2 <read_mpu6050_acc+0xe2>
		acc->x.val = (float)(((data[0] << 8) | data[1]) / 16384.0);
 8001e38:	193b      	adds	r3, r7, r4
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	021b      	lsls	r3, r3, #8
 8001e3e:	193a      	adds	r2, r7, r4
 8001e40:	7852      	ldrb	r2, [r2, #1]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	0018      	movs	r0, r3
 8001e46:	f7ff fcbd 	bl	80017c4 <__aeabi_i2d>
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	4b2d      	ldr	r3, [pc, #180]	; (8001f04 <read_mpu6050_acc+0xf4>)
 8001e4e:	f7ff f9cb 	bl	80011e8 <__aeabi_ddiv>
 8001e52:	0002      	movs	r2, r0
 8001e54:	000b      	movs	r3, r1
 8001e56:	0010      	movs	r0, r2
 8001e58:	0019      	movs	r1, r3
 8001e5a:	f7ff fce3 	bl	8001824 <__aeabi_d2f>
 8001e5e:	1c02      	adds	r2, r0, #0
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	605a      	str	r2, [r3, #4]
		float_to_myfloat(&acc->x.val, &acc->x);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	3304      	adds	r3, #4
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	0011      	movs	r1, r2
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	f7ff fe43 	bl	8001af8 <float_to_myfloat>

		acc->y.val = (float)(((data[2] << 8) | data[3]) / 16384.0);
 8001e72:	193b      	adds	r3, r7, r4
 8001e74:	789b      	ldrb	r3, [r3, #2]
 8001e76:	021b      	lsls	r3, r3, #8
 8001e78:	193a      	adds	r2, r7, r4
 8001e7a:	78d2      	ldrb	r2, [r2, #3]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	0018      	movs	r0, r3
 8001e80:	f7ff fca0 	bl	80017c4 <__aeabi_i2d>
 8001e84:	2200      	movs	r2, #0
 8001e86:	4b1f      	ldr	r3, [pc, #124]	; (8001f04 <read_mpu6050_acc+0xf4>)
 8001e88:	f7ff f9ae 	bl	80011e8 <__aeabi_ddiv>
 8001e8c:	0002      	movs	r2, r0
 8001e8e:	000b      	movs	r3, r1
 8001e90:	0010      	movs	r0, r2
 8001e92:	0019      	movs	r1, r3
 8001e94:	f7ff fcc6 	bl	8001824 <__aeabi_d2f>
 8001e98:	1c02      	adds	r2, r0, #0
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	60da      	str	r2, [r3, #12]
		float_to_myfloat(&acc->y.val, &acc->y);
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	330c      	adds	r3, #12
 8001ea2:	001a      	movs	r2, r3
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	3308      	adds	r3, #8
 8001ea8:	0019      	movs	r1, r3
 8001eaa:	0010      	movs	r0, r2
 8001eac:	f7ff fe24 	bl	8001af8 <float_to_myfloat>

		acc->z.val = (float)(((data[4] << 8) | data[5]) / 16384.0);
 8001eb0:	193b      	adds	r3, r7, r4
 8001eb2:	791b      	ldrb	r3, [r3, #4]
 8001eb4:	021b      	lsls	r3, r3, #8
 8001eb6:	193a      	adds	r2, r7, r4
 8001eb8:	7952      	ldrb	r2, [r2, #5]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	f7ff fc81 	bl	80017c4 <__aeabi_i2d>
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <read_mpu6050_acc+0xf4>)
 8001ec6:	f7ff f98f 	bl	80011e8 <__aeabi_ddiv>
 8001eca:	0002      	movs	r2, r0
 8001ecc:	000b      	movs	r3, r1
 8001ece:	0010      	movs	r0, r2
 8001ed0:	0019      	movs	r1, r3
 8001ed2:	f7ff fca7 	bl	8001824 <__aeabi_d2f>
 8001ed6:	1c02      	adds	r2, r0, #0
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	615a      	str	r2, [r3, #20]
		float_to_myfloat(&acc->z.val, &acc->z);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	3314      	adds	r3, #20
 8001ee0:	001a      	movs	r2, r3
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	3310      	adds	r3, #16
 8001ee6:	0019      	movs	r1, r3
 8001ee8:	0010      	movs	r0, r2
 8001eea:	f7ff fe05 	bl	8001af8 <float_to_myfloat>

		return SUCCESS;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	e004      	b.n	8001efc <read_mpu6050_acc+0xec>
	} else {
		uart_send_string("Error: cant read gyro \r\n");
 8001ef2:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <read_mpu6050_acc+0xf8>)
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	f7ff fd5d 	bl	80019b4 <uart_send_string>
		return ERROR;
 8001efa:	2301      	movs	r3, #1
	}
}
 8001efc:	0018      	movs	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	b005      	add	sp, #20
 8001f02:	bd90      	pop	{r4, r7, pc}
 8001f04:	40d00000 	.word	0x40d00000
 8001f08:	08006a04 	.word	0x08006a04

08001f0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f0c:	b590      	push	{r4, r7, lr}
 8001f0e:	b08f      	sub	sp, #60	; 0x3c
 8001f10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f12:	f000 fad9 	bl	80024c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f16:	f000 f855 	bl	8001fc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f1a:	f000 f931 	bl	8002180 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001f1e:	f000 f8ff 	bl	8002120 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001f22:	f000 f8bd 	bl	80020a0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  init_mpu6050(&hi2c1);
 8001f26:	4b24      	ldr	r3, [pc, #144]	; (8001fb8 <main+0xac>)
 8001f28:	0018      	movs	r0, r3
 8001f2a:	f7ff fe13 	bl	8001b54 <init_mpu6050>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (HAL_GPIO_ReadPin(BlueButton_GPIO_Port, BlueButton_Pin)) {
 8001f2e:	2380      	movs	r3, #128	; 0x80
 8001f30:	019b      	lsls	r3, r3, #6
 8001f32:	4a22      	ldr	r2, [pc, #136]	; (8001fbc <main+0xb0>)
 8001f34:	0019      	movs	r1, r3
 8001f36:	0010      	movs	r0, r2
 8001f38:	f000 fe0a 	bl	8002b50 <HAL_GPIO_ReadPin>
 8001f3c:	1e03      	subs	r3, r0, #0
 8001f3e:	d0f6      	beq.n	8001f2e <main+0x22>
		  if(read_mpu6050_temp(&hi2c1, &temperatur) == SUCCESS) {
 8001f40:	2430      	movs	r4, #48	; 0x30
 8001f42:	193a      	adds	r2, r7, r4
 8001f44:	4b1c      	ldr	r3, [pc, #112]	; (8001fb8 <main+0xac>)
 8001f46:	0011      	movs	r1, r2
 8001f48:	0018      	movs	r0, r3
 8001f4a:	f7ff fe85 	bl	8001c58 <read_mpu6050_temp>
 8001f4e:	1e03      	subs	r3, r0, #0
 8001f50:	d103      	bne.n	8001f5a <main+0x4e>
			  uart_send_temp(&temperatur);
 8001f52:	193b      	adds	r3, r7, r4
 8001f54:	0018      	movs	r0, r3
 8001f56:	f7ff fd51 	bl	80019fc <uart_send_temp>
		  }

		  if(read_mpu6050_gyro(&hi2c1, &gyro) == SUCCESS) {
 8001f5a:	2418      	movs	r4, #24
 8001f5c:	193a      	adds	r2, r7, r4
 8001f5e:	4b16      	ldr	r3, [pc, #88]	; (8001fb8 <main+0xac>)
 8001f60:	0011      	movs	r1, r2
 8001f62:	0018      	movs	r0, r3
 8001f64:	f7ff fece 	bl	8001d04 <read_mpu6050_gyro>
 8001f68:	1e03      	subs	r3, r0, #0
 8001f6a:	d103      	bne.n	8001f74 <main+0x68>
			  uart_send_gyro(&gyro);
 8001f6c:	193b      	adds	r3, r7, r4
 8001f6e:	0018      	movs	r0, r3
 8001f70:	f7ff fd5e 	bl	8001a30 <uart_send_gyro>
		  }

		  if(read_mpu6050_acc(&hi2c1, &acc) == SUCCESS) {
 8001f74:	003a      	movs	r2, r7
 8001f76:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <main+0xac>)
 8001f78:	0011      	movs	r1, r2
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	f7ff ff48 	bl	8001e10 <read_mpu6050_acc>
 8001f80:	1e03      	subs	r3, r0, #0
 8001f82:	d107      	bne.n	8001f94 <main+0x88>
			  uart_send_acc(&acc);
 8001f84:	003b      	movs	r3, r7
 8001f86:	0018      	movs	r0, r3
 8001f88:	f7ff fd84 	bl	8001a94 <uart_send_acc>
		  }

		  while(HAL_GPIO_ReadPin(BlueButton_GPIO_Port, BlueButton_Pin)) {
 8001f8c:	e002      	b.n	8001f94 <main+0x88>
			  HAL_Delay(50);
 8001f8e:	2032      	movs	r0, #50	; 0x32
 8001f90:	f000 fb0a 	bl	80025a8 <HAL_Delay>
		  while(HAL_GPIO_ReadPin(BlueButton_GPIO_Port, BlueButton_Pin)) {
 8001f94:	2380      	movs	r3, #128	; 0x80
 8001f96:	019b      	lsls	r3, r3, #6
 8001f98:	4a08      	ldr	r2, [pc, #32]	; (8001fbc <main+0xb0>)
 8001f9a:	0019      	movs	r1, r3
 8001f9c:	0010      	movs	r0, r2
 8001f9e:	f000 fdd7 	bl	8002b50 <HAL_GPIO_ReadPin>
 8001fa2:	1e03      	subs	r3, r0, #0
 8001fa4:	d1f3      	bne.n	8001f8e <main+0x82>
		  }
		  HAL_Delay(50);
 8001fa6:	2032      	movs	r0, #50	; 0x32
 8001fa8:	f000 fafe 	bl	80025a8 <HAL_Delay>
		  uart_send_string("\r\n\r\n");
 8001fac:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <main+0xb4>)
 8001fae:	0018      	movs	r0, r3
 8001fb0:	f7ff fd00 	bl	80019b4 <uart_send_string>
	  if (HAL_GPIO_ReadPin(BlueButton_GPIO_Port, BlueButton_Pin)) {
 8001fb4:	e7bb      	b.n	8001f2e <main+0x22>
 8001fb6:	46c0      	nop			; (mov r8, r8)
 8001fb8:	20000078 	.word	0x20000078
 8001fbc:	50000800 	.word	0x50000800
 8001fc0:	08006a20 	.word	0x08006a20

08001fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fc4:	b590      	push	{r4, r7, lr}
 8001fc6:	b09f      	sub	sp, #124	; 0x7c
 8001fc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fca:	2440      	movs	r4, #64	; 0x40
 8001fcc:	193b      	adds	r3, r7, r4
 8001fce:	0018      	movs	r0, r3
 8001fd0:	2338      	movs	r3, #56	; 0x38
 8001fd2:	001a      	movs	r2, r3
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	f003 ffe7 	bl	8005fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fda:	232c      	movs	r3, #44	; 0x2c
 8001fdc:	18fb      	adds	r3, r7, r3
 8001fde:	0018      	movs	r0, r3
 8001fe0:	2314      	movs	r3, #20
 8001fe2:	001a      	movs	r2, r3
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	f003 ffdf 	bl	8005fa8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fea:	1d3b      	adds	r3, r7, #4
 8001fec:	0018      	movs	r0, r3
 8001fee:	2328      	movs	r3, #40	; 0x28
 8001ff0:	001a      	movs	r2, r3
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	f003 ffd8 	bl	8005fa8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ff8:	4b27      	ldr	r3, [pc, #156]	; (8002098 <SystemClock_Config+0xd4>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a27      	ldr	r2, [pc, #156]	; (800209c <SystemClock_Config+0xd8>)
 8001ffe:	401a      	ands	r2, r3
 8002000:	4b25      	ldr	r3, [pc, #148]	; (8002098 <SystemClock_Config+0xd4>)
 8002002:	2180      	movs	r1, #128	; 0x80
 8002004:	0109      	lsls	r1, r1, #4
 8002006:	430a      	orrs	r2, r1
 8002008:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800200a:	0021      	movs	r1, r4
 800200c:	187b      	adds	r3, r7, r1
 800200e:	2210      	movs	r2, #16
 8002010:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002012:	187b      	adds	r3, r7, r1
 8002014:	2201      	movs	r2, #1
 8002016:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002018:	187b      	adds	r3, r7, r1
 800201a:	2200      	movs	r2, #0
 800201c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800201e:	187b      	adds	r3, r7, r1
 8002020:	22a0      	movs	r2, #160	; 0xa0
 8002022:	0212      	lsls	r2, r2, #8
 8002024:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002026:	187b      	adds	r3, r7, r1
 8002028:	2200      	movs	r2, #0
 800202a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800202c:	187b      	adds	r3, r7, r1
 800202e:	0018      	movs	r0, r3
 8002030:	f002 fa48 	bl	80044c4 <HAL_RCC_OscConfig>
 8002034:	1e03      	subs	r3, r0, #0
 8002036:	d001      	beq.n	800203c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002038:	f000 f906 	bl	8002248 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800203c:	212c      	movs	r1, #44	; 0x2c
 800203e:	187b      	adds	r3, r7, r1
 8002040:	220f      	movs	r2, #15
 8002042:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002044:	187b      	adds	r3, r7, r1
 8002046:	2200      	movs	r2, #0
 8002048:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800204a:	187b      	adds	r3, r7, r1
 800204c:	2200      	movs	r2, #0
 800204e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002050:	187b      	adds	r3, r7, r1
 8002052:	2200      	movs	r2, #0
 8002054:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002056:	187b      	adds	r3, r7, r1
 8002058:	2200      	movs	r2, #0
 800205a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800205c:	187b      	adds	r3, r7, r1
 800205e:	2100      	movs	r1, #0
 8002060:	0018      	movs	r0, r3
 8002062:	f002 fe03 	bl	8004c6c <HAL_RCC_ClockConfig>
 8002066:	1e03      	subs	r3, r0, #0
 8002068:	d001      	beq.n	800206e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800206a:	f000 f8ed 	bl	8002248 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800206e:	1d3b      	adds	r3, r7, #4
 8002070:	220a      	movs	r2, #10
 8002072:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002074:	1d3b      	adds	r3, r7, #4
 8002076:	2200      	movs	r2, #0
 8002078:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800207a:	1d3b      	adds	r3, r7, #4
 800207c:	2200      	movs	r2, #0
 800207e:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002080:	1d3b      	adds	r3, r7, #4
 8002082:	0018      	movs	r0, r3
 8002084:	f003 f816 	bl	80050b4 <HAL_RCCEx_PeriphCLKConfig>
 8002088:	1e03      	subs	r3, r0, #0
 800208a:	d001      	beq.n	8002090 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800208c:	f000 f8dc 	bl	8002248 <Error_Handler>
  }
}
 8002090:	46c0      	nop			; (mov r8, r8)
 8002092:	46bd      	mov	sp, r7
 8002094:	b01f      	add	sp, #124	; 0x7c
 8002096:	bd90      	pop	{r4, r7, pc}
 8002098:	40007000 	.word	0x40007000
 800209c:	ffffe7ff 	.word	0xffffe7ff

080020a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020a4:	4b1c      	ldr	r3, [pc, #112]	; (8002118 <MX_I2C1_Init+0x78>)
 80020a6:	4a1d      	ldr	r2, [pc, #116]	; (800211c <MX_I2C1_Init+0x7c>)
 80020a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 80020aa:	4b1b      	ldr	r3, [pc, #108]	; (8002118 <MX_I2C1_Init+0x78>)
 80020ac:	22e1      	movs	r2, #225	; 0xe1
 80020ae:	00d2      	lsls	r2, r2, #3
 80020b0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80020b2:	4b19      	ldr	r3, [pc, #100]	; (8002118 <MX_I2C1_Init+0x78>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020b8:	4b17      	ldr	r3, [pc, #92]	; (8002118 <MX_I2C1_Init+0x78>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020be:	4b16      	ldr	r3, [pc, #88]	; (8002118 <MX_I2C1_Init+0x78>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80020c4:	4b14      	ldr	r3, [pc, #80]	; (8002118 <MX_I2C1_Init+0x78>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80020ca:	4b13      	ldr	r3, [pc, #76]	; (8002118 <MX_I2C1_Init+0x78>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020d0:	4b11      	ldr	r3, [pc, #68]	; (8002118 <MX_I2C1_Init+0x78>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020d6:	4b10      	ldr	r3, [pc, #64]	; (8002118 <MX_I2C1_Init+0x78>)
 80020d8:	2200      	movs	r2, #0
 80020da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020dc:	4b0e      	ldr	r3, [pc, #56]	; (8002118 <MX_I2C1_Init+0x78>)
 80020de:	0018      	movs	r0, r3
 80020e0:	f000 fd8c 	bl	8002bfc <HAL_I2C_Init>
 80020e4:	1e03      	subs	r3, r0, #0
 80020e6:	d001      	beq.n	80020ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80020e8:	f000 f8ae 	bl	8002248 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80020ec:	4b0a      	ldr	r3, [pc, #40]	; (8002118 <MX_I2C1_Init+0x78>)
 80020ee:	2100      	movs	r1, #0
 80020f0:	0018      	movs	r0, r3
 80020f2:	f002 f94f 	bl	8004394 <HAL_I2CEx_ConfigAnalogFilter>
 80020f6:	1e03      	subs	r3, r0, #0
 80020f8:	d001      	beq.n	80020fe <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80020fa:	f000 f8a5 	bl	8002248 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80020fe:	4b06      	ldr	r3, [pc, #24]	; (8002118 <MX_I2C1_Init+0x78>)
 8002100:	2100      	movs	r1, #0
 8002102:	0018      	movs	r0, r3
 8002104:	f002 f992 	bl	800442c <HAL_I2CEx_ConfigDigitalFilter>
 8002108:	1e03      	subs	r3, r0, #0
 800210a:	d001      	beq.n	8002110 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800210c:	f000 f89c 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002110:	46c0      	nop			; (mov r8, r8)
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	46c0      	nop			; (mov r8, r8)
 8002118:	20000078 	.word	0x20000078
 800211c:	40005400 	.word	0x40005400

08002120 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002124:	4b14      	ldr	r3, [pc, #80]	; (8002178 <MX_USART2_UART_Init+0x58>)
 8002126:	4a15      	ldr	r2, [pc, #84]	; (800217c <MX_USART2_UART_Init+0x5c>)
 8002128:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800212a:	4b13      	ldr	r3, [pc, #76]	; (8002178 <MX_USART2_UART_Init+0x58>)
 800212c:	22e1      	movs	r2, #225	; 0xe1
 800212e:	0252      	lsls	r2, r2, #9
 8002130:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002132:	4b11      	ldr	r3, [pc, #68]	; (8002178 <MX_USART2_UART_Init+0x58>)
 8002134:	2200      	movs	r2, #0
 8002136:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002138:	4b0f      	ldr	r3, [pc, #60]	; (8002178 <MX_USART2_UART_Init+0x58>)
 800213a:	2200      	movs	r2, #0
 800213c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800213e:	4b0e      	ldr	r3, [pc, #56]	; (8002178 <MX_USART2_UART_Init+0x58>)
 8002140:	2200      	movs	r2, #0
 8002142:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002144:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <MX_USART2_UART_Init+0x58>)
 8002146:	220c      	movs	r2, #12
 8002148:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800214a:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <MX_USART2_UART_Init+0x58>)
 800214c:	2200      	movs	r2, #0
 800214e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002150:	4b09      	ldr	r3, [pc, #36]	; (8002178 <MX_USART2_UART_Init+0x58>)
 8002152:	2200      	movs	r2, #0
 8002154:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002156:	4b08      	ldr	r3, [pc, #32]	; (8002178 <MX_USART2_UART_Init+0x58>)
 8002158:	2200      	movs	r2, #0
 800215a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800215c:	4b06      	ldr	r3, [pc, #24]	; (8002178 <MX_USART2_UART_Init+0x58>)
 800215e:	2200      	movs	r2, #0
 8002160:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002162:	4b05      	ldr	r3, [pc, #20]	; (8002178 <MX_USART2_UART_Init+0x58>)
 8002164:	0018      	movs	r0, r3
 8002166:	f003 f943 	bl	80053f0 <HAL_UART_Init>
 800216a:	1e03      	subs	r3, r0, #0
 800216c:	d001      	beq.n	8002172 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800216e:	f000 f86b 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	200000cc 	.word	0x200000cc
 800217c:	40004400 	.word	0x40004400

08002180 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002180:	b590      	push	{r4, r7, lr}
 8002182:	b089      	sub	sp, #36	; 0x24
 8002184:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002186:	240c      	movs	r4, #12
 8002188:	193b      	adds	r3, r7, r4
 800218a:	0018      	movs	r0, r3
 800218c:	2314      	movs	r3, #20
 800218e:	001a      	movs	r2, r3
 8002190:	2100      	movs	r1, #0
 8002192:	f003 ff09 	bl	8005fa8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002196:	4b2a      	ldr	r3, [pc, #168]	; (8002240 <MX_GPIO_Init+0xc0>)
 8002198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800219a:	4b29      	ldr	r3, [pc, #164]	; (8002240 <MX_GPIO_Init+0xc0>)
 800219c:	2104      	movs	r1, #4
 800219e:	430a      	orrs	r2, r1
 80021a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80021a2:	4b27      	ldr	r3, [pc, #156]	; (8002240 <MX_GPIO_Init+0xc0>)
 80021a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a6:	2204      	movs	r2, #4
 80021a8:	4013      	ands	r3, r2
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021ae:	4b24      	ldr	r3, [pc, #144]	; (8002240 <MX_GPIO_Init+0xc0>)
 80021b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021b2:	4b23      	ldr	r3, [pc, #140]	; (8002240 <MX_GPIO_Init+0xc0>)
 80021b4:	2180      	movs	r1, #128	; 0x80
 80021b6:	430a      	orrs	r2, r1
 80021b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80021ba:	4b21      	ldr	r3, [pc, #132]	; (8002240 <MX_GPIO_Init+0xc0>)
 80021bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021be:	2280      	movs	r2, #128	; 0x80
 80021c0:	4013      	ands	r3, r2
 80021c2:	607b      	str	r3, [r7, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c6:	4b1e      	ldr	r3, [pc, #120]	; (8002240 <MX_GPIO_Init+0xc0>)
 80021c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ca:	4b1d      	ldr	r3, [pc, #116]	; (8002240 <MX_GPIO_Init+0xc0>)
 80021cc:	2101      	movs	r1, #1
 80021ce:	430a      	orrs	r2, r1
 80021d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80021d2:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <MX_GPIO_Init+0xc0>)
 80021d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d6:	2201      	movs	r2, #1
 80021d8:	4013      	ands	r3, r2
 80021da:	603b      	str	r3, [r7, #0]
 80021dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80021de:	23a0      	movs	r3, #160	; 0xa0
 80021e0:	05db      	lsls	r3, r3, #23
 80021e2:	2200      	movs	r2, #0
 80021e4:	2120      	movs	r1, #32
 80021e6:	0018      	movs	r0, r3
 80021e8:	f000 fccf 	bl	8002b8a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BlueButton_Pin */
  GPIO_InitStruct.Pin = BlueButton_Pin;
 80021ec:	193b      	adds	r3, r7, r4
 80021ee:	2280      	movs	r2, #128	; 0x80
 80021f0:	0192      	lsls	r2, r2, #6
 80021f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80021f4:	193b      	adds	r3, r7, r4
 80021f6:	2284      	movs	r2, #132	; 0x84
 80021f8:	0392      	lsls	r2, r2, #14
 80021fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	193b      	adds	r3, r7, r4
 80021fe:	2200      	movs	r2, #0
 8002200:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BlueButton_GPIO_Port, &GPIO_InitStruct);
 8002202:	193b      	adds	r3, r7, r4
 8002204:	4a0f      	ldr	r2, [pc, #60]	; (8002244 <MX_GPIO_Init+0xc4>)
 8002206:	0019      	movs	r1, r3
 8002208:	0010      	movs	r0, r2
 800220a:	f000 fb23 	bl	8002854 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800220e:	0021      	movs	r1, r4
 8002210:	187b      	adds	r3, r7, r1
 8002212:	2220      	movs	r2, #32
 8002214:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002216:	187b      	adds	r3, r7, r1
 8002218:	2201      	movs	r2, #1
 800221a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	187b      	adds	r3, r7, r1
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002222:	187b      	adds	r3, r7, r1
 8002224:	2200      	movs	r2, #0
 8002226:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002228:	187a      	adds	r2, r7, r1
 800222a:	23a0      	movs	r3, #160	; 0xa0
 800222c:	05db      	lsls	r3, r3, #23
 800222e:	0011      	movs	r1, r2
 8002230:	0018      	movs	r0, r3
 8002232:	f000 fb0f 	bl	8002854 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002236:	46c0      	nop			; (mov r8, r8)
 8002238:	46bd      	mov	sp, r7
 800223a:	b009      	add	sp, #36	; 0x24
 800223c:	bd90      	pop	{r4, r7, pc}
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	40021000 	.word	0x40021000
 8002244:	50000800 	.word	0x50000800

08002248 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800224c:	b672      	cpsid	i
}
 800224e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002250:	e7fe      	b.n	8002250 <Error_Handler+0x8>
	...

08002254 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002258:	4b07      	ldr	r3, [pc, #28]	; (8002278 <HAL_MspInit+0x24>)
 800225a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800225c:	4b06      	ldr	r3, [pc, #24]	; (8002278 <HAL_MspInit+0x24>)
 800225e:	2101      	movs	r1, #1
 8002260:	430a      	orrs	r2, r1
 8002262:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002264:	4b04      	ldr	r3, [pc, #16]	; (8002278 <HAL_MspInit+0x24>)
 8002266:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002268:	4b03      	ldr	r3, [pc, #12]	; (8002278 <HAL_MspInit+0x24>)
 800226a:	2180      	movs	r1, #128	; 0x80
 800226c:	0549      	lsls	r1, r1, #21
 800226e:	430a      	orrs	r2, r1
 8002270:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40021000 	.word	0x40021000

0800227c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800227c:	b590      	push	{r4, r7, lr}
 800227e:	b089      	sub	sp, #36	; 0x24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002284:	240c      	movs	r4, #12
 8002286:	193b      	adds	r3, r7, r4
 8002288:	0018      	movs	r0, r3
 800228a:	2314      	movs	r3, #20
 800228c:	001a      	movs	r2, r3
 800228e:	2100      	movs	r1, #0
 8002290:	f003 fe8a 	bl	8005fa8 <memset>
  if(hi2c->Instance==I2C1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a1c      	ldr	r2, [pc, #112]	; (800230c <HAL_I2C_MspInit+0x90>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d132      	bne.n	8002304 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800229e:	4b1c      	ldr	r3, [pc, #112]	; (8002310 <HAL_I2C_MspInit+0x94>)
 80022a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022a2:	4b1b      	ldr	r3, [pc, #108]	; (8002310 <HAL_I2C_MspInit+0x94>)
 80022a4:	2101      	movs	r1, #1
 80022a6:	430a      	orrs	r2, r1
 80022a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80022aa:	4b19      	ldr	r3, [pc, #100]	; (8002310 <HAL_I2C_MspInit+0x94>)
 80022ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ae:	2201      	movs	r2, #1
 80022b0:	4013      	ands	r3, r2
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022b6:	193b      	adds	r3, r7, r4
 80022b8:	22c0      	movs	r2, #192	; 0xc0
 80022ba:	00d2      	lsls	r2, r2, #3
 80022bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022be:	0021      	movs	r1, r4
 80022c0:	187b      	adds	r3, r7, r1
 80022c2:	2212      	movs	r2, #18
 80022c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022c6:	187b      	adds	r3, r7, r1
 80022c8:	2201      	movs	r2, #1
 80022ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022cc:	187b      	adds	r3, r7, r1
 80022ce:	2203      	movs	r2, #3
 80022d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80022d2:	187b      	adds	r3, r7, r1
 80022d4:	2206      	movs	r2, #6
 80022d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d8:	187a      	adds	r2, r7, r1
 80022da:	23a0      	movs	r3, #160	; 0xa0
 80022dc:	05db      	lsls	r3, r3, #23
 80022de:	0011      	movs	r1, r2
 80022e0:	0018      	movs	r0, r3
 80022e2:	f000 fab7 	bl	8002854 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022e6:	4b0a      	ldr	r3, [pc, #40]	; (8002310 <HAL_I2C_MspInit+0x94>)
 80022e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022ea:	4b09      	ldr	r3, [pc, #36]	; (8002310 <HAL_I2C_MspInit+0x94>)
 80022ec:	2180      	movs	r1, #128	; 0x80
 80022ee:	0389      	lsls	r1, r1, #14
 80022f0:	430a      	orrs	r2, r1
 80022f2:	639a      	str	r2, [r3, #56]	; 0x38
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80022f4:	2200      	movs	r2, #0
 80022f6:	2100      	movs	r1, #0
 80022f8:	2017      	movs	r0, #23
 80022fa:	f000 fa25 	bl	8002748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80022fe:	2017      	movs	r0, #23
 8002300:	f000 fa37 	bl	8002772 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002304:	46c0      	nop			; (mov r8, r8)
 8002306:	46bd      	mov	sp, r7
 8002308:	b009      	add	sp, #36	; 0x24
 800230a:	bd90      	pop	{r4, r7, pc}
 800230c:	40005400 	.word	0x40005400
 8002310:	40021000 	.word	0x40021000

08002314 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002314:	b590      	push	{r4, r7, lr}
 8002316:	b089      	sub	sp, #36	; 0x24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800231c:	240c      	movs	r4, #12
 800231e:	193b      	adds	r3, r7, r4
 8002320:	0018      	movs	r0, r3
 8002322:	2314      	movs	r3, #20
 8002324:	001a      	movs	r2, r3
 8002326:	2100      	movs	r1, #0
 8002328:	f003 fe3e 	bl	8005fa8 <memset>
  if(huart->Instance==USART2)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a18      	ldr	r2, [pc, #96]	; (8002394 <HAL_UART_MspInit+0x80>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d129      	bne.n	800238a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002336:	4b18      	ldr	r3, [pc, #96]	; (8002398 <HAL_UART_MspInit+0x84>)
 8002338:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800233a:	4b17      	ldr	r3, [pc, #92]	; (8002398 <HAL_UART_MspInit+0x84>)
 800233c:	2180      	movs	r1, #128	; 0x80
 800233e:	0289      	lsls	r1, r1, #10
 8002340:	430a      	orrs	r2, r1
 8002342:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002344:	4b14      	ldr	r3, [pc, #80]	; (8002398 <HAL_UART_MspInit+0x84>)
 8002346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002348:	4b13      	ldr	r3, [pc, #76]	; (8002398 <HAL_UART_MspInit+0x84>)
 800234a:	2101      	movs	r1, #1
 800234c:	430a      	orrs	r2, r1
 800234e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002350:	4b11      	ldr	r3, [pc, #68]	; (8002398 <HAL_UART_MspInit+0x84>)
 8002352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002354:	2201      	movs	r2, #1
 8002356:	4013      	ands	r3, r2
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800235c:	0021      	movs	r1, r4
 800235e:	187b      	adds	r3, r7, r1
 8002360:	220c      	movs	r2, #12
 8002362:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002364:	187b      	adds	r3, r7, r1
 8002366:	2202      	movs	r2, #2
 8002368:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	187b      	adds	r3, r7, r1
 800236c:	2200      	movs	r2, #0
 800236e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002370:	187b      	adds	r3, r7, r1
 8002372:	2203      	movs	r2, #3
 8002374:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002376:	187b      	adds	r3, r7, r1
 8002378:	2204      	movs	r2, #4
 800237a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800237c:	187a      	adds	r2, r7, r1
 800237e:	23a0      	movs	r3, #160	; 0xa0
 8002380:	05db      	lsls	r3, r3, #23
 8002382:	0011      	movs	r1, r2
 8002384:	0018      	movs	r0, r3
 8002386:	f000 fa65 	bl	8002854 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800238a:	46c0      	nop			; (mov r8, r8)
 800238c:	46bd      	mov	sp, r7
 800238e:	b009      	add	sp, #36	; 0x24
 8002390:	bd90      	pop	{r4, r7, pc}
 8002392:	46c0      	nop			; (mov r8, r8)
 8002394:	40004400 	.word	0x40004400
 8002398:	40021000 	.word	0x40021000

0800239c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023a0:	e7fe      	b.n	80023a0 <NMI_Handler+0x4>

080023a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023a6:	e7fe      	b.n	80023a6 <HardFault_Handler+0x4>

080023a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80023ac:	46c0      	nop			; (mov r8, r8)
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023b6:	46c0      	nop			; (mov r8, r8)
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023c0:	f000 f8d6 	bl	8002570 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023c4:	46c0      	nop			; (mov r8, r8)
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
	...

080023cc <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80023d0:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <I2C1_IRQHandler+0x2c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	699a      	ldr	r2, [r3, #24]
 80023d6:	23e0      	movs	r3, #224	; 0xe0
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	4013      	ands	r3, r2
 80023dc:	d004      	beq.n	80023e8 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80023de:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <I2C1_IRQHandler+0x2c>)
 80023e0:	0018      	movs	r0, r3
 80023e2:	f000 ff1d 	bl	8003220 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80023e6:	e003      	b.n	80023f0 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80023e8:	4b03      	ldr	r3, [pc, #12]	; (80023f8 <I2C1_IRQHandler+0x2c>)
 80023ea:	0018      	movs	r0, r3
 80023ec:	f000 fefe 	bl	80031ec <HAL_I2C_EV_IRQHandler>
}
 80023f0:	46c0      	nop			; (mov r8, r8)
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	20000078 	.word	0x20000078

080023fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002404:	4a14      	ldr	r2, [pc, #80]	; (8002458 <_sbrk+0x5c>)
 8002406:	4b15      	ldr	r3, [pc, #84]	; (800245c <_sbrk+0x60>)
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002410:	4b13      	ldr	r3, [pc, #76]	; (8002460 <_sbrk+0x64>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d102      	bne.n	800241e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002418:	4b11      	ldr	r3, [pc, #68]	; (8002460 <_sbrk+0x64>)
 800241a:	4a12      	ldr	r2, [pc, #72]	; (8002464 <_sbrk+0x68>)
 800241c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800241e:	4b10      	ldr	r3, [pc, #64]	; (8002460 <_sbrk+0x64>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	18d3      	adds	r3, r2, r3
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	429a      	cmp	r2, r3
 800242a:	d207      	bcs.n	800243c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800242c:	f003 fdc4 	bl	8005fb8 <__errno>
 8002430:	0003      	movs	r3, r0
 8002432:	220c      	movs	r2, #12
 8002434:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002436:	2301      	movs	r3, #1
 8002438:	425b      	negs	r3, r3
 800243a:	e009      	b.n	8002450 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800243c:	4b08      	ldr	r3, [pc, #32]	; (8002460 <_sbrk+0x64>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002442:	4b07      	ldr	r3, [pc, #28]	; (8002460 <_sbrk+0x64>)
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	18d2      	adds	r2, r2, r3
 800244a:	4b05      	ldr	r3, [pc, #20]	; (8002460 <_sbrk+0x64>)
 800244c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800244e:	68fb      	ldr	r3, [r7, #12]
}
 8002450:	0018      	movs	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	b006      	add	sp, #24
 8002456:	bd80      	pop	{r7, pc}
 8002458:	20005000 	.word	0x20005000
 800245c:	00000400 	.word	0x00000400
 8002460:	20000154 	.word	0x20000154
 8002464:	200002a8 	.word	0x200002a8

08002468 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800246c:	46c0      	nop			; (mov r8, r8)
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
	...

08002474 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002474:	480d      	ldr	r0, [pc, #52]	; (80024ac <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002476:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002478:	f7ff fff6 	bl	8002468 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800247c:	480c      	ldr	r0, [pc, #48]	; (80024b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800247e:	490d      	ldr	r1, [pc, #52]	; (80024b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002480:	4a0d      	ldr	r2, [pc, #52]	; (80024b8 <LoopForever+0xe>)
  movs r3, #0
 8002482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002484:	e002      	b.n	800248c <LoopCopyDataInit>

08002486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800248a:	3304      	adds	r3, #4

0800248c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800248c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800248e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002490:	d3f9      	bcc.n	8002486 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002492:	4a0a      	ldr	r2, [pc, #40]	; (80024bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002494:	4c0a      	ldr	r4, [pc, #40]	; (80024c0 <LoopForever+0x16>)
  movs r3, #0
 8002496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002498:	e001      	b.n	800249e <LoopFillZerobss>

0800249a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800249a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800249c:	3204      	adds	r2, #4

0800249e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800249e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024a0:	d3fb      	bcc.n	800249a <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80024a2:	f003 fd8f 	bl	8005fc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024a6:	f7ff fd31 	bl	8001f0c <main>

080024aa <LoopForever>:

LoopForever:
    b LoopForever
 80024aa:	e7fe      	b.n	80024aa <LoopForever>
   ldr   r0, =_estack
 80024ac:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80024b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024b4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80024b8:	08006b18 	.word	0x08006b18
  ldr r2, =_sbss
 80024bc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80024c0:	200002a4 	.word	0x200002a4

080024c4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024c4:	e7fe      	b.n	80024c4 <ADC1_COMP_IRQHandler>
	...

080024c8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024ce:	1dfb      	adds	r3, r7, #7
 80024d0:	2200      	movs	r2, #0
 80024d2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80024d4:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <HAL_Init+0x3c>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4b0a      	ldr	r3, [pc, #40]	; (8002504 <HAL_Init+0x3c>)
 80024da:	2140      	movs	r1, #64	; 0x40
 80024dc:	430a      	orrs	r2, r1
 80024de:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024e0:	2000      	movs	r0, #0
 80024e2:	f000 f811 	bl	8002508 <HAL_InitTick>
 80024e6:	1e03      	subs	r3, r0, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80024ea:	1dfb      	adds	r3, r7, #7
 80024ec:	2201      	movs	r2, #1
 80024ee:	701a      	strb	r2, [r3, #0]
 80024f0:	e001      	b.n	80024f6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024f2:	f7ff feaf 	bl	8002254 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024f6:	1dfb      	adds	r3, r7, #7
 80024f8:	781b      	ldrb	r3, [r3, #0]
}
 80024fa:	0018      	movs	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	b002      	add	sp, #8
 8002500:	bd80      	pop	{r7, pc}
 8002502:	46c0      	nop			; (mov r8, r8)
 8002504:	40022000 	.word	0x40022000

08002508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002508:	b590      	push	{r4, r7, lr}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002510:	4b14      	ldr	r3, [pc, #80]	; (8002564 <HAL_InitTick+0x5c>)
 8002512:	681c      	ldr	r4, [r3, #0]
 8002514:	4b14      	ldr	r3, [pc, #80]	; (8002568 <HAL_InitTick+0x60>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	0019      	movs	r1, r3
 800251a:	23fa      	movs	r3, #250	; 0xfa
 800251c:	0098      	lsls	r0, r3, #2
 800251e:	f7fd fdfd 	bl	800011c <__udivsi3>
 8002522:	0003      	movs	r3, r0
 8002524:	0019      	movs	r1, r3
 8002526:	0020      	movs	r0, r4
 8002528:	f7fd fdf8 	bl	800011c <__udivsi3>
 800252c:	0003      	movs	r3, r0
 800252e:	0018      	movs	r0, r3
 8002530:	f000 f92f 	bl	8002792 <HAL_SYSTICK_Config>
 8002534:	1e03      	subs	r3, r0, #0
 8002536:	d001      	beq.n	800253c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e00f      	b.n	800255c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b03      	cmp	r3, #3
 8002540:	d80b      	bhi.n	800255a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	2301      	movs	r3, #1
 8002546:	425b      	negs	r3, r3
 8002548:	2200      	movs	r2, #0
 800254a:	0018      	movs	r0, r3
 800254c:	f000 f8fc 	bl	8002748 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002550:	4b06      	ldr	r3, [pc, #24]	; (800256c <HAL_InitTick+0x64>)
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002556:	2300      	movs	r3, #0
 8002558:	e000      	b.n	800255c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
}
 800255c:	0018      	movs	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	b003      	add	sp, #12
 8002562:	bd90      	pop	{r4, r7, pc}
 8002564:	20000000 	.word	0x20000000
 8002568:	20000008 	.word	0x20000008
 800256c:	20000004 	.word	0x20000004

08002570 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002574:	4b05      	ldr	r3, [pc, #20]	; (800258c <HAL_IncTick+0x1c>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	001a      	movs	r2, r3
 800257a:	4b05      	ldr	r3, [pc, #20]	; (8002590 <HAL_IncTick+0x20>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	18d2      	adds	r2, r2, r3
 8002580:	4b03      	ldr	r3, [pc, #12]	; (8002590 <HAL_IncTick+0x20>)
 8002582:	601a      	str	r2, [r3, #0]
}
 8002584:	46c0      	nop			; (mov r8, r8)
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	46c0      	nop			; (mov r8, r8)
 800258c:	20000008 	.word	0x20000008
 8002590:	20000158 	.word	0x20000158

08002594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  return uwTick;
 8002598:	4b02      	ldr	r3, [pc, #8]	; (80025a4 <HAL_GetTick+0x10>)
 800259a:	681b      	ldr	r3, [r3, #0]
}
 800259c:	0018      	movs	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	46c0      	nop			; (mov r8, r8)
 80025a4:	20000158 	.word	0x20000158

080025a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025b0:	f7ff fff0 	bl	8002594 <HAL_GetTick>
 80025b4:	0003      	movs	r3, r0
 80025b6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	3301      	adds	r3, #1
 80025c0:	d005      	beq.n	80025ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025c2:	4b0a      	ldr	r3, [pc, #40]	; (80025ec <HAL_Delay+0x44>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	001a      	movs	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	189b      	adds	r3, r3, r2
 80025cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	f7ff ffe0 	bl	8002594 <HAL_GetTick>
 80025d4:	0002      	movs	r2, r0
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d8f7      	bhi.n	80025d0 <HAL_Delay+0x28>
  {
  }
}
 80025e0:	46c0      	nop			; (mov r8, r8)
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	46bd      	mov	sp, r7
 80025e6:	b004      	add	sp, #16
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	46c0      	nop			; (mov r8, r8)
 80025ec:	20000008 	.word	0x20000008

080025f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	0002      	movs	r2, r0
 80025f8:	1dfb      	adds	r3, r7, #7
 80025fa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80025fc:	1dfb      	adds	r3, r7, #7
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b7f      	cmp	r3, #127	; 0x7f
 8002602:	d809      	bhi.n	8002618 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002604:	1dfb      	adds	r3, r7, #7
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	001a      	movs	r2, r3
 800260a:	231f      	movs	r3, #31
 800260c:	401a      	ands	r2, r3
 800260e:	4b04      	ldr	r3, [pc, #16]	; (8002620 <__NVIC_EnableIRQ+0x30>)
 8002610:	2101      	movs	r1, #1
 8002612:	4091      	lsls	r1, r2
 8002614:	000a      	movs	r2, r1
 8002616:	601a      	str	r2, [r3, #0]
  }
}
 8002618:	46c0      	nop			; (mov r8, r8)
 800261a:	46bd      	mov	sp, r7
 800261c:	b002      	add	sp, #8
 800261e:	bd80      	pop	{r7, pc}
 8002620:	e000e100 	.word	0xe000e100

08002624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002624:	b590      	push	{r4, r7, lr}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	0002      	movs	r2, r0
 800262c:	6039      	str	r1, [r7, #0]
 800262e:	1dfb      	adds	r3, r7, #7
 8002630:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002632:	1dfb      	adds	r3, r7, #7
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	2b7f      	cmp	r3, #127	; 0x7f
 8002638:	d828      	bhi.n	800268c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800263a:	4a2f      	ldr	r2, [pc, #188]	; (80026f8 <__NVIC_SetPriority+0xd4>)
 800263c:	1dfb      	adds	r3, r7, #7
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	b25b      	sxtb	r3, r3
 8002642:	089b      	lsrs	r3, r3, #2
 8002644:	33c0      	adds	r3, #192	; 0xc0
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	589b      	ldr	r3, [r3, r2]
 800264a:	1dfa      	adds	r2, r7, #7
 800264c:	7812      	ldrb	r2, [r2, #0]
 800264e:	0011      	movs	r1, r2
 8002650:	2203      	movs	r2, #3
 8002652:	400a      	ands	r2, r1
 8002654:	00d2      	lsls	r2, r2, #3
 8002656:	21ff      	movs	r1, #255	; 0xff
 8002658:	4091      	lsls	r1, r2
 800265a:	000a      	movs	r2, r1
 800265c:	43d2      	mvns	r2, r2
 800265e:	401a      	ands	r2, r3
 8002660:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	019b      	lsls	r3, r3, #6
 8002666:	22ff      	movs	r2, #255	; 0xff
 8002668:	401a      	ands	r2, r3
 800266a:	1dfb      	adds	r3, r7, #7
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	0018      	movs	r0, r3
 8002670:	2303      	movs	r3, #3
 8002672:	4003      	ands	r3, r0
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002678:	481f      	ldr	r0, [pc, #124]	; (80026f8 <__NVIC_SetPriority+0xd4>)
 800267a:	1dfb      	adds	r3, r7, #7
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	b25b      	sxtb	r3, r3
 8002680:	089b      	lsrs	r3, r3, #2
 8002682:	430a      	orrs	r2, r1
 8002684:	33c0      	adds	r3, #192	; 0xc0
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800268a:	e031      	b.n	80026f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800268c:	4a1b      	ldr	r2, [pc, #108]	; (80026fc <__NVIC_SetPriority+0xd8>)
 800268e:	1dfb      	adds	r3, r7, #7
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	0019      	movs	r1, r3
 8002694:	230f      	movs	r3, #15
 8002696:	400b      	ands	r3, r1
 8002698:	3b08      	subs	r3, #8
 800269a:	089b      	lsrs	r3, r3, #2
 800269c:	3306      	adds	r3, #6
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	18d3      	adds	r3, r2, r3
 80026a2:	3304      	adds	r3, #4
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	1dfa      	adds	r2, r7, #7
 80026a8:	7812      	ldrb	r2, [r2, #0]
 80026aa:	0011      	movs	r1, r2
 80026ac:	2203      	movs	r2, #3
 80026ae:	400a      	ands	r2, r1
 80026b0:	00d2      	lsls	r2, r2, #3
 80026b2:	21ff      	movs	r1, #255	; 0xff
 80026b4:	4091      	lsls	r1, r2
 80026b6:	000a      	movs	r2, r1
 80026b8:	43d2      	mvns	r2, r2
 80026ba:	401a      	ands	r2, r3
 80026bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	019b      	lsls	r3, r3, #6
 80026c2:	22ff      	movs	r2, #255	; 0xff
 80026c4:	401a      	ands	r2, r3
 80026c6:	1dfb      	adds	r3, r7, #7
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	0018      	movs	r0, r3
 80026cc:	2303      	movs	r3, #3
 80026ce:	4003      	ands	r3, r0
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026d4:	4809      	ldr	r0, [pc, #36]	; (80026fc <__NVIC_SetPriority+0xd8>)
 80026d6:	1dfb      	adds	r3, r7, #7
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	001c      	movs	r4, r3
 80026dc:	230f      	movs	r3, #15
 80026de:	4023      	ands	r3, r4
 80026e0:	3b08      	subs	r3, #8
 80026e2:	089b      	lsrs	r3, r3, #2
 80026e4:	430a      	orrs	r2, r1
 80026e6:	3306      	adds	r3, #6
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	18c3      	adds	r3, r0, r3
 80026ec:	3304      	adds	r3, #4
 80026ee:	601a      	str	r2, [r3, #0]
}
 80026f0:	46c0      	nop			; (mov r8, r8)
 80026f2:	46bd      	mov	sp, r7
 80026f4:	b003      	add	sp, #12
 80026f6:	bd90      	pop	{r4, r7, pc}
 80026f8:	e000e100 	.word	0xe000e100
 80026fc:	e000ed00 	.word	0xe000ed00

08002700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	1e5a      	subs	r2, r3, #1
 800270c:	2380      	movs	r3, #128	; 0x80
 800270e:	045b      	lsls	r3, r3, #17
 8002710:	429a      	cmp	r2, r3
 8002712:	d301      	bcc.n	8002718 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002714:	2301      	movs	r3, #1
 8002716:	e010      	b.n	800273a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002718:	4b0a      	ldr	r3, [pc, #40]	; (8002744 <SysTick_Config+0x44>)
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	3a01      	subs	r2, #1
 800271e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002720:	2301      	movs	r3, #1
 8002722:	425b      	negs	r3, r3
 8002724:	2103      	movs	r1, #3
 8002726:	0018      	movs	r0, r3
 8002728:	f7ff ff7c 	bl	8002624 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800272c:	4b05      	ldr	r3, [pc, #20]	; (8002744 <SysTick_Config+0x44>)
 800272e:	2200      	movs	r2, #0
 8002730:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002732:	4b04      	ldr	r3, [pc, #16]	; (8002744 <SysTick_Config+0x44>)
 8002734:	2207      	movs	r2, #7
 8002736:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002738:	2300      	movs	r3, #0
}
 800273a:	0018      	movs	r0, r3
 800273c:	46bd      	mov	sp, r7
 800273e:	b002      	add	sp, #8
 8002740:	bd80      	pop	{r7, pc}
 8002742:	46c0      	nop			; (mov r8, r8)
 8002744:	e000e010 	.word	0xe000e010

08002748 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	60b9      	str	r1, [r7, #8]
 8002750:	607a      	str	r2, [r7, #4]
 8002752:	210f      	movs	r1, #15
 8002754:	187b      	adds	r3, r7, r1
 8002756:	1c02      	adds	r2, r0, #0
 8002758:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	187b      	adds	r3, r7, r1
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	b25b      	sxtb	r3, r3
 8002762:	0011      	movs	r1, r2
 8002764:	0018      	movs	r0, r3
 8002766:	f7ff ff5d 	bl	8002624 <__NVIC_SetPriority>
}
 800276a:	46c0      	nop			; (mov r8, r8)
 800276c:	46bd      	mov	sp, r7
 800276e:	b004      	add	sp, #16
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
 8002778:	0002      	movs	r2, r0
 800277a:	1dfb      	adds	r3, r7, #7
 800277c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800277e:	1dfb      	adds	r3, r7, #7
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	b25b      	sxtb	r3, r3
 8002784:	0018      	movs	r0, r3
 8002786:	f7ff ff33 	bl	80025f0 <__NVIC_EnableIRQ>
}
 800278a:	46c0      	nop			; (mov r8, r8)
 800278c:	46bd      	mov	sp, r7
 800278e:	b002      	add	sp, #8
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b082      	sub	sp, #8
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	0018      	movs	r0, r3
 800279e:	f7ff ffaf 	bl	8002700 <SysTick_Config>
 80027a2:	0003      	movs	r3, r0
}
 80027a4:	0018      	movs	r0, r3
 80027a6:	46bd      	mov	sp, r7
 80027a8:	b002      	add	sp, #8
 80027aa:	bd80      	pop	{r7, pc}

080027ac <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027b4:	210f      	movs	r1, #15
 80027b6:	187b      	adds	r3, r7, r1
 80027b8:	2200      	movs	r2, #0
 80027ba:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2225      	movs	r2, #37	; 0x25
 80027c0:	5c9b      	ldrb	r3, [r3, r2]
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d006      	beq.n	80027d6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2204      	movs	r2, #4
 80027cc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80027ce:	187b      	adds	r3, r7, r1
 80027d0:	2201      	movs	r2, #1
 80027d2:	701a      	strb	r2, [r3, #0]
 80027d4:	e02a      	b.n	800282c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	210e      	movs	r1, #14
 80027e2:	438a      	bics	r2, r1
 80027e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2101      	movs	r1, #1
 80027f2:	438a      	bics	r2, r1
 80027f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fa:	221c      	movs	r2, #28
 80027fc:	401a      	ands	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	2101      	movs	r1, #1
 8002804:	4091      	lsls	r1, r2
 8002806:	000a      	movs	r2, r1
 8002808:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2225      	movs	r2, #37	; 0x25
 800280e:	2101      	movs	r1, #1
 8002810:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2224      	movs	r2, #36	; 0x24
 8002816:	2100      	movs	r1, #0
 8002818:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281e:	2b00      	cmp	r3, #0
 8002820:	d004      	beq.n	800282c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	0010      	movs	r0, r2
 800282a:	4798      	blx	r3
    }
  }
  return status;
 800282c:	230f      	movs	r3, #15
 800282e:	18fb      	adds	r3, r7, r3
 8002830:	781b      	ldrb	r3, [r3, #0]
}
 8002832:	0018      	movs	r0, r3
 8002834:	46bd      	mov	sp, r7
 8002836:	b004      	add	sp, #16
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b082      	sub	sp, #8
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2225      	movs	r2, #37	; 0x25
 8002846:	5c9b      	ldrb	r3, [r3, r2]
 8002848:	b2db      	uxtb	r3, r3
}
 800284a:	0018      	movs	r0, r3
 800284c:	46bd      	mov	sp, r7
 800284e:	b002      	add	sp, #8
 8002850:	bd80      	pop	{r7, pc}
	...

08002854 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800285e:	2300      	movs	r3, #0
 8002860:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002862:	2300      	movs	r3, #0
 8002864:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002866:	2300      	movs	r3, #0
 8002868:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800286a:	e155      	b.n	8002b18 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2101      	movs	r1, #1
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	4091      	lsls	r1, r2
 8002876:	000a      	movs	r2, r1
 8002878:	4013      	ands	r3, r2
 800287a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d100      	bne.n	8002884 <HAL_GPIO_Init+0x30>
 8002882:	e146      	b.n	8002b12 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2203      	movs	r2, #3
 800288a:	4013      	ands	r3, r2
 800288c:	2b01      	cmp	r3, #1
 800288e:	d005      	beq.n	800289c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2203      	movs	r2, #3
 8002896:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002898:	2b02      	cmp	r3, #2
 800289a:	d130      	bne.n	80028fe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	2203      	movs	r2, #3
 80028a8:	409a      	lsls	r2, r3
 80028aa:	0013      	movs	r3, r2
 80028ac:	43da      	mvns	r2, r3
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	4013      	ands	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	68da      	ldr	r2, [r3, #12]
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	409a      	lsls	r2, r3
 80028be:	0013      	movs	r3, r2
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028d2:	2201      	movs	r2, #1
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	409a      	lsls	r2, r3
 80028d8:	0013      	movs	r3, r2
 80028da:	43da      	mvns	r2, r3
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	4013      	ands	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	091b      	lsrs	r3, r3, #4
 80028e8:	2201      	movs	r2, #1
 80028ea:	401a      	ands	r2, r3
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	409a      	lsls	r2, r3
 80028f0:	0013      	movs	r3, r2
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2203      	movs	r2, #3
 8002904:	4013      	ands	r3, r2
 8002906:	2b03      	cmp	r3, #3
 8002908:	d017      	beq.n	800293a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	2203      	movs	r2, #3
 8002916:	409a      	lsls	r2, r3
 8002918:	0013      	movs	r3, r2
 800291a:	43da      	mvns	r2, r3
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	4013      	ands	r3, r2
 8002920:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	409a      	lsls	r2, r3
 800292c:	0013      	movs	r3, r2
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	4313      	orrs	r3, r2
 8002932:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2203      	movs	r2, #3
 8002940:	4013      	ands	r3, r2
 8002942:	2b02      	cmp	r3, #2
 8002944:	d123      	bne.n	800298e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	08da      	lsrs	r2, r3, #3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3208      	adds	r2, #8
 800294e:	0092      	lsls	r2, r2, #2
 8002950:	58d3      	ldr	r3, [r2, r3]
 8002952:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	2207      	movs	r2, #7
 8002958:	4013      	ands	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	220f      	movs	r2, #15
 800295e:	409a      	lsls	r2, r3
 8002960:	0013      	movs	r3, r2
 8002962:	43da      	mvns	r2, r3
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	4013      	ands	r3, r2
 8002968:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	691a      	ldr	r2, [r3, #16]
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	2107      	movs	r1, #7
 8002972:	400b      	ands	r3, r1
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	409a      	lsls	r2, r3
 8002978:	0013      	movs	r3, r2
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	08da      	lsrs	r2, r3, #3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3208      	adds	r2, #8
 8002988:	0092      	lsls	r2, r2, #2
 800298a:	6939      	ldr	r1, [r7, #16]
 800298c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	2203      	movs	r2, #3
 800299a:	409a      	lsls	r2, r3
 800299c:	0013      	movs	r3, r2
 800299e:	43da      	mvns	r2, r3
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	4013      	ands	r3, r2
 80029a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2203      	movs	r2, #3
 80029ac:	401a      	ands	r2, r3
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	409a      	lsls	r2, r3
 80029b4:	0013      	movs	r3, r2
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	23c0      	movs	r3, #192	; 0xc0
 80029c8:	029b      	lsls	r3, r3, #10
 80029ca:	4013      	ands	r3, r2
 80029cc:	d100      	bne.n	80029d0 <HAL_GPIO_Init+0x17c>
 80029ce:	e0a0      	b.n	8002b12 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029d0:	4b57      	ldr	r3, [pc, #348]	; (8002b30 <HAL_GPIO_Init+0x2dc>)
 80029d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029d4:	4b56      	ldr	r3, [pc, #344]	; (8002b30 <HAL_GPIO_Init+0x2dc>)
 80029d6:	2101      	movs	r1, #1
 80029d8:	430a      	orrs	r2, r1
 80029da:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80029dc:	4a55      	ldr	r2, [pc, #340]	; (8002b34 <HAL_GPIO_Init+0x2e0>)
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	089b      	lsrs	r3, r3, #2
 80029e2:	3302      	adds	r3, #2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	589b      	ldr	r3, [r3, r2]
 80029e8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2203      	movs	r2, #3
 80029ee:	4013      	ands	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	220f      	movs	r2, #15
 80029f4:	409a      	lsls	r2, r3
 80029f6:	0013      	movs	r3, r2
 80029f8:	43da      	mvns	r2, r3
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	4013      	ands	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	23a0      	movs	r3, #160	; 0xa0
 8002a04:	05db      	lsls	r3, r3, #23
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d01f      	beq.n	8002a4a <HAL_GPIO_Init+0x1f6>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a4a      	ldr	r2, [pc, #296]	; (8002b38 <HAL_GPIO_Init+0x2e4>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d019      	beq.n	8002a46 <HAL_GPIO_Init+0x1f2>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a49      	ldr	r2, [pc, #292]	; (8002b3c <HAL_GPIO_Init+0x2e8>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d013      	beq.n	8002a42 <HAL_GPIO_Init+0x1ee>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a48      	ldr	r2, [pc, #288]	; (8002b40 <HAL_GPIO_Init+0x2ec>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d00d      	beq.n	8002a3e <HAL_GPIO_Init+0x1ea>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a47      	ldr	r2, [pc, #284]	; (8002b44 <HAL_GPIO_Init+0x2f0>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d007      	beq.n	8002a3a <HAL_GPIO_Init+0x1e6>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a46      	ldr	r2, [pc, #280]	; (8002b48 <HAL_GPIO_Init+0x2f4>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d101      	bne.n	8002a36 <HAL_GPIO_Init+0x1e2>
 8002a32:	2305      	movs	r3, #5
 8002a34:	e00a      	b.n	8002a4c <HAL_GPIO_Init+0x1f8>
 8002a36:	2306      	movs	r3, #6
 8002a38:	e008      	b.n	8002a4c <HAL_GPIO_Init+0x1f8>
 8002a3a:	2304      	movs	r3, #4
 8002a3c:	e006      	b.n	8002a4c <HAL_GPIO_Init+0x1f8>
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e004      	b.n	8002a4c <HAL_GPIO_Init+0x1f8>
 8002a42:	2302      	movs	r3, #2
 8002a44:	e002      	b.n	8002a4c <HAL_GPIO_Init+0x1f8>
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <HAL_GPIO_Init+0x1f8>
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	2103      	movs	r1, #3
 8002a50:	400a      	ands	r2, r1
 8002a52:	0092      	lsls	r2, r2, #2
 8002a54:	4093      	lsls	r3, r2
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a5c:	4935      	ldr	r1, [pc, #212]	; (8002b34 <HAL_GPIO_Init+0x2e0>)
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	089b      	lsrs	r3, r3, #2
 8002a62:	3302      	adds	r3, #2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a6a:	4b38      	ldr	r3, [pc, #224]	; (8002b4c <HAL_GPIO_Init+0x2f8>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	43da      	mvns	r2, r3
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	4013      	ands	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	2380      	movs	r3, #128	; 0x80
 8002a80:	035b      	lsls	r3, r3, #13
 8002a82:	4013      	ands	r3, r2
 8002a84:	d003      	beq.n	8002a8e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002a8e:	4b2f      	ldr	r3, [pc, #188]	; (8002b4c <HAL_GPIO_Init+0x2f8>)
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002a94:	4b2d      	ldr	r3, [pc, #180]	; (8002b4c <HAL_GPIO_Init+0x2f8>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	43da      	mvns	r2, r3
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	2380      	movs	r3, #128	; 0x80
 8002aaa:	039b      	lsls	r3, r3, #14
 8002aac:	4013      	ands	r3, r2
 8002aae:	d003      	beq.n	8002ab8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002ab8:	4b24      	ldr	r3, [pc, #144]	; (8002b4c <HAL_GPIO_Init+0x2f8>)
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002abe:	4b23      	ldr	r3, [pc, #140]	; (8002b4c <HAL_GPIO_Init+0x2f8>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	43da      	mvns	r2, r3
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	4013      	ands	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	2380      	movs	r3, #128	; 0x80
 8002ad4:	029b      	lsls	r3, r3, #10
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	d003      	beq.n	8002ae2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002ae2:	4b1a      	ldr	r3, [pc, #104]	; (8002b4c <HAL_GPIO_Init+0x2f8>)
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ae8:	4b18      	ldr	r3, [pc, #96]	; (8002b4c <HAL_GPIO_Init+0x2f8>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	43da      	mvns	r2, r3
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	4013      	ands	r3, r2
 8002af6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	2380      	movs	r3, #128	; 0x80
 8002afe:	025b      	lsls	r3, r3, #9
 8002b00:	4013      	ands	r3, r2
 8002b02:	d003      	beq.n	8002b0c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002b0c:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <HAL_GPIO_Init+0x2f8>)
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	3301      	adds	r3, #1
 8002b16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	40da      	lsrs	r2, r3
 8002b20:	1e13      	subs	r3, r2, #0
 8002b22:	d000      	beq.n	8002b26 <HAL_GPIO_Init+0x2d2>
 8002b24:	e6a2      	b.n	800286c <HAL_GPIO_Init+0x18>
  }
}
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	46c0      	nop			; (mov r8, r8)
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	b006      	add	sp, #24
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40021000 	.word	0x40021000
 8002b34:	40010000 	.word	0x40010000
 8002b38:	50000400 	.word	0x50000400
 8002b3c:	50000800 	.word	0x50000800
 8002b40:	50000c00 	.word	0x50000c00
 8002b44:	50001000 	.word	0x50001000
 8002b48:	50001c00 	.word	0x50001c00
 8002b4c:	40010400 	.word	0x40010400

08002b50 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	000a      	movs	r2, r1
 8002b5a:	1cbb      	adds	r3, r7, #2
 8002b5c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	1cba      	adds	r2, r7, #2
 8002b64:	8812      	ldrh	r2, [r2, #0]
 8002b66:	4013      	ands	r3, r2
 8002b68:	d004      	beq.n	8002b74 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002b6a:	230f      	movs	r3, #15
 8002b6c:	18fb      	adds	r3, r7, r3
 8002b6e:	2201      	movs	r2, #1
 8002b70:	701a      	strb	r2, [r3, #0]
 8002b72:	e003      	b.n	8002b7c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b74:	230f      	movs	r3, #15
 8002b76:	18fb      	adds	r3, r7, r3
 8002b78:	2200      	movs	r2, #0
 8002b7a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002b7c:	230f      	movs	r3, #15
 8002b7e:	18fb      	adds	r3, r7, r3
 8002b80:	781b      	ldrb	r3, [r3, #0]
}
 8002b82:	0018      	movs	r0, r3
 8002b84:	46bd      	mov	sp, r7
 8002b86:	b004      	add	sp, #16
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
 8002b92:	0008      	movs	r0, r1
 8002b94:	0011      	movs	r1, r2
 8002b96:	1cbb      	adds	r3, r7, #2
 8002b98:	1c02      	adds	r2, r0, #0
 8002b9a:	801a      	strh	r2, [r3, #0]
 8002b9c:	1c7b      	adds	r3, r7, #1
 8002b9e:	1c0a      	adds	r2, r1, #0
 8002ba0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ba2:	1c7b      	adds	r3, r7, #1
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d004      	beq.n	8002bb4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002baa:	1cbb      	adds	r3, r7, #2
 8002bac:	881a      	ldrh	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002bb2:	e003      	b.n	8002bbc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002bb4:	1cbb      	adds	r3, r7, #2
 8002bb6:	881a      	ldrh	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002bbc:	46c0      	nop			; (mov r8, r8)
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	b002      	add	sp, #8
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	000a      	movs	r2, r1
 8002bce:	1cbb      	adds	r3, r7, #2
 8002bd0:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bd8:	1cbb      	adds	r3, r7, #2
 8002bda:	881b      	ldrh	r3, [r3, #0]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	4013      	ands	r3, r2
 8002be0:	041a      	lsls	r2, r3, #16
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	43db      	mvns	r3, r3
 8002be6:	1cb9      	adds	r1, r7, #2
 8002be8:	8809      	ldrh	r1, [r1, #0]
 8002bea:	400b      	ands	r3, r1
 8002bec:	431a      	orrs	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	619a      	str	r2, [r3, #24]
}
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	b004      	add	sp, #16
 8002bf8:	bd80      	pop	{r7, pc}
	...

08002bfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e082      	b.n	8002d14 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2241      	movs	r2, #65	; 0x41
 8002c12:	5c9b      	ldrb	r3, [r3, r2]
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d107      	bne.n	8002c2a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2240      	movs	r2, #64	; 0x40
 8002c1e:	2100      	movs	r1, #0
 8002c20:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	0018      	movs	r0, r3
 8002c26:	f7ff fb29 	bl	800227c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2241      	movs	r2, #65	; 0x41
 8002c2e:	2124      	movs	r1, #36	; 0x24
 8002c30:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	438a      	bics	r2, r1
 8002c40:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4934      	ldr	r1, [pc, #208]	; (8002d1c <HAL_I2C_Init+0x120>)
 8002c4c:	400a      	ands	r2, r1
 8002c4e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689a      	ldr	r2, [r3, #8]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4931      	ldr	r1, [pc, #196]	; (8002d20 <HAL_I2C_Init+0x124>)
 8002c5c:	400a      	ands	r2, r1
 8002c5e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d108      	bne.n	8002c7a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2180      	movs	r1, #128	; 0x80
 8002c72:	0209      	lsls	r1, r1, #8
 8002c74:	430a      	orrs	r2, r1
 8002c76:	609a      	str	r2, [r3, #8]
 8002c78:	e007      	b.n	8002c8a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2184      	movs	r1, #132	; 0x84
 8002c84:	0209      	lsls	r1, r1, #8
 8002c86:	430a      	orrs	r2, r1
 8002c88:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d104      	bne.n	8002c9c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2280      	movs	r2, #128	; 0x80
 8002c98:	0112      	lsls	r2, r2, #4
 8002c9a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	491f      	ldr	r1, [pc, #124]	; (8002d24 <HAL_I2C_Init+0x128>)
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	491a      	ldr	r1, [pc, #104]	; (8002d20 <HAL_I2C_Init+0x124>)
 8002cb8:	400a      	ands	r2, r1
 8002cba:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691a      	ldr	r2, [r3, #16]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	69d9      	ldr	r1, [r3, #28]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a1a      	ldr	r2, [r3, #32]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2241      	movs	r2, #65	; 0x41
 8002d00:	2120      	movs	r1, #32
 8002d02:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2242      	movs	r2, #66	; 0x42
 8002d0e:	2100      	movs	r1, #0
 8002d10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	0018      	movs	r0, r3
 8002d16:	46bd      	mov	sp, r7
 8002d18:	b002      	add	sp, #8
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	f0ffffff 	.word	0xf0ffffff
 8002d20:	ffff7fff 	.word	0xffff7fff
 8002d24:	02008000 	.word	0x02008000

08002d28 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d28:	b590      	push	{r4, r7, lr}
 8002d2a:	b089      	sub	sp, #36	; 0x24
 8002d2c:	af02      	add	r7, sp, #8
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	000c      	movs	r4, r1
 8002d32:	0010      	movs	r0, r2
 8002d34:	0019      	movs	r1, r3
 8002d36:	230a      	movs	r3, #10
 8002d38:	18fb      	adds	r3, r7, r3
 8002d3a:	1c22      	adds	r2, r4, #0
 8002d3c:	801a      	strh	r2, [r3, #0]
 8002d3e:	2308      	movs	r3, #8
 8002d40:	18fb      	adds	r3, r7, r3
 8002d42:	1c02      	adds	r2, r0, #0
 8002d44:	801a      	strh	r2, [r3, #0]
 8002d46:	1dbb      	adds	r3, r7, #6
 8002d48:	1c0a      	adds	r2, r1, #0
 8002d4a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2241      	movs	r2, #65	; 0x41
 8002d50:	5c9b      	ldrb	r3, [r3, r2]
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b20      	cmp	r3, #32
 8002d56:	d000      	beq.n	8002d5a <HAL_I2C_Mem_Write+0x32>
 8002d58:	e10c      	b.n	8002f74 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d004      	beq.n	8002d6a <HAL_I2C_Mem_Write+0x42>
 8002d60:	232c      	movs	r3, #44	; 0x2c
 8002d62:	18fb      	adds	r3, r7, r3
 8002d64:	881b      	ldrh	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d105      	bne.n	8002d76 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2280      	movs	r2, #128	; 0x80
 8002d6e:	0092      	lsls	r2, r2, #2
 8002d70:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e0ff      	b.n	8002f76 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2240      	movs	r2, #64	; 0x40
 8002d7a:	5c9b      	ldrb	r3, [r3, r2]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d101      	bne.n	8002d84 <HAL_I2C_Mem_Write+0x5c>
 8002d80:	2302      	movs	r3, #2
 8002d82:	e0f8      	b.n	8002f76 <HAL_I2C_Mem_Write+0x24e>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2240      	movs	r2, #64	; 0x40
 8002d88:	2101      	movs	r1, #1
 8002d8a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d8c:	f7ff fc02 	bl	8002594 <HAL_GetTick>
 8002d90:	0003      	movs	r3, r0
 8002d92:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d94:	2380      	movs	r3, #128	; 0x80
 8002d96:	0219      	lsls	r1, r3, #8
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	2319      	movs	r3, #25
 8002da0:	2201      	movs	r2, #1
 8002da2:	f001 f881 	bl	8003ea8 <I2C_WaitOnFlagUntilTimeout>
 8002da6:	1e03      	subs	r3, r0, #0
 8002da8:	d001      	beq.n	8002dae <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e0e3      	b.n	8002f76 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2241      	movs	r2, #65	; 0x41
 8002db2:	2121      	movs	r1, #33	; 0x21
 8002db4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2242      	movs	r2, #66	; 0x42
 8002dba:	2140      	movs	r1, #64	; 0x40
 8002dbc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	222c      	movs	r2, #44	; 0x2c
 8002dce:	18ba      	adds	r2, r7, r2
 8002dd0:	8812      	ldrh	r2, [r2, #0]
 8002dd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002dda:	1dbb      	adds	r3, r7, #6
 8002ddc:	881c      	ldrh	r4, [r3, #0]
 8002dde:	2308      	movs	r3, #8
 8002de0:	18fb      	adds	r3, r7, r3
 8002de2:	881a      	ldrh	r2, [r3, #0]
 8002de4:	230a      	movs	r3, #10
 8002de6:	18fb      	adds	r3, r7, r3
 8002de8:	8819      	ldrh	r1, [r3, #0]
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	9301      	str	r3, [sp, #4]
 8002df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	0023      	movs	r3, r4
 8002df6:	f000 fba5 	bl	8003544 <I2C_RequestMemoryWrite>
 8002dfa:	1e03      	subs	r3, r0, #0
 8002dfc:	d005      	beq.n	8002e0a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2240      	movs	r2, #64	; 0x40
 8002e02:	2100      	movs	r1, #0
 8002e04:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e0b5      	b.n	8002f76 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	2bff      	cmp	r3, #255	; 0xff
 8002e12:	d911      	bls.n	8002e38 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	22ff      	movs	r2, #255	; 0xff
 8002e18:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	2380      	movs	r3, #128	; 0x80
 8002e22:	045c      	lsls	r4, r3, #17
 8002e24:	230a      	movs	r3, #10
 8002e26:	18fb      	adds	r3, r7, r3
 8002e28:	8819      	ldrh	r1, [r3, #0]
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	0023      	movs	r3, r4
 8002e32:	f001 fa11 	bl	8004258 <I2C_TransferConfig>
 8002e36:	e012      	b.n	8002e5e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	2380      	movs	r3, #128	; 0x80
 8002e4a:	049c      	lsls	r4, r3, #18
 8002e4c:	230a      	movs	r3, #10
 8002e4e:	18fb      	adds	r3, r7, r3
 8002e50:	8819      	ldrh	r1, [r3, #0]
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	2300      	movs	r3, #0
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	0023      	movs	r3, r4
 8002e5a:	f001 f9fd 	bl	8004258 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	0018      	movs	r0, r3
 8002e66:	f001 f86d 	bl	8003f44 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e6a:	1e03      	subs	r3, r0, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e081      	b.n	8002f76 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	781a      	ldrb	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	1c5a      	adds	r2, r3, #1
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d03a      	beq.n	8002f22 <HAL_I2C_Mem_Write+0x1fa>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d136      	bne.n	8002f22 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	0013      	movs	r3, r2
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2180      	movs	r1, #128	; 0x80
 8002ec2:	f000 fff1 	bl	8003ea8 <I2C_WaitOnFlagUntilTimeout>
 8002ec6:	1e03      	subs	r3, r0, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e053      	b.n	8002f76 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	2bff      	cmp	r3, #255	; 0xff
 8002ed6:	d911      	bls.n	8002efc <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	22ff      	movs	r2, #255	; 0xff
 8002edc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	2380      	movs	r3, #128	; 0x80
 8002ee6:	045c      	lsls	r4, r3, #17
 8002ee8:	230a      	movs	r3, #10
 8002eea:	18fb      	adds	r3, r7, r3
 8002eec:	8819      	ldrh	r1, [r3, #0]
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	0023      	movs	r3, r4
 8002ef6:	f001 f9af 	bl	8004258 <I2C_TransferConfig>
 8002efa:	e012      	b.n	8002f22 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f0a:	b2da      	uxtb	r2, r3
 8002f0c:	2380      	movs	r3, #128	; 0x80
 8002f0e:	049c      	lsls	r4, r3, #18
 8002f10:	230a      	movs	r3, #10
 8002f12:	18fb      	adds	r3, r7, r3
 8002f14:	8819      	ldrh	r1, [r3, #0]
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	2300      	movs	r3, #0
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	0023      	movs	r3, r4
 8002f1e:	f001 f99b 	bl	8004258 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d198      	bne.n	8002e5e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	0018      	movs	r0, r3
 8002f34:	f001 f84c 	bl	8003fd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f38:	1e03      	subs	r3, r0, #0
 8002f3a:	d001      	beq.n	8002f40 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e01a      	b.n	8002f76 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2220      	movs	r2, #32
 8002f46:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	490b      	ldr	r1, [pc, #44]	; (8002f80 <HAL_I2C_Mem_Write+0x258>)
 8002f54:	400a      	ands	r2, r1
 8002f56:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2241      	movs	r2, #65	; 0x41
 8002f5c:	2120      	movs	r1, #32
 8002f5e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2242      	movs	r2, #66	; 0x42
 8002f64:	2100      	movs	r1, #0
 8002f66:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2240      	movs	r2, #64	; 0x40
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002f70:	2300      	movs	r3, #0
 8002f72:	e000      	b.n	8002f76 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8002f74:	2302      	movs	r3, #2
  }
}
 8002f76:	0018      	movs	r0, r3
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	b007      	add	sp, #28
 8002f7c:	bd90      	pop	{r4, r7, pc}
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	fe00e800 	.word	0xfe00e800

08002f84 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f84:	b590      	push	{r4, r7, lr}
 8002f86:	b089      	sub	sp, #36	; 0x24
 8002f88:	af02      	add	r7, sp, #8
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	000c      	movs	r4, r1
 8002f8e:	0010      	movs	r0, r2
 8002f90:	0019      	movs	r1, r3
 8002f92:	230a      	movs	r3, #10
 8002f94:	18fb      	adds	r3, r7, r3
 8002f96:	1c22      	adds	r2, r4, #0
 8002f98:	801a      	strh	r2, [r3, #0]
 8002f9a:	2308      	movs	r3, #8
 8002f9c:	18fb      	adds	r3, r7, r3
 8002f9e:	1c02      	adds	r2, r0, #0
 8002fa0:	801a      	strh	r2, [r3, #0]
 8002fa2:	1dbb      	adds	r3, r7, #6
 8002fa4:	1c0a      	adds	r2, r1, #0
 8002fa6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2241      	movs	r2, #65	; 0x41
 8002fac:	5c9b      	ldrb	r3, [r3, r2]
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b20      	cmp	r3, #32
 8002fb2:	d000      	beq.n	8002fb6 <HAL_I2C_Mem_Read+0x32>
 8002fb4:	e110      	b.n	80031d8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d004      	beq.n	8002fc6 <HAL_I2C_Mem_Read+0x42>
 8002fbc:	232c      	movs	r3, #44	; 0x2c
 8002fbe:	18fb      	adds	r3, r7, r3
 8002fc0:	881b      	ldrh	r3, [r3, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d105      	bne.n	8002fd2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2280      	movs	r2, #128	; 0x80
 8002fca:	0092      	lsls	r2, r2, #2
 8002fcc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e103      	b.n	80031da <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2240      	movs	r2, #64	; 0x40
 8002fd6:	5c9b      	ldrb	r3, [r3, r2]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d101      	bne.n	8002fe0 <HAL_I2C_Mem_Read+0x5c>
 8002fdc:	2302      	movs	r3, #2
 8002fde:	e0fc      	b.n	80031da <HAL_I2C_Mem_Read+0x256>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2240      	movs	r2, #64	; 0x40
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fe8:	f7ff fad4 	bl	8002594 <HAL_GetTick>
 8002fec:	0003      	movs	r3, r0
 8002fee:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ff0:	2380      	movs	r3, #128	; 0x80
 8002ff2:	0219      	lsls	r1, r3, #8
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	2319      	movs	r3, #25
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f000 ff53 	bl	8003ea8 <I2C_WaitOnFlagUntilTimeout>
 8003002:	1e03      	subs	r3, r0, #0
 8003004:	d001      	beq.n	800300a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e0e7      	b.n	80031da <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2241      	movs	r2, #65	; 0x41
 800300e:	2122      	movs	r1, #34	; 0x22
 8003010:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2242      	movs	r2, #66	; 0x42
 8003016:	2140      	movs	r1, #64	; 0x40
 8003018:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003024:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	222c      	movs	r2, #44	; 0x2c
 800302a:	18ba      	adds	r2, r7, r2
 800302c:	8812      	ldrh	r2, [r2, #0]
 800302e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003036:	1dbb      	adds	r3, r7, #6
 8003038:	881c      	ldrh	r4, [r3, #0]
 800303a:	2308      	movs	r3, #8
 800303c:	18fb      	adds	r3, r7, r3
 800303e:	881a      	ldrh	r2, [r3, #0]
 8003040:	230a      	movs	r3, #10
 8003042:	18fb      	adds	r3, r7, r3
 8003044:	8819      	ldrh	r1, [r3, #0]
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	9301      	str	r3, [sp, #4]
 800304c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	0023      	movs	r3, r4
 8003052:	f000 fadb 	bl	800360c <I2C_RequestMemoryRead>
 8003056:	1e03      	subs	r3, r0, #0
 8003058:	d005      	beq.n	8003066 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2240      	movs	r2, #64	; 0x40
 800305e:	2100      	movs	r1, #0
 8003060:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e0b9      	b.n	80031da <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306a:	b29b      	uxth	r3, r3
 800306c:	2bff      	cmp	r3, #255	; 0xff
 800306e:	d911      	bls.n	8003094 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	22ff      	movs	r2, #255	; 0xff
 8003074:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800307a:	b2da      	uxtb	r2, r3
 800307c:	2380      	movs	r3, #128	; 0x80
 800307e:	045c      	lsls	r4, r3, #17
 8003080:	230a      	movs	r3, #10
 8003082:	18fb      	adds	r3, r7, r3
 8003084:	8819      	ldrh	r1, [r3, #0]
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	4b56      	ldr	r3, [pc, #344]	; (80031e4 <HAL_I2C_Mem_Read+0x260>)
 800308a:	9300      	str	r3, [sp, #0]
 800308c:	0023      	movs	r3, r4
 800308e:	f001 f8e3 	bl	8004258 <I2C_TransferConfig>
 8003092:	e012      	b.n	80030ba <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003098:	b29a      	uxth	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	2380      	movs	r3, #128	; 0x80
 80030a6:	049c      	lsls	r4, r3, #18
 80030a8:	230a      	movs	r3, #10
 80030aa:	18fb      	adds	r3, r7, r3
 80030ac:	8819      	ldrh	r1, [r3, #0]
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	4b4c      	ldr	r3, [pc, #304]	; (80031e4 <HAL_I2C_Mem_Read+0x260>)
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	0023      	movs	r3, r4
 80030b6:	f001 f8cf 	bl	8004258 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80030ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	0013      	movs	r3, r2
 80030c4:	2200      	movs	r2, #0
 80030c6:	2104      	movs	r1, #4
 80030c8:	f000 feee 	bl	8003ea8 <I2C_WaitOnFlagUntilTimeout>
 80030cc:	1e03      	subs	r3, r0, #0
 80030ce:	d001      	beq.n	80030d4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e082      	b.n	80031da <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	1c5a      	adds	r2, r3, #1
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f0:	3b01      	subs	r3, #1
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	3b01      	subs	r3, #1
 8003100:	b29a      	uxth	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310a:	b29b      	uxth	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d03a      	beq.n	8003186 <HAL_I2C_Mem_Read+0x202>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003114:	2b00      	cmp	r3, #0
 8003116:	d136      	bne.n	8003186 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	0013      	movs	r3, r2
 8003122:	2200      	movs	r2, #0
 8003124:	2180      	movs	r1, #128	; 0x80
 8003126:	f000 febf 	bl	8003ea8 <I2C_WaitOnFlagUntilTimeout>
 800312a:	1e03      	subs	r3, r0, #0
 800312c:	d001      	beq.n	8003132 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e053      	b.n	80031da <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003136:	b29b      	uxth	r3, r3
 8003138:	2bff      	cmp	r3, #255	; 0xff
 800313a:	d911      	bls.n	8003160 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	22ff      	movs	r2, #255	; 0xff
 8003140:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003146:	b2da      	uxtb	r2, r3
 8003148:	2380      	movs	r3, #128	; 0x80
 800314a:	045c      	lsls	r4, r3, #17
 800314c:	230a      	movs	r3, #10
 800314e:	18fb      	adds	r3, r7, r3
 8003150:	8819      	ldrh	r1, [r3, #0]
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	2300      	movs	r3, #0
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	0023      	movs	r3, r4
 800315a:	f001 f87d 	bl	8004258 <I2C_TransferConfig>
 800315e:	e012      	b.n	8003186 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003164:	b29a      	uxth	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800316e:	b2da      	uxtb	r2, r3
 8003170:	2380      	movs	r3, #128	; 0x80
 8003172:	049c      	lsls	r4, r3, #18
 8003174:	230a      	movs	r3, #10
 8003176:	18fb      	adds	r3, r7, r3
 8003178:	8819      	ldrh	r1, [r3, #0]
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	2300      	movs	r3, #0
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	0023      	movs	r3, r4
 8003182:	f001 f869 	bl	8004258 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800318a:	b29b      	uxth	r3, r3
 800318c:	2b00      	cmp	r3, #0
 800318e:	d194      	bne.n	80030ba <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	0018      	movs	r0, r3
 8003198:	f000 ff1a 	bl	8003fd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800319c:	1e03      	subs	r3, r0, #0
 800319e:	d001      	beq.n	80031a4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e01a      	b.n	80031da <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2220      	movs	r2, #32
 80031aa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	490c      	ldr	r1, [pc, #48]	; (80031e8 <HAL_I2C_Mem_Read+0x264>)
 80031b8:	400a      	ands	r2, r1
 80031ba:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2241      	movs	r2, #65	; 0x41
 80031c0:	2120      	movs	r1, #32
 80031c2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2242      	movs	r2, #66	; 0x42
 80031c8:	2100      	movs	r1, #0
 80031ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2240      	movs	r2, #64	; 0x40
 80031d0:	2100      	movs	r1, #0
 80031d2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80031d4:	2300      	movs	r3, #0
 80031d6:	e000      	b.n	80031da <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80031d8:	2302      	movs	r3, #2
  }
}
 80031da:	0018      	movs	r0, r3
 80031dc:	46bd      	mov	sp, r7
 80031de:	b007      	add	sp, #28
 80031e0:	bd90      	pop	{r4, r7, pc}
 80031e2:	46c0      	nop			; (mov r8, r8)
 80031e4:	80002400 	.word	0x80002400
 80031e8:	fe00e800 	.word	0xfe00e800

080031ec <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003208:	2b00      	cmp	r3, #0
 800320a:	d005      	beq.n	8003218 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	68f9      	ldr	r1, [r7, #12]
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	4798      	blx	r3
  }
}
 8003218:	46c0      	nop			; (mov r8, r8)
 800321a:	46bd      	mov	sp, r7
 800321c:	b004      	add	sp, #16
 800321e:	bd80      	pop	{r7, pc}

08003220 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	2380      	movs	r3, #128	; 0x80
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	4013      	ands	r3, r2
 8003240:	d00e      	beq.n	8003260 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	2280      	movs	r2, #128	; 0x80
 8003246:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003248:	d00a      	beq.n	8003260 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324e:	2201      	movs	r2, #1
 8003250:	431a      	orrs	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2280      	movs	r2, #128	; 0x80
 800325c:	0052      	lsls	r2, r2, #1
 800325e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	2380      	movs	r3, #128	; 0x80
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	4013      	ands	r3, r2
 8003268:	d00e      	beq.n	8003288 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	2280      	movs	r2, #128	; 0x80
 800326e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003270:	d00a      	beq.n	8003288 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003276:	2208      	movs	r2, #8
 8003278:	431a      	orrs	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2280      	movs	r2, #128	; 0x80
 8003284:	00d2      	lsls	r2, r2, #3
 8003286:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	2380      	movs	r3, #128	; 0x80
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4013      	ands	r3, r2
 8003290:	d00e      	beq.n	80032b0 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	2280      	movs	r2, #128	; 0x80
 8003296:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003298:	d00a      	beq.n	80032b0 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329e:	2202      	movs	r2, #2
 80032a0:	431a      	orrs	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2280      	movs	r2, #128	; 0x80
 80032ac:	0092      	lsls	r2, r2, #2
 80032ae:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b4:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	220b      	movs	r2, #11
 80032ba:	4013      	ands	r3, r2
 80032bc:	d005      	beq.n	80032ca <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	0011      	movs	r1, r2
 80032c4:	0018      	movs	r0, r3
 80032c6:	f000 fc83 	bl	8003bd0 <I2C_ITError>
  }
}
 80032ca:	46c0      	nop			; (mov r8, r8)
 80032cc:	46bd      	mov	sp, r7
 80032ce:	b006      	add	sp, #24
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b082      	sub	sp, #8
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	46bd      	mov	sp, r7
 80032de:	b002      	add	sp, #8
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b082      	sub	sp, #8
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80032ea:	46c0      	nop			; (mov r8, r8)
 80032ec:	46bd      	mov	sp, r7
 80032ee:	b002      	add	sp, #8
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b082      	sub	sp, #8
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
 80032fa:	0008      	movs	r0, r1
 80032fc:	0011      	movs	r1, r2
 80032fe:	1cfb      	adds	r3, r7, #3
 8003300:	1c02      	adds	r2, r0, #0
 8003302:	701a      	strb	r2, [r3, #0]
 8003304:	003b      	movs	r3, r7
 8003306:	1c0a      	adds	r2, r1, #0
 8003308:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800330a:	46c0      	nop			; (mov r8, r8)
 800330c:	46bd      	mov	sp, r7
 800330e:	b002      	add	sp, #8
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b082      	sub	sp, #8
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	46bd      	mov	sp, r7
 800331e:	b002      	add	sp, #8
 8003320:	bd80      	pop	{r7, pc}

08003322 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b082      	sub	sp, #8
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800332a:	46c0      	nop			; (mov r8, r8)
 800332c:	46bd      	mov	sp, r7
 800332e:	b002      	add	sp, #8
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b082      	sub	sp, #8
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800333a:	46c0      	nop			; (mov r8, r8)
 800333c:	46bd      	mov	sp, r7
 800333e:	b002      	add	sp, #8
 8003340:	bd80      	pop	{r7, pc}
	...

08003344 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003354:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2240      	movs	r2, #64	; 0x40
 800335e:	5c9b      	ldrb	r3, [r3, r2]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d101      	bne.n	8003368 <I2C_Slave_ISR_IT+0x24>
 8003364:	2302      	movs	r3, #2
 8003366:	e0e6      	b.n	8003536 <I2C_Slave_ISR_IT+0x1f2>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2240      	movs	r2, #64	; 0x40
 800336c:	2101      	movs	r1, #1
 800336e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	2220      	movs	r2, #32
 8003374:	4013      	ands	r3, r2
 8003376:	d009      	beq.n	800338c <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2220      	movs	r2, #32
 800337c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800337e:	d005      	beq.n	800338c <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	0011      	movs	r1, r2
 8003386:	0018      	movs	r0, r3
 8003388:	f000 faaa 	bl	80038e0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	2210      	movs	r2, #16
 8003390:	4013      	ands	r3, r2
 8003392:	d052      	beq.n	800343a <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2210      	movs	r2, #16
 8003398:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800339a:	d04e      	beq.n	800343a <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d12d      	bne.n	8003402 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2241      	movs	r2, #65	; 0x41
 80033aa:	5c9b      	ldrb	r3, [r3, r2]
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b28      	cmp	r3, #40	; 0x28
 80033b0:	d10b      	bne.n	80033ca <I2C_Slave_ISR_IT+0x86>
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	2380      	movs	r3, #128	; 0x80
 80033b6:	049b      	lsls	r3, r3, #18
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d106      	bne.n	80033ca <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	0011      	movs	r1, r2
 80033c2:	0018      	movs	r0, r3
 80033c4:	f000 fbac 	bl	8003b20 <I2C_ITListenCplt>
 80033c8:	e036      	b.n	8003438 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2241      	movs	r2, #65	; 0x41
 80033ce:	5c9b      	ldrb	r3, [r3, r2]
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b29      	cmp	r3, #41	; 0x29
 80033d4:	d110      	bne.n	80033f8 <I2C_Slave_ISR_IT+0xb4>
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	4a59      	ldr	r2, [pc, #356]	; (8003540 <I2C_Slave_ISR_IT+0x1fc>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d00c      	beq.n	80033f8 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2210      	movs	r2, #16
 80033e4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	0018      	movs	r0, r3
 80033ea:	f000 fd1c 	bl	8003e26 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	0018      	movs	r0, r3
 80033f2:	f000 fa11 	bl	8003818 <I2C_ITSlaveSeqCplt>
 80033f6:	e01f      	b.n	8003438 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2210      	movs	r2, #16
 80033fe:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003400:	e091      	b.n	8003526 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2210      	movs	r2, #16
 8003408:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340e:	2204      	movs	r2, #4
 8003410:	431a      	orrs	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d005      	beq.n	8003428 <I2C_Slave_ISR_IT+0xe4>
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	2380      	movs	r3, #128	; 0x80
 8003420:	045b      	lsls	r3, r3, #17
 8003422:	429a      	cmp	r2, r3
 8003424:	d000      	beq.n	8003428 <I2C_Slave_ISR_IT+0xe4>
 8003426:	e07e      	b.n	8003526 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	0011      	movs	r1, r2
 8003430:	0018      	movs	r0, r3
 8003432:	f000 fbcd 	bl	8003bd0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003436:	e076      	b.n	8003526 <I2C_Slave_ISR_IT+0x1e2>
 8003438:	e075      	b.n	8003526 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	2204      	movs	r2, #4
 800343e:	4013      	ands	r3, r2
 8003440:	d02f      	beq.n	80034a2 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2204      	movs	r2, #4
 8003446:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003448:	d02b      	beq.n	80034a2 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344e:	b29b      	uxth	r3, r3
 8003450:	2b00      	cmp	r3, #0
 8003452:	d018      	beq.n	8003486 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	b2d2      	uxtb	r2, r2
 8003460:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	1c5a      	adds	r2, r3, #1
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003470:	3b01      	subs	r3, #1
 8003472:	b29a      	uxth	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800347c:	b29b      	uxth	r3, r3
 800347e:	3b01      	subs	r3, #1
 8003480:	b29a      	uxth	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348a:	b29b      	uxth	r3, r3
 800348c:	2b00      	cmp	r3, #0
 800348e:	d14c      	bne.n	800352a <I2C_Slave_ISR_IT+0x1e6>
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	4a2b      	ldr	r2, [pc, #172]	; (8003540 <I2C_Slave_ISR_IT+0x1fc>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d048      	beq.n	800352a <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	0018      	movs	r0, r3
 800349c:	f000 f9bc 	bl	8003818 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80034a0:	e043      	b.n	800352a <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	2208      	movs	r2, #8
 80034a6:	4013      	ands	r3, r2
 80034a8:	d00a      	beq.n	80034c0 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2208      	movs	r2, #8
 80034ae:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80034b0:	d006      	beq.n	80034c0 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	0011      	movs	r1, r2
 80034b8:	0018      	movs	r0, r3
 80034ba:	f000 f909 	bl	80036d0 <I2C_ITAddrCplt>
 80034be:	e035      	b.n	800352c <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	2202      	movs	r2, #2
 80034c4:	4013      	ands	r3, r2
 80034c6:	d031      	beq.n	800352c <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2202      	movs	r2, #2
 80034cc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80034ce:	d02d      	beq.n	800352c <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d018      	beq.n	800350c <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034de:	781a      	ldrb	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	1c5a      	adds	r2, r3, #1
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	3b01      	subs	r3, #1
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003502:	3b01      	subs	r3, #1
 8003504:	b29a      	uxth	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	851a      	strh	r2, [r3, #40]	; 0x28
 800350a:	e00f      	b.n	800352c <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	2380      	movs	r3, #128	; 0x80
 8003510:	045b      	lsls	r3, r3, #17
 8003512:	429a      	cmp	r2, r3
 8003514:	d002      	beq.n	800351c <I2C_Slave_ISR_IT+0x1d8>
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d107      	bne.n	800352c <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	0018      	movs	r0, r3
 8003520:	f000 f97a 	bl	8003818 <I2C_ITSlaveSeqCplt>
 8003524:	e002      	b.n	800352c <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	e000      	b.n	800352c <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 800352a:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2240      	movs	r2, #64	; 0x40
 8003530:	2100      	movs	r1, #0
 8003532:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	0018      	movs	r0, r3
 8003538:	46bd      	mov	sp, r7
 800353a:	b006      	add	sp, #24
 800353c:	bd80      	pop	{r7, pc}
 800353e:	46c0      	nop			; (mov r8, r8)
 8003540:	ffff0000 	.word	0xffff0000

08003544 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003544:	b5b0      	push	{r4, r5, r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af02      	add	r7, sp, #8
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	000c      	movs	r4, r1
 800354e:	0010      	movs	r0, r2
 8003550:	0019      	movs	r1, r3
 8003552:	250a      	movs	r5, #10
 8003554:	197b      	adds	r3, r7, r5
 8003556:	1c22      	adds	r2, r4, #0
 8003558:	801a      	strh	r2, [r3, #0]
 800355a:	2308      	movs	r3, #8
 800355c:	18fb      	adds	r3, r7, r3
 800355e:	1c02      	adds	r2, r0, #0
 8003560:	801a      	strh	r2, [r3, #0]
 8003562:	1dbb      	adds	r3, r7, #6
 8003564:	1c0a      	adds	r2, r1, #0
 8003566:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003568:	1dbb      	adds	r3, r7, #6
 800356a:	881b      	ldrh	r3, [r3, #0]
 800356c:	b2da      	uxtb	r2, r3
 800356e:	2380      	movs	r3, #128	; 0x80
 8003570:	045c      	lsls	r4, r3, #17
 8003572:	197b      	adds	r3, r7, r5
 8003574:	8819      	ldrh	r1, [r3, #0]
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	4b23      	ldr	r3, [pc, #140]	; (8003608 <I2C_RequestMemoryWrite+0xc4>)
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	0023      	movs	r3, r4
 800357e:	f000 fe6b 	bl	8004258 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003584:	6a39      	ldr	r1, [r7, #32]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	0018      	movs	r0, r3
 800358a:	f000 fcdb 	bl	8003f44 <I2C_WaitOnTXISFlagUntilTimeout>
 800358e:	1e03      	subs	r3, r0, #0
 8003590:	d001      	beq.n	8003596 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e033      	b.n	80035fe <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003596:	1dbb      	adds	r3, r7, #6
 8003598:	881b      	ldrh	r3, [r3, #0]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d107      	bne.n	80035ae <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800359e:	2308      	movs	r3, #8
 80035a0:	18fb      	adds	r3, r7, r3
 80035a2:	881b      	ldrh	r3, [r3, #0]
 80035a4:	b2da      	uxtb	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	629a      	str	r2, [r3, #40]	; 0x28
 80035ac:	e019      	b.n	80035e2 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80035ae:	2308      	movs	r3, #8
 80035b0:	18fb      	adds	r3, r7, r3
 80035b2:	881b      	ldrh	r3, [r3, #0]
 80035b4:	0a1b      	lsrs	r3, r3, #8
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c2:	6a39      	ldr	r1, [r7, #32]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	0018      	movs	r0, r3
 80035c8:	f000 fcbc 	bl	8003f44 <I2C_WaitOnTXISFlagUntilTimeout>
 80035cc:	1e03      	subs	r3, r0, #0
 80035ce:	d001      	beq.n	80035d4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e014      	b.n	80035fe <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035d4:	2308      	movs	r3, #8
 80035d6:	18fb      	adds	r3, r7, r3
 80035d8:	881b      	ldrh	r3, [r3, #0]
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80035e2:	6a3a      	ldr	r2, [r7, #32]
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	0013      	movs	r3, r2
 80035ec:	2200      	movs	r2, #0
 80035ee:	2180      	movs	r1, #128	; 0x80
 80035f0:	f000 fc5a 	bl	8003ea8 <I2C_WaitOnFlagUntilTimeout>
 80035f4:	1e03      	subs	r3, r0, #0
 80035f6:	d001      	beq.n	80035fc <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e000      	b.n	80035fe <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	0018      	movs	r0, r3
 8003600:	46bd      	mov	sp, r7
 8003602:	b004      	add	sp, #16
 8003604:	bdb0      	pop	{r4, r5, r7, pc}
 8003606:	46c0      	nop			; (mov r8, r8)
 8003608:	80002000 	.word	0x80002000

0800360c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800360c:	b5b0      	push	{r4, r5, r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af02      	add	r7, sp, #8
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	000c      	movs	r4, r1
 8003616:	0010      	movs	r0, r2
 8003618:	0019      	movs	r1, r3
 800361a:	250a      	movs	r5, #10
 800361c:	197b      	adds	r3, r7, r5
 800361e:	1c22      	adds	r2, r4, #0
 8003620:	801a      	strh	r2, [r3, #0]
 8003622:	2308      	movs	r3, #8
 8003624:	18fb      	adds	r3, r7, r3
 8003626:	1c02      	adds	r2, r0, #0
 8003628:	801a      	strh	r2, [r3, #0]
 800362a:	1dbb      	adds	r3, r7, #6
 800362c:	1c0a      	adds	r2, r1, #0
 800362e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003630:	1dbb      	adds	r3, r7, #6
 8003632:	881b      	ldrh	r3, [r3, #0]
 8003634:	b2da      	uxtb	r2, r3
 8003636:	197b      	adds	r3, r7, r5
 8003638:	8819      	ldrh	r1, [r3, #0]
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	4b23      	ldr	r3, [pc, #140]	; (80036cc <I2C_RequestMemoryRead+0xc0>)
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	2300      	movs	r3, #0
 8003642:	f000 fe09 	bl	8004258 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003648:	6a39      	ldr	r1, [r7, #32]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	0018      	movs	r0, r3
 800364e:	f000 fc79 	bl	8003f44 <I2C_WaitOnTXISFlagUntilTimeout>
 8003652:	1e03      	subs	r3, r0, #0
 8003654:	d001      	beq.n	800365a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e033      	b.n	80036c2 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800365a:	1dbb      	adds	r3, r7, #6
 800365c:	881b      	ldrh	r3, [r3, #0]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d107      	bne.n	8003672 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003662:	2308      	movs	r3, #8
 8003664:	18fb      	adds	r3, r7, r3
 8003666:	881b      	ldrh	r3, [r3, #0]
 8003668:	b2da      	uxtb	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	629a      	str	r2, [r3, #40]	; 0x28
 8003670:	e019      	b.n	80036a6 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003672:	2308      	movs	r3, #8
 8003674:	18fb      	adds	r3, r7, r3
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	0a1b      	lsrs	r3, r3, #8
 800367a:	b29b      	uxth	r3, r3
 800367c:	b2da      	uxtb	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003686:	6a39      	ldr	r1, [r7, #32]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	0018      	movs	r0, r3
 800368c:	f000 fc5a 	bl	8003f44 <I2C_WaitOnTXISFlagUntilTimeout>
 8003690:	1e03      	subs	r3, r0, #0
 8003692:	d001      	beq.n	8003698 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e014      	b.n	80036c2 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003698:	2308      	movs	r3, #8
 800369a:	18fb      	adds	r3, r7, r3
 800369c:	881b      	ldrh	r3, [r3, #0]
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80036a6:	6a3a      	ldr	r2, [r7, #32]
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	0013      	movs	r3, r2
 80036b0:	2200      	movs	r2, #0
 80036b2:	2140      	movs	r1, #64	; 0x40
 80036b4:	f000 fbf8 	bl	8003ea8 <I2C_WaitOnFlagUntilTimeout>
 80036b8:	1e03      	subs	r3, r0, #0
 80036ba:	d001      	beq.n	80036c0 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e000      	b.n	80036c2 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	0018      	movs	r0, r3
 80036c4:	46bd      	mov	sp, r7
 80036c6:	b004      	add	sp, #16
 80036c8:	bdb0      	pop	{r4, r5, r7, pc}
 80036ca:	46c0      	nop			; (mov r8, r8)
 80036cc:	80002000 	.word	0x80002000

080036d0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80036d0:	b5b0      	push	{r4, r5, r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2241      	movs	r2, #65	; 0x41
 80036de:	5c9b      	ldrb	r3, [r3, r2]
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	001a      	movs	r2, r3
 80036e4:	2328      	movs	r3, #40	; 0x28
 80036e6:	4013      	ands	r3, r2
 80036e8:	2b28      	cmp	r3, #40	; 0x28
 80036ea:	d000      	beq.n	80036ee <I2C_ITAddrCplt+0x1e>
 80036ec:	e088      	b.n	8003800 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	0c1b      	lsrs	r3, r3, #16
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	250f      	movs	r5, #15
 80036fa:	197b      	adds	r3, r7, r5
 80036fc:	2101      	movs	r1, #1
 80036fe:	400a      	ands	r2, r1
 8003700:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	0c1b      	lsrs	r3, r3, #16
 800370a:	b29a      	uxth	r2, r3
 800370c:	200c      	movs	r0, #12
 800370e:	183b      	adds	r3, r7, r0
 8003710:	21fe      	movs	r1, #254	; 0xfe
 8003712:	400a      	ands	r2, r1
 8003714:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	b29a      	uxth	r2, r3
 800371e:	240a      	movs	r4, #10
 8003720:	193b      	adds	r3, r7, r4
 8003722:	0592      	lsls	r2, r2, #22
 8003724:	0d92      	lsrs	r2, r2, #22
 8003726:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	b29a      	uxth	r2, r3
 8003730:	2308      	movs	r3, #8
 8003732:	18fb      	adds	r3, r7, r3
 8003734:	21fe      	movs	r1, #254	; 0xfe
 8003736:	400a      	ands	r2, r1
 8003738:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	2b02      	cmp	r3, #2
 8003740:	d148      	bne.n	80037d4 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003742:	0021      	movs	r1, r4
 8003744:	187b      	adds	r3, r7, r1
 8003746:	881b      	ldrh	r3, [r3, #0]
 8003748:	09db      	lsrs	r3, r3, #7
 800374a:	b29a      	uxth	r2, r3
 800374c:	183b      	adds	r3, r7, r0
 800374e:	881b      	ldrh	r3, [r3, #0]
 8003750:	4053      	eors	r3, r2
 8003752:	b29b      	uxth	r3, r3
 8003754:	001a      	movs	r2, r3
 8003756:	2306      	movs	r3, #6
 8003758:	4013      	ands	r3, r2
 800375a:	d120      	bne.n	800379e <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800375c:	183b      	adds	r3, r7, r0
 800375e:	187a      	adds	r2, r7, r1
 8003760:	8812      	ldrh	r2, [r2, #0]
 8003762:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003768:	1c5a      	adds	r2, r3, #1
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003772:	2b02      	cmp	r3, #2
 8003774:	d14c      	bne.n	8003810 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2208      	movs	r2, #8
 8003782:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2240      	movs	r2, #64	; 0x40
 8003788:	2100      	movs	r1, #0
 800378a:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800378c:	183b      	adds	r3, r7, r0
 800378e:	881a      	ldrh	r2, [r3, #0]
 8003790:	197b      	adds	r3, r7, r5
 8003792:	7819      	ldrb	r1, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	0018      	movs	r0, r3
 8003798:	f7ff fdab 	bl	80032f2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800379c:	e038      	b.n	8003810 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800379e:	240c      	movs	r4, #12
 80037a0:	193b      	adds	r3, r7, r4
 80037a2:	2208      	movs	r2, #8
 80037a4:	18ba      	adds	r2, r7, r2
 80037a6:	8812      	ldrh	r2, [r2, #0]
 80037a8:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80037aa:	2380      	movs	r3, #128	; 0x80
 80037ac:	021a      	lsls	r2, r3, #8
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	0011      	movs	r1, r2
 80037b2:	0018      	movs	r0, r3
 80037b4:	f000 fd8a 	bl	80042cc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2240      	movs	r2, #64	; 0x40
 80037bc:	2100      	movs	r1, #0
 80037be:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80037c0:	193b      	adds	r3, r7, r4
 80037c2:	881a      	ldrh	r2, [r3, #0]
 80037c4:	230f      	movs	r3, #15
 80037c6:	18fb      	adds	r3, r7, r3
 80037c8:	7819      	ldrb	r1, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	0018      	movs	r0, r3
 80037ce:	f7ff fd90 	bl	80032f2 <HAL_I2C_AddrCallback>
}
 80037d2:	e01d      	b.n	8003810 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80037d4:	2380      	movs	r3, #128	; 0x80
 80037d6:	021a      	lsls	r2, r3, #8
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	0011      	movs	r1, r2
 80037dc:	0018      	movs	r0, r3
 80037de:	f000 fd75 	bl	80042cc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2240      	movs	r2, #64	; 0x40
 80037e6:	2100      	movs	r1, #0
 80037e8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80037ea:	230c      	movs	r3, #12
 80037ec:	18fb      	adds	r3, r7, r3
 80037ee:	881a      	ldrh	r2, [r3, #0]
 80037f0:	230f      	movs	r3, #15
 80037f2:	18fb      	adds	r3, r7, r3
 80037f4:	7819      	ldrb	r1, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	0018      	movs	r0, r3
 80037fa:	f7ff fd7a 	bl	80032f2 <HAL_I2C_AddrCallback>
}
 80037fe:	e007      	b.n	8003810 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2208      	movs	r2, #8
 8003806:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2240      	movs	r2, #64	; 0x40
 800380c:	2100      	movs	r1, #0
 800380e:	5499      	strb	r1, [r3, r2]
}
 8003810:	46c0      	nop			; (mov r8, r8)
 8003812:	46bd      	mov	sp, r7
 8003814:	b004      	add	sp, #16
 8003816:	bdb0      	pop	{r4, r5, r7, pc}

08003818 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2242      	movs	r2, #66	; 0x42
 800382c:	2100      	movs	r1, #0
 800382e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	2380      	movs	r3, #128	; 0x80
 8003834:	01db      	lsls	r3, r3, #7
 8003836:	4013      	ands	r3, r2
 8003838:	d008      	beq.n	800384c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4924      	ldr	r1, [pc, #144]	; (80038d8 <I2C_ITSlaveSeqCplt+0xc0>)
 8003846:	400a      	ands	r2, r1
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	e00c      	b.n	8003866 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	2380      	movs	r3, #128	; 0x80
 8003850:	021b      	lsls	r3, r3, #8
 8003852:	4013      	ands	r3, r2
 8003854:	d007      	beq.n	8003866 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	491e      	ldr	r1, [pc, #120]	; (80038dc <I2C_ITSlaveSeqCplt+0xc4>)
 8003862:	400a      	ands	r2, r1
 8003864:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2241      	movs	r2, #65	; 0x41
 800386a:	5c9b      	ldrb	r3, [r3, r2]
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b29      	cmp	r3, #41	; 0x29
 8003870:	d114      	bne.n	800389c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2241      	movs	r2, #65	; 0x41
 8003876:	2128      	movs	r1, #40	; 0x28
 8003878:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2221      	movs	r2, #33	; 0x21
 800387e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2101      	movs	r1, #1
 8003884:	0018      	movs	r0, r3
 8003886:	f000 fd21 	bl	80042cc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2240      	movs	r2, #64	; 0x40
 800388e:	2100      	movs	r1, #0
 8003890:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	0018      	movs	r0, r3
 8003896:	f7ff fd1c 	bl	80032d2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800389a:	e019      	b.n	80038d0 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2241      	movs	r2, #65	; 0x41
 80038a0:	5c9b      	ldrb	r3, [r3, r2]
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b2a      	cmp	r3, #42	; 0x2a
 80038a6:	d113      	bne.n	80038d0 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2241      	movs	r2, #65	; 0x41
 80038ac:	2128      	movs	r1, #40	; 0x28
 80038ae:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2222      	movs	r2, #34	; 0x22
 80038b4:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2102      	movs	r1, #2
 80038ba:	0018      	movs	r0, r3
 80038bc:	f000 fd06 	bl	80042cc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2240      	movs	r2, #64	; 0x40
 80038c4:	2100      	movs	r1, #0
 80038c6:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	0018      	movs	r0, r3
 80038cc:	f7ff fd09 	bl	80032e2 <HAL_I2C_SlaveRxCpltCallback>
}
 80038d0:	46c0      	nop			; (mov r8, r8)
 80038d2:	46bd      	mov	sp, r7
 80038d4:	b004      	add	sp, #16
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	ffffbfff 	.word	0xffffbfff
 80038dc:	ffff7fff 	.word	0xffff7fff

080038e0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80038f6:	200f      	movs	r0, #15
 80038f8:	183b      	adds	r3, r7, r0
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	2141      	movs	r1, #65	; 0x41
 80038fe:	5c52      	ldrb	r2, [r2, r1]
 8003900:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2220      	movs	r2, #32
 8003908:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800390a:	183b      	adds	r3, r7, r0
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	2b21      	cmp	r3, #33	; 0x21
 8003910:	d003      	beq.n	800391a <I2C_ITSlaveCplt+0x3a>
 8003912:	183b      	adds	r3, r7, r0
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	2b29      	cmp	r3, #41	; 0x29
 8003918:	d109      	bne.n	800392e <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800391a:	4a7b      	ldr	r2, [pc, #492]	; (8003b08 <I2C_ITSlaveCplt+0x228>)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	0011      	movs	r1, r2
 8003920:	0018      	movs	r0, r3
 8003922:	f000 fcd3 	bl	80042cc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2221      	movs	r2, #33	; 0x21
 800392a:	631a      	str	r2, [r3, #48]	; 0x30
 800392c:	e011      	b.n	8003952 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800392e:	220f      	movs	r2, #15
 8003930:	18bb      	adds	r3, r7, r2
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	2b22      	cmp	r3, #34	; 0x22
 8003936:	d003      	beq.n	8003940 <I2C_ITSlaveCplt+0x60>
 8003938:	18bb      	adds	r3, r7, r2
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	2b2a      	cmp	r3, #42	; 0x2a
 800393e:	d108      	bne.n	8003952 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003940:	4a72      	ldr	r2, [pc, #456]	; (8003b0c <I2C_ITSlaveCplt+0x22c>)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	0011      	movs	r1, r2
 8003946:	0018      	movs	r0, r3
 8003948:	f000 fcc0 	bl	80042cc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2222      	movs	r2, #34	; 0x22
 8003950:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2180      	movs	r1, #128	; 0x80
 800395e:	0209      	lsls	r1, r1, #8
 8003960:	430a      	orrs	r2, r1
 8003962:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4968      	ldr	r1, [pc, #416]	; (8003b10 <I2C_ITSlaveCplt+0x230>)
 8003970:	400a      	ands	r2, r1
 8003972:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	0018      	movs	r0, r3
 8003978:	f000 fa55 	bl	8003e26 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	2380      	movs	r3, #128	; 0x80
 8003980:	01db      	lsls	r3, r3, #7
 8003982:	4013      	ands	r3, r2
 8003984:	d013      	beq.n	80039ae <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4960      	ldr	r1, [pc, #384]	; (8003b14 <I2C_ITSlaveCplt+0x234>)
 8003992:	400a      	ands	r2, r1
 8003994:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399a:	2b00      	cmp	r3, #0
 800399c:	d01f      	beq.n	80039de <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039ac:	e017      	b.n	80039de <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	2380      	movs	r3, #128	; 0x80
 80039b2:	021b      	lsls	r3, r3, #8
 80039b4:	4013      	ands	r3, r2
 80039b6:	d012      	beq.n	80039de <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4955      	ldr	r1, [pc, #340]	; (8003b18 <I2C_ITSlaveCplt+0x238>)
 80039c4:	400a      	ands	r2, r1
 80039c6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d006      	beq.n	80039de <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	b29a      	uxth	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2204      	movs	r2, #4
 80039e2:	4013      	ands	r3, r2
 80039e4:	d020      	beq.n	8003a28 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	2204      	movs	r2, #4
 80039ea:	4393      	bics	r3, r2
 80039ec:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	b2d2      	uxtb	r2, r2
 80039fa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	1c5a      	adds	r2, r3, #1
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00c      	beq.n	8003a28 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a12:	3b01      	subs	r3, #1
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	3b01      	subs	r3, #1
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d005      	beq.n	8003a3e <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a36:	2204      	movs	r2, #4
 8003a38:	431a      	orrs	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2242      	movs	r2, #66	; 0x42
 8003a42:	2100      	movs	r1, #0
 8003a44:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d013      	beq.n	8003a7c <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	0011      	movs	r1, r2
 8003a5c:	0018      	movs	r0, r3
 8003a5e:	f000 f8b7 	bl	8003bd0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2241      	movs	r2, #65	; 0x41
 8003a66:	5c9b      	ldrb	r3, [r3, r2]
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b28      	cmp	r3, #40	; 0x28
 8003a6c:	d147      	bne.n	8003afe <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	0011      	movs	r1, r2
 8003a74:	0018      	movs	r0, r3
 8003a76:	f000 f853 	bl	8003b20 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003a7a:	e040      	b.n	8003afe <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a80:	4a26      	ldr	r2, [pc, #152]	; (8003b1c <I2C_ITSlaveCplt+0x23c>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d016      	beq.n	8003ab4 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	0018      	movs	r0, r3
 8003a8a:	f7ff fec5 	bl	8003818 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a22      	ldr	r2, [pc, #136]	; (8003b1c <I2C_ITSlaveCplt+0x23c>)
 8003a92:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2241      	movs	r2, #65	; 0x41
 8003a98:	2120      	movs	r1, #32
 8003a9a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2240      	movs	r2, #64	; 0x40
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	0018      	movs	r0, r3
 8003aae:	f7ff fc30 	bl	8003312 <HAL_I2C_ListenCpltCallback>
}
 8003ab2:	e024      	b.n	8003afe <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2241      	movs	r2, #65	; 0x41
 8003ab8:	5c9b      	ldrb	r3, [r3, r2]
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b22      	cmp	r3, #34	; 0x22
 8003abe:	d10f      	bne.n	8003ae0 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2241      	movs	r2, #65	; 0x41
 8003ac4:	2120      	movs	r1, #32
 8003ac6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2240      	movs	r2, #64	; 0x40
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	0018      	movs	r0, r3
 8003ada:	f7ff fc02 	bl	80032e2 <HAL_I2C_SlaveRxCpltCallback>
}
 8003ade:	e00e      	b.n	8003afe <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2241      	movs	r2, #65	; 0x41
 8003ae4:	2120      	movs	r1, #32
 8003ae6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2240      	movs	r2, #64	; 0x40
 8003af2:	2100      	movs	r1, #0
 8003af4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	0018      	movs	r0, r3
 8003afa:	f7ff fbea 	bl	80032d2 <HAL_I2C_SlaveTxCpltCallback>
}
 8003afe:	46c0      	nop			; (mov r8, r8)
 8003b00:	46bd      	mov	sp, r7
 8003b02:	b006      	add	sp, #24
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	46c0      	nop			; (mov r8, r8)
 8003b08:	00008001 	.word	0x00008001
 8003b0c:	00008002 	.word	0x00008002
 8003b10:	fe00e800 	.word	0xfe00e800
 8003b14:	ffffbfff 	.word	0xffffbfff
 8003b18:	ffff7fff 	.word	0xffff7fff
 8003b1c:	ffff0000 	.word	0xffff0000

08003b20 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a26      	ldr	r2, [pc, #152]	; (8003bc8 <I2C_ITListenCplt+0xa8>)
 8003b2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2241      	movs	r2, #65	; 0x41
 8003b3a:	2120      	movs	r1, #32
 8003b3c:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2242      	movs	r2, #66	; 0x42
 8003b42:	2100      	movs	r1, #0
 8003b44:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	2204      	movs	r2, #4
 8003b50:	4013      	ands	r3, r2
 8003b52:	d022      	beq.n	8003b9a <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5e:	b2d2      	uxtb	r2, r2
 8003b60:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b66:	1c5a      	adds	r2, r3, #1
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d012      	beq.n	8003b9a <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	3b01      	subs	r3, #1
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b92:	2204      	movs	r2, #4
 8003b94:	431a      	orrs	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003b9a:	4a0c      	ldr	r2, [pc, #48]	; (8003bcc <I2C_ITListenCplt+0xac>)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	0011      	movs	r1, r2
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	f000 fb93 	bl	80042cc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2210      	movs	r2, #16
 8003bac:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2240      	movs	r2, #64	; 0x40
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	0018      	movs	r0, r3
 8003bba:	f7ff fbaa 	bl	8003312 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003bbe:	46c0      	nop			; (mov r8, r8)
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	b002      	add	sp, #8
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	46c0      	nop			; (mov r8, r8)
 8003bc8:	ffff0000 	.word	0xffff0000
 8003bcc:	00008003 	.word	0x00008003

08003bd0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003bda:	200f      	movs	r0, #15
 8003bdc:	183b      	adds	r3, r7, r0
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	2141      	movs	r1, #65	; 0x41
 8003be2:	5c52      	ldrb	r2, [r2, r1]
 8003be4:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2242      	movs	r2, #66	; 0x42
 8003bea:	2100      	movs	r1, #0
 8003bec:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a72      	ldr	r2, [pc, #456]	; (8003dbc <I2C_ITError+0x1ec>)
 8003bf2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	431a      	orrs	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003c06:	183b      	adds	r3, r7, r0
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	2b28      	cmp	r3, #40	; 0x28
 8003c0c:	d007      	beq.n	8003c1e <I2C_ITError+0x4e>
 8003c0e:	183b      	adds	r3, r7, r0
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	2b29      	cmp	r3, #41	; 0x29
 8003c14:	d003      	beq.n	8003c1e <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003c16:	183b      	adds	r3, r7, r0
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	2b2a      	cmp	r3, #42	; 0x2a
 8003c1c:	d10c      	bne.n	8003c38 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2103      	movs	r1, #3
 8003c22:	0018      	movs	r0, r3
 8003c24:	f000 fb52 	bl	80042cc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2241      	movs	r2, #65	; 0x41
 8003c2c:	2128      	movs	r1, #40	; 0x28
 8003c2e:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a63      	ldr	r2, [pc, #396]	; (8003dc0 <I2C_ITError+0x1f0>)
 8003c34:	635a      	str	r2, [r3, #52]	; 0x34
 8003c36:	e032      	b.n	8003c9e <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003c38:	4a62      	ldr	r2, [pc, #392]	; (8003dc4 <I2C_ITError+0x1f4>)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	0011      	movs	r1, r2
 8003c3e:	0018      	movs	r0, r3
 8003c40:	f000 fb44 	bl	80042cc <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	0018      	movs	r0, r3
 8003c48:	f000 f8ed 	bl	8003e26 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2241      	movs	r2, #65	; 0x41
 8003c50:	5c9b      	ldrb	r3, [r3, r2]
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b60      	cmp	r3, #96	; 0x60
 8003c56:	d01f      	beq.n	8003c98 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2241      	movs	r2, #65	; 0x41
 8003c5c:	2120      	movs	r1, #32
 8003c5e:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	2220      	movs	r2, #32
 8003c68:	4013      	ands	r3, r2
 8003c6a:	2b20      	cmp	r3, #32
 8003c6c:	d114      	bne.n	8003c98 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	2210      	movs	r2, #16
 8003c76:	4013      	ands	r3, r2
 8003c78:	2b10      	cmp	r3, #16
 8003c7a:	d109      	bne.n	8003c90 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2210      	movs	r2, #16
 8003c82:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c88:	2204      	movs	r2, #4
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2220      	movs	r2, #32
 8003c96:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d03b      	beq.n	8003d24 <I2C_ITError+0x154>
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	2b11      	cmp	r3, #17
 8003cb0:	d002      	beq.n	8003cb8 <I2C_ITError+0xe8>
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	2b21      	cmp	r3, #33	; 0x21
 8003cb6:	d135      	bne.n	8003d24 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	2380      	movs	r3, #128	; 0x80
 8003cc0:	01db      	lsls	r3, r3, #7
 8003cc2:	401a      	ands	r2, r3
 8003cc4:	2380      	movs	r3, #128	; 0x80
 8003cc6:	01db      	lsls	r3, r3, #7
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d107      	bne.n	8003cdc <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	493c      	ldr	r1, [pc, #240]	; (8003dc8 <I2C_ITError+0x1f8>)
 8003cd8:	400a      	ands	r2, r1
 8003cda:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce0:	0018      	movs	r0, r3
 8003ce2:	f7fe fdaa 	bl	800283a <HAL_DMA_GetState>
 8003ce6:	0003      	movs	r3, r0
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d016      	beq.n	8003d1a <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf0:	4a36      	ldr	r2, [pc, #216]	; (8003dcc <I2C_ITError+0x1fc>)
 8003cf2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2240      	movs	r2, #64	; 0x40
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d00:	0018      	movs	r0, r3
 8003d02:	f7fe fd53 	bl	80027ac <HAL_DMA_Abort_IT>
 8003d06:	1e03      	subs	r3, r0, #0
 8003d08:	d051      	beq.n	8003dae <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d14:	0018      	movs	r0, r3
 8003d16:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003d18:	e049      	b.n	8003dae <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	0018      	movs	r0, r3
 8003d1e:	f000 f859 	bl	8003dd4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003d22:	e044      	b.n	8003dae <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d03b      	beq.n	8003da4 <I2C_ITError+0x1d4>
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2b12      	cmp	r3, #18
 8003d30:	d002      	beq.n	8003d38 <I2C_ITError+0x168>
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	2b22      	cmp	r3, #34	; 0x22
 8003d36:	d135      	bne.n	8003da4 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	2380      	movs	r3, #128	; 0x80
 8003d40:	021b      	lsls	r3, r3, #8
 8003d42:	401a      	ands	r2, r3
 8003d44:	2380      	movs	r3, #128	; 0x80
 8003d46:	021b      	lsls	r3, r3, #8
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d107      	bne.n	8003d5c <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	491e      	ldr	r1, [pc, #120]	; (8003dd0 <I2C_ITError+0x200>)
 8003d58:	400a      	ands	r2, r1
 8003d5a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d60:	0018      	movs	r0, r3
 8003d62:	f7fe fd6a 	bl	800283a <HAL_DMA_GetState>
 8003d66:	0003      	movs	r3, r0
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d016      	beq.n	8003d9a <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d70:	4a16      	ldr	r2, [pc, #88]	; (8003dcc <I2C_ITError+0x1fc>)
 8003d72:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2240      	movs	r2, #64	; 0x40
 8003d78:	2100      	movs	r1, #0
 8003d7a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d80:	0018      	movs	r0, r3
 8003d82:	f7fe fd13 	bl	80027ac <HAL_DMA_Abort_IT>
 8003d86:	1e03      	subs	r3, r0, #0
 8003d88:	d013      	beq.n	8003db2 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d94:	0018      	movs	r0, r3
 8003d96:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d98:	e00b      	b.n	8003db2 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	f000 f819 	bl	8003dd4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003da2:	e006      	b.n	8003db2 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	0018      	movs	r0, r3
 8003da8:	f000 f814 	bl	8003dd4 <I2C_TreatErrorCallback>
  }
}
 8003dac:	e002      	b.n	8003db4 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003dae:	46c0      	nop			; (mov r8, r8)
 8003db0:	e000      	b.n	8003db4 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003db2:	46c0      	nop			; (mov r8, r8)
}
 8003db4:	46c0      	nop			; (mov r8, r8)
 8003db6:	46bd      	mov	sp, r7
 8003db8:	b004      	add	sp, #16
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	ffff0000 	.word	0xffff0000
 8003dc0:	08003345 	.word	0x08003345
 8003dc4:	00008003 	.word	0x00008003
 8003dc8:	ffffbfff 	.word	0xffffbfff
 8003dcc:	08003e6b 	.word	0x08003e6b
 8003dd0:	ffff7fff 	.word	0xffff7fff

08003dd4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2241      	movs	r2, #65	; 0x41
 8003de0:	5c9b      	ldrb	r3, [r3, r2]
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2b60      	cmp	r3, #96	; 0x60
 8003de6:	d10f      	bne.n	8003e08 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2241      	movs	r2, #65	; 0x41
 8003dec:	2120      	movs	r1, #32
 8003dee:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2240      	movs	r2, #64	; 0x40
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	0018      	movs	r0, r3
 8003e02:	f7ff fa96 	bl	8003332 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003e06:	e00a      	b.n	8003e1e <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2240      	movs	r2, #64	; 0x40
 8003e12:	2100      	movs	r1, #0
 8003e14:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	0018      	movs	r0, r3
 8003e1a:	f7ff fa82 	bl	8003322 <HAL_I2C_ErrorCallback>
}
 8003e1e:	46c0      	nop			; (mov r8, r8)
 8003e20:	46bd      	mov	sp, r7
 8003e22:	b002      	add	sp, #8
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b082      	sub	sp, #8
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	2202      	movs	r2, #2
 8003e36:	4013      	ands	r3, r2
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d103      	bne.n	8003e44 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2200      	movs	r2, #0
 8003e42:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d007      	beq.n	8003e62 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	699a      	ldr	r2, [r3, #24]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	619a      	str	r2, [r3, #24]
  }
}
 8003e62:	46c0      	nop			; (mov r8, r8)
 8003e64:	46bd      	mov	sp, r7
 8003e66:	b002      	add	sp, #8
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b084      	sub	sp, #16
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e76:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d003      	beq.n	8003e88 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e84:	2200      	movs	r2, #0
 8003e86:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e94:	2200      	movs	r2, #0
 8003e96:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	f7ff ff9a 	bl	8003dd4 <I2C_TreatErrorCallback>
}
 8003ea0:	46c0      	nop			; (mov r8, r8)
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	b004      	add	sp, #16
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	603b      	str	r3, [r7, #0]
 8003eb4:	1dfb      	adds	r3, r7, #7
 8003eb6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003eb8:	e030      	b.n	8003f1c <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	d02d      	beq.n	8003f1c <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ec0:	f7fe fb68 	bl	8002594 <HAL_GetTick>
 8003ec4:	0002      	movs	r2, r0
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d302      	bcc.n	8003ed6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d122      	bne.n	8003f1c <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	425a      	negs	r2, r3
 8003ee6:	4153      	adcs	r3, r2
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	001a      	movs	r2, r3
 8003eec:	1dfb      	adds	r3, r7, #7
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d113      	bne.n	8003f1c <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef8:	2220      	movs	r2, #32
 8003efa:	431a      	orrs	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2241      	movs	r2, #65	; 0x41
 8003f04:	2120      	movs	r1, #32
 8003f06:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2242      	movs	r2, #66	; 0x42
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2240      	movs	r2, #64	; 0x40
 8003f14:	2100      	movs	r1, #0
 8003f16:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e00f      	b.n	8003f3c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	68ba      	ldr	r2, [r7, #8]
 8003f24:	4013      	ands	r3, r2
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	425a      	negs	r2, r3
 8003f2c:	4153      	adcs	r3, r2
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	001a      	movs	r2, r3
 8003f32:	1dfb      	adds	r3, r7, #7
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d0bf      	beq.n	8003eba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	b004      	add	sp, #16
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f50:	e032      	b.n	8003fb8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	68b9      	ldr	r1, [r7, #8]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	0018      	movs	r0, r3
 8003f5a:	f000 f87d 	bl	8004058 <I2C_IsErrorOccurred>
 8003f5e:	1e03      	subs	r3, r0, #0
 8003f60:	d001      	beq.n	8003f66 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e030      	b.n	8003fc8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	3301      	adds	r3, #1
 8003f6a:	d025      	beq.n	8003fb8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f6c:	f7fe fb12 	bl	8002594 <HAL_GetTick>
 8003f70:	0002      	movs	r2, r0
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d302      	bcc.n	8003f82 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d11a      	bne.n	8003fb8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	2202      	movs	r2, #2
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d013      	beq.n	8003fb8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f94:	2220      	movs	r2, #32
 8003f96:	431a      	orrs	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2241      	movs	r2, #65	; 0x41
 8003fa0:	2120      	movs	r1, #32
 8003fa2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2242      	movs	r2, #66	; 0x42
 8003fa8:	2100      	movs	r1, #0
 8003faa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2240      	movs	r2, #64	; 0x40
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e007      	b.n	8003fc8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d1c5      	bne.n	8003f52 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	0018      	movs	r0, r3
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	b004      	add	sp, #16
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fdc:	e02f      	b.n	800403e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	68b9      	ldr	r1, [r7, #8]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	f000 f837 	bl	8004058 <I2C_IsErrorOccurred>
 8003fea:	1e03      	subs	r3, r0, #0
 8003fec:	d001      	beq.n	8003ff2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e02d      	b.n	800404e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ff2:	f7fe facf 	bl	8002594 <HAL_GetTick>
 8003ff6:	0002      	movs	r2, r0
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d302      	bcc.n	8004008 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d11a      	bne.n	800403e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	2220      	movs	r2, #32
 8004010:	4013      	ands	r3, r2
 8004012:	2b20      	cmp	r3, #32
 8004014:	d013      	beq.n	800403e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401a:	2220      	movs	r2, #32
 800401c:	431a      	orrs	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2241      	movs	r2, #65	; 0x41
 8004026:	2120      	movs	r1, #32
 8004028:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2242      	movs	r2, #66	; 0x42
 800402e:	2100      	movs	r1, #0
 8004030:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2240      	movs	r2, #64	; 0x40
 8004036:	2100      	movs	r1, #0
 8004038:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e007      	b.n	800404e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	2220      	movs	r2, #32
 8004046:	4013      	ands	r3, r2
 8004048:	2b20      	cmp	r3, #32
 800404a:	d1c8      	bne.n	8003fde <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	0018      	movs	r0, r3
 8004050:	46bd      	mov	sp, r7
 8004052:	b004      	add	sp, #16
 8004054:	bd80      	pop	{r7, pc}
	...

08004058 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004058:	b590      	push	{r4, r7, lr}
 800405a:	b08b      	sub	sp, #44	; 0x2c
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004064:	2327      	movs	r3, #39	; 0x27
 8004066:	18fb      	adds	r3, r7, r3
 8004068:	2200      	movs	r2, #0
 800406a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004074:	2300      	movs	r3, #0
 8004076:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	2210      	movs	r2, #16
 8004080:	4013      	ands	r3, r2
 8004082:	d100      	bne.n	8004086 <I2C_IsErrorOccurred+0x2e>
 8004084:	e082      	b.n	800418c <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2210      	movs	r2, #16
 800408c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800408e:	e060      	b.n	8004152 <I2C_IsErrorOccurred+0xfa>
 8004090:	2427      	movs	r4, #39	; 0x27
 8004092:	193b      	adds	r3, r7, r4
 8004094:	193a      	adds	r2, r7, r4
 8004096:	7812      	ldrb	r2, [r2, #0]
 8004098:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	3301      	adds	r3, #1
 800409e:	d058      	beq.n	8004152 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040a0:	f7fe fa78 	bl	8002594 <HAL_GetTick>
 80040a4:	0002      	movs	r2, r0
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d306      	bcc.n	80040be <I2C_IsErrorOccurred+0x66>
 80040b0:	193b      	adds	r3, r7, r4
 80040b2:	193a      	adds	r2, r7, r4
 80040b4:	7812      	ldrb	r2, [r2, #0]
 80040b6:	701a      	strb	r2, [r3, #0]
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d149      	bne.n	8004152 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	2380      	movs	r3, #128	; 0x80
 80040c6:	01db      	lsls	r3, r3, #7
 80040c8:	4013      	ands	r3, r2
 80040ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80040cc:	2013      	movs	r0, #19
 80040ce:	183b      	adds	r3, r7, r0
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	2142      	movs	r1, #66	; 0x42
 80040d4:	5c52      	ldrb	r2, [r2, r1]
 80040d6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	699a      	ldr	r2, [r3, #24]
 80040de:	2380      	movs	r3, #128	; 0x80
 80040e0:	021b      	lsls	r3, r3, #8
 80040e2:	401a      	ands	r2, r3
 80040e4:	2380      	movs	r3, #128	; 0x80
 80040e6:	021b      	lsls	r3, r3, #8
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d126      	bne.n	800413a <I2C_IsErrorOccurred+0xe2>
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	2380      	movs	r3, #128	; 0x80
 80040f0:	01db      	lsls	r3, r3, #7
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d021      	beq.n	800413a <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80040f6:	183b      	adds	r3, r7, r0
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	2b20      	cmp	r3, #32
 80040fc:	d01d      	beq.n	800413a <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2180      	movs	r1, #128	; 0x80
 800410a:	01c9      	lsls	r1, r1, #7
 800410c:	430a      	orrs	r2, r1
 800410e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004110:	f7fe fa40 	bl	8002594 <HAL_GetTick>
 8004114:	0003      	movs	r3, r0
 8004116:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004118:	e00f      	b.n	800413a <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800411a:	f7fe fa3b 	bl	8002594 <HAL_GetTick>
 800411e:	0002      	movs	r2, r0
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b19      	cmp	r3, #25
 8004126:	d908      	bls.n	800413a <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004128:	6a3b      	ldr	r3, [r7, #32]
 800412a:	2220      	movs	r2, #32
 800412c:	4313      	orrs	r3, r2
 800412e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004130:	2327      	movs	r3, #39	; 0x27
 8004132:	18fb      	adds	r3, r7, r3
 8004134:	2201      	movs	r2, #1
 8004136:	701a      	strb	r2, [r3, #0]

              break;
 8004138:	e00b      	b.n	8004152 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	2220      	movs	r2, #32
 8004142:	4013      	ands	r3, r2
 8004144:	2127      	movs	r1, #39	; 0x27
 8004146:	187a      	adds	r2, r7, r1
 8004148:	1879      	adds	r1, r7, r1
 800414a:	7809      	ldrb	r1, [r1, #0]
 800414c:	7011      	strb	r1, [r2, #0]
 800414e:	2b20      	cmp	r3, #32
 8004150:	d1e3      	bne.n	800411a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	2220      	movs	r2, #32
 800415a:	4013      	ands	r3, r2
 800415c:	2b20      	cmp	r3, #32
 800415e:	d004      	beq.n	800416a <I2C_IsErrorOccurred+0x112>
 8004160:	2327      	movs	r3, #39	; 0x27
 8004162:	18fb      	adds	r3, r7, r3
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d092      	beq.n	8004090 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800416a:	2327      	movs	r3, #39	; 0x27
 800416c:	18fb      	adds	r3, r7, r3
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d103      	bne.n	800417c <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2220      	movs	r2, #32
 800417a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800417c:	6a3b      	ldr	r3, [r7, #32]
 800417e:	2204      	movs	r2, #4
 8004180:	4313      	orrs	r3, r2
 8004182:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004184:	2327      	movs	r3, #39	; 0x27
 8004186:	18fb      	adds	r3, r7, r3
 8004188:	2201      	movs	r2, #1
 800418a:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	2380      	movs	r3, #128	; 0x80
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	4013      	ands	r3, r2
 800419c:	d00c      	beq.n	80041b8 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800419e:	6a3b      	ldr	r3, [r7, #32]
 80041a0:	2201      	movs	r2, #1
 80041a2:	4313      	orrs	r3, r2
 80041a4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2280      	movs	r2, #128	; 0x80
 80041ac:	0052      	lsls	r2, r2, #1
 80041ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041b0:	2327      	movs	r3, #39	; 0x27
 80041b2:	18fb      	adds	r3, r7, r3
 80041b4:	2201      	movs	r2, #1
 80041b6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	2380      	movs	r3, #128	; 0x80
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	4013      	ands	r3, r2
 80041c0:	d00c      	beq.n	80041dc <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80041c2:	6a3b      	ldr	r3, [r7, #32]
 80041c4:	2208      	movs	r2, #8
 80041c6:	4313      	orrs	r3, r2
 80041c8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2280      	movs	r2, #128	; 0x80
 80041d0:	00d2      	lsls	r2, r2, #3
 80041d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041d4:	2327      	movs	r3, #39	; 0x27
 80041d6:	18fb      	adds	r3, r7, r3
 80041d8:	2201      	movs	r2, #1
 80041da:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	2380      	movs	r3, #128	; 0x80
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4013      	ands	r3, r2
 80041e4:	d00c      	beq.n	8004200 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	2202      	movs	r2, #2
 80041ea:	4313      	orrs	r3, r2
 80041ec:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2280      	movs	r2, #128	; 0x80
 80041f4:	0092      	lsls	r2, r2, #2
 80041f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041f8:	2327      	movs	r3, #39	; 0x27
 80041fa:	18fb      	adds	r3, r7, r3
 80041fc:	2201      	movs	r2, #1
 80041fe:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004200:	2327      	movs	r3, #39	; 0x27
 8004202:	18fb      	adds	r3, r7, r3
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d01d      	beq.n	8004246 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	0018      	movs	r0, r3
 800420e:	f7ff fe0a 	bl	8003e26 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	490d      	ldr	r1, [pc, #52]	; (8004254 <I2C_IsErrorOccurred+0x1fc>)
 800421e:	400a      	ands	r2, r1
 8004220:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004226:	6a3b      	ldr	r3, [r7, #32]
 8004228:	431a      	orrs	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2241      	movs	r2, #65	; 0x41
 8004232:	2120      	movs	r1, #32
 8004234:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2242      	movs	r2, #66	; 0x42
 800423a:	2100      	movs	r1, #0
 800423c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2240      	movs	r2, #64	; 0x40
 8004242:	2100      	movs	r1, #0
 8004244:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004246:	2327      	movs	r3, #39	; 0x27
 8004248:	18fb      	adds	r3, r7, r3
 800424a:	781b      	ldrb	r3, [r3, #0]
}
 800424c:	0018      	movs	r0, r3
 800424e:	46bd      	mov	sp, r7
 8004250:	b00b      	add	sp, #44	; 0x2c
 8004252:	bd90      	pop	{r4, r7, pc}
 8004254:	fe00e800 	.word	0xfe00e800

08004258 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004258:	b590      	push	{r4, r7, lr}
 800425a:	b087      	sub	sp, #28
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	0008      	movs	r0, r1
 8004262:	0011      	movs	r1, r2
 8004264:	607b      	str	r3, [r7, #4]
 8004266:	240a      	movs	r4, #10
 8004268:	193b      	adds	r3, r7, r4
 800426a:	1c02      	adds	r2, r0, #0
 800426c:	801a      	strh	r2, [r3, #0]
 800426e:	2009      	movs	r0, #9
 8004270:	183b      	adds	r3, r7, r0
 8004272:	1c0a      	adds	r2, r1, #0
 8004274:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004276:	193b      	adds	r3, r7, r4
 8004278:	881b      	ldrh	r3, [r3, #0]
 800427a:	059b      	lsls	r3, r3, #22
 800427c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800427e:	183b      	adds	r3, r7, r0
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	0419      	lsls	r1, r3, #16
 8004284:	23ff      	movs	r3, #255	; 0xff
 8004286:	041b      	lsls	r3, r3, #16
 8004288:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800428a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004292:	4313      	orrs	r3, r2
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	085b      	lsrs	r3, r3, #1
 8004298:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042a2:	0d51      	lsrs	r1, r2, #21
 80042a4:	2280      	movs	r2, #128	; 0x80
 80042a6:	00d2      	lsls	r2, r2, #3
 80042a8:	400a      	ands	r2, r1
 80042aa:	4907      	ldr	r1, [pc, #28]	; (80042c8 <I2C_TransferConfig+0x70>)
 80042ac:	430a      	orrs	r2, r1
 80042ae:	43d2      	mvns	r2, r2
 80042b0:	401a      	ands	r2, r3
 80042b2:	0011      	movs	r1, r2
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80042be:	46c0      	nop			; (mov r8, r8)
 80042c0:	46bd      	mov	sp, r7
 80042c2:	b007      	add	sp, #28
 80042c4:	bd90      	pop	{r4, r7, pc}
 80042c6:	46c0      	nop			; (mov r8, r8)
 80042c8:	03ff63ff 	.word	0x03ff63ff

080042cc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	000a      	movs	r2, r1
 80042d6:	1cbb      	adds	r3, r7, #2
 80042d8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80042da:	2300      	movs	r3, #0
 80042dc:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80042de:	1cbb      	adds	r3, r7, #2
 80042e0:	881b      	ldrh	r3, [r3, #0]
 80042e2:	2201      	movs	r2, #1
 80042e4:	4013      	ands	r3, r2
 80042e6:	d010      	beq.n	800430a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2242      	movs	r2, #66	; 0x42
 80042ec:	4313      	orrs	r3, r2
 80042ee:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2241      	movs	r2, #65	; 0x41
 80042f4:	5c9b      	ldrb	r3, [r3, r2]
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	001a      	movs	r2, r3
 80042fa:	2328      	movs	r3, #40	; 0x28
 80042fc:	4013      	ands	r3, r2
 80042fe:	2b28      	cmp	r3, #40	; 0x28
 8004300:	d003      	beq.n	800430a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	22b0      	movs	r2, #176	; 0xb0
 8004306:	4313      	orrs	r3, r2
 8004308:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800430a:	1cbb      	adds	r3, r7, #2
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	2202      	movs	r2, #2
 8004310:	4013      	ands	r3, r2
 8004312:	d010      	beq.n	8004336 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2244      	movs	r2, #68	; 0x44
 8004318:	4313      	orrs	r3, r2
 800431a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2241      	movs	r2, #65	; 0x41
 8004320:	5c9b      	ldrb	r3, [r3, r2]
 8004322:	b2db      	uxtb	r3, r3
 8004324:	001a      	movs	r2, r3
 8004326:	2328      	movs	r3, #40	; 0x28
 8004328:	4013      	ands	r3, r2
 800432a:	2b28      	cmp	r3, #40	; 0x28
 800432c:	d003      	beq.n	8004336 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	22b0      	movs	r2, #176	; 0xb0
 8004332:	4313      	orrs	r3, r2
 8004334:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004336:	1cbb      	adds	r3, r7, #2
 8004338:	2200      	movs	r2, #0
 800433a:	5e9b      	ldrsh	r3, [r3, r2]
 800433c:	2b00      	cmp	r3, #0
 800433e:	da03      	bge.n	8004348 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	22b8      	movs	r2, #184	; 0xb8
 8004344:	4313      	orrs	r3, r2
 8004346:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004348:	1cbb      	adds	r3, r7, #2
 800434a:	881b      	ldrh	r3, [r3, #0]
 800434c:	2b10      	cmp	r3, #16
 800434e:	d103      	bne.n	8004358 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2290      	movs	r2, #144	; 0x90
 8004354:	4313      	orrs	r3, r2
 8004356:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004358:	1cbb      	adds	r3, r7, #2
 800435a:	881b      	ldrh	r3, [r3, #0]
 800435c:	2b20      	cmp	r3, #32
 800435e:	d103      	bne.n	8004368 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2220      	movs	r2, #32
 8004364:	4313      	orrs	r3, r2
 8004366:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004368:	1cbb      	adds	r3, r7, #2
 800436a:	881b      	ldrh	r3, [r3, #0]
 800436c:	2b40      	cmp	r3, #64	; 0x40
 800436e:	d103      	bne.n	8004378 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2240      	movs	r2, #64	; 0x40
 8004374:	4313      	orrs	r3, r2
 8004376:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	43d9      	mvns	r1, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	400a      	ands	r2, r1
 8004388:	601a      	str	r2, [r3, #0]
}
 800438a:	46c0      	nop			; (mov r8, r8)
 800438c:	46bd      	mov	sp, r7
 800438e:	b004      	add	sp, #16
 8004390:	bd80      	pop	{r7, pc}
	...

08004394 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2241      	movs	r2, #65	; 0x41
 80043a2:	5c9b      	ldrb	r3, [r3, r2]
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b20      	cmp	r3, #32
 80043a8:	d138      	bne.n	800441c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2240      	movs	r2, #64	; 0x40
 80043ae:	5c9b      	ldrb	r3, [r3, r2]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d101      	bne.n	80043b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80043b4:	2302      	movs	r3, #2
 80043b6:	e032      	b.n	800441e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2240      	movs	r2, #64	; 0x40
 80043bc:	2101      	movs	r1, #1
 80043be:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2241      	movs	r2, #65	; 0x41
 80043c4:	2124      	movs	r1, #36	; 0x24
 80043c6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2101      	movs	r1, #1
 80043d4:	438a      	bics	r2, r1
 80043d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4911      	ldr	r1, [pc, #68]	; (8004428 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80043e4:	400a      	ands	r2, r1
 80043e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6819      	ldr	r1, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	430a      	orrs	r2, r1
 80043f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2101      	movs	r1, #1
 8004404:	430a      	orrs	r2, r1
 8004406:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2241      	movs	r2, #65	; 0x41
 800440c:	2120      	movs	r1, #32
 800440e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2240      	movs	r2, #64	; 0x40
 8004414:	2100      	movs	r1, #0
 8004416:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004418:	2300      	movs	r3, #0
 800441a:	e000      	b.n	800441e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800441c:	2302      	movs	r3, #2
  }
}
 800441e:	0018      	movs	r0, r3
 8004420:	46bd      	mov	sp, r7
 8004422:	b002      	add	sp, #8
 8004424:	bd80      	pop	{r7, pc}
 8004426:	46c0      	nop			; (mov r8, r8)
 8004428:	ffffefff 	.word	0xffffefff

0800442c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2241      	movs	r2, #65	; 0x41
 800443a:	5c9b      	ldrb	r3, [r3, r2]
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b20      	cmp	r3, #32
 8004440:	d139      	bne.n	80044b6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2240      	movs	r2, #64	; 0x40
 8004446:	5c9b      	ldrb	r3, [r3, r2]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d101      	bne.n	8004450 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800444c:	2302      	movs	r3, #2
 800444e:	e033      	b.n	80044b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2240      	movs	r2, #64	; 0x40
 8004454:	2101      	movs	r1, #1
 8004456:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2241      	movs	r2, #65	; 0x41
 800445c:	2124      	movs	r1, #36	; 0x24
 800445e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2101      	movs	r1, #1
 800446c:	438a      	bics	r2, r1
 800446e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	4a11      	ldr	r2, [pc, #68]	; (80044c0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800447c:	4013      	ands	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	021b      	lsls	r3, r3, #8
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	4313      	orrs	r3, r2
 8004488:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2101      	movs	r1, #1
 800449e:	430a      	orrs	r2, r1
 80044a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2241      	movs	r2, #65	; 0x41
 80044a6:	2120      	movs	r1, #32
 80044a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2240      	movs	r2, #64	; 0x40
 80044ae:	2100      	movs	r1, #0
 80044b0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80044b2:	2300      	movs	r3, #0
 80044b4:	e000      	b.n	80044b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80044b6:	2302      	movs	r3, #2
  }
}
 80044b8:	0018      	movs	r0, r3
 80044ba:	46bd      	mov	sp, r7
 80044bc:	b004      	add	sp, #16
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	fffff0ff 	.word	0xfffff0ff

080044c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044c4:	b5b0      	push	{r4, r5, r7, lr}
 80044c6:	b08a      	sub	sp, #40	; 0x28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d102      	bne.n	80044d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	f000 fbbf 	bl	8004c56 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044d8:	4bc9      	ldr	r3, [pc, #804]	; (8004800 <HAL_RCC_OscConfig+0x33c>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	220c      	movs	r2, #12
 80044de:	4013      	ands	r3, r2
 80044e0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044e2:	4bc7      	ldr	r3, [pc, #796]	; (8004800 <HAL_RCC_OscConfig+0x33c>)
 80044e4:	68da      	ldr	r2, [r3, #12]
 80044e6:	2380      	movs	r3, #128	; 0x80
 80044e8:	025b      	lsls	r3, r3, #9
 80044ea:	4013      	ands	r3, r2
 80044ec:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2201      	movs	r2, #1
 80044f4:	4013      	ands	r3, r2
 80044f6:	d100      	bne.n	80044fa <HAL_RCC_OscConfig+0x36>
 80044f8:	e07e      	b.n	80045f8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	2b08      	cmp	r3, #8
 80044fe:	d007      	beq.n	8004510 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	2b0c      	cmp	r3, #12
 8004504:	d112      	bne.n	800452c <HAL_RCC_OscConfig+0x68>
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	2380      	movs	r3, #128	; 0x80
 800450a:	025b      	lsls	r3, r3, #9
 800450c:	429a      	cmp	r2, r3
 800450e:	d10d      	bne.n	800452c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004510:	4bbb      	ldr	r3, [pc, #748]	; (8004800 <HAL_RCC_OscConfig+0x33c>)
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	2380      	movs	r3, #128	; 0x80
 8004516:	029b      	lsls	r3, r3, #10
 8004518:	4013      	ands	r3, r2
 800451a:	d100      	bne.n	800451e <HAL_RCC_OscConfig+0x5a>
 800451c:	e06b      	b.n	80045f6 <HAL_RCC_OscConfig+0x132>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d167      	bne.n	80045f6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	f000 fb95 	bl	8004c56 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	2380      	movs	r3, #128	; 0x80
 8004532:	025b      	lsls	r3, r3, #9
 8004534:	429a      	cmp	r2, r3
 8004536:	d107      	bne.n	8004548 <HAL_RCC_OscConfig+0x84>
 8004538:	4bb1      	ldr	r3, [pc, #708]	; (8004800 <HAL_RCC_OscConfig+0x33c>)
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	4bb0      	ldr	r3, [pc, #704]	; (8004800 <HAL_RCC_OscConfig+0x33c>)
 800453e:	2180      	movs	r1, #128	; 0x80
 8004540:	0249      	lsls	r1, r1, #9
 8004542:	430a      	orrs	r2, r1
 8004544:	601a      	str	r2, [r3, #0]
 8004546:	e027      	b.n	8004598 <HAL_RCC_OscConfig+0xd4>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	23a0      	movs	r3, #160	; 0xa0
 800454e:	02db      	lsls	r3, r3, #11
 8004550:	429a      	cmp	r2, r3
 8004552:	d10e      	bne.n	8004572 <HAL_RCC_OscConfig+0xae>
 8004554:	4baa      	ldr	r3, [pc, #680]	; (8004800 <HAL_RCC_OscConfig+0x33c>)
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	4ba9      	ldr	r3, [pc, #676]	; (8004800 <HAL_RCC_OscConfig+0x33c>)
 800455a:	2180      	movs	r1, #128	; 0x80
 800455c:	02c9      	lsls	r1, r1, #11
 800455e:	430a      	orrs	r2, r1
 8004560:	601a      	str	r2, [r3, #0]
 8004562:	4ba7      	ldr	r3, [pc, #668]	; (8004800 <HAL_RCC_OscConfig+0x33c>)
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	4ba6      	ldr	r3, [pc, #664]	; (8004800 <HAL_RCC_OscConfig+0x33c>)
 8004568:	2180      	movs	r1, #128	; 0x80
 800456a:	0249      	lsls	r1, r1, #9
 800456c:	430a      	orrs	r2, r1
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	e012      	b.n	8004598 <HAL_RCC_OscConfig+0xd4>
 8004572:	4ba3      	ldr	r3, [pc, #652]	; (8004800 <HAL_RCC_OscConfig+0x33c>)
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	4ba2      	ldr	r3, [pc, #648]	; (8004800 <HAL_RCC_OscConfig+0x33c>)
 8004578:	49a2      	ldr	r1, [pc, #648]	; (8004804 <HAL_RCC_OscConfig+0x340>)
 800457a:	400a      	ands	r2, r1
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	4ba0      	ldr	r3, [pc, #640]	; (8004800 <HAL_RCC_OscConfig+0x33c>)
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	2380      	movs	r3, #128	; 0x80
 8004584:	025b      	lsls	r3, r3, #9
 8004586:	4013      	ands	r3, r2
 8004588:	60fb      	str	r3, [r7, #12]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	4b9c      	ldr	r3, [pc, #624]	; (8004800 <HAL_RCC_OscConfig+0x33c>)
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	4b9b      	ldr	r3, [pc, #620]	; (8004800 <HAL_RCC_OscConfig+0x33c>)
 8004592:	499d      	ldr	r1, [pc, #628]	; (8004808 <HAL_RCC_OscConfig+0x344>)
 8004594:	400a      	ands	r2, r1
 8004596:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d015      	beq.n	80045cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a0:	f7fd fff8 	bl	8002594 <HAL_GetTick>
 80045a4:	0003      	movs	r3, r0
 80045a6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045a8:	e009      	b.n	80045be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045aa:	f7fd fff3 	bl	8002594 <HAL_GetTick>
 80045ae:	0002      	movs	r2, r0
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b64      	cmp	r3, #100	; 0x64
 80045b6:	d902      	bls.n	80045be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	f000 fb4c 	bl	8004c56 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045be:	4b90      	ldr	r3, [pc, #576]	; (8004800 <HAL_RCC_OscConfig+0x33c>)
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	2380      	movs	r3, #128	; 0x80
 80045c4:	029b      	lsls	r3, r3, #10
 80045c6:	4013      	ands	r3, r2
 80045c8:	d0ef      	beq.n	80045aa <HAL_RCC_OscConfig+0xe6>
 80045ca:	e015      	b.n	80045f8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045cc:	f7fd ffe2 	bl	8002594 <HAL_GetTick>
 80045d0:	0003      	movs	r3, r0
 80045d2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80045d4:	e008      	b.n	80045e8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045d6:	f7fd ffdd 	bl	8002594 <HAL_GetTick>
 80045da:	0002      	movs	r2, r0
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b64      	cmp	r3, #100	; 0x64
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e336      	b.n	8004c56 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80045e8:	4b85      	ldr	r3, [pc, #532]	; (8004800 <HAL_RCC_OscConfig+0x33c>)
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	2380      	movs	r3, #128	; 0x80
 80045ee:	029b      	lsls	r3, r3, #10
 80045f0:	4013      	ands	r3, r2
 80045f2:	d1f0      	bne.n	80045d6 <HAL_RCC_OscConfig+0x112>
 80045f4:	e000      	b.n	80045f8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045f6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2202      	movs	r2, #2
 80045fe:	4013      	ands	r3, r2
 8004600:	d100      	bne.n	8004604 <HAL_RCC_OscConfig+0x140>
 8004602:	e099      	b.n	8004738 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460c:	2220      	movs	r2, #32
 800460e:	4013      	ands	r3, r2
 8004610:	d009      	beq.n	8004626 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004612:	4b7b      	ldr	r3, [pc, #492]	; (8004800 <HAL_RCC_OscConfig+0x33c>)
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	4b7a      	ldr	r3, [pc, #488]	; (8004800 <HAL_RCC_OscConfig+0x33c>)
 8004618:	2120      	movs	r1, #32
 800461a:	430a      	orrs	r2, r1
 800461c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800461e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004620:	2220      	movs	r2, #32
 8004622:	4393      	bics	r3, r2
 8004624:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	2b04      	cmp	r3, #4
 800462a:	d005      	beq.n	8004638 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	2b0c      	cmp	r3, #12
 8004630:	d13e      	bne.n	80046b0 <HAL_RCC_OscConfig+0x1ec>
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d13b      	bne.n	80046b0 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004638:	4b71      	ldr	r3, [pc, #452]	; (8004800 <HAL_RCC_OscConfig+0x33c>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2204      	movs	r2, #4
 800463e:	4013      	ands	r3, r2
 8004640:	d004      	beq.n	800464c <HAL_RCC_OscConfig+0x188>
 8004642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e304      	b.n	8004c56 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800464c:	4b6c      	ldr	r3, [pc, #432]	; (8004800 <HAL_RCC_OscConfig+0x33c>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	4a6e      	ldr	r2, [pc, #440]	; (800480c <HAL_RCC_OscConfig+0x348>)
 8004652:	4013      	ands	r3, r2
 8004654:	0019      	movs	r1, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	021a      	lsls	r2, r3, #8
 800465c:	4b68      	ldr	r3, [pc, #416]	; (8004800 <HAL_RCC_OscConfig+0x33c>)
 800465e:	430a      	orrs	r2, r1
 8004660:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004662:	4b67      	ldr	r3, [pc, #412]	; (8004800 <HAL_RCC_OscConfig+0x33c>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2209      	movs	r2, #9
 8004668:	4393      	bics	r3, r2
 800466a:	0019      	movs	r1, r3
 800466c:	4b64      	ldr	r3, [pc, #400]	; (8004800 <HAL_RCC_OscConfig+0x33c>)
 800466e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004670:	430a      	orrs	r2, r1
 8004672:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004674:	f000 fc42 	bl	8004efc <HAL_RCC_GetSysClockFreq>
 8004678:	0001      	movs	r1, r0
 800467a:	4b61      	ldr	r3, [pc, #388]	; (8004800 <HAL_RCC_OscConfig+0x33c>)
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	091b      	lsrs	r3, r3, #4
 8004680:	220f      	movs	r2, #15
 8004682:	4013      	ands	r3, r2
 8004684:	4a62      	ldr	r2, [pc, #392]	; (8004810 <HAL_RCC_OscConfig+0x34c>)
 8004686:	5cd3      	ldrb	r3, [r2, r3]
 8004688:	000a      	movs	r2, r1
 800468a:	40da      	lsrs	r2, r3
 800468c:	4b61      	ldr	r3, [pc, #388]	; (8004814 <HAL_RCC_OscConfig+0x350>)
 800468e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004690:	4b61      	ldr	r3, [pc, #388]	; (8004818 <HAL_RCC_OscConfig+0x354>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2513      	movs	r5, #19
 8004696:	197c      	adds	r4, r7, r5
 8004698:	0018      	movs	r0, r3
 800469a:	f7fd ff35 	bl	8002508 <HAL_InitTick>
 800469e:	0003      	movs	r3, r0
 80046a0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80046a2:	197b      	adds	r3, r7, r5
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d046      	beq.n	8004738 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80046aa:	197b      	adds	r3, r7, r5
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	e2d2      	b.n	8004c56 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d027      	beq.n	8004706 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80046b6:	4b52      	ldr	r3, [pc, #328]	; (8004800 <HAL_RCC_OscConfig+0x33c>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2209      	movs	r2, #9
 80046bc:	4393      	bics	r3, r2
 80046be:	0019      	movs	r1, r3
 80046c0:	4b4f      	ldr	r3, [pc, #316]	; (8004800 <HAL_RCC_OscConfig+0x33c>)
 80046c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046c4:	430a      	orrs	r2, r1
 80046c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c8:	f7fd ff64 	bl	8002594 <HAL_GetTick>
 80046cc:	0003      	movs	r3, r0
 80046ce:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046d2:	f7fd ff5f 	bl	8002594 <HAL_GetTick>
 80046d6:	0002      	movs	r2, r0
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e2b8      	b.n	8004c56 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046e4:	4b46      	ldr	r3, [pc, #280]	; (8004800 <HAL_RCC_OscConfig+0x33c>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2204      	movs	r2, #4
 80046ea:	4013      	ands	r3, r2
 80046ec:	d0f1      	beq.n	80046d2 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ee:	4b44      	ldr	r3, [pc, #272]	; (8004800 <HAL_RCC_OscConfig+0x33c>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	4a46      	ldr	r2, [pc, #280]	; (800480c <HAL_RCC_OscConfig+0x348>)
 80046f4:	4013      	ands	r3, r2
 80046f6:	0019      	movs	r1, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	021a      	lsls	r2, r3, #8
 80046fe:	4b40      	ldr	r3, [pc, #256]	; (8004800 <HAL_RCC_OscConfig+0x33c>)
 8004700:	430a      	orrs	r2, r1
 8004702:	605a      	str	r2, [r3, #4]
 8004704:	e018      	b.n	8004738 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004706:	4b3e      	ldr	r3, [pc, #248]	; (8004800 <HAL_RCC_OscConfig+0x33c>)
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	4b3d      	ldr	r3, [pc, #244]	; (8004800 <HAL_RCC_OscConfig+0x33c>)
 800470c:	2101      	movs	r1, #1
 800470e:	438a      	bics	r2, r1
 8004710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004712:	f7fd ff3f 	bl	8002594 <HAL_GetTick>
 8004716:	0003      	movs	r3, r0
 8004718:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800471a:	e008      	b.n	800472e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800471c:	f7fd ff3a 	bl	8002594 <HAL_GetTick>
 8004720:	0002      	movs	r2, r0
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b02      	cmp	r3, #2
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e293      	b.n	8004c56 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800472e:	4b34      	ldr	r3, [pc, #208]	; (8004800 <HAL_RCC_OscConfig+0x33c>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2204      	movs	r2, #4
 8004734:	4013      	ands	r3, r2
 8004736:	d1f1      	bne.n	800471c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2210      	movs	r2, #16
 800473e:	4013      	ands	r3, r2
 8004740:	d100      	bne.n	8004744 <HAL_RCC_OscConfig+0x280>
 8004742:	e0a2      	b.n	800488a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d140      	bne.n	80047cc <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800474a:	4b2d      	ldr	r3, [pc, #180]	; (8004800 <HAL_RCC_OscConfig+0x33c>)
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	2380      	movs	r3, #128	; 0x80
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	4013      	ands	r3, r2
 8004754:	d005      	beq.n	8004762 <HAL_RCC_OscConfig+0x29e>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	69db      	ldr	r3, [r3, #28]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e279      	b.n	8004c56 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004762:	4b27      	ldr	r3, [pc, #156]	; (8004800 <HAL_RCC_OscConfig+0x33c>)
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	4a2d      	ldr	r2, [pc, #180]	; (800481c <HAL_RCC_OscConfig+0x358>)
 8004768:	4013      	ands	r3, r2
 800476a:	0019      	movs	r1, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004770:	4b23      	ldr	r3, [pc, #140]	; (8004800 <HAL_RCC_OscConfig+0x33c>)
 8004772:	430a      	orrs	r2, r1
 8004774:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004776:	4b22      	ldr	r3, [pc, #136]	; (8004800 <HAL_RCC_OscConfig+0x33c>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	021b      	lsls	r3, r3, #8
 800477c:	0a19      	lsrs	r1, r3, #8
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	061a      	lsls	r2, r3, #24
 8004784:	4b1e      	ldr	r3, [pc, #120]	; (8004800 <HAL_RCC_OscConfig+0x33c>)
 8004786:	430a      	orrs	r2, r1
 8004788:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478e:	0b5b      	lsrs	r3, r3, #13
 8004790:	3301      	adds	r3, #1
 8004792:	2280      	movs	r2, #128	; 0x80
 8004794:	0212      	lsls	r2, r2, #8
 8004796:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004798:	4b19      	ldr	r3, [pc, #100]	; (8004800 <HAL_RCC_OscConfig+0x33c>)
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	091b      	lsrs	r3, r3, #4
 800479e:	210f      	movs	r1, #15
 80047a0:	400b      	ands	r3, r1
 80047a2:	491b      	ldr	r1, [pc, #108]	; (8004810 <HAL_RCC_OscConfig+0x34c>)
 80047a4:	5ccb      	ldrb	r3, [r1, r3]
 80047a6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80047a8:	4b1a      	ldr	r3, [pc, #104]	; (8004814 <HAL_RCC_OscConfig+0x350>)
 80047aa:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80047ac:	4b1a      	ldr	r3, [pc, #104]	; (8004818 <HAL_RCC_OscConfig+0x354>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2513      	movs	r5, #19
 80047b2:	197c      	adds	r4, r7, r5
 80047b4:	0018      	movs	r0, r3
 80047b6:	f7fd fea7 	bl	8002508 <HAL_InitTick>
 80047ba:	0003      	movs	r3, r0
 80047bc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80047be:	197b      	adds	r3, r7, r5
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d061      	beq.n	800488a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80047c6:	197b      	adds	r3, r7, r5
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	e244      	b.n	8004c56 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	69db      	ldr	r3, [r3, #28]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d040      	beq.n	8004856 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80047d4:	4b0a      	ldr	r3, [pc, #40]	; (8004800 <HAL_RCC_OscConfig+0x33c>)
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	4b09      	ldr	r3, [pc, #36]	; (8004800 <HAL_RCC_OscConfig+0x33c>)
 80047da:	2180      	movs	r1, #128	; 0x80
 80047dc:	0049      	lsls	r1, r1, #1
 80047de:	430a      	orrs	r2, r1
 80047e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e2:	f7fd fed7 	bl	8002594 <HAL_GetTick>
 80047e6:	0003      	movs	r3, r0
 80047e8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80047ea:	e019      	b.n	8004820 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047ec:	f7fd fed2 	bl	8002594 <HAL_GetTick>
 80047f0:	0002      	movs	r2, r0
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d912      	bls.n	8004820 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e22b      	b.n	8004c56 <HAL_RCC_OscConfig+0x792>
 80047fe:	46c0      	nop			; (mov r8, r8)
 8004800:	40021000 	.word	0x40021000
 8004804:	fffeffff 	.word	0xfffeffff
 8004808:	fffbffff 	.word	0xfffbffff
 800480c:	ffffe0ff 	.word	0xffffe0ff
 8004810:	08006a68 	.word	0x08006a68
 8004814:	20000000 	.word	0x20000000
 8004818:	20000004 	.word	0x20000004
 800481c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004820:	4bca      	ldr	r3, [pc, #808]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	2380      	movs	r3, #128	; 0x80
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4013      	ands	r3, r2
 800482a:	d0df      	beq.n	80047ec <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800482c:	4bc7      	ldr	r3, [pc, #796]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	4ac7      	ldr	r2, [pc, #796]	; (8004b50 <HAL_RCC_OscConfig+0x68c>)
 8004832:	4013      	ands	r3, r2
 8004834:	0019      	movs	r1, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800483a:	4bc4      	ldr	r3, [pc, #784]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 800483c:	430a      	orrs	r2, r1
 800483e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004840:	4bc2      	ldr	r3, [pc, #776]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	021b      	lsls	r3, r3, #8
 8004846:	0a19      	lsrs	r1, r3, #8
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a1b      	ldr	r3, [r3, #32]
 800484c:	061a      	lsls	r2, r3, #24
 800484e:	4bbf      	ldr	r3, [pc, #764]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 8004850:	430a      	orrs	r2, r1
 8004852:	605a      	str	r2, [r3, #4]
 8004854:	e019      	b.n	800488a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004856:	4bbd      	ldr	r3, [pc, #756]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	4bbc      	ldr	r3, [pc, #752]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 800485c:	49bd      	ldr	r1, [pc, #756]	; (8004b54 <HAL_RCC_OscConfig+0x690>)
 800485e:	400a      	ands	r2, r1
 8004860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004862:	f7fd fe97 	bl	8002594 <HAL_GetTick>
 8004866:	0003      	movs	r3, r0
 8004868:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800486a:	e008      	b.n	800487e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800486c:	f7fd fe92 	bl	8002594 <HAL_GetTick>
 8004870:	0002      	movs	r2, r0
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e1eb      	b.n	8004c56 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800487e:	4bb3      	ldr	r3, [pc, #716]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	2380      	movs	r3, #128	; 0x80
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4013      	ands	r3, r2
 8004888:	d1f0      	bne.n	800486c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2208      	movs	r2, #8
 8004890:	4013      	ands	r3, r2
 8004892:	d036      	beq.n	8004902 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d019      	beq.n	80048d0 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800489c:	4bab      	ldr	r3, [pc, #684]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 800489e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048a0:	4baa      	ldr	r3, [pc, #680]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 80048a2:	2101      	movs	r1, #1
 80048a4:	430a      	orrs	r2, r1
 80048a6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048a8:	f7fd fe74 	bl	8002594 <HAL_GetTick>
 80048ac:	0003      	movs	r3, r0
 80048ae:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80048b0:	e008      	b.n	80048c4 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048b2:	f7fd fe6f 	bl	8002594 <HAL_GetTick>
 80048b6:	0002      	movs	r2, r0
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d901      	bls.n	80048c4 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e1c8      	b.n	8004c56 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80048c4:	4ba1      	ldr	r3, [pc, #644]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 80048c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048c8:	2202      	movs	r2, #2
 80048ca:	4013      	ands	r3, r2
 80048cc:	d0f1      	beq.n	80048b2 <HAL_RCC_OscConfig+0x3ee>
 80048ce:	e018      	b.n	8004902 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048d0:	4b9e      	ldr	r3, [pc, #632]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 80048d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048d4:	4b9d      	ldr	r3, [pc, #628]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 80048d6:	2101      	movs	r1, #1
 80048d8:	438a      	bics	r2, r1
 80048da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048dc:	f7fd fe5a 	bl	8002594 <HAL_GetTick>
 80048e0:	0003      	movs	r3, r0
 80048e2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80048e4:	e008      	b.n	80048f8 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048e6:	f7fd fe55 	bl	8002594 <HAL_GetTick>
 80048ea:	0002      	movs	r2, r0
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d901      	bls.n	80048f8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e1ae      	b.n	8004c56 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80048f8:	4b94      	ldr	r3, [pc, #592]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 80048fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048fc:	2202      	movs	r2, #2
 80048fe:	4013      	ands	r3, r2
 8004900:	d1f1      	bne.n	80048e6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2204      	movs	r2, #4
 8004908:	4013      	ands	r3, r2
 800490a:	d100      	bne.n	800490e <HAL_RCC_OscConfig+0x44a>
 800490c:	e0ae      	b.n	8004a6c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800490e:	2023      	movs	r0, #35	; 0x23
 8004910:	183b      	adds	r3, r7, r0
 8004912:	2200      	movs	r2, #0
 8004914:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004916:	4b8d      	ldr	r3, [pc, #564]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 8004918:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800491a:	2380      	movs	r3, #128	; 0x80
 800491c:	055b      	lsls	r3, r3, #21
 800491e:	4013      	ands	r3, r2
 8004920:	d109      	bne.n	8004936 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004922:	4b8a      	ldr	r3, [pc, #552]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 8004924:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004926:	4b89      	ldr	r3, [pc, #548]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 8004928:	2180      	movs	r1, #128	; 0x80
 800492a:	0549      	lsls	r1, r1, #21
 800492c:	430a      	orrs	r2, r1
 800492e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004930:	183b      	adds	r3, r7, r0
 8004932:	2201      	movs	r2, #1
 8004934:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004936:	4b88      	ldr	r3, [pc, #544]	; (8004b58 <HAL_RCC_OscConfig+0x694>)
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	2380      	movs	r3, #128	; 0x80
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	4013      	ands	r3, r2
 8004940:	d11a      	bne.n	8004978 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004942:	4b85      	ldr	r3, [pc, #532]	; (8004b58 <HAL_RCC_OscConfig+0x694>)
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	4b84      	ldr	r3, [pc, #528]	; (8004b58 <HAL_RCC_OscConfig+0x694>)
 8004948:	2180      	movs	r1, #128	; 0x80
 800494a:	0049      	lsls	r1, r1, #1
 800494c:	430a      	orrs	r2, r1
 800494e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004950:	f7fd fe20 	bl	8002594 <HAL_GetTick>
 8004954:	0003      	movs	r3, r0
 8004956:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004958:	e008      	b.n	800496c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800495a:	f7fd fe1b 	bl	8002594 <HAL_GetTick>
 800495e:	0002      	movs	r2, r0
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b64      	cmp	r3, #100	; 0x64
 8004966:	d901      	bls.n	800496c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e174      	b.n	8004c56 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800496c:	4b7a      	ldr	r3, [pc, #488]	; (8004b58 <HAL_RCC_OscConfig+0x694>)
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	2380      	movs	r3, #128	; 0x80
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	4013      	ands	r3, r2
 8004976:	d0f0      	beq.n	800495a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689a      	ldr	r2, [r3, #8]
 800497c:	2380      	movs	r3, #128	; 0x80
 800497e:	005b      	lsls	r3, r3, #1
 8004980:	429a      	cmp	r2, r3
 8004982:	d107      	bne.n	8004994 <HAL_RCC_OscConfig+0x4d0>
 8004984:	4b71      	ldr	r3, [pc, #452]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 8004986:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004988:	4b70      	ldr	r3, [pc, #448]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 800498a:	2180      	movs	r1, #128	; 0x80
 800498c:	0049      	lsls	r1, r1, #1
 800498e:	430a      	orrs	r2, r1
 8004990:	651a      	str	r2, [r3, #80]	; 0x50
 8004992:	e031      	b.n	80049f8 <HAL_RCC_OscConfig+0x534>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10c      	bne.n	80049b6 <HAL_RCC_OscConfig+0x4f2>
 800499c:	4b6b      	ldr	r3, [pc, #428]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 800499e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80049a0:	4b6a      	ldr	r3, [pc, #424]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 80049a2:	496c      	ldr	r1, [pc, #432]	; (8004b54 <HAL_RCC_OscConfig+0x690>)
 80049a4:	400a      	ands	r2, r1
 80049a6:	651a      	str	r2, [r3, #80]	; 0x50
 80049a8:	4b68      	ldr	r3, [pc, #416]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 80049aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80049ac:	4b67      	ldr	r3, [pc, #412]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 80049ae:	496b      	ldr	r1, [pc, #428]	; (8004b5c <HAL_RCC_OscConfig+0x698>)
 80049b0:	400a      	ands	r2, r1
 80049b2:	651a      	str	r2, [r3, #80]	; 0x50
 80049b4:	e020      	b.n	80049f8 <HAL_RCC_OscConfig+0x534>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689a      	ldr	r2, [r3, #8]
 80049ba:	23a0      	movs	r3, #160	; 0xa0
 80049bc:	00db      	lsls	r3, r3, #3
 80049be:	429a      	cmp	r2, r3
 80049c0:	d10e      	bne.n	80049e0 <HAL_RCC_OscConfig+0x51c>
 80049c2:	4b62      	ldr	r3, [pc, #392]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 80049c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80049c6:	4b61      	ldr	r3, [pc, #388]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 80049c8:	2180      	movs	r1, #128	; 0x80
 80049ca:	00c9      	lsls	r1, r1, #3
 80049cc:	430a      	orrs	r2, r1
 80049ce:	651a      	str	r2, [r3, #80]	; 0x50
 80049d0:	4b5e      	ldr	r3, [pc, #376]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 80049d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80049d4:	4b5d      	ldr	r3, [pc, #372]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 80049d6:	2180      	movs	r1, #128	; 0x80
 80049d8:	0049      	lsls	r1, r1, #1
 80049da:	430a      	orrs	r2, r1
 80049dc:	651a      	str	r2, [r3, #80]	; 0x50
 80049de:	e00b      	b.n	80049f8 <HAL_RCC_OscConfig+0x534>
 80049e0:	4b5a      	ldr	r3, [pc, #360]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 80049e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80049e4:	4b59      	ldr	r3, [pc, #356]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 80049e6:	495b      	ldr	r1, [pc, #364]	; (8004b54 <HAL_RCC_OscConfig+0x690>)
 80049e8:	400a      	ands	r2, r1
 80049ea:	651a      	str	r2, [r3, #80]	; 0x50
 80049ec:	4b57      	ldr	r3, [pc, #348]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 80049ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80049f0:	4b56      	ldr	r3, [pc, #344]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 80049f2:	495a      	ldr	r1, [pc, #360]	; (8004b5c <HAL_RCC_OscConfig+0x698>)
 80049f4:	400a      	ands	r2, r1
 80049f6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d015      	beq.n	8004a2c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a00:	f7fd fdc8 	bl	8002594 <HAL_GetTick>
 8004a04:	0003      	movs	r3, r0
 8004a06:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a08:	e009      	b.n	8004a1e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a0a:	f7fd fdc3 	bl	8002594 <HAL_GetTick>
 8004a0e:	0002      	movs	r2, r0
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	4a52      	ldr	r2, [pc, #328]	; (8004b60 <HAL_RCC_OscConfig+0x69c>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e11b      	b.n	8004c56 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a1e:	4b4b      	ldr	r3, [pc, #300]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 8004a20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a22:	2380      	movs	r3, #128	; 0x80
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4013      	ands	r3, r2
 8004a28:	d0ef      	beq.n	8004a0a <HAL_RCC_OscConfig+0x546>
 8004a2a:	e014      	b.n	8004a56 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a2c:	f7fd fdb2 	bl	8002594 <HAL_GetTick>
 8004a30:	0003      	movs	r3, r0
 8004a32:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a34:	e009      	b.n	8004a4a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a36:	f7fd fdad 	bl	8002594 <HAL_GetTick>
 8004a3a:	0002      	movs	r2, r0
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	4a47      	ldr	r2, [pc, #284]	; (8004b60 <HAL_RCC_OscConfig+0x69c>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e105      	b.n	8004c56 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a4a:	4b40      	ldr	r3, [pc, #256]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 8004a4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a4e:	2380      	movs	r3, #128	; 0x80
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4013      	ands	r3, r2
 8004a54:	d1ef      	bne.n	8004a36 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a56:	2323      	movs	r3, #35	; 0x23
 8004a58:	18fb      	adds	r3, r7, r3
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d105      	bne.n	8004a6c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a60:	4b3a      	ldr	r3, [pc, #232]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 8004a62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a64:	4b39      	ldr	r3, [pc, #228]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 8004a66:	493f      	ldr	r1, [pc, #252]	; (8004b64 <HAL_RCC_OscConfig+0x6a0>)
 8004a68:	400a      	ands	r2, r1
 8004a6a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2220      	movs	r2, #32
 8004a72:	4013      	ands	r3, r2
 8004a74:	d049      	beq.n	8004b0a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d026      	beq.n	8004acc <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004a7e:	4b33      	ldr	r3, [pc, #204]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 8004a80:	689a      	ldr	r2, [r3, #8]
 8004a82:	4b32      	ldr	r3, [pc, #200]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 8004a84:	2101      	movs	r1, #1
 8004a86:	430a      	orrs	r2, r1
 8004a88:	609a      	str	r2, [r3, #8]
 8004a8a:	4b30      	ldr	r3, [pc, #192]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 8004a8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a8e:	4b2f      	ldr	r3, [pc, #188]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 8004a90:	2101      	movs	r1, #1
 8004a92:	430a      	orrs	r2, r1
 8004a94:	635a      	str	r2, [r3, #52]	; 0x34
 8004a96:	4b34      	ldr	r3, [pc, #208]	; (8004b68 <HAL_RCC_OscConfig+0x6a4>)
 8004a98:	6a1a      	ldr	r2, [r3, #32]
 8004a9a:	4b33      	ldr	r3, [pc, #204]	; (8004b68 <HAL_RCC_OscConfig+0x6a4>)
 8004a9c:	2180      	movs	r1, #128	; 0x80
 8004a9e:	0189      	lsls	r1, r1, #6
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa4:	f7fd fd76 	bl	8002594 <HAL_GetTick>
 8004aa8:	0003      	movs	r3, r0
 8004aaa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004aac:	e008      	b.n	8004ac0 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004aae:	f7fd fd71 	bl	8002594 <HAL_GetTick>
 8004ab2:	0002      	movs	r2, r0
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d901      	bls.n	8004ac0 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e0ca      	b.n	8004c56 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ac0:	4b22      	ldr	r3, [pc, #136]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	d0f1      	beq.n	8004aae <HAL_RCC_OscConfig+0x5ea>
 8004aca:	e01e      	b.n	8004b0a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004acc:	4b1f      	ldr	r3, [pc, #124]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 8004ace:	689a      	ldr	r2, [r3, #8]
 8004ad0:	4b1e      	ldr	r3, [pc, #120]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 8004ad2:	2101      	movs	r1, #1
 8004ad4:	438a      	bics	r2, r1
 8004ad6:	609a      	str	r2, [r3, #8]
 8004ad8:	4b23      	ldr	r3, [pc, #140]	; (8004b68 <HAL_RCC_OscConfig+0x6a4>)
 8004ada:	6a1a      	ldr	r2, [r3, #32]
 8004adc:	4b22      	ldr	r3, [pc, #136]	; (8004b68 <HAL_RCC_OscConfig+0x6a4>)
 8004ade:	4923      	ldr	r1, [pc, #140]	; (8004b6c <HAL_RCC_OscConfig+0x6a8>)
 8004ae0:	400a      	ands	r2, r1
 8004ae2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae4:	f7fd fd56 	bl	8002594 <HAL_GetTick>
 8004ae8:	0003      	movs	r3, r0
 8004aea:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004aec:	e008      	b.n	8004b00 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004aee:	f7fd fd51 	bl	8002594 <HAL_GetTick>
 8004af2:	0002      	movs	r2, r0
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d901      	bls.n	8004b00 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e0aa      	b.n	8004c56 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004b00:	4b12      	ldr	r3, [pc, #72]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	2202      	movs	r2, #2
 8004b06:	4013      	ands	r3, r2
 8004b08:	d1f1      	bne.n	8004aee <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d100      	bne.n	8004b14 <HAL_RCC_OscConfig+0x650>
 8004b12:	e09f      	b.n	8004c54 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	2b0c      	cmp	r3, #12
 8004b18:	d100      	bne.n	8004b1c <HAL_RCC_OscConfig+0x658>
 8004b1a:	e078      	b.n	8004c0e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d159      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b24:	4b09      	ldr	r3, [pc, #36]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	4b08      	ldr	r3, [pc, #32]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 8004b2a:	4911      	ldr	r1, [pc, #68]	; (8004b70 <HAL_RCC_OscConfig+0x6ac>)
 8004b2c:	400a      	ands	r2, r1
 8004b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b30:	f7fd fd30 	bl	8002594 <HAL_GetTick>
 8004b34:	0003      	movs	r3, r0
 8004b36:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004b38:	e01c      	b.n	8004b74 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b3a:	f7fd fd2b 	bl	8002594 <HAL_GetTick>
 8004b3e:	0002      	movs	r2, r0
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d915      	bls.n	8004b74 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e084      	b.n	8004c56 <HAL_RCC_OscConfig+0x792>
 8004b4c:	40021000 	.word	0x40021000
 8004b50:	ffff1fff 	.word	0xffff1fff
 8004b54:	fffffeff 	.word	0xfffffeff
 8004b58:	40007000 	.word	0x40007000
 8004b5c:	fffffbff 	.word	0xfffffbff
 8004b60:	00001388 	.word	0x00001388
 8004b64:	efffffff 	.word	0xefffffff
 8004b68:	40010000 	.word	0x40010000
 8004b6c:	ffffdfff 	.word	0xffffdfff
 8004b70:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004b74:	4b3a      	ldr	r3, [pc, #232]	; (8004c60 <HAL_RCC_OscConfig+0x79c>)
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	2380      	movs	r3, #128	; 0x80
 8004b7a:	049b      	lsls	r3, r3, #18
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	d1dc      	bne.n	8004b3a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b80:	4b37      	ldr	r3, [pc, #220]	; (8004c60 <HAL_RCC_OscConfig+0x79c>)
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	4a37      	ldr	r2, [pc, #220]	; (8004c64 <HAL_RCC_OscConfig+0x7a0>)
 8004b86:	4013      	ands	r3, r2
 8004b88:	0019      	movs	r1, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b92:	431a      	orrs	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	4b31      	ldr	r3, [pc, #196]	; (8004c60 <HAL_RCC_OscConfig+0x79c>)
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ba0:	4b2f      	ldr	r3, [pc, #188]	; (8004c60 <HAL_RCC_OscConfig+0x79c>)
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	4b2e      	ldr	r3, [pc, #184]	; (8004c60 <HAL_RCC_OscConfig+0x79c>)
 8004ba6:	2180      	movs	r1, #128	; 0x80
 8004ba8:	0449      	lsls	r1, r1, #17
 8004baa:	430a      	orrs	r2, r1
 8004bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bae:	f7fd fcf1 	bl	8002594 <HAL_GetTick>
 8004bb2:	0003      	movs	r3, r0
 8004bb4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004bb6:	e008      	b.n	8004bca <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bb8:	f7fd fcec 	bl	8002594 <HAL_GetTick>
 8004bbc:	0002      	movs	r2, r0
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e045      	b.n	8004c56 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004bca:	4b25      	ldr	r3, [pc, #148]	; (8004c60 <HAL_RCC_OscConfig+0x79c>)
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	2380      	movs	r3, #128	; 0x80
 8004bd0:	049b      	lsls	r3, r3, #18
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	d0f0      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x6f4>
 8004bd6:	e03d      	b.n	8004c54 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bd8:	4b21      	ldr	r3, [pc, #132]	; (8004c60 <HAL_RCC_OscConfig+0x79c>)
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	4b20      	ldr	r3, [pc, #128]	; (8004c60 <HAL_RCC_OscConfig+0x79c>)
 8004bde:	4922      	ldr	r1, [pc, #136]	; (8004c68 <HAL_RCC_OscConfig+0x7a4>)
 8004be0:	400a      	ands	r2, r1
 8004be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be4:	f7fd fcd6 	bl	8002594 <HAL_GetTick>
 8004be8:	0003      	movs	r3, r0
 8004bea:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004bec:	e008      	b.n	8004c00 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bee:	f7fd fcd1 	bl	8002594 <HAL_GetTick>
 8004bf2:	0002      	movs	r2, r0
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d901      	bls.n	8004c00 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e02a      	b.n	8004c56 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004c00:	4b17      	ldr	r3, [pc, #92]	; (8004c60 <HAL_RCC_OscConfig+0x79c>)
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	2380      	movs	r3, #128	; 0x80
 8004c06:	049b      	lsls	r3, r3, #18
 8004c08:	4013      	ands	r3, r2
 8004c0a:	d1f0      	bne.n	8004bee <HAL_RCC_OscConfig+0x72a>
 8004c0c:	e022      	b.n	8004c54 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d101      	bne.n	8004c1a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e01d      	b.n	8004c56 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004c1a:	4b11      	ldr	r3, [pc, #68]	; (8004c60 <HAL_RCC_OscConfig+0x79c>)
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	2380      	movs	r3, #128	; 0x80
 8004c24:	025b      	lsls	r3, r3, #9
 8004c26:	401a      	ands	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d10f      	bne.n	8004c50 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004c30:	69ba      	ldr	r2, [r7, #24]
 8004c32:	23f0      	movs	r3, #240	; 0xf0
 8004c34:	039b      	lsls	r3, r3, #14
 8004c36:	401a      	ands	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d107      	bne.n	8004c50 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	23c0      	movs	r3, #192	; 0xc0
 8004c44:	041b      	lsls	r3, r3, #16
 8004c46:	401a      	ands	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d001      	beq.n	8004c54 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e000      	b.n	8004c56 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	0018      	movs	r0, r3
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	b00a      	add	sp, #40	; 0x28
 8004c5c:	bdb0      	pop	{r4, r5, r7, pc}
 8004c5e:	46c0      	nop			; (mov r8, r8)
 8004c60:	40021000 	.word	0x40021000
 8004c64:	ff02ffff 	.word	0xff02ffff
 8004c68:	feffffff 	.word	0xfeffffff

08004c6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c6c:	b5b0      	push	{r4, r5, r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d101      	bne.n	8004c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e128      	b.n	8004ed2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c80:	4b96      	ldr	r3, [pc, #600]	; (8004edc <HAL_RCC_ClockConfig+0x270>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2201      	movs	r2, #1
 8004c86:	4013      	ands	r3, r2
 8004c88:	683a      	ldr	r2, [r7, #0]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d91e      	bls.n	8004ccc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c8e:	4b93      	ldr	r3, [pc, #588]	; (8004edc <HAL_RCC_ClockConfig+0x270>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2201      	movs	r2, #1
 8004c94:	4393      	bics	r3, r2
 8004c96:	0019      	movs	r1, r3
 8004c98:	4b90      	ldr	r3, [pc, #576]	; (8004edc <HAL_RCC_ClockConfig+0x270>)
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004ca0:	f7fd fc78 	bl	8002594 <HAL_GetTick>
 8004ca4:	0003      	movs	r3, r0
 8004ca6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ca8:	e009      	b.n	8004cbe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004caa:	f7fd fc73 	bl	8002594 <HAL_GetTick>
 8004cae:	0002      	movs	r2, r0
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	4a8a      	ldr	r2, [pc, #552]	; (8004ee0 <HAL_RCC_ClockConfig+0x274>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e109      	b.n	8004ed2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cbe:	4b87      	ldr	r3, [pc, #540]	; (8004edc <HAL_RCC_ClockConfig+0x270>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d1ee      	bne.n	8004caa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2202      	movs	r2, #2
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	d009      	beq.n	8004cea <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cd6:	4b83      	ldr	r3, [pc, #524]	; (8004ee4 <HAL_RCC_ClockConfig+0x278>)
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	22f0      	movs	r2, #240	; 0xf0
 8004cdc:	4393      	bics	r3, r2
 8004cde:	0019      	movs	r1, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	4b7f      	ldr	r3, [pc, #508]	; (8004ee4 <HAL_RCC_ClockConfig+0x278>)
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	d100      	bne.n	8004cf6 <HAL_RCC_ClockConfig+0x8a>
 8004cf4:	e089      	b.n	8004e0a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d107      	bne.n	8004d0e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cfe:	4b79      	ldr	r3, [pc, #484]	; (8004ee4 <HAL_RCC_ClockConfig+0x278>)
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	2380      	movs	r3, #128	; 0x80
 8004d04:	029b      	lsls	r3, r3, #10
 8004d06:	4013      	ands	r3, r2
 8004d08:	d120      	bne.n	8004d4c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e0e1      	b.n	8004ed2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	2b03      	cmp	r3, #3
 8004d14:	d107      	bne.n	8004d26 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d16:	4b73      	ldr	r3, [pc, #460]	; (8004ee4 <HAL_RCC_ClockConfig+0x278>)
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	2380      	movs	r3, #128	; 0x80
 8004d1c:	049b      	lsls	r3, r3, #18
 8004d1e:	4013      	ands	r3, r2
 8004d20:	d114      	bne.n	8004d4c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e0d5      	b.n	8004ed2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d106      	bne.n	8004d3c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d2e:	4b6d      	ldr	r3, [pc, #436]	; (8004ee4 <HAL_RCC_ClockConfig+0x278>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2204      	movs	r2, #4
 8004d34:	4013      	ands	r3, r2
 8004d36:	d109      	bne.n	8004d4c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e0ca      	b.n	8004ed2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004d3c:	4b69      	ldr	r3, [pc, #420]	; (8004ee4 <HAL_RCC_ClockConfig+0x278>)
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	2380      	movs	r3, #128	; 0x80
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4013      	ands	r3, r2
 8004d46:	d101      	bne.n	8004d4c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e0c2      	b.n	8004ed2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d4c:	4b65      	ldr	r3, [pc, #404]	; (8004ee4 <HAL_RCC_ClockConfig+0x278>)
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	2203      	movs	r2, #3
 8004d52:	4393      	bics	r3, r2
 8004d54:	0019      	movs	r1, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	4b62      	ldr	r3, [pc, #392]	; (8004ee4 <HAL_RCC_ClockConfig+0x278>)
 8004d5c:	430a      	orrs	r2, r1
 8004d5e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d60:	f7fd fc18 	bl	8002594 <HAL_GetTick>
 8004d64:	0003      	movs	r3, r0
 8004d66:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d111      	bne.n	8004d94 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d70:	e009      	b.n	8004d86 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d72:	f7fd fc0f 	bl	8002594 <HAL_GetTick>
 8004d76:	0002      	movs	r2, r0
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	4a58      	ldr	r2, [pc, #352]	; (8004ee0 <HAL_RCC_ClockConfig+0x274>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e0a5      	b.n	8004ed2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d86:	4b57      	ldr	r3, [pc, #348]	; (8004ee4 <HAL_RCC_ClockConfig+0x278>)
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	220c      	movs	r2, #12
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	2b08      	cmp	r3, #8
 8004d90:	d1ef      	bne.n	8004d72 <HAL_RCC_ClockConfig+0x106>
 8004d92:	e03a      	b.n	8004e0a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	2b03      	cmp	r3, #3
 8004d9a:	d111      	bne.n	8004dc0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d9c:	e009      	b.n	8004db2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d9e:	f7fd fbf9 	bl	8002594 <HAL_GetTick>
 8004da2:	0002      	movs	r2, r0
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	4a4d      	ldr	r2, [pc, #308]	; (8004ee0 <HAL_RCC_ClockConfig+0x274>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e08f      	b.n	8004ed2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004db2:	4b4c      	ldr	r3, [pc, #304]	; (8004ee4 <HAL_RCC_ClockConfig+0x278>)
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	220c      	movs	r2, #12
 8004db8:	4013      	ands	r3, r2
 8004dba:	2b0c      	cmp	r3, #12
 8004dbc:	d1ef      	bne.n	8004d9e <HAL_RCC_ClockConfig+0x132>
 8004dbe:	e024      	b.n	8004e0a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d11b      	bne.n	8004e00 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004dc8:	e009      	b.n	8004dde <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dca:	f7fd fbe3 	bl	8002594 <HAL_GetTick>
 8004dce:	0002      	movs	r2, r0
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	4a42      	ldr	r2, [pc, #264]	; (8004ee0 <HAL_RCC_ClockConfig+0x274>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e079      	b.n	8004ed2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004dde:	4b41      	ldr	r3, [pc, #260]	; (8004ee4 <HAL_RCC_ClockConfig+0x278>)
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	220c      	movs	r2, #12
 8004de4:	4013      	ands	r3, r2
 8004de6:	2b04      	cmp	r3, #4
 8004de8:	d1ef      	bne.n	8004dca <HAL_RCC_ClockConfig+0x15e>
 8004dea:	e00e      	b.n	8004e0a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dec:	f7fd fbd2 	bl	8002594 <HAL_GetTick>
 8004df0:	0002      	movs	r2, r0
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	4a3a      	ldr	r2, [pc, #232]	; (8004ee0 <HAL_RCC_ClockConfig+0x274>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d901      	bls.n	8004e00 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e068      	b.n	8004ed2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004e00:	4b38      	ldr	r3, [pc, #224]	; (8004ee4 <HAL_RCC_ClockConfig+0x278>)
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	220c      	movs	r2, #12
 8004e06:	4013      	ands	r3, r2
 8004e08:	d1f0      	bne.n	8004dec <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e0a:	4b34      	ldr	r3, [pc, #208]	; (8004edc <HAL_RCC_ClockConfig+0x270>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	4013      	ands	r3, r2
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d21e      	bcs.n	8004e56 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e18:	4b30      	ldr	r3, [pc, #192]	; (8004edc <HAL_RCC_ClockConfig+0x270>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	4393      	bics	r3, r2
 8004e20:	0019      	movs	r1, r3
 8004e22:	4b2e      	ldr	r3, [pc, #184]	; (8004edc <HAL_RCC_ClockConfig+0x270>)
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004e2a:	f7fd fbb3 	bl	8002594 <HAL_GetTick>
 8004e2e:	0003      	movs	r3, r0
 8004e30:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e32:	e009      	b.n	8004e48 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e34:	f7fd fbae 	bl	8002594 <HAL_GetTick>
 8004e38:	0002      	movs	r2, r0
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	4a28      	ldr	r2, [pc, #160]	; (8004ee0 <HAL_RCC_ClockConfig+0x274>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d901      	bls.n	8004e48 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e044      	b.n	8004ed2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e48:	4b24      	ldr	r3, [pc, #144]	; (8004edc <HAL_RCC_ClockConfig+0x270>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	4013      	ands	r3, r2
 8004e50:	683a      	ldr	r2, [r7, #0]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d1ee      	bne.n	8004e34 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2204      	movs	r2, #4
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	d009      	beq.n	8004e74 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e60:	4b20      	ldr	r3, [pc, #128]	; (8004ee4 <HAL_RCC_ClockConfig+0x278>)
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	4a20      	ldr	r2, [pc, #128]	; (8004ee8 <HAL_RCC_ClockConfig+0x27c>)
 8004e66:	4013      	ands	r3, r2
 8004e68:	0019      	movs	r1, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68da      	ldr	r2, [r3, #12]
 8004e6e:	4b1d      	ldr	r3, [pc, #116]	; (8004ee4 <HAL_RCC_ClockConfig+0x278>)
 8004e70:	430a      	orrs	r2, r1
 8004e72:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2208      	movs	r2, #8
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	d00a      	beq.n	8004e94 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e7e:	4b19      	ldr	r3, [pc, #100]	; (8004ee4 <HAL_RCC_ClockConfig+0x278>)
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	4a1a      	ldr	r2, [pc, #104]	; (8004eec <HAL_RCC_ClockConfig+0x280>)
 8004e84:	4013      	ands	r3, r2
 8004e86:	0019      	movs	r1, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	00da      	lsls	r2, r3, #3
 8004e8e:	4b15      	ldr	r3, [pc, #84]	; (8004ee4 <HAL_RCC_ClockConfig+0x278>)
 8004e90:	430a      	orrs	r2, r1
 8004e92:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e94:	f000 f832 	bl	8004efc <HAL_RCC_GetSysClockFreq>
 8004e98:	0001      	movs	r1, r0
 8004e9a:	4b12      	ldr	r3, [pc, #72]	; (8004ee4 <HAL_RCC_ClockConfig+0x278>)
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	091b      	lsrs	r3, r3, #4
 8004ea0:	220f      	movs	r2, #15
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	4a12      	ldr	r2, [pc, #72]	; (8004ef0 <HAL_RCC_ClockConfig+0x284>)
 8004ea6:	5cd3      	ldrb	r3, [r2, r3]
 8004ea8:	000a      	movs	r2, r1
 8004eaa:	40da      	lsrs	r2, r3
 8004eac:	4b11      	ldr	r3, [pc, #68]	; (8004ef4 <HAL_RCC_ClockConfig+0x288>)
 8004eae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004eb0:	4b11      	ldr	r3, [pc, #68]	; (8004ef8 <HAL_RCC_ClockConfig+0x28c>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	250b      	movs	r5, #11
 8004eb6:	197c      	adds	r4, r7, r5
 8004eb8:	0018      	movs	r0, r3
 8004eba:	f7fd fb25 	bl	8002508 <HAL_InitTick>
 8004ebe:	0003      	movs	r3, r0
 8004ec0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004ec2:	197b      	adds	r3, r7, r5
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d002      	beq.n	8004ed0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004eca:	197b      	adds	r3, r7, r5
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	e000      	b.n	8004ed2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	0018      	movs	r0, r3
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	b004      	add	sp, #16
 8004ed8:	bdb0      	pop	{r4, r5, r7, pc}
 8004eda:	46c0      	nop			; (mov r8, r8)
 8004edc:	40022000 	.word	0x40022000
 8004ee0:	00001388 	.word	0x00001388
 8004ee4:	40021000 	.word	0x40021000
 8004ee8:	fffff8ff 	.word	0xfffff8ff
 8004eec:	ffffc7ff 	.word	0xffffc7ff
 8004ef0:	08006a68 	.word	0x08006a68
 8004ef4:	20000000 	.word	0x20000000
 8004ef8:	20000004 	.word	0x20000004

08004efc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004efc:	b5b0      	push	{r4, r5, r7, lr}
 8004efe:	b08e      	sub	sp, #56	; 0x38
 8004f00:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8004f02:	4b4c      	ldr	r3, [pc, #304]	; (8005034 <HAL_RCC_GetSysClockFreq+0x138>)
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f0a:	230c      	movs	r3, #12
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	2b0c      	cmp	r3, #12
 8004f10:	d014      	beq.n	8004f3c <HAL_RCC_GetSysClockFreq+0x40>
 8004f12:	d900      	bls.n	8004f16 <HAL_RCC_GetSysClockFreq+0x1a>
 8004f14:	e07b      	b.n	800500e <HAL_RCC_GetSysClockFreq+0x112>
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	d002      	beq.n	8004f20 <HAL_RCC_GetSysClockFreq+0x24>
 8004f1a:	2b08      	cmp	r3, #8
 8004f1c:	d00b      	beq.n	8004f36 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f1e:	e076      	b.n	800500e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004f20:	4b44      	ldr	r3, [pc, #272]	; (8005034 <HAL_RCC_GetSysClockFreq+0x138>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2210      	movs	r2, #16
 8004f26:	4013      	ands	r3, r2
 8004f28:	d002      	beq.n	8004f30 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004f2a:	4b43      	ldr	r3, [pc, #268]	; (8005038 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004f2c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004f2e:	e07c      	b.n	800502a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8004f30:	4b42      	ldr	r3, [pc, #264]	; (800503c <HAL_RCC_GetSysClockFreq+0x140>)
 8004f32:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004f34:	e079      	b.n	800502a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f36:	4b42      	ldr	r3, [pc, #264]	; (8005040 <HAL_RCC_GetSysClockFreq+0x144>)
 8004f38:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004f3a:	e076      	b.n	800502a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f3e:	0c9a      	lsrs	r2, r3, #18
 8004f40:	230f      	movs	r3, #15
 8004f42:	401a      	ands	r2, r3
 8004f44:	4b3f      	ldr	r3, [pc, #252]	; (8005044 <HAL_RCC_GetSysClockFreq+0x148>)
 8004f46:	5c9b      	ldrb	r3, [r3, r2]
 8004f48:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4c:	0d9a      	lsrs	r2, r3, #22
 8004f4e:	2303      	movs	r3, #3
 8004f50:	4013      	ands	r3, r2
 8004f52:	3301      	adds	r3, #1
 8004f54:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f56:	4b37      	ldr	r3, [pc, #220]	; (8005034 <HAL_RCC_GetSysClockFreq+0x138>)
 8004f58:	68da      	ldr	r2, [r3, #12]
 8004f5a:	2380      	movs	r3, #128	; 0x80
 8004f5c:	025b      	lsls	r3, r3, #9
 8004f5e:	4013      	ands	r3, r2
 8004f60:	d01a      	beq.n	8004f98 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f64:	61bb      	str	r3, [r7, #24]
 8004f66:	2300      	movs	r3, #0
 8004f68:	61fb      	str	r3, [r7, #28]
 8004f6a:	4a35      	ldr	r2, [pc, #212]	; (8005040 <HAL_RCC_GetSysClockFreq+0x144>)
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	69b8      	ldr	r0, [r7, #24]
 8004f70:	69f9      	ldr	r1, [r7, #28]
 8004f72:	f7fb f97f 	bl	8000274 <__aeabi_lmul>
 8004f76:	0002      	movs	r2, r0
 8004f78:	000b      	movs	r3, r1
 8004f7a:	0010      	movs	r0, r2
 8004f7c:	0019      	movs	r1, r3
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f80:	613b      	str	r3, [r7, #16]
 8004f82:	2300      	movs	r3, #0
 8004f84:	617b      	str	r3, [r7, #20]
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f7fb f953 	bl	8000234 <__aeabi_uldivmod>
 8004f8e:	0002      	movs	r2, r0
 8004f90:	000b      	movs	r3, r1
 8004f92:	0013      	movs	r3, r2
 8004f94:	637b      	str	r3, [r7, #52]	; 0x34
 8004f96:	e037      	b.n	8005008 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004f98:	4b26      	ldr	r3, [pc, #152]	; (8005034 <HAL_RCC_GetSysClockFreq+0x138>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2210      	movs	r2, #16
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	d01a      	beq.n	8004fd8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8004fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa4:	60bb      	str	r3, [r7, #8]
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60fb      	str	r3, [r7, #12]
 8004faa:	4a23      	ldr	r2, [pc, #140]	; (8005038 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004fac:	2300      	movs	r3, #0
 8004fae:	68b8      	ldr	r0, [r7, #8]
 8004fb0:	68f9      	ldr	r1, [r7, #12]
 8004fb2:	f7fb f95f 	bl	8000274 <__aeabi_lmul>
 8004fb6:	0002      	movs	r2, r0
 8004fb8:	000b      	movs	r3, r1
 8004fba:	0010      	movs	r0, r2
 8004fbc:	0019      	movs	r1, r3
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	603b      	str	r3, [r7, #0]
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	607b      	str	r3, [r7, #4]
 8004fc6:	683a      	ldr	r2, [r7, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f7fb f933 	bl	8000234 <__aeabi_uldivmod>
 8004fce:	0002      	movs	r2, r0
 8004fd0:	000b      	movs	r3, r1
 8004fd2:	0013      	movs	r3, r2
 8004fd4:	637b      	str	r3, [r7, #52]	; 0x34
 8004fd6:	e017      	b.n	8005008 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fda:	0018      	movs	r0, r3
 8004fdc:	2300      	movs	r3, #0
 8004fde:	0019      	movs	r1, r3
 8004fe0:	4a16      	ldr	r2, [pc, #88]	; (800503c <HAL_RCC_GetSysClockFreq+0x140>)
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	f7fb f946 	bl	8000274 <__aeabi_lmul>
 8004fe8:	0002      	movs	r2, r0
 8004fea:	000b      	movs	r3, r1
 8004fec:	0010      	movs	r0, r2
 8004fee:	0019      	movs	r1, r3
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	001c      	movs	r4, r3
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	001d      	movs	r5, r3
 8004ff8:	0022      	movs	r2, r4
 8004ffa:	002b      	movs	r3, r5
 8004ffc:	f7fb f91a 	bl	8000234 <__aeabi_uldivmod>
 8005000:	0002      	movs	r2, r0
 8005002:	000b      	movs	r3, r1
 8005004:	0013      	movs	r3, r2
 8005006:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800500a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800500c:	e00d      	b.n	800502a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800500e:	4b09      	ldr	r3, [pc, #36]	; (8005034 <HAL_RCC_GetSysClockFreq+0x138>)
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	0b5b      	lsrs	r3, r3, #13
 8005014:	2207      	movs	r2, #7
 8005016:	4013      	ands	r3, r2
 8005018:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800501a:	6a3b      	ldr	r3, [r7, #32]
 800501c:	3301      	adds	r3, #1
 800501e:	2280      	movs	r2, #128	; 0x80
 8005020:	0212      	lsls	r2, r2, #8
 8005022:	409a      	lsls	r2, r3
 8005024:	0013      	movs	r3, r2
 8005026:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005028:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800502a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800502c:	0018      	movs	r0, r3
 800502e:	46bd      	mov	sp, r7
 8005030:	b00e      	add	sp, #56	; 0x38
 8005032:	bdb0      	pop	{r4, r5, r7, pc}
 8005034:	40021000 	.word	0x40021000
 8005038:	003d0900 	.word	0x003d0900
 800503c:	00f42400 	.word	0x00f42400
 8005040:	007a1200 	.word	0x007a1200
 8005044:	08006a80 	.word	0x08006a80

08005048 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800504c:	4b02      	ldr	r3, [pc, #8]	; (8005058 <HAL_RCC_GetHCLKFreq+0x10>)
 800504e:	681b      	ldr	r3, [r3, #0]
}
 8005050:	0018      	movs	r0, r3
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	46c0      	nop			; (mov r8, r8)
 8005058:	20000000 	.word	0x20000000

0800505c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005060:	f7ff fff2 	bl	8005048 <HAL_RCC_GetHCLKFreq>
 8005064:	0001      	movs	r1, r0
 8005066:	4b06      	ldr	r3, [pc, #24]	; (8005080 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	0a1b      	lsrs	r3, r3, #8
 800506c:	2207      	movs	r2, #7
 800506e:	4013      	ands	r3, r2
 8005070:	4a04      	ldr	r2, [pc, #16]	; (8005084 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005072:	5cd3      	ldrb	r3, [r2, r3]
 8005074:	40d9      	lsrs	r1, r3
 8005076:	000b      	movs	r3, r1
}
 8005078:	0018      	movs	r0, r3
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	46c0      	nop			; (mov r8, r8)
 8005080:	40021000 	.word	0x40021000
 8005084:	08006a78 	.word	0x08006a78

08005088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800508c:	f7ff ffdc 	bl	8005048 <HAL_RCC_GetHCLKFreq>
 8005090:	0001      	movs	r1, r0
 8005092:	4b06      	ldr	r3, [pc, #24]	; (80050ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	0adb      	lsrs	r3, r3, #11
 8005098:	2207      	movs	r2, #7
 800509a:	4013      	ands	r3, r2
 800509c:	4a04      	ldr	r2, [pc, #16]	; (80050b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800509e:	5cd3      	ldrb	r3, [r2, r3]
 80050a0:	40d9      	lsrs	r1, r3
 80050a2:	000b      	movs	r3, r1
}
 80050a4:	0018      	movs	r0, r3
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	46c0      	nop			; (mov r8, r8)
 80050ac:	40021000 	.word	0x40021000
 80050b0:	08006a78 	.word	0x08006a78

080050b4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80050bc:	2317      	movs	r3, #23
 80050be:	18fb      	adds	r3, r7, r3
 80050c0:	2200      	movs	r2, #0
 80050c2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2220      	movs	r2, #32
 80050ca:	4013      	ands	r3, r2
 80050cc:	d106      	bne.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	2380      	movs	r3, #128	; 0x80
 80050d4:	011b      	lsls	r3, r3, #4
 80050d6:	4013      	ands	r3, r2
 80050d8:	d100      	bne.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x28>
 80050da:	e104      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050dc:	4bb9      	ldr	r3, [pc, #740]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80050de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050e0:	2380      	movs	r3, #128	; 0x80
 80050e2:	055b      	lsls	r3, r3, #21
 80050e4:	4013      	ands	r3, r2
 80050e6:	d10a      	bne.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050e8:	4bb6      	ldr	r3, [pc, #728]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80050ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050ec:	4bb5      	ldr	r3, [pc, #724]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80050ee:	2180      	movs	r1, #128	; 0x80
 80050f0:	0549      	lsls	r1, r1, #21
 80050f2:	430a      	orrs	r2, r1
 80050f4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80050f6:	2317      	movs	r3, #23
 80050f8:	18fb      	adds	r3, r7, r3
 80050fa:	2201      	movs	r2, #1
 80050fc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050fe:	4bb2      	ldr	r3, [pc, #712]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	2380      	movs	r3, #128	; 0x80
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	4013      	ands	r3, r2
 8005108:	d11a      	bne.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800510a:	4baf      	ldr	r3, [pc, #700]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	4bae      	ldr	r3, [pc, #696]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8005110:	2180      	movs	r1, #128	; 0x80
 8005112:	0049      	lsls	r1, r1, #1
 8005114:	430a      	orrs	r2, r1
 8005116:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005118:	f7fd fa3c 	bl	8002594 <HAL_GetTick>
 800511c:	0003      	movs	r3, r0
 800511e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005120:	e008      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005122:	f7fd fa37 	bl	8002594 <HAL_GetTick>
 8005126:	0002      	movs	r2, r0
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	2b64      	cmp	r3, #100	; 0x64
 800512e:	d901      	bls.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e143      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005134:	4ba4      	ldr	r3, [pc, #656]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	2380      	movs	r3, #128	; 0x80
 800513a:	005b      	lsls	r3, r3, #1
 800513c:	4013      	ands	r3, r2
 800513e:	d0f0      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005140:	4ba0      	ldr	r3, [pc, #640]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	23c0      	movs	r3, #192	; 0xc0
 8005146:	039b      	lsls	r3, r3, #14
 8005148:	4013      	ands	r3, r2
 800514a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685a      	ldr	r2, [r3, #4]
 8005150:	23c0      	movs	r3, #192	; 0xc0
 8005152:	039b      	lsls	r3, r3, #14
 8005154:	4013      	ands	r3, r2
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	429a      	cmp	r2, r3
 800515a:	d107      	bne.n	800516c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	23c0      	movs	r3, #192	; 0xc0
 8005162:	039b      	lsls	r3, r3, #14
 8005164:	4013      	ands	r3, r2
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	429a      	cmp	r2, r3
 800516a:	d013      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	23c0      	movs	r3, #192	; 0xc0
 8005172:	029b      	lsls	r3, r3, #10
 8005174:	401a      	ands	r2, r3
 8005176:	23c0      	movs	r3, #192	; 0xc0
 8005178:	029b      	lsls	r3, r3, #10
 800517a:	429a      	cmp	r2, r3
 800517c:	d10a      	bne.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800517e:	4b91      	ldr	r3, [pc, #580]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	2380      	movs	r3, #128	; 0x80
 8005184:	029b      	lsls	r3, r3, #10
 8005186:	401a      	ands	r2, r3
 8005188:	2380      	movs	r3, #128	; 0x80
 800518a:	029b      	lsls	r3, r3, #10
 800518c:	429a      	cmp	r2, r3
 800518e:	d101      	bne.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e113      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005194:	4b8b      	ldr	r3, [pc, #556]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005196:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005198:	23c0      	movs	r3, #192	; 0xc0
 800519a:	029b      	lsls	r3, r3, #10
 800519c:	4013      	ands	r3, r2
 800519e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d049      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x186>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	685a      	ldr	r2, [r3, #4]
 80051aa:	23c0      	movs	r3, #192	; 0xc0
 80051ac:	029b      	lsls	r3, r3, #10
 80051ae:	4013      	ands	r3, r2
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d004      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2220      	movs	r2, #32
 80051bc:	4013      	ands	r3, r2
 80051be:	d10d      	bne.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	689a      	ldr	r2, [r3, #8]
 80051c4:	23c0      	movs	r3, #192	; 0xc0
 80051c6:	029b      	lsls	r3, r3, #10
 80051c8:	4013      	ands	r3, r2
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d034      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	2380      	movs	r3, #128	; 0x80
 80051d6:	011b      	lsls	r3, r3, #4
 80051d8:	4013      	ands	r3, r2
 80051da:	d02e      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80051dc:	4b79      	ldr	r3, [pc, #484]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80051de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051e0:	4a7a      	ldr	r2, [pc, #488]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80051e2:	4013      	ands	r3, r2
 80051e4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80051e6:	4b77      	ldr	r3, [pc, #476]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80051e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80051ea:	4b76      	ldr	r3, [pc, #472]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80051ec:	2180      	movs	r1, #128	; 0x80
 80051ee:	0309      	lsls	r1, r1, #12
 80051f0:	430a      	orrs	r2, r1
 80051f2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051f4:	4b73      	ldr	r3, [pc, #460]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80051f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80051f8:	4b72      	ldr	r3, [pc, #456]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80051fa:	4975      	ldr	r1, [pc, #468]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80051fc:	400a      	ands	r2, r1
 80051fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005200:	4b70      	ldr	r3, [pc, #448]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	2380      	movs	r3, #128	; 0x80
 800520a:	005b      	lsls	r3, r3, #1
 800520c:	4013      	ands	r3, r2
 800520e:	d014      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005210:	f7fd f9c0 	bl	8002594 <HAL_GetTick>
 8005214:	0003      	movs	r3, r0
 8005216:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005218:	e009      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800521a:	f7fd f9bb 	bl	8002594 <HAL_GetTick>
 800521e:	0002      	movs	r2, r0
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	4a6b      	ldr	r2, [pc, #428]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d901      	bls.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e0c6      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800522e:	4b65      	ldr	r3, [pc, #404]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005230:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005232:	2380      	movs	r3, #128	; 0x80
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4013      	ands	r3, r2
 8005238:	d0ef      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	2380      	movs	r3, #128	; 0x80
 8005240:	011b      	lsls	r3, r3, #4
 8005242:	4013      	ands	r3, r2
 8005244:	d01f      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	689a      	ldr	r2, [r3, #8]
 800524a:	23c0      	movs	r3, #192	; 0xc0
 800524c:	029b      	lsls	r3, r3, #10
 800524e:	401a      	ands	r2, r3
 8005250:	23c0      	movs	r3, #192	; 0xc0
 8005252:	029b      	lsls	r3, r3, #10
 8005254:	429a      	cmp	r2, r3
 8005256:	d10c      	bne.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8005258:	4b5a      	ldr	r3, [pc, #360]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a5e      	ldr	r2, [pc, #376]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800525e:	4013      	ands	r3, r2
 8005260:	0019      	movs	r1, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	689a      	ldr	r2, [r3, #8]
 8005266:	23c0      	movs	r3, #192	; 0xc0
 8005268:	039b      	lsls	r3, r3, #14
 800526a:	401a      	ands	r2, r3
 800526c:	4b55      	ldr	r3, [pc, #340]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800526e:	430a      	orrs	r2, r1
 8005270:	601a      	str	r2, [r3, #0]
 8005272:	4b54      	ldr	r3, [pc, #336]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005274:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	689a      	ldr	r2, [r3, #8]
 800527a:	23c0      	movs	r3, #192	; 0xc0
 800527c:	029b      	lsls	r3, r3, #10
 800527e:	401a      	ands	r2, r3
 8005280:	4b50      	ldr	r3, [pc, #320]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005282:	430a      	orrs	r2, r1
 8005284:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2220      	movs	r2, #32
 800528c:	4013      	ands	r3, r2
 800528e:	d01f      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	23c0      	movs	r3, #192	; 0xc0
 8005296:	029b      	lsls	r3, r3, #10
 8005298:	401a      	ands	r2, r3
 800529a:	23c0      	movs	r3, #192	; 0xc0
 800529c:	029b      	lsls	r3, r3, #10
 800529e:	429a      	cmp	r2, r3
 80052a0:	d10c      	bne.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x208>
 80052a2:	4b48      	ldr	r3, [pc, #288]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a4c      	ldr	r2, [pc, #304]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80052a8:	4013      	ands	r3, r2
 80052aa:	0019      	movs	r1, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685a      	ldr	r2, [r3, #4]
 80052b0:	23c0      	movs	r3, #192	; 0xc0
 80052b2:	039b      	lsls	r3, r3, #14
 80052b4:	401a      	ands	r2, r3
 80052b6:	4b43      	ldr	r3, [pc, #268]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80052b8:	430a      	orrs	r2, r1
 80052ba:	601a      	str	r2, [r3, #0]
 80052bc:	4b41      	ldr	r3, [pc, #260]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80052be:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	23c0      	movs	r3, #192	; 0xc0
 80052c6:	029b      	lsls	r3, r3, #10
 80052c8:	401a      	ands	r2, r3
 80052ca:	4b3e      	ldr	r3, [pc, #248]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80052cc:	430a      	orrs	r2, r1
 80052ce:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80052d0:	2317      	movs	r3, #23
 80052d2:	18fb      	adds	r3, r7, r3
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d105      	bne.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052da:	4b3a      	ldr	r3, [pc, #232]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80052dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052de:	4b39      	ldr	r3, [pc, #228]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80052e0:	493e      	ldr	r1, [pc, #248]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80052e2:	400a      	ands	r2, r1
 80052e4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2201      	movs	r2, #1
 80052ec:	4013      	ands	r3, r2
 80052ee:	d009      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052f0:	4b34      	ldr	r3, [pc, #208]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80052f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052f4:	2203      	movs	r2, #3
 80052f6:	4393      	bics	r3, r2
 80052f8:	0019      	movs	r1, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	68da      	ldr	r2, [r3, #12]
 80052fe:	4b31      	ldr	r3, [pc, #196]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005300:	430a      	orrs	r2, r1
 8005302:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2202      	movs	r2, #2
 800530a:	4013      	ands	r3, r2
 800530c:	d009      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800530e:	4b2d      	ldr	r3, [pc, #180]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005312:	220c      	movs	r2, #12
 8005314:	4393      	bics	r3, r2
 8005316:	0019      	movs	r1, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	691a      	ldr	r2, [r3, #16]
 800531c:	4b29      	ldr	r3, [pc, #164]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800531e:	430a      	orrs	r2, r1
 8005320:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2204      	movs	r2, #4
 8005328:	4013      	ands	r3, r2
 800532a:	d009      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800532c:	4b25      	ldr	r3, [pc, #148]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800532e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005330:	4a2b      	ldr	r2, [pc, #172]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8005332:	4013      	ands	r3, r2
 8005334:	0019      	movs	r1, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	695a      	ldr	r2, [r3, #20]
 800533a:	4b22      	ldr	r3, [pc, #136]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800533c:	430a      	orrs	r2, r1
 800533e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2208      	movs	r2, #8
 8005346:	4013      	ands	r3, r2
 8005348:	d009      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800534a:	4b1e      	ldr	r3, [pc, #120]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800534c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800534e:	4a25      	ldr	r2, [pc, #148]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005350:	4013      	ands	r3, r2
 8005352:	0019      	movs	r1, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	699a      	ldr	r2, [r3, #24]
 8005358:	4b1a      	ldr	r3, [pc, #104]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800535a:	430a      	orrs	r2, r1
 800535c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	2380      	movs	r3, #128	; 0x80
 8005364:	005b      	lsls	r3, r3, #1
 8005366:	4013      	ands	r3, r2
 8005368:	d009      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800536a:	4b16      	ldr	r3, [pc, #88]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800536c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800536e:	4a17      	ldr	r2, [pc, #92]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8005370:	4013      	ands	r3, r2
 8005372:	0019      	movs	r1, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	69da      	ldr	r2, [r3, #28]
 8005378:	4b12      	ldr	r3, [pc, #72]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800537a:	430a      	orrs	r2, r1
 800537c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2240      	movs	r2, #64	; 0x40
 8005384:	4013      	ands	r3, r2
 8005386:	d009      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005388:	4b0e      	ldr	r3, [pc, #56]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800538a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800538c:	4a16      	ldr	r2, [pc, #88]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800538e:	4013      	ands	r3, r2
 8005390:	0019      	movs	r1, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005396:	4b0b      	ldr	r3, [pc, #44]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005398:	430a      	orrs	r2, r1
 800539a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2280      	movs	r2, #128	; 0x80
 80053a2:	4013      	ands	r3, r2
 80053a4:	d009      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80053a6:	4b07      	ldr	r3, [pc, #28]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80053a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053aa:	4a10      	ldr	r2, [pc, #64]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053ac:	4013      	ands	r3, r2
 80053ae:	0019      	movs	r1, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a1a      	ldr	r2, [r3, #32]
 80053b4:	4b03      	ldr	r3, [pc, #12]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80053b6:	430a      	orrs	r2, r1
 80053b8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	0018      	movs	r0, r3
 80053be:	46bd      	mov	sp, r7
 80053c0:	b006      	add	sp, #24
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	40021000 	.word	0x40021000
 80053c8:	40007000 	.word	0x40007000
 80053cc:	fffcffff 	.word	0xfffcffff
 80053d0:	fff7ffff 	.word	0xfff7ffff
 80053d4:	00001388 	.word	0x00001388
 80053d8:	ffcfffff 	.word	0xffcfffff
 80053dc:	efffffff 	.word	0xefffffff
 80053e0:	fffff3ff 	.word	0xfffff3ff
 80053e4:	ffffcfff 	.word	0xffffcfff
 80053e8:	fbffffff 	.word	0xfbffffff
 80053ec:	fff3ffff 	.word	0xfff3ffff

080053f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d101      	bne.n	8005402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e044      	b.n	800548c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005406:	2b00      	cmp	r3, #0
 8005408:	d107      	bne.n	800541a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2278      	movs	r2, #120	; 0x78
 800540e:	2100      	movs	r1, #0
 8005410:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	0018      	movs	r0, r3
 8005416:	f7fc ff7d 	bl	8002314 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2224      	movs	r2, #36	; 0x24
 800541e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2101      	movs	r1, #1
 800542c:	438a      	bics	r2, r1
 800542e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	0018      	movs	r0, r3
 8005434:	f000 f8d0 	bl	80055d8 <UART_SetConfig>
 8005438:	0003      	movs	r3, r0
 800543a:	2b01      	cmp	r3, #1
 800543c:	d101      	bne.n	8005442 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e024      	b.n	800548c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	0018      	movs	r0, r3
 800544e:	f000 fb61 	bl	8005b14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	490d      	ldr	r1, [pc, #52]	; (8005494 <HAL_UART_Init+0xa4>)
 800545e:	400a      	ands	r2, r1
 8005460:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	689a      	ldr	r2, [r3, #8]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	212a      	movs	r1, #42	; 0x2a
 800546e:	438a      	bics	r2, r1
 8005470:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2101      	movs	r1, #1
 800547e:	430a      	orrs	r2, r1
 8005480:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	0018      	movs	r0, r3
 8005486:	f000 fbf9 	bl	8005c7c <UART_CheckIdleState>
 800548a:	0003      	movs	r3, r0
}
 800548c:	0018      	movs	r0, r3
 800548e:	46bd      	mov	sp, r7
 8005490:	b002      	add	sp, #8
 8005492:	bd80      	pop	{r7, pc}
 8005494:	ffffb7ff 	.word	0xffffb7ff

08005498 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b08a      	sub	sp, #40	; 0x28
 800549c:	af02      	add	r7, sp, #8
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	603b      	str	r3, [r7, #0]
 80054a4:	1dbb      	adds	r3, r7, #6
 80054a6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054ac:	2b20      	cmp	r3, #32
 80054ae:	d000      	beq.n	80054b2 <HAL_UART_Transmit+0x1a>
 80054b0:	e08c      	b.n	80055cc <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d003      	beq.n	80054c0 <HAL_UART_Transmit+0x28>
 80054b8:	1dbb      	adds	r3, r7, #6
 80054ba:	881b      	ldrh	r3, [r3, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e084      	b.n	80055ce <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	689a      	ldr	r2, [r3, #8]
 80054c8:	2380      	movs	r3, #128	; 0x80
 80054ca:	015b      	lsls	r3, r3, #5
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d109      	bne.n	80054e4 <HAL_UART_Transmit+0x4c>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d105      	bne.n	80054e4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2201      	movs	r2, #1
 80054dc:	4013      	ands	r3, r2
 80054de:	d001      	beq.n	80054e4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e074      	b.n	80055ce <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2284      	movs	r2, #132	; 0x84
 80054e8:	2100      	movs	r1, #0
 80054ea:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2221      	movs	r2, #33	; 0x21
 80054f0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054f2:	f7fd f84f 	bl	8002594 <HAL_GetTick>
 80054f6:	0003      	movs	r3, r0
 80054f8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	1dba      	adds	r2, r7, #6
 80054fe:	2150      	movs	r1, #80	; 0x50
 8005500:	8812      	ldrh	r2, [r2, #0]
 8005502:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	1dba      	adds	r2, r7, #6
 8005508:	2152      	movs	r1, #82	; 0x52
 800550a:	8812      	ldrh	r2, [r2, #0]
 800550c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	689a      	ldr	r2, [r3, #8]
 8005512:	2380      	movs	r3, #128	; 0x80
 8005514:	015b      	lsls	r3, r3, #5
 8005516:	429a      	cmp	r2, r3
 8005518:	d108      	bne.n	800552c <HAL_UART_Transmit+0x94>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d104      	bne.n	800552c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8005522:	2300      	movs	r3, #0
 8005524:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	61bb      	str	r3, [r7, #24]
 800552a:	e003      	b.n	8005534 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005530:	2300      	movs	r3, #0
 8005532:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005534:	e02f      	b.n	8005596 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	0013      	movs	r3, r2
 8005540:	2200      	movs	r2, #0
 8005542:	2180      	movs	r1, #128	; 0x80
 8005544:	f000 fc42 	bl	8005dcc <UART_WaitOnFlagUntilTimeout>
 8005548:	1e03      	subs	r3, r0, #0
 800554a:	d004      	beq.n	8005556 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2220      	movs	r2, #32
 8005550:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e03b      	b.n	80055ce <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10b      	bne.n	8005574 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	881b      	ldrh	r3, [r3, #0]
 8005560:	001a      	movs	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	05d2      	lsls	r2, r2, #23
 8005568:	0dd2      	lsrs	r2, r2, #23
 800556a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	3302      	adds	r3, #2
 8005570:	61bb      	str	r3, [r7, #24]
 8005572:	e007      	b.n	8005584 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	781a      	ldrb	r2, [r3, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	3301      	adds	r3, #1
 8005582:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2252      	movs	r2, #82	; 0x52
 8005588:	5a9b      	ldrh	r3, [r3, r2]
 800558a:	b29b      	uxth	r3, r3
 800558c:	3b01      	subs	r3, #1
 800558e:	b299      	uxth	r1, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2252      	movs	r2, #82	; 0x52
 8005594:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2252      	movs	r2, #82	; 0x52
 800559a:	5a9b      	ldrh	r3, [r3, r2]
 800559c:	b29b      	uxth	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1c9      	bne.n	8005536 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	9300      	str	r3, [sp, #0]
 80055aa:	0013      	movs	r3, r2
 80055ac:	2200      	movs	r2, #0
 80055ae:	2140      	movs	r1, #64	; 0x40
 80055b0:	f000 fc0c 	bl	8005dcc <UART_WaitOnFlagUntilTimeout>
 80055b4:	1e03      	subs	r3, r0, #0
 80055b6:	d004      	beq.n	80055c2 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2220      	movs	r2, #32
 80055bc:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e005      	b.n	80055ce <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2220      	movs	r2, #32
 80055c6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80055c8:	2300      	movs	r3, #0
 80055ca:	e000      	b.n	80055ce <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80055cc:	2302      	movs	r3, #2
  }
}
 80055ce:	0018      	movs	r0, r3
 80055d0:	46bd      	mov	sp, r7
 80055d2:	b008      	add	sp, #32
 80055d4:	bd80      	pop	{r7, pc}
	...

080055d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055d8:	b5b0      	push	{r4, r5, r7, lr}
 80055da:	b08e      	sub	sp, #56	; 0x38
 80055dc:	af00      	add	r7, sp, #0
 80055de:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055e0:	231a      	movs	r3, #26
 80055e2:	2218      	movs	r2, #24
 80055e4:	189b      	adds	r3, r3, r2
 80055e6:	19db      	adds	r3, r3, r7
 80055e8:	2200      	movs	r2, #0
 80055ea:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	689a      	ldr	r2, [r3, #8]
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	431a      	orrs	r2, r3
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	431a      	orrs	r2, r3
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	69db      	ldr	r3, [r3, #28]
 8005600:	4313      	orrs	r3, r2
 8005602:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4ac3      	ldr	r2, [pc, #780]	; (8005918 <UART_SetConfig+0x340>)
 800560c:	4013      	ands	r3, r2
 800560e:	0019      	movs	r1, r3
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005616:	430a      	orrs	r2, r1
 8005618:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	4abe      	ldr	r2, [pc, #760]	; (800591c <UART_SetConfig+0x344>)
 8005622:	4013      	ands	r3, r2
 8005624:	0019      	movs	r1, r3
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	68da      	ldr	r2, [r3, #12]
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	430a      	orrs	r2, r1
 8005630:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4ab8      	ldr	r2, [pc, #736]	; (8005920 <UART_SetConfig+0x348>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d004      	beq.n	800564c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005648:	4313      	orrs	r3, r2
 800564a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	4ab4      	ldr	r2, [pc, #720]	; (8005924 <UART_SetConfig+0x34c>)
 8005654:	4013      	ands	r3, r2
 8005656:	0019      	movs	r1, r3
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800565e:	430a      	orrs	r2, r1
 8005660:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4ab0      	ldr	r2, [pc, #704]	; (8005928 <UART_SetConfig+0x350>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d131      	bne.n	80056d0 <UART_SetConfig+0xf8>
 800566c:	4baf      	ldr	r3, [pc, #700]	; (800592c <UART_SetConfig+0x354>)
 800566e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005670:	2203      	movs	r2, #3
 8005672:	4013      	ands	r3, r2
 8005674:	2b03      	cmp	r3, #3
 8005676:	d01d      	beq.n	80056b4 <UART_SetConfig+0xdc>
 8005678:	d823      	bhi.n	80056c2 <UART_SetConfig+0xea>
 800567a:	2b02      	cmp	r3, #2
 800567c:	d00c      	beq.n	8005698 <UART_SetConfig+0xc0>
 800567e:	d820      	bhi.n	80056c2 <UART_SetConfig+0xea>
 8005680:	2b00      	cmp	r3, #0
 8005682:	d002      	beq.n	800568a <UART_SetConfig+0xb2>
 8005684:	2b01      	cmp	r3, #1
 8005686:	d00e      	beq.n	80056a6 <UART_SetConfig+0xce>
 8005688:	e01b      	b.n	80056c2 <UART_SetConfig+0xea>
 800568a:	231b      	movs	r3, #27
 800568c:	2218      	movs	r2, #24
 800568e:	189b      	adds	r3, r3, r2
 8005690:	19db      	adds	r3, r3, r7
 8005692:	2201      	movs	r2, #1
 8005694:	701a      	strb	r2, [r3, #0]
 8005696:	e0b4      	b.n	8005802 <UART_SetConfig+0x22a>
 8005698:	231b      	movs	r3, #27
 800569a:	2218      	movs	r2, #24
 800569c:	189b      	adds	r3, r3, r2
 800569e:	19db      	adds	r3, r3, r7
 80056a0:	2202      	movs	r2, #2
 80056a2:	701a      	strb	r2, [r3, #0]
 80056a4:	e0ad      	b.n	8005802 <UART_SetConfig+0x22a>
 80056a6:	231b      	movs	r3, #27
 80056a8:	2218      	movs	r2, #24
 80056aa:	189b      	adds	r3, r3, r2
 80056ac:	19db      	adds	r3, r3, r7
 80056ae:	2204      	movs	r2, #4
 80056b0:	701a      	strb	r2, [r3, #0]
 80056b2:	e0a6      	b.n	8005802 <UART_SetConfig+0x22a>
 80056b4:	231b      	movs	r3, #27
 80056b6:	2218      	movs	r2, #24
 80056b8:	189b      	adds	r3, r3, r2
 80056ba:	19db      	adds	r3, r3, r7
 80056bc:	2208      	movs	r2, #8
 80056be:	701a      	strb	r2, [r3, #0]
 80056c0:	e09f      	b.n	8005802 <UART_SetConfig+0x22a>
 80056c2:	231b      	movs	r3, #27
 80056c4:	2218      	movs	r2, #24
 80056c6:	189b      	adds	r3, r3, r2
 80056c8:	19db      	adds	r3, r3, r7
 80056ca:	2210      	movs	r2, #16
 80056cc:	701a      	strb	r2, [r3, #0]
 80056ce:	e098      	b.n	8005802 <UART_SetConfig+0x22a>
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a96      	ldr	r2, [pc, #600]	; (8005930 <UART_SetConfig+0x358>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d131      	bne.n	800573e <UART_SetConfig+0x166>
 80056da:	4b94      	ldr	r3, [pc, #592]	; (800592c <UART_SetConfig+0x354>)
 80056dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056de:	220c      	movs	r2, #12
 80056e0:	4013      	ands	r3, r2
 80056e2:	2b0c      	cmp	r3, #12
 80056e4:	d01d      	beq.n	8005722 <UART_SetConfig+0x14a>
 80056e6:	d823      	bhi.n	8005730 <UART_SetConfig+0x158>
 80056e8:	2b08      	cmp	r3, #8
 80056ea:	d00c      	beq.n	8005706 <UART_SetConfig+0x12e>
 80056ec:	d820      	bhi.n	8005730 <UART_SetConfig+0x158>
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d002      	beq.n	80056f8 <UART_SetConfig+0x120>
 80056f2:	2b04      	cmp	r3, #4
 80056f4:	d00e      	beq.n	8005714 <UART_SetConfig+0x13c>
 80056f6:	e01b      	b.n	8005730 <UART_SetConfig+0x158>
 80056f8:	231b      	movs	r3, #27
 80056fa:	2218      	movs	r2, #24
 80056fc:	189b      	adds	r3, r3, r2
 80056fe:	19db      	adds	r3, r3, r7
 8005700:	2200      	movs	r2, #0
 8005702:	701a      	strb	r2, [r3, #0]
 8005704:	e07d      	b.n	8005802 <UART_SetConfig+0x22a>
 8005706:	231b      	movs	r3, #27
 8005708:	2218      	movs	r2, #24
 800570a:	189b      	adds	r3, r3, r2
 800570c:	19db      	adds	r3, r3, r7
 800570e:	2202      	movs	r2, #2
 8005710:	701a      	strb	r2, [r3, #0]
 8005712:	e076      	b.n	8005802 <UART_SetConfig+0x22a>
 8005714:	231b      	movs	r3, #27
 8005716:	2218      	movs	r2, #24
 8005718:	189b      	adds	r3, r3, r2
 800571a:	19db      	adds	r3, r3, r7
 800571c:	2204      	movs	r2, #4
 800571e:	701a      	strb	r2, [r3, #0]
 8005720:	e06f      	b.n	8005802 <UART_SetConfig+0x22a>
 8005722:	231b      	movs	r3, #27
 8005724:	2218      	movs	r2, #24
 8005726:	189b      	adds	r3, r3, r2
 8005728:	19db      	adds	r3, r3, r7
 800572a:	2208      	movs	r2, #8
 800572c:	701a      	strb	r2, [r3, #0]
 800572e:	e068      	b.n	8005802 <UART_SetConfig+0x22a>
 8005730:	231b      	movs	r3, #27
 8005732:	2218      	movs	r2, #24
 8005734:	189b      	adds	r3, r3, r2
 8005736:	19db      	adds	r3, r3, r7
 8005738:	2210      	movs	r2, #16
 800573a:	701a      	strb	r2, [r3, #0]
 800573c:	e061      	b.n	8005802 <UART_SetConfig+0x22a>
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a7c      	ldr	r2, [pc, #496]	; (8005934 <UART_SetConfig+0x35c>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d106      	bne.n	8005756 <UART_SetConfig+0x17e>
 8005748:	231b      	movs	r3, #27
 800574a:	2218      	movs	r2, #24
 800574c:	189b      	adds	r3, r3, r2
 800574e:	19db      	adds	r3, r3, r7
 8005750:	2200      	movs	r2, #0
 8005752:	701a      	strb	r2, [r3, #0]
 8005754:	e055      	b.n	8005802 <UART_SetConfig+0x22a>
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a77      	ldr	r2, [pc, #476]	; (8005938 <UART_SetConfig+0x360>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d106      	bne.n	800576e <UART_SetConfig+0x196>
 8005760:	231b      	movs	r3, #27
 8005762:	2218      	movs	r2, #24
 8005764:	189b      	adds	r3, r3, r2
 8005766:	19db      	adds	r3, r3, r7
 8005768:	2200      	movs	r2, #0
 800576a:	701a      	strb	r2, [r3, #0]
 800576c:	e049      	b.n	8005802 <UART_SetConfig+0x22a>
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a6b      	ldr	r2, [pc, #428]	; (8005920 <UART_SetConfig+0x348>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d13e      	bne.n	80057f6 <UART_SetConfig+0x21e>
 8005778:	4b6c      	ldr	r3, [pc, #432]	; (800592c <UART_SetConfig+0x354>)
 800577a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800577c:	23c0      	movs	r3, #192	; 0xc0
 800577e:	011b      	lsls	r3, r3, #4
 8005780:	4013      	ands	r3, r2
 8005782:	22c0      	movs	r2, #192	; 0xc0
 8005784:	0112      	lsls	r2, r2, #4
 8005786:	4293      	cmp	r3, r2
 8005788:	d027      	beq.n	80057da <UART_SetConfig+0x202>
 800578a:	22c0      	movs	r2, #192	; 0xc0
 800578c:	0112      	lsls	r2, r2, #4
 800578e:	4293      	cmp	r3, r2
 8005790:	d82a      	bhi.n	80057e8 <UART_SetConfig+0x210>
 8005792:	2280      	movs	r2, #128	; 0x80
 8005794:	0112      	lsls	r2, r2, #4
 8005796:	4293      	cmp	r3, r2
 8005798:	d011      	beq.n	80057be <UART_SetConfig+0x1e6>
 800579a:	2280      	movs	r2, #128	; 0x80
 800579c:	0112      	lsls	r2, r2, #4
 800579e:	4293      	cmp	r3, r2
 80057a0:	d822      	bhi.n	80057e8 <UART_SetConfig+0x210>
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d004      	beq.n	80057b0 <UART_SetConfig+0x1d8>
 80057a6:	2280      	movs	r2, #128	; 0x80
 80057a8:	00d2      	lsls	r2, r2, #3
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d00e      	beq.n	80057cc <UART_SetConfig+0x1f4>
 80057ae:	e01b      	b.n	80057e8 <UART_SetConfig+0x210>
 80057b0:	231b      	movs	r3, #27
 80057b2:	2218      	movs	r2, #24
 80057b4:	189b      	adds	r3, r3, r2
 80057b6:	19db      	adds	r3, r3, r7
 80057b8:	2200      	movs	r2, #0
 80057ba:	701a      	strb	r2, [r3, #0]
 80057bc:	e021      	b.n	8005802 <UART_SetConfig+0x22a>
 80057be:	231b      	movs	r3, #27
 80057c0:	2218      	movs	r2, #24
 80057c2:	189b      	adds	r3, r3, r2
 80057c4:	19db      	adds	r3, r3, r7
 80057c6:	2202      	movs	r2, #2
 80057c8:	701a      	strb	r2, [r3, #0]
 80057ca:	e01a      	b.n	8005802 <UART_SetConfig+0x22a>
 80057cc:	231b      	movs	r3, #27
 80057ce:	2218      	movs	r2, #24
 80057d0:	189b      	adds	r3, r3, r2
 80057d2:	19db      	adds	r3, r3, r7
 80057d4:	2204      	movs	r2, #4
 80057d6:	701a      	strb	r2, [r3, #0]
 80057d8:	e013      	b.n	8005802 <UART_SetConfig+0x22a>
 80057da:	231b      	movs	r3, #27
 80057dc:	2218      	movs	r2, #24
 80057de:	189b      	adds	r3, r3, r2
 80057e0:	19db      	adds	r3, r3, r7
 80057e2:	2208      	movs	r2, #8
 80057e4:	701a      	strb	r2, [r3, #0]
 80057e6:	e00c      	b.n	8005802 <UART_SetConfig+0x22a>
 80057e8:	231b      	movs	r3, #27
 80057ea:	2218      	movs	r2, #24
 80057ec:	189b      	adds	r3, r3, r2
 80057ee:	19db      	adds	r3, r3, r7
 80057f0:	2210      	movs	r2, #16
 80057f2:	701a      	strb	r2, [r3, #0]
 80057f4:	e005      	b.n	8005802 <UART_SetConfig+0x22a>
 80057f6:	231b      	movs	r3, #27
 80057f8:	2218      	movs	r2, #24
 80057fa:	189b      	adds	r3, r3, r2
 80057fc:	19db      	adds	r3, r3, r7
 80057fe:	2210      	movs	r2, #16
 8005800:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a46      	ldr	r2, [pc, #280]	; (8005920 <UART_SetConfig+0x348>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d000      	beq.n	800580e <UART_SetConfig+0x236>
 800580c:	e09a      	b.n	8005944 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800580e:	231b      	movs	r3, #27
 8005810:	2218      	movs	r2, #24
 8005812:	189b      	adds	r3, r3, r2
 8005814:	19db      	adds	r3, r3, r7
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	2b08      	cmp	r3, #8
 800581a:	d01d      	beq.n	8005858 <UART_SetConfig+0x280>
 800581c:	dc20      	bgt.n	8005860 <UART_SetConfig+0x288>
 800581e:	2b04      	cmp	r3, #4
 8005820:	d015      	beq.n	800584e <UART_SetConfig+0x276>
 8005822:	dc1d      	bgt.n	8005860 <UART_SetConfig+0x288>
 8005824:	2b00      	cmp	r3, #0
 8005826:	d002      	beq.n	800582e <UART_SetConfig+0x256>
 8005828:	2b02      	cmp	r3, #2
 800582a:	d005      	beq.n	8005838 <UART_SetConfig+0x260>
 800582c:	e018      	b.n	8005860 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800582e:	f7ff fc15 	bl	800505c <HAL_RCC_GetPCLK1Freq>
 8005832:	0003      	movs	r3, r0
 8005834:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005836:	e01c      	b.n	8005872 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005838:	4b3c      	ldr	r3, [pc, #240]	; (800592c <UART_SetConfig+0x354>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2210      	movs	r2, #16
 800583e:	4013      	ands	r3, r2
 8005840:	d002      	beq.n	8005848 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005842:	4b3e      	ldr	r3, [pc, #248]	; (800593c <UART_SetConfig+0x364>)
 8005844:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005846:	e014      	b.n	8005872 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8005848:	4b3d      	ldr	r3, [pc, #244]	; (8005940 <UART_SetConfig+0x368>)
 800584a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800584c:	e011      	b.n	8005872 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800584e:	f7ff fb55 	bl	8004efc <HAL_RCC_GetSysClockFreq>
 8005852:	0003      	movs	r3, r0
 8005854:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005856:	e00c      	b.n	8005872 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005858:	2380      	movs	r3, #128	; 0x80
 800585a:	021b      	lsls	r3, r3, #8
 800585c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800585e:	e008      	b.n	8005872 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8005860:	2300      	movs	r3, #0
 8005862:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005864:	231a      	movs	r3, #26
 8005866:	2218      	movs	r2, #24
 8005868:	189b      	adds	r3, r3, r2
 800586a:	19db      	adds	r3, r3, r7
 800586c:	2201      	movs	r2, #1
 800586e:	701a      	strb	r2, [r3, #0]
        break;
 8005870:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005874:	2b00      	cmp	r3, #0
 8005876:	d100      	bne.n	800587a <UART_SetConfig+0x2a2>
 8005878:	e133      	b.n	8005ae2 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	0013      	movs	r3, r2
 8005880:	005b      	lsls	r3, r3, #1
 8005882:	189b      	adds	r3, r3, r2
 8005884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005886:	429a      	cmp	r2, r3
 8005888:	d305      	bcc.n	8005896 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005892:	429a      	cmp	r2, r3
 8005894:	d906      	bls.n	80058a4 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8005896:	231a      	movs	r3, #26
 8005898:	2218      	movs	r2, #24
 800589a:	189b      	adds	r3, r3, r2
 800589c:	19db      	adds	r3, r3, r7
 800589e:	2201      	movs	r2, #1
 80058a0:	701a      	strb	r2, [r3, #0]
 80058a2:	e11e      	b.n	8005ae2 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80058a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a6:	613b      	str	r3, [r7, #16]
 80058a8:	2300      	movs	r3, #0
 80058aa:	617b      	str	r3, [r7, #20]
 80058ac:	6939      	ldr	r1, [r7, #16]
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	000b      	movs	r3, r1
 80058b2:	0e1b      	lsrs	r3, r3, #24
 80058b4:	0010      	movs	r0, r2
 80058b6:	0205      	lsls	r5, r0, #8
 80058b8:	431d      	orrs	r5, r3
 80058ba:	000b      	movs	r3, r1
 80058bc:	021c      	lsls	r4, r3, #8
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	085b      	lsrs	r3, r3, #1
 80058c4:	60bb      	str	r3, [r7, #8]
 80058c6:	2300      	movs	r3, #0
 80058c8:	60fb      	str	r3, [r7, #12]
 80058ca:	68b8      	ldr	r0, [r7, #8]
 80058cc:	68f9      	ldr	r1, [r7, #12]
 80058ce:	1900      	adds	r0, r0, r4
 80058d0:	4169      	adcs	r1, r5
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	603b      	str	r3, [r7, #0]
 80058d8:	2300      	movs	r3, #0
 80058da:	607b      	str	r3, [r7, #4]
 80058dc:	683a      	ldr	r2, [r7, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f7fa fca8 	bl	8000234 <__aeabi_uldivmod>
 80058e4:	0002      	movs	r2, r0
 80058e6:	000b      	movs	r3, r1
 80058e8:	0013      	movs	r3, r2
 80058ea:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058ee:	23c0      	movs	r3, #192	; 0xc0
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d309      	bcc.n	800590a <UART_SetConfig+0x332>
 80058f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058f8:	2380      	movs	r3, #128	; 0x80
 80058fa:	035b      	lsls	r3, r3, #13
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d204      	bcs.n	800590a <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005906:	60da      	str	r2, [r3, #12]
 8005908:	e0eb      	b.n	8005ae2 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 800590a:	231a      	movs	r3, #26
 800590c:	2218      	movs	r2, #24
 800590e:	189b      	adds	r3, r3, r2
 8005910:	19db      	adds	r3, r3, r7
 8005912:	2201      	movs	r2, #1
 8005914:	701a      	strb	r2, [r3, #0]
 8005916:	e0e4      	b.n	8005ae2 <UART_SetConfig+0x50a>
 8005918:	efff69f3 	.word	0xefff69f3
 800591c:	ffffcfff 	.word	0xffffcfff
 8005920:	40004800 	.word	0x40004800
 8005924:	fffff4ff 	.word	0xfffff4ff
 8005928:	40013800 	.word	0x40013800
 800592c:	40021000 	.word	0x40021000
 8005930:	40004400 	.word	0x40004400
 8005934:	40004c00 	.word	0x40004c00
 8005938:	40005000 	.word	0x40005000
 800593c:	003d0900 	.word	0x003d0900
 8005940:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	69da      	ldr	r2, [r3, #28]
 8005948:	2380      	movs	r3, #128	; 0x80
 800594a:	021b      	lsls	r3, r3, #8
 800594c:	429a      	cmp	r2, r3
 800594e:	d000      	beq.n	8005952 <UART_SetConfig+0x37a>
 8005950:	e070      	b.n	8005a34 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8005952:	231b      	movs	r3, #27
 8005954:	2218      	movs	r2, #24
 8005956:	189b      	adds	r3, r3, r2
 8005958:	19db      	adds	r3, r3, r7
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	2b08      	cmp	r3, #8
 800595e:	d822      	bhi.n	80059a6 <UART_SetConfig+0x3ce>
 8005960:	009a      	lsls	r2, r3, #2
 8005962:	4b67      	ldr	r3, [pc, #412]	; (8005b00 <UART_SetConfig+0x528>)
 8005964:	18d3      	adds	r3, r2, r3
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800596a:	f7ff fb77 	bl	800505c <HAL_RCC_GetPCLK1Freq>
 800596e:	0003      	movs	r3, r0
 8005970:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005972:	e021      	b.n	80059b8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005974:	f7ff fb88 	bl	8005088 <HAL_RCC_GetPCLK2Freq>
 8005978:	0003      	movs	r3, r0
 800597a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800597c:	e01c      	b.n	80059b8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800597e:	4b61      	ldr	r3, [pc, #388]	; (8005b04 <UART_SetConfig+0x52c>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2210      	movs	r2, #16
 8005984:	4013      	ands	r3, r2
 8005986:	d002      	beq.n	800598e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005988:	4b5f      	ldr	r3, [pc, #380]	; (8005b08 <UART_SetConfig+0x530>)
 800598a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800598c:	e014      	b.n	80059b8 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800598e:	4b5f      	ldr	r3, [pc, #380]	; (8005b0c <UART_SetConfig+0x534>)
 8005990:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005992:	e011      	b.n	80059b8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005994:	f7ff fab2 	bl	8004efc <HAL_RCC_GetSysClockFreq>
 8005998:	0003      	movs	r3, r0
 800599a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800599c:	e00c      	b.n	80059b8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800599e:	2380      	movs	r3, #128	; 0x80
 80059a0:	021b      	lsls	r3, r3, #8
 80059a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059a4:	e008      	b.n	80059b8 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80059a6:	2300      	movs	r3, #0
 80059a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80059aa:	231a      	movs	r3, #26
 80059ac:	2218      	movs	r2, #24
 80059ae:	189b      	adds	r3, r3, r2
 80059b0:	19db      	adds	r3, r3, r7
 80059b2:	2201      	movs	r2, #1
 80059b4:	701a      	strb	r2, [r3, #0]
        break;
 80059b6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d100      	bne.n	80059c0 <UART_SetConfig+0x3e8>
 80059be:	e090      	b.n	8005ae2 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80059c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c2:	005a      	lsls	r2, r3, #1
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	085b      	lsrs	r3, r3, #1
 80059ca:	18d2      	adds	r2, r2, r3
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	0019      	movs	r1, r3
 80059d2:	0010      	movs	r0, r2
 80059d4:	f7fa fba2 	bl	800011c <__udivsi3>
 80059d8:	0003      	movs	r3, r0
 80059da:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059de:	2b0f      	cmp	r3, #15
 80059e0:	d921      	bls.n	8005a26 <UART_SetConfig+0x44e>
 80059e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059e4:	2380      	movs	r3, #128	; 0x80
 80059e6:	025b      	lsls	r3, r3, #9
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d21c      	bcs.n	8005a26 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	200e      	movs	r0, #14
 80059f2:	2418      	movs	r4, #24
 80059f4:	1903      	adds	r3, r0, r4
 80059f6:	19db      	adds	r3, r3, r7
 80059f8:	210f      	movs	r1, #15
 80059fa:	438a      	bics	r2, r1
 80059fc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a00:	085b      	lsrs	r3, r3, #1
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	2207      	movs	r2, #7
 8005a06:	4013      	ands	r3, r2
 8005a08:	b299      	uxth	r1, r3
 8005a0a:	1903      	adds	r3, r0, r4
 8005a0c:	19db      	adds	r3, r3, r7
 8005a0e:	1902      	adds	r2, r0, r4
 8005a10:	19d2      	adds	r2, r2, r7
 8005a12:	8812      	ldrh	r2, [r2, #0]
 8005a14:	430a      	orrs	r2, r1
 8005a16:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	1902      	adds	r2, r0, r4
 8005a1e:	19d2      	adds	r2, r2, r7
 8005a20:	8812      	ldrh	r2, [r2, #0]
 8005a22:	60da      	str	r2, [r3, #12]
 8005a24:	e05d      	b.n	8005ae2 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8005a26:	231a      	movs	r3, #26
 8005a28:	2218      	movs	r2, #24
 8005a2a:	189b      	adds	r3, r3, r2
 8005a2c:	19db      	adds	r3, r3, r7
 8005a2e:	2201      	movs	r2, #1
 8005a30:	701a      	strb	r2, [r3, #0]
 8005a32:	e056      	b.n	8005ae2 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a34:	231b      	movs	r3, #27
 8005a36:	2218      	movs	r2, #24
 8005a38:	189b      	adds	r3, r3, r2
 8005a3a:	19db      	adds	r3, r3, r7
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	2b08      	cmp	r3, #8
 8005a40:	d822      	bhi.n	8005a88 <UART_SetConfig+0x4b0>
 8005a42:	009a      	lsls	r2, r3, #2
 8005a44:	4b32      	ldr	r3, [pc, #200]	; (8005b10 <UART_SetConfig+0x538>)
 8005a46:	18d3      	adds	r3, r2, r3
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a4c:	f7ff fb06 	bl	800505c <HAL_RCC_GetPCLK1Freq>
 8005a50:	0003      	movs	r3, r0
 8005a52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a54:	e021      	b.n	8005a9a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a56:	f7ff fb17 	bl	8005088 <HAL_RCC_GetPCLK2Freq>
 8005a5a:	0003      	movs	r3, r0
 8005a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a5e:	e01c      	b.n	8005a9a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a60:	4b28      	ldr	r3, [pc, #160]	; (8005b04 <UART_SetConfig+0x52c>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2210      	movs	r2, #16
 8005a66:	4013      	ands	r3, r2
 8005a68:	d002      	beq.n	8005a70 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005a6a:	4b27      	ldr	r3, [pc, #156]	; (8005b08 <UART_SetConfig+0x530>)
 8005a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a6e:	e014      	b.n	8005a9a <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8005a70:	4b26      	ldr	r3, [pc, #152]	; (8005b0c <UART_SetConfig+0x534>)
 8005a72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a74:	e011      	b.n	8005a9a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a76:	f7ff fa41 	bl	8004efc <HAL_RCC_GetSysClockFreq>
 8005a7a:	0003      	movs	r3, r0
 8005a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a7e:	e00c      	b.n	8005a9a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a80:	2380      	movs	r3, #128	; 0x80
 8005a82:	021b      	lsls	r3, r3, #8
 8005a84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a86:	e008      	b.n	8005a9a <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005a8c:	231a      	movs	r3, #26
 8005a8e:	2218      	movs	r2, #24
 8005a90:	189b      	adds	r3, r3, r2
 8005a92:	19db      	adds	r3, r3, r7
 8005a94:	2201      	movs	r2, #1
 8005a96:	701a      	strb	r2, [r3, #0]
        break;
 8005a98:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d020      	beq.n	8005ae2 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	085a      	lsrs	r2, r3, #1
 8005aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa8:	18d2      	adds	r2, r2, r3
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	0019      	movs	r1, r3
 8005ab0:	0010      	movs	r0, r2
 8005ab2:	f7fa fb33 	bl	800011c <__udivsi3>
 8005ab6:	0003      	movs	r3, r0
 8005ab8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abc:	2b0f      	cmp	r3, #15
 8005abe:	d90a      	bls.n	8005ad6 <UART_SetConfig+0x4fe>
 8005ac0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ac2:	2380      	movs	r3, #128	; 0x80
 8005ac4:	025b      	lsls	r3, r3, #9
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d205      	bcs.n	8005ad6 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	60da      	str	r2, [r3, #12]
 8005ad4:	e005      	b.n	8005ae2 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8005ad6:	231a      	movs	r3, #26
 8005ad8:	2218      	movs	r2, #24
 8005ada:	189b      	adds	r3, r3, r2
 8005adc:	19db      	adds	r3, r3, r7
 8005ade:	2201      	movs	r2, #1
 8005ae0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	2200      	movs	r2, #0
 8005aec:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005aee:	231a      	movs	r3, #26
 8005af0:	2218      	movs	r2, #24
 8005af2:	189b      	adds	r3, r3, r2
 8005af4:	19db      	adds	r3, r3, r7
 8005af6:	781b      	ldrb	r3, [r3, #0]
}
 8005af8:	0018      	movs	r0, r3
 8005afa:	46bd      	mov	sp, r7
 8005afc:	b00e      	add	sp, #56	; 0x38
 8005afe:	bdb0      	pop	{r4, r5, r7, pc}
 8005b00:	08006a8c 	.word	0x08006a8c
 8005b04:	40021000 	.word	0x40021000
 8005b08:	003d0900 	.word	0x003d0900
 8005b0c:	00f42400 	.word	0x00f42400
 8005b10:	08006ab0 	.word	0x08006ab0

08005b14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b20:	2201      	movs	r2, #1
 8005b22:	4013      	ands	r3, r2
 8005b24:	d00b      	beq.n	8005b3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	4a4a      	ldr	r2, [pc, #296]	; (8005c58 <UART_AdvFeatureConfig+0x144>)
 8005b2e:	4013      	ands	r3, r2
 8005b30:	0019      	movs	r1, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b42:	2202      	movs	r2, #2
 8005b44:	4013      	ands	r3, r2
 8005b46:	d00b      	beq.n	8005b60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	4a43      	ldr	r2, [pc, #268]	; (8005c5c <UART_AdvFeatureConfig+0x148>)
 8005b50:	4013      	ands	r3, r2
 8005b52:	0019      	movs	r1, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	430a      	orrs	r2, r1
 8005b5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b64:	2204      	movs	r2, #4
 8005b66:	4013      	ands	r3, r2
 8005b68:	d00b      	beq.n	8005b82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	4a3b      	ldr	r2, [pc, #236]	; (8005c60 <UART_AdvFeatureConfig+0x14c>)
 8005b72:	4013      	ands	r3, r2
 8005b74:	0019      	movs	r1, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b86:	2208      	movs	r2, #8
 8005b88:	4013      	ands	r3, r2
 8005b8a:	d00b      	beq.n	8005ba4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	4a34      	ldr	r2, [pc, #208]	; (8005c64 <UART_AdvFeatureConfig+0x150>)
 8005b94:	4013      	ands	r3, r2
 8005b96:	0019      	movs	r1, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba8:	2210      	movs	r2, #16
 8005baa:	4013      	ands	r3, r2
 8005bac:	d00b      	beq.n	8005bc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	4a2c      	ldr	r2, [pc, #176]	; (8005c68 <UART_AdvFeatureConfig+0x154>)
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	0019      	movs	r1, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bca:	2220      	movs	r2, #32
 8005bcc:	4013      	ands	r3, r2
 8005bce:	d00b      	beq.n	8005be8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	4a25      	ldr	r2, [pc, #148]	; (8005c6c <UART_AdvFeatureConfig+0x158>)
 8005bd8:	4013      	ands	r3, r2
 8005bda:	0019      	movs	r1, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	430a      	orrs	r2, r1
 8005be6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bec:	2240      	movs	r2, #64	; 0x40
 8005bee:	4013      	ands	r3, r2
 8005bf0:	d01d      	beq.n	8005c2e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	4a1d      	ldr	r2, [pc, #116]	; (8005c70 <UART_AdvFeatureConfig+0x15c>)
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	0019      	movs	r1, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c0e:	2380      	movs	r3, #128	; 0x80
 8005c10:	035b      	lsls	r3, r3, #13
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d10b      	bne.n	8005c2e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	4a15      	ldr	r2, [pc, #84]	; (8005c74 <UART_AdvFeatureConfig+0x160>)
 8005c1e:	4013      	ands	r3, r2
 8005c20:	0019      	movs	r1, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c32:	2280      	movs	r2, #128	; 0x80
 8005c34:	4013      	ands	r3, r2
 8005c36:	d00b      	beq.n	8005c50 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	4a0e      	ldr	r2, [pc, #56]	; (8005c78 <UART_AdvFeatureConfig+0x164>)
 8005c40:	4013      	ands	r3, r2
 8005c42:	0019      	movs	r1, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	430a      	orrs	r2, r1
 8005c4e:	605a      	str	r2, [r3, #4]
  }
}
 8005c50:	46c0      	nop			; (mov r8, r8)
 8005c52:	46bd      	mov	sp, r7
 8005c54:	b002      	add	sp, #8
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	fffdffff 	.word	0xfffdffff
 8005c5c:	fffeffff 	.word	0xfffeffff
 8005c60:	fffbffff 	.word	0xfffbffff
 8005c64:	ffff7fff 	.word	0xffff7fff
 8005c68:	ffffefff 	.word	0xffffefff
 8005c6c:	ffffdfff 	.word	0xffffdfff
 8005c70:	ffefffff 	.word	0xffefffff
 8005c74:	ff9fffff 	.word	0xff9fffff
 8005c78:	fff7ffff 	.word	0xfff7ffff

08005c7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b092      	sub	sp, #72	; 0x48
 8005c80:	af02      	add	r7, sp, #8
 8005c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2284      	movs	r2, #132	; 0x84
 8005c88:	2100      	movs	r1, #0
 8005c8a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c8c:	f7fc fc82 	bl	8002594 <HAL_GetTick>
 8005c90:	0003      	movs	r3, r0
 8005c92:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2208      	movs	r2, #8
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	2b08      	cmp	r3, #8
 8005ca0:	d12c      	bne.n	8005cfc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ca4:	2280      	movs	r2, #128	; 0x80
 8005ca6:	0391      	lsls	r1, r2, #14
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	4a46      	ldr	r2, [pc, #280]	; (8005dc4 <UART_CheckIdleState+0x148>)
 8005cac:	9200      	str	r2, [sp, #0]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f000 f88c 	bl	8005dcc <UART_WaitOnFlagUntilTimeout>
 8005cb4:	1e03      	subs	r3, r0, #0
 8005cb6:	d021      	beq.n	8005cfc <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cb8:	f3ef 8310 	mrs	r3, PRIMASK
 8005cbc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005cc0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc8:	f383 8810 	msr	PRIMASK, r3
}
 8005ccc:	46c0      	nop			; (mov r8, r8)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2180      	movs	r1, #128	; 0x80
 8005cda:	438a      	bics	r2, r1
 8005cdc:	601a      	str	r2, [r3, #0]
 8005cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce4:	f383 8810 	msr	PRIMASK, r3
}
 8005ce8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2220      	movs	r2, #32
 8005cee:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2278      	movs	r2, #120	; 0x78
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e05f      	b.n	8005dbc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2204      	movs	r2, #4
 8005d04:	4013      	ands	r3, r2
 8005d06:	2b04      	cmp	r3, #4
 8005d08:	d146      	bne.n	8005d98 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d0c:	2280      	movs	r2, #128	; 0x80
 8005d0e:	03d1      	lsls	r1, r2, #15
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	4a2c      	ldr	r2, [pc, #176]	; (8005dc4 <UART_CheckIdleState+0x148>)
 8005d14:	9200      	str	r2, [sp, #0]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f000 f858 	bl	8005dcc <UART_WaitOnFlagUntilTimeout>
 8005d1c:	1e03      	subs	r3, r0, #0
 8005d1e:	d03b      	beq.n	8005d98 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d20:	f3ef 8310 	mrs	r3, PRIMASK
 8005d24:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d26:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d28:	637b      	str	r3, [r7, #52]	; 0x34
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	f383 8810 	msr	PRIMASK, r3
}
 8005d34:	46c0      	nop			; (mov r8, r8)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4921      	ldr	r1, [pc, #132]	; (8005dc8 <UART_CheckIdleState+0x14c>)
 8005d42:	400a      	ands	r2, r1
 8005d44:	601a      	str	r2, [r3, #0]
 8005d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	f383 8810 	msr	PRIMASK, r3
}
 8005d50:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d52:	f3ef 8310 	mrs	r3, PRIMASK
 8005d56:	61bb      	str	r3, [r7, #24]
  return(result);
 8005d58:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d5a:	633b      	str	r3, [r7, #48]	; 0x30
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	f383 8810 	msr	PRIMASK, r3
}
 8005d66:	46c0      	nop			; (mov r8, r8)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	689a      	ldr	r2, [r3, #8]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2101      	movs	r1, #1
 8005d74:	438a      	bics	r2, r1
 8005d76:	609a      	str	r2, [r3, #8]
 8005d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d7c:	6a3b      	ldr	r3, [r7, #32]
 8005d7e:	f383 8810 	msr	PRIMASK, r3
}
 8005d82:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2280      	movs	r2, #128	; 0x80
 8005d88:	2120      	movs	r1, #32
 8005d8a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2278      	movs	r2, #120	; 0x78
 8005d90:	2100      	movs	r1, #0
 8005d92:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e011      	b.n	8005dbc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2280      	movs	r2, #128	; 0x80
 8005da2:	2120      	movs	r1, #32
 8005da4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2278      	movs	r2, #120	; 0x78
 8005db6:	2100      	movs	r1, #0
 8005db8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	0018      	movs	r0, r3
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	b010      	add	sp, #64	; 0x40
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	01ffffff 	.word	0x01ffffff
 8005dc8:	fffffedf 	.word	0xfffffedf

08005dcc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	603b      	str	r3, [r7, #0]
 8005dd8:	1dfb      	adds	r3, r7, #7
 8005dda:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ddc:	e04b      	b.n	8005e76 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	3301      	adds	r3, #1
 8005de2:	d048      	beq.n	8005e76 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005de4:	f7fc fbd6 	bl	8002594 <HAL_GetTick>
 8005de8:	0002      	movs	r2, r0
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	69ba      	ldr	r2, [r7, #24]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d302      	bcc.n	8005dfa <UART_WaitOnFlagUntilTimeout+0x2e>
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d101      	bne.n	8005dfe <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e04b      	b.n	8005e96 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2204      	movs	r2, #4
 8005e06:	4013      	ands	r3, r2
 8005e08:	d035      	beq.n	8005e76 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	69db      	ldr	r3, [r3, #28]
 8005e10:	2208      	movs	r2, #8
 8005e12:	4013      	ands	r3, r2
 8005e14:	2b08      	cmp	r3, #8
 8005e16:	d111      	bne.n	8005e3c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2208      	movs	r2, #8
 8005e1e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	0018      	movs	r0, r3
 8005e24:	f000 f83c 	bl	8005ea0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2284      	movs	r2, #132	; 0x84
 8005e2c:	2108      	movs	r1, #8
 8005e2e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2278      	movs	r2, #120	; 0x78
 8005e34:	2100      	movs	r1, #0
 8005e36:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e02c      	b.n	8005e96 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	69da      	ldr	r2, [r3, #28]
 8005e42:	2380      	movs	r3, #128	; 0x80
 8005e44:	011b      	lsls	r3, r3, #4
 8005e46:	401a      	ands	r2, r3
 8005e48:	2380      	movs	r3, #128	; 0x80
 8005e4a:	011b      	lsls	r3, r3, #4
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d112      	bne.n	8005e76 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2280      	movs	r2, #128	; 0x80
 8005e56:	0112      	lsls	r2, r2, #4
 8005e58:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	0018      	movs	r0, r3
 8005e5e:	f000 f81f 	bl	8005ea0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2284      	movs	r2, #132	; 0x84
 8005e66:	2120      	movs	r1, #32
 8005e68:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2278      	movs	r2, #120	; 0x78
 8005e6e:	2100      	movs	r1, #0
 8005e70:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e00f      	b.n	8005e96 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	69db      	ldr	r3, [r3, #28]
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	4013      	ands	r3, r2
 8005e80:	68ba      	ldr	r2, [r7, #8]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	425a      	negs	r2, r3
 8005e86:	4153      	adcs	r3, r2
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	001a      	movs	r2, r3
 8005e8c:	1dfb      	adds	r3, r7, #7
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d0a4      	beq.n	8005dde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	0018      	movs	r0, r3
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	b004      	add	sp, #16
 8005e9c:	bd80      	pop	{r7, pc}
	...

08005ea0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b08e      	sub	sp, #56	; 0x38
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ea8:	f3ef 8310 	mrs	r3, PRIMASK
 8005eac:	617b      	str	r3, [r7, #20]
  return(result);
 8005eae:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005eb0:	637b      	str	r3, [r7, #52]	; 0x34
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	f383 8810 	msr	PRIMASK, r3
}
 8005ebc:	46c0      	nop			; (mov r8, r8)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4926      	ldr	r1, [pc, #152]	; (8005f64 <UART_EndRxTransfer+0xc4>)
 8005eca:	400a      	ands	r2, r1
 8005ecc:	601a      	str	r2, [r3, #0]
 8005ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ed0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	f383 8810 	msr	PRIMASK, r3
}
 8005ed8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eda:	f3ef 8310 	mrs	r3, PRIMASK
 8005ede:	623b      	str	r3, [r7, #32]
  return(result);
 8005ee0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ee2:	633b      	str	r3, [r7, #48]	; 0x30
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eea:	f383 8810 	msr	PRIMASK, r3
}
 8005eee:	46c0      	nop			; (mov r8, r8)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	689a      	ldr	r2, [r3, #8]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2101      	movs	r1, #1
 8005efc:	438a      	bics	r2, r1
 8005efe:	609a      	str	r2, [r3, #8]
 8005f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f02:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f06:	f383 8810 	msr	PRIMASK, r3
}
 8005f0a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d118      	bne.n	8005f46 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f14:	f3ef 8310 	mrs	r3, PRIMASK
 8005f18:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f1a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f1e:	2301      	movs	r3, #1
 8005f20:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f383 8810 	msr	PRIMASK, r3
}
 8005f28:	46c0      	nop			; (mov r8, r8)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2110      	movs	r1, #16
 8005f36:	438a      	bics	r2, r1
 8005f38:	601a      	str	r2, [r3, #0]
 8005f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	f383 8810 	msr	PRIMASK, r3
}
 8005f44:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2280      	movs	r2, #128	; 0x80
 8005f4a:	2120      	movs	r1, #32
 8005f4c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005f5a:	46c0      	nop			; (mov r8, r8)
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	b00e      	add	sp, #56	; 0x38
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	46c0      	nop			; (mov r8, r8)
 8005f64:	fffffedf 	.word	0xfffffedf

08005f68 <siprintf>:
 8005f68:	b40e      	push	{r1, r2, r3}
 8005f6a:	b500      	push	{lr}
 8005f6c:	490b      	ldr	r1, [pc, #44]	; (8005f9c <siprintf+0x34>)
 8005f6e:	b09c      	sub	sp, #112	; 0x70
 8005f70:	ab1d      	add	r3, sp, #116	; 0x74
 8005f72:	9002      	str	r0, [sp, #8]
 8005f74:	9006      	str	r0, [sp, #24]
 8005f76:	9107      	str	r1, [sp, #28]
 8005f78:	9104      	str	r1, [sp, #16]
 8005f7a:	4809      	ldr	r0, [pc, #36]	; (8005fa0 <siprintf+0x38>)
 8005f7c:	4909      	ldr	r1, [pc, #36]	; (8005fa4 <siprintf+0x3c>)
 8005f7e:	cb04      	ldmia	r3!, {r2}
 8005f80:	9105      	str	r1, [sp, #20]
 8005f82:	6800      	ldr	r0, [r0, #0]
 8005f84:	a902      	add	r1, sp, #8
 8005f86:	9301      	str	r3, [sp, #4]
 8005f88:	f000 f9a2 	bl	80062d0 <_svfiprintf_r>
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	9b02      	ldr	r3, [sp, #8]
 8005f90:	701a      	strb	r2, [r3, #0]
 8005f92:	b01c      	add	sp, #112	; 0x70
 8005f94:	bc08      	pop	{r3}
 8005f96:	b003      	add	sp, #12
 8005f98:	4718      	bx	r3
 8005f9a:	46c0      	nop			; (mov r8, r8)
 8005f9c:	7fffffff 	.word	0x7fffffff
 8005fa0:	20000058 	.word	0x20000058
 8005fa4:	ffff0208 	.word	0xffff0208

08005fa8 <memset>:
 8005fa8:	0003      	movs	r3, r0
 8005faa:	1882      	adds	r2, r0, r2
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d100      	bne.n	8005fb2 <memset+0xa>
 8005fb0:	4770      	bx	lr
 8005fb2:	7019      	strb	r1, [r3, #0]
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	e7f9      	b.n	8005fac <memset+0x4>

08005fb8 <__errno>:
 8005fb8:	4b01      	ldr	r3, [pc, #4]	; (8005fc0 <__errno+0x8>)
 8005fba:	6818      	ldr	r0, [r3, #0]
 8005fbc:	4770      	bx	lr
 8005fbe:	46c0      	nop			; (mov r8, r8)
 8005fc0:	20000058 	.word	0x20000058

08005fc4 <__libc_init_array>:
 8005fc4:	b570      	push	{r4, r5, r6, lr}
 8005fc6:	2600      	movs	r6, #0
 8005fc8:	4c0c      	ldr	r4, [pc, #48]	; (8005ffc <__libc_init_array+0x38>)
 8005fca:	4d0d      	ldr	r5, [pc, #52]	; (8006000 <__libc_init_array+0x3c>)
 8005fcc:	1b64      	subs	r4, r4, r5
 8005fce:	10a4      	asrs	r4, r4, #2
 8005fd0:	42a6      	cmp	r6, r4
 8005fd2:	d109      	bne.n	8005fe8 <__libc_init_array+0x24>
 8005fd4:	2600      	movs	r6, #0
 8005fd6:	f000 fc6d 	bl	80068b4 <_init>
 8005fda:	4c0a      	ldr	r4, [pc, #40]	; (8006004 <__libc_init_array+0x40>)
 8005fdc:	4d0a      	ldr	r5, [pc, #40]	; (8006008 <__libc_init_array+0x44>)
 8005fde:	1b64      	subs	r4, r4, r5
 8005fe0:	10a4      	asrs	r4, r4, #2
 8005fe2:	42a6      	cmp	r6, r4
 8005fe4:	d105      	bne.n	8005ff2 <__libc_init_array+0x2e>
 8005fe6:	bd70      	pop	{r4, r5, r6, pc}
 8005fe8:	00b3      	lsls	r3, r6, #2
 8005fea:	58eb      	ldr	r3, [r5, r3]
 8005fec:	4798      	blx	r3
 8005fee:	3601      	adds	r6, #1
 8005ff0:	e7ee      	b.n	8005fd0 <__libc_init_array+0xc>
 8005ff2:	00b3      	lsls	r3, r6, #2
 8005ff4:	58eb      	ldr	r3, [r5, r3]
 8005ff6:	4798      	blx	r3
 8005ff8:	3601      	adds	r6, #1
 8005ffa:	e7f2      	b.n	8005fe2 <__libc_init_array+0x1e>
 8005ffc:	08006b10 	.word	0x08006b10
 8006000:	08006b10 	.word	0x08006b10
 8006004:	08006b14 	.word	0x08006b14
 8006008:	08006b10 	.word	0x08006b10

0800600c <__retarget_lock_acquire_recursive>:
 800600c:	4770      	bx	lr

0800600e <__retarget_lock_release_recursive>:
 800600e:	4770      	bx	lr

08006010 <_free_r>:
 8006010:	b570      	push	{r4, r5, r6, lr}
 8006012:	0005      	movs	r5, r0
 8006014:	2900      	cmp	r1, #0
 8006016:	d010      	beq.n	800603a <_free_r+0x2a>
 8006018:	1f0c      	subs	r4, r1, #4
 800601a:	6823      	ldr	r3, [r4, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	da00      	bge.n	8006022 <_free_r+0x12>
 8006020:	18e4      	adds	r4, r4, r3
 8006022:	0028      	movs	r0, r5
 8006024:	f000 f8e2 	bl	80061ec <__malloc_lock>
 8006028:	4a1d      	ldr	r2, [pc, #116]	; (80060a0 <_free_r+0x90>)
 800602a:	6813      	ldr	r3, [r2, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d105      	bne.n	800603c <_free_r+0x2c>
 8006030:	6063      	str	r3, [r4, #4]
 8006032:	6014      	str	r4, [r2, #0]
 8006034:	0028      	movs	r0, r5
 8006036:	f000 f8e1 	bl	80061fc <__malloc_unlock>
 800603a:	bd70      	pop	{r4, r5, r6, pc}
 800603c:	42a3      	cmp	r3, r4
 800603e:	d908      	bls.n	8006052 <_free_r+0x42>
 8006040:	6820      	ldr	r0, [r4, #0]
 8006042:	1821      	adds	r1, r4, r0
 8006044:	428b      	cmp	r3, r1
 8006046:	d1f3      	bne.n	8006030 <_free_r+0x20>
 8006048:	6819      	ldr	r1, [r3, #0]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	1809      	adds	r1, r1, r0
 800604e:	6021      	str	r1, [r4, #0]
 8006050:	e7ee      	b.n	8006030 <_free_r+0x20>
 8006052:	001a      	movs	r2, r3
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d001      	beq.n	800605e <_free_r+0x4e>
 800605a:	42a3      	cmp	r3, r4
 800605c:	d9f9      	bls.n	8006052 <_free_r+0x42>
 800605e:	6811      	ldr	r1, [r2, #0]
 8006060:	1850      	adds	r0, r2, r1
 8006062:	42a0      	cmp	r0, r4
 8006064:	d10b      	bne.n	800607e <_free_r+0x6e>
 8006066:	6820      	ldr	r0, [r4, #0]
 8006068:	1809      	adds	r1, r1, r0
 800606a:	1850      	adds	r0, r2, r1
 800606c:	6011      	str	r1, [r2, #0]
 800606e:	4283      	cmp	r3, r0
 8006070:	d1e0      	bne.n	8006034 <_free_r+0x24>
 8006072:	6818      	ldr	r0, [r3, #0]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	1841      	adds	r1, r0, r1
 8006078:	6011      	str	r1, [r2, #0]
 800607a:	6053      	str	r3, [r2, #4]
 800607c:	e7da      	b.n	8006034 <_free_r+0x24>
 800607e:	42a0      	cmp	r0, r4
 8006080:	d902      	bls.n	8006088 <_free_r+0x78>
 8006082:	230c      	movs	r3, #12
 8006084:	602b      	str	r3, [r5, #0]
 8006086:	e7d5      	b.n	8006034 <_free_r+0x24>
 8006088:	6820      	ldr	r0, [r4, #0]
 800608a:	1821      	adds	r1, r4, r0
 800608c:	428b      	cmp	r3, r1
 800608e:	d103      	bne.n	8006098 <_free_r+0x88>
 8006090:	6819      	ldr	r1, [r3, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	1809      	adds	r1, r1, r0
 8006096:	6021      	str	r1, [r4, #0]
 8006098:	6063      	str	r3, [r4, #4]
 800609a:	6054      	str	r4, [r2, #4]
 800609c:	e7ca      	b.n	8006034 <_free_r+0x24>
 800609e:	46c0      	nop			; (mov r8, r8)
 80060a0:	2000029c 	.word	0x2000029c

080060a4 <sbrk_aligned>:
 80060a4:	b570      	push	{r4, r5, r6, lr}
 80060a6:	4e0f      	ldr	r6, [pc, #60]	; (80060e4 <sbrk_aligned+0x40>)
 80060a8:	000d      	movs	r5, r1
 80060aa:	6831      	ldr	r1, [r6, #0]
 80060ac:	0004      	movs	r4, r0
 80060ae:	2900      	cmp	r1, #0
 80060b0:	d102      	bne.n	80060b8 <sbrk_aligned+0x14>
 80060b2:	f000 fba1 	bl	80067f8 <_sbrk_r>
 80060b6:	6030      	str	r0, [r6, #0]
 80060b8:	0029      	movs	r1, r5
 80060ba:	0020      	movs	r0, r4
 80060bc:	f000 fb9c 	bl	80067f8 <_sbrk_r>
 80060c0:	1c43      	adds	r3, r0, #1
 80060c2:	d00a      	beq.n	80060da <sbrk_aligned+0x36>
 80060c4:	2303      	movs	r3, #3
 80060c6:	1cc5      	adds	r5, r0, #3
 80060c8:	439d      	bics	r5, r3
 80060ca:	42a8      	cmp	r0, r5
 80060cc:	d007      	beq.n	80060de <sbrk_aligned+0x3a>
 80060ce:	1a29      	subs	r1, r5, r0
 80060d0:	0020      	movs	r0, r4
 80060d2:	f000 fb91 	bl	80067f8 <_sbrk_r>
 80060d6:	3001      	adds	r0, #1
 80060d8:	d101      	bne.n	80060de <sbrk_aligned+0x3a>
 80060da:	2501      	movs	r5, #1
 80060dc:	426d      	negs	r5, r5
 80060de:	0028      	movs	r0, r5
 80060e0:	bd70      	pop	{r4, r5, r6, pc}
 80060e2:	46c0      	nop			; (mov r8, r8)
 80060e4:	200002a0 	.word	0x200002a0

080060e8 <_malloc_r>:
 80060e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060ea:	2203      	movs	r2, #3
 80060ec:	1ccb      	adds	r3, r1, #3
 80060ee:	4393      	bics	r3, r2
 80060f0:	3308      	adds	r3, #8
 80060f2:	0006      	movs	r6, r0
 80060f4:	001f      	movs	r7, r3
 80060f6:	2b0c      	cmp	r3, #12
 80060f8:	d238      	bcs.n	800616c <_malloc_r+0x84>
 80060fa:	270c      	movs	r7, #12
 80060fc:	42b9      	cmp	r1, r7
 80060fe:	d837      	bhi.n	8006170 <_malloc_r+0x88>
 8006100:	0030      	movs	r0, r6
 8006102:	f000 f873 	bl	80061ec <__malloc_lock>
 8006106:	4b38      	ldr	r3, [pc, #224]	; (80061e8 <_malloc_r+0x100>)
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	001c      	movs	r4, r3
 800610e:	2c00      	cmp	r4, #0
 8006110:	d133      	bne.n	800617a <_malloc_r+0x92>
 8006112:	0039      	movs	r1, r7
 8006114:	0030      	movs	r0, r6
 8006116:	f7ff ffc5 	bl	80060a4 <sbrk_aligned>
 800611a:	0004      	movs	r4, r0
 800611c:	1c43      	adds	r3, r0, #1
 800611e:	d15e      	bne.n	80061de <_malloc_r+0xf6>
 8006120:	9b00      	ldr	r3, [sp, #0]
 8006122:	681c      	ldr	r4, [r3, #0]
 8006124:	0025      	movs	r5, r4
 8006126:	2d00      	cmp	r5, #0
 8006128:	d14e      	bne.n	80061c8 <_malloc_r+0xe0>
 800612a:	2c00      	cmp	r4, #0
 800612c:	d051      	beq.n	80061d2 <_malloc_r+0xea>
 800612e:	6823      	ldr	r3, [r4, #0]
 8006130:	0029      	movs	r1, r5
 8006132:	18e3      	adds	r3, r4, r3
 8006134:	0030      	movs	r0, r6
 8006136:	9301      	str	r3, [sp, #4]
 8006138:	f000 fb5e 	bl	80067f8 <_sbrk_r>
 800613c:	9b01      	ldr	r3, [sp, #4]
 800613e:	4283      	cmp	r3, r0
 8006140:	d147      	bne.n	80061d2 <_malloc_r+0xea>
 8006142:	6823      	ldr	r3, [r4, #0]
 8006144:	0030      	movs	r0, r6
 8006146:	1aff      	subs	r7, r7, r3
 8006148:	0039      	movs	r1, r7
 800614a:	f7ff ffab 	bl	80060a4 <sbrk_aligned>
 800614e:	3001      	adds	r0, #1
 8006150:	d03f      	beq.n	80061d2 <_malloc_r+0xea>
 8006152:	6823      	ldr	r3, [r4, #0]
 8006154:	19db      	adds	r3, r3, r7
 8006156:	6023      	str	r3, [r4, #0]
 8006158:	9b00      	ldr	r3, [sp, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d040      	beq.n	80061e2 <_malloc_r+0xfa>
 8006160:	685a      	ldr	r2, [r3, #4]
 8006162:	42a2      	cmp	r2, r4
 8006164:	d133      	bne.n	80061ce <_malloc_r+0xe6>
 8006166:	2200      	movs	r2, #0
 8006168:	605a      	str	r2, [r3, #4]
 800616a:	e014      	b.n	8006196 <_malloc_r+0xae>
 800616c:	2b00      	cmp	r3, #0
 800616e:	dac5      	bge.n	80060fc <_malloc_r+0x14>
 8006170:	230c      	movs	r3, #12
 8006172:	2500      	movs	r5, #0
 8006174:	6033      	str	r3, [r6, #0]
 8006176:	0028      	movs	r0, r5
 8006178:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800617a:	6821      	ldr	r1, [r4, #0]
 800617c:	1bc9      	subs	r1, r1, r7
 800617e:	d420      	bmi.n	80061c2 <_malloc_r+0xda>
 8006180:	290b      	cmp	r1, #11
 8006182:	d918      	bls.n	80061b6 <_malloc_r+0xce>
 8006184:	19e2      	adds	r2, r4, r7
 8006186:	6027      	str	r7, [r4, #0]
 8006188:	42a3      	cmp	r3, r4
 800618a:	d112      	bne.n	80061b2 <_malloc_r+0xca>
 800618c:	9b00      	ldr	r3, [sp, #0]
 800618e:	601a      	str	r2, [r3, #0]
 8006190:	6863      	ldr	r3, [r4, #4]
 8006192:	6011      	str	r1, [r2, #0]
 8006194:	6053      	str	r3, [r2, #4]
 8006196:	0030      	movs	r0, r6
 8006198:	0025      	movs	r5, r4
 800619a:	f000 f82f 	bl	80061fc <__malloc_unlock>
 800619e:	2207      	movs	r2, #7
 80061a0:	350b      	adds	r5, #11
 80061a2:	1d23      	adds	r3, r4, #4
 80061a4:	4395      	bics	r5, r2
 80061a6:	1aea      	subs	r2, r5, r3
 80061a8:	429d      	cmp	r5, r3
 80061aa:	d0e4      	beq.n	8006176 <_malloc_r+0x8e>
 80061ac:	1b5b      	subs	r3, r3, r5
 80061ae:	50a3      	str	r3, [r4, r2]
 80061b0:	e7e1      	b.n	8006176 <_malloc_r+0x8e>
 80061b2:	605a      	str	r2, [r3, #4]
 80061b4:	e7ec      	b.n	8006190 <_malloc_r+0xa8>
 80061b6:	6862      	ldr	r2, [r4, #4]
 80061b8:	42a3      	cmp	r3, r4
 80061ba:	d1d5      	bne.n	8006168 <_malloc_r+0x80>
 80061bc:	9b00      	ldr	r3, [sp, #0]
 80061be:	601a      	str	r2, [r3, #0]
 80061c0:	e7e9      	b.n	8006196 <_malloc_r+0xae>
 80061c2:	0023      	movs	r3, r4
 80061c4:	6864      	ldr	r4, [r4, #4]
 80061c6:	e7a2      	b.n	800610e <_malloc_r+0x26>
 80061c8:	002c      	movs	r4, r5
 80061ca:	686d      	ldr	r5, [r5, #4]
 80061cc:	e7ab      	b.n	8006126 <_malloc_r+0x3e>
 80061ce:	0013      	movs	r3, r2
 80061d0:	e7c4      	b.n	800615c <_malloc_r+0x74>
 80061d2:	230c      	movs	r3, #12
 80061d4:	0030      	movs	r0, r6
 80061d6:	6033      	str	r3, [r6, #0]
 80061d8:	f000 f810 	bl	80061fc <__malloc_unlock>
 80061dc:	e7cb      	b.n	8006176 <_malloc_r+0x8e>
 80061de:	6027      	str	r7, [r4, #0]
 80061e0:	e7d9      	b.n	8006196 <_malloc_r+0xae>
 80061e2:	605b      	str	r3, [r3, #4]
 80061e4:	deff      	udf	#255	; 0xff
 80061e6:	46c0      	nop			; (mov r8, r8)
 80061e8:	2000029c 	.word	0x2000029c

080061ec <__malloc_lock>:
 80061ec:	b510      	push	{r4, lr}
 80061ee:	4802      	ldr	r0, [pc, #8]	; (80061f8 <__malloc_lock+0xc>)
 80061f0:	f7ff ff0c 	bl	800600c <__retarget_lock_acquire_recursive>
 80061f4:	bd10      	pop	{r4, pc}
 80061f6:	46c0      	nop			; (mov r8, r8)
 80061f8:	20000298 	.word	0x20000298

080061fc <__malloc_unlock>:
 80061fc:	b510      	push	{r4, lr}
 80061fe:	4802      	ldr	r0, [pc, #8]	; (8006208 <__malloc_unlock+0xc>)
 8006200:	f7ff ff05 	bl	800600e <__retarget_lock_release_recursive>
 8006204:	bd10      	pop	{r4, pc}
 8006206:	46c0      	nop			; (mov r8, r8)
 8006208:	20000298 	.word	0x20000298

0800620c <__ssputs_r>:
 800620c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800620e:	b085      	sub	sp, #20
 8006210:	9301      	str	r3, [sp, #4]
 8006212:	9203      	str	r2, [sp, #12]
 8006214:	688e      	ldr	r6, [r1, #8]
 8006216:	9a01      	ldr	r2, [sp, #4]
 8006218:	0007      	movs	r7, r0
 800621a:	000c      	movs	r4, r1
 800621c:	680b      	ldr	r3, [r1, #0]
 800621e:	4296      	cmp	r6, r2
 8006220:	d831      	bhi.n	8006286 <__ssputs_r+0x7a>
 8006222:	898a      	ldrh	r2, [r1, #12]
 8006224:	2190      	movs	r1, #144	; 0x90
 8006226:	00c9      	lsls	r1, r1, #3
 8006228:	420a      	tst	r2, r1
 800622a:	d029      	beq.n	8006280 <__ssputs_r+0x74>
 800622c:	2003      	movs	r0, #3
 800622e:	6921      	ldr	r1, [r4, #16]
 8006230:	1a5b      	subs	r3, r3, r1
 8006232:	9302      	str	r3, [sp, #8]
 8006234:	6963      	ldr	r3, [r4, #20]
 8006236:	4343      	muls	r3, r0
 8006238:	0fdd      	lsrs	r5, r3, #31
 800623a:	18ed      	adds	r5, r5, r3
 800623c:	9b01      	ldr	r3, [sp, #4]
 800623e:	9802      	ldr	r0, [sp, #8]
 8006240:	3301      	adds	r3, #1
 8006242:	181b      	adds	r3, r3, r0
 8006244:	106d      	asrs	r5, r5, #1
 8006246:	42ab      	cmp	r3, r5
 8006248:	d900      	bls.n	800624c <__ssputs_r+0x40>
 800624a:	001d      	movs	r5, r3
 800624c:	0552      	lsls	r2, r2, #21
 800624e:	d529      	bpl.n	80062a4 <__ssputs_r+0x98>
 8006250:	0029      	movs	r1, r5
 8006252:	0038      	movs	r0, r7
 8006254:	f7ff ff48 	bl	80060e8 <_malloc_r>
 8006258:	1e06      	subs	r6, r0, #0
 800625a:	d02d      	beq.n	80062b8 <__ssputs_r+0xac>
 800625c:	9a02      	ldr	r2, [sp, #8]
 800625e:	6921      	ldr	r1, [r4, #16]
 8006260:	f000 fae7 	bl	8006832 <memcpy>
 8006264:	89a2      	ldrh	r2, [r4, #12]
 8006266:	4b19      	ldr	r3, [pc, #100]	; (80062cc <__ssputs_r+0xc0>)
 8006268:	401a      	ands	r2, r3
 800626a:	2380      	movs	r3, #128	; 0x80
 800626c:	4313      	orrs	r3, r2
 800626e:	81a3      	strh	r3, [r4, #12]
 8006270:	9b02      	ldr	r3, [sp, #8]
 8006272:	6126      	str	r6, [r4, #16]
 8006274:	18f6      	adds	r6, r6, r3
 8006276:	6026      	str	r6, [r4, #0]
 8006278:	6165      	str	r5, [r4, #20]
 800627a:	9e01      	ldr	r6, [sp, #4]
 800627c:	1aed      	subs	r5, r5, r3
 800627e:	60a5      	str	r5, [r4, #8]
 8006280:	9b01      	ldr	r3, [sp, #4]
 8006282:	429e      	cmp	r6, r3
 8006284:	d900      	bls.n	8006288 <__ssputs_r+0x7c>
 8006286:	9e01      	ldr	r6, [sp, #4]
 8006288:	0032      	movs	r2, r6
 800628a:	9903      	ldr	r1, [sp, #12]
 800628c:	6820      	ldr	r0, [r4, #0]
 800628e:	f000 fa9f 	bl	80067d0 <memmove>
 8006292:	2000      	movs	r0, #0
 8006294:	68a3      	ldr	r3, [r4, #8]
 8006296:	1b9b      	subs	r3, r3, r6
 8006298:	60a3      	str	r3, [r4, #8]
 800629a:	6823      	ldr	r3, [r4, #0]
 800629c:	199b      	adds	r3, r3, r6
 800629e:	6023      	str	r3, [r4, #0]
 80062a0:	b005      	add	sp, #20
 80062a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062a4:	002a      	movs	r2, r5
 80062a6:	0038      	movs	r0, r7
 80062a8:	f000 facc 	bl	8006844 <_realloc_r>
 80062ac:	1e06      	subs	r6, r0, #0
 80062ae:	d1df      	bne.n	8006270 <__ssputs_r+0x64>
 80062b0:	0038      	movs	r0, r7
 80062b2:	6921      	ldr	r1, [r4, #16]
 80062b4:	f7ff feac 	bl	8006010 <_free_r>
 80062b8:	230c      	movs	r3, #12
 80062ba:	2001      	movs	r0, #1
 80062bc:	603b      	str	r3, [r7, #0]
 80062be:	89a2      	ldrh	r2, [r4, #12]
 80062c0:	3334      	adds	r3, #52	; 0x34
 80062c2:	4313      	orrs	r3, r2
 80062c4:	81a3      	strh	r3, [r4, #12]
 80062c6:	4240      	negs	r0, r0
 80062c8:	e7ea      	b.n	80062a0 <__ssputs_r+0x94>
 80062ca:	46c0      	nop			; (mov r8, r8)
 80062cc:	fffffb7f 	.word	0xfffffb7f

080062d0 <_svfiprintf_r>:
 80062d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062d2:	b0a1      	sub	sp, #132	; 0x84
 80062d4:	9003      	str	r0, [sp, #12]
 80062d6:	001d      	movs	r5, r3
 80062d8:	898b      	ldrh	r3, [r1, #12]
 80062da:	000f      	movs	r7, r1
 80062dc:	0016      	movs	r6, r2
 80062de:	061b      	lsls	r3, r3, #24
 80062e0:	d511      	bpl.n	8006306 <_svfiprintf_r+0x36>
 80062e2:	690b      	ldr	r3, [r1, #16]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d10e      	bne.n	8006306 <_svfiprintf_r+0x36>
 80062e8:	2140      	movs	r1, #64	; 0x40
 80062ea:	f7ff fefd 	bl	80060e8 <_malloc_r>
 80062ee:	6038      	str	r0, [r7, #0]
 80062f0:	6138      	str	r0, [r7, #16]
 80062f2:	2800      	cmp	r0, #0
 80062f4:	d105      	bne.n	8006302 <_svfiprintf_r+0x32>
 80062f6:	230c      	movs	r3, #12
 80062f8:	9a03      	ldr	r2, [sp, #12]
 80062fa:	3801      	subs	r0, #1
 80062fc:	6013      	str	r3, [r2, #0]
 80062fe:	b021      	add	sp, #132	; 0x84
 8006300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006302:	2340      	movs	r3, #64	; 0x40
 8006304:	617b      	str	r3, [r7, #20]
 8006306:	2300      	movs	r3, #0
 8006308:	ac08      	add	r4, sp, #32
 800630a:	6163      	str	r3, [r4, #20]
 800630c:	3320      	adds	r3, #32
 800630e:	7663      	strb	r3, [r4, #25]
 8006310:	3310      	adds	r3, #16
 8006312:	76a3      	strb	r3, [r4, #26]
 8006314:	9507      	str	r5, [sp, #28]
 8006316:	0035      	movs	r5, r6
 8006318:	782b      	ldrb	r3, [r5, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d001      	beq.n	8006322 <_svfiprintf_r+0x52>
 800631e:	2b25      	cmp	r3, #37	; 0x25
 8006320:	d148      	bne.n	80063b4 <_svfiprintf_r+0xe4>
 8006322:	1bab      	subs	r3, r5, r6
 8006324:	9305      	str	r3, [sp, #20]
 8006326:	42b5      	cmp	r5, r6
 8006328:	d00b      	beq.n	8006342 <_svfiprintf_r+0x72>
 800632a:	0032      	movs	r2, r6
 800632c:	0039      	movs	r1, r7
 800632e:	9803      	ldr	r0, [sp, #12]
 8006330:	f7ff ff6c 	bl	800620c <__ssputs_r>
 8006334:	3001      	adds	r0, #1
 8006336:	d100      	bne.n	800633a <_svfiprintf_r+0x6a>
 8006338:	e0af      	b.n	800649a <_svfiprintf_r+0x1ca>
 800633a:	6963      	ldr	r3, [r4, #20]
 800633c:	9a05      	ldr	r2, [sp, #20]
 800633e:	189b      	adds	r3, r3, r2
 8006340:	6163      	str	r3, [r4, #20]
 8006342:	782b      	ldrb	r3, [r5, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d100      	bne.n	800634a <_svfiprintf_r+0x7a>
 8006348:	e0a7      	b.n	800649a <_svfiprintf_r+0x1ca>
 800634a:	2201      	movs	r2, #1
 800634c:	2300      	movs	r3, #0
 800634e:	4252      	negs	r2, r2
 8006350:	6062      	str	r2, [r4, #4]
 8006352:	a904      	add	r1, sp, #16
 8006354:	3254      	adds	r2, #84	; 0x54
 8006356:	1852      	adds	r2, r2, r1
 8006358:	1c6e      	adds	r6, r5, #1
 800635a:	6023      	str	r3, [r4, #0]
 800635c:	60e3      	str	r3, [r4, #12]
 800635e:	60a3      	str	r3, [r4, #8]
 8006360:	7013      	strb	r3, [r2, #0]
 8006362:	65a3      	str	r3, [r4, #88]	; 0x58
 8006364:	4b55      	ldr	r3, [pc, #340]	; (80064bc <_svfiprintf_r+0x1ec>)
 8006366:	2205      	movs	r2, #5
 8006368:	0018      	movs	r0, r3
 800636a:	7831      	ldrb	r1, [r6, #0]
 800636c:	9305      	str	r3, [sp, #20]
 800636e:	f000 fa55 	bl	800681c <memchr>
 8006372:	1c75      	adds	r5, r6, #1
 8006374:	2800      	cmp	r0, #0
 8006376:	d11f      	bne.n	80063b8 <_svfiprintf_r+0xe8>
 8006378:	6822      	ldr	r2, [r4, #0]
 800637a:	06d3      	lsls	r3, r2, #27
 800637c:	d504      	bpl.n	8006388 <_svfiprintf_r+0xb8>
 800637e:	2353      	movs	r3, #83	; 0x53
 8006380:	a904      	add	r1, sp, #16
 8006382:	185b      	adds	r3, r3, r1
 8006384:	2120      	movs	r1, #32
 8006386:	7019      	strb	r1, [r3, #0]
 8006388:	0713      	lsls	r3, r2, #28
 800638a:	d504      	bpl.n	8006396 <_svfiprintf_r+0xc6>
 800638c:	2353      	movs	r3, #83	; 0x53
 800638e:	a904      	add	r1, sp, #16
 8006390:	185b      	adds	r3, r3, r1
 8006392:	212b      	movs	r1, #43	; 0x2b
 8006394:	7019      	strb	r1, [r3, #0]
 8006396:	7833      	ldrb	r3, [r6, #0]
 8006398:	2b2a      	cmp	r3, #42	; 0x2a
 800639a:	d016      	beq.n	80063ca <_svfiprintf_r+0xfa>
 800639c:	0035      	movs	r5, r6
 800639e:	2100      	movs	r1, #0
 80063a0:	200a      	movs	r0, #10
 80063a2:	68e3      	ldr	r3, [r4, #12]
 80063a4:	782a      	ldrb	r2, [r5, #0]
 80063a6:	1c6e      	adds	r6, r5, #1
 80063a8:	3a30      	subs	r2, #48	; 0x30
 80063aa:	2a09      	cmp	r2, #9
 80063ac:	d94e      	bls.n	800644c <_svfiprintf_r+0x17c>
 80063ae:	2900      	cmp	r1, #0
 80063b0:	d111      	bne.n	80063d6 <_svfiprintf_r+0x106>
 80063b2:	e017      	b.n	80063e4 <_svfiprintf_r+0x114>
 80063b4:	3501      	adds	r5, #1
 80063b6:	e7af      	b.n	8006318 <_svfiprintf_r+0x48>
 80063b8:	9b05      	ldr	r3, [sp, #20]
 80063ba:	6822      	ldr	r2, [r4, #0]
 80063bc:	1ac0      	subs	r0, r0, r3
 80063be:	2301      	movs	r3, #1
 80063c0:	4083      	lsls	r3, r0
 80063c2:	4313      	orrs	r3, r2
 80063c4:	002e      	movs	r6, r5
 80063c6:	6023      	str	r3, [r4, #0]
 80063c8:	e7cc      	b.n	8006364 <_svfiprintf_r+0x94>
 80063ca:	9b07      	ldr	r3, [sp, #28]
 80063cc:	1d19      	adds	r1, r3, #4
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	9107      	str	r1, [sp, #28]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	db01      	blt.n	80063da <_svfiprintf_r+0x10a>
 80063d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80063d8:	e004      	b.n	80063e4 <_svfiprintf_r+0x114>
 80063da:	425b      	negs	r3, r3
 80063dc:	60e3      	str	r3, [r4, #12]
 80063de:	2302      	movs	r3, #2
 80063e0:	4313      	orrs	r3, r2
 80063e2:	6023      	str	r3, [r4, #0]
 80063e4:	782b      	ldrb	r3, [r5, #0]
 80063e6:	2b2e      	cmp	r3, #46	; 0x2e
 80063e8:	d10a      	bne.n	8006400 <_svfiprintf_r+0x130>
 80063ea:	786b      	ldrb	r3, [r5, #1]
 80063ec:	2b2a      	cmp	r3, #42	; 0x2a
 80063ee:	d135      	bne.n	800645c <_svfiprintf_r+0x18c>
 80063f0:	9b07      	ldr	r3, [sp, #28]
 80063f2:	3502      	adds	r5, #2
 80063f4:	1d1a      	adds	r2, r3, #4
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	9207      	str	r2, [sp, #28]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	db2b      	blt.n	8006456 <_svfiprintf_r+0x186>
 80063fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006400:	4e2f      	ldr	r6, [pc, #188]	; (80064c0 <_svfiprintf_r+0x1f0>)
 8006402:	2203      	movs	r2, #3
 8006404:	0030      	movs	r0, r6
 8006406:	7829      	ldrb	r1, [r5, #0]
 8006408:	f000 fa08 	bl	800681c <memchr>
 800640c:	2800      	cmp	r0, #0
 800640e:	d006      	beq.n	800641e <_svfiprintf_r+0x14e>
 8006410:	2340      	movs	r3, #64	; 0x40
 8006412:	1b80      	subs	r0, r0, r6
 8006414:	4083      	lsls	r3, r0
 8006416:	6822      	ldr	r2, [r4, #0]
 8006418:	3501      	adds	r5, #1
 800641a:	4313      	orrs	r3, r2
 800641c:	6023      	str	r3, [r4, #0]
 800641e:	7829      	ldrb	r1, [r5, #0]
 8006420:	2206      	movs	r2, #6
 8006422:	4828      	ldr	r0, [pc, #160]	; (80064c4 <_svfiprintf_r+0x1f4>)
 8006424:	1c6e      	adds	r6, r5, #1
 8006426:	7621      	strb	r1, [r4, #24]
 8006428:	f000 f9f8 	bl	800681c <memchr>
 800642c:	2800      	cmp	r0, #0
 800642e:	d03c      	beq.n	80064aa <_svfiprintf_r+0x1da>
 8006430:	4b25      	ldr	r3, [pc, #148]	; (80064c8 <_svfiprintf_r+0x1f8>)
 8006432:	2b00      	cmp	r3, #0
 8006434:	d125      	bne.n	8006482 <_svfiprintf_r+0x1b2>
 8006436:	2207      	movs	r2, #7
 8006438:	9b07      	ldr	r3, [sp, #28]
 800643a:	3307      	adds	r3, #7
 800643c:	4393      	bics	r3, r2
 800643e:	3308      	adds	r3, #8
 8006440:	9307      	str	r3, [sp, #28]
 8006442:	6963      	ldr	r3, [r4, #20]
 8006444:	9a04      	ldr	r2, [sp, #16]
 8006446:	189b      	adds	r3, r3, r2
 8006448:	6163      	str	r3, [r4, #20]
 800644a:	e764      	b.n	8006316 <_svfiprintf_r+0x46>
 800644c:	4343      	muls	r3, r0
 800644e:	0035      	movs	r5, r6
 8006450:	2101      	movs	r1, #1
 8006452:	189b      	adds	r3, r3, r2
 8006454:	e7a6      	b.n	80063a4 <_svfiprintf_r+0xd4>
 8006456:	2301      	movs	r3, #1
 8006458:	425b      	negs	r3, r3
 800645a:	e7d0      	b.n	80063fe <_svfiprintf_r+0x12e>
 800645c:	2300      	movs	r3, #0
 800645e:	200a      	movs	r0, #10
 8006460:	001a      	movs	r2, r3
 8006462:	3501      	adds	r5, #1
 8006464:	6063      	str	r3, [r4, #4]
 8006466:	7829      	ldrb	r1, [r5, #0]
 8006468:	1c6e      	adds	r6, r5, #1
 800646a:	3930      	subs	r1, #48	; 0x30
 800646c:	2909      	cmp	r1, #9
 800646e:	d903      	bls.n	8006478 <_svfiprintf_r+0x1a8>
 8006470:	2b00      	cmp	r3, #0
 8006472:	d0c5      	beq.n	8006400 <_svfiprintf_r+0x130>
 8006474:	9209      	str	r2, [sp, #36]	; 0x24
 8006476:	e7c3      	b.n	8006400 <_svfiprintf_r+0x130>
 8006478:	4342      	muls	r2, r0
 800647a:	0035      	movs	r5, r6
 800647c:	2301      	movs	r3, #1
 800647e:	1852      	adds	r2, r2, r1
 8006480:	e7f1      	b.n	8006466 <_svfiprintf_r+0x196>
 8006482:	aa07      	add	r2, sp, #28
 8006484:	9200      	str	r2, [sp, #0]
 8006486:	0021      	movs	r1, r4
 8006488:	003a      	movs	r2, r7
 800648a:	4b10      	ldr	r3, [pc, #64]	; (80064cc <_svfiprintf_r+0x1fc>)
 800648c:	9803      	ldr	r0, [sp, #12]
 800648e:	e000      	b.n	8006492 <_svfiprintf_r+0x1c2>
 8006490:	bf00      	nop
 8006492:	9004      	str	r0, [sp, #16]
 8006494:	9b04      	ldr	r3, [sp, #16]
 8006496:	3301      	adds	r3, #1
 8006498:	d1d3      	bne.n	8006442 <_svfiprintf_r+0x172>
 800649a:	89bb      	ldrh	r3, [r7, #12]
 800649c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800649e:	065b      	lsls	r3, r3, #25
 80064a0:	d400      	bmi.n	80064a4 <_svfiprintf_r+0x1d4>
 80064a2:	e72c      	b.n	80062fe <_svfiprintf_r+0x2e>
 80064a4:	2001      	movs	r0, #1
 80064a6:	4240      	negs	r0, r0
 80064a8:	e729      	b.n	80062fe <_svfiprintf_r+0x2e>
 80064aa:	aa07      	add	r2, sp, #28
 80064ac:	9200      	str	r2, [sp, #0]
 80064ae:	0021      	movs	r1, r4
 80064b0:	003a      	movs	r2, r7
 80064b2:	4b06      	ldr	r3, [pc, #24]	; (80064cc <_svfiprintf_r+0x1fc>)
 80064b4:	9803      	ldr	r0, [sp, #12]
 80064b6:	f000 f87b 	bl	80065b0 <_printf_i>
 80064ba:	e7ea      	b.n	8006492 <_svfiprintf_r+0x1c2>
 80064bc:	08006ad4 	.word	0x08006ad4
 80064c0:	08006ada 	.word	0x08006ada
 80064c4:	08006ade 	.word	0x08006ade
 80064c8:	00000000 	.word	0x00000000
 80064cc:	0800620d 	.word	0x0800620d

080064d0 <_printf_common>:
 80064d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064d2:	0016      	movs	r6, r2
 80064d4:	9301      	str	r3, [sp, #4]
 80064d6:	688a      	ldr	r2, [r1, #8]
 80064d8:	690b      	ldr	r3, [r1, #16]
 80064da:	000c      	movs	r4, r1
 80064dc:	9000      	str	r0, [sp, #0]
 80064de:	4293      	cmp	r3, r2
 80064e0:	da00      	bge.n	80064e4 <_printf_common+0x14>
 80064e2:	0013      	movs	r3, r2
 80064e4:	0022      	movs	r2, r4
 80064e6:	6033      	str	r3, [r6, #0]
 80064e8:	3243      	adds	r2, #67	; 0x43
 80064ea:	7812      	ldrb	r2, [r2, #0]
 80064ec:	2a00      	cmp	r2, #0
 80064ee:	d001      	beq.n	80064f4 <_printf_common+0x24>
 80064f0:	3301      	adds	r3, #1
 80064f2:	6033      	str	r3, [r6, #0]
 80064f4:	6823      	ldr	r3, [r4, #0]
 80064f6:	069b      	lsls	r3, r3, #26
 80064f8:	d502      	bpl.n	8006500 <_printf_common+0x30>
 80064fa:	6833      	ldr	r3, [r6, #0]
 80064fc:	3302      	adds	r3, #2
 80064fe:	6033      	str	r3, [r6, #0]
 8006500:	6822      	ldr	r2, [r4, #0]
 8006502:	2306      	movs	r3, #6
 8006504:	0015      	movs	r5, r2
 8006506:	401d      	ands	r5, r3
 8006508:	421a      	tst	r2, r3
 800650a:	d027      	beq.n	800655c <_printf_common+0x8c>
 800650c:	0023      	movs	r3, r4
 800650e:	3343      	adds	r3, #67	; 0x43
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	1e5a      	subs	r2, r3, #1
 8006514:	4193      	sbcs	r3, r2
 8006516:	6822      	ldr	r2, [r4, #0]
 8006518:	0692      	lsls	r2, r2, #26
 800651a:	d430      	bmi.n	800657e <_printf_common+0xae>
 800651c:	0022      	movs	r2, r4
 800651e:	9901      	ldr	r1, [sp, #4]
 8006520:	9800      	ldr	r0, [sp, #0]
 8006522:	9d08      	ldr	r5, [sp, #32]
 8006524:	3243      	adds	r2, #67	; 0x43
 8006526:	47a8      	blx	r5
 8006528:	3001      	adds	r0, #1
 800652a:	d025      	beq.n	8006578 <_printf_common+0xa8>
 800652c:	2206      	movs	r2, #6
 800652e:	6823      	ldr	r3, [r4, #0]
 8006530:	2500      	movs	r5, #0
 8006532:	4013      	ands	r3, r2
 8006534:	2b04      	cmp	r3, #4
 8006536:	d105      	bne.n	8006544 <_printf_common+0x74>
 8006538:	6833      	ldr	r3, [r6, #0]
 800653a:	68e5      	ldr	r5, [r4, #12]
 800653c:	1aed      	subs	r5, r5, r3
 800653e:	43eb      	mvns	r3, r5
 8006540:	17db      	asrs	r3, r3, #31
 8006542:	401d      	ands	r5, r3
 8006544:	68a3      	ldr	r3, [r4, #8]
 8006546:	6922      	ldr	r2, [r4, #16]
 8006548:	4293      	cmp	r3, r2
 800654a:	dd01      	ble.n	8006550 <_printf_common+0x80>
 800654c:	1a9b      	subs	r3, r3, r2
 800654e:	18ed      	adds	r5, r5, r3
 8006550:	2600      	movs	r6, #0
 8006552:	42b5      	cmp	r5, r6
 8006554:	d120      	bne.n	8006598 <_printf_common+0xc8>
 8006556:	2000      	movs	r0, #0
 8006558:	e010      	b.n	800657c <_printf_common+0xac>
 800655a:	3501      	adds	r5, #1
 800655c:	68e3      	ldr	r3, [r4, #12]
 800655e:	6832      	ldr	r2, [r6, #0]
 8006560:	1a9b      	subs	r3, r3, r2
 8006562:	42ab      	cmp	r3, r5
 8006564:	ddd2      	ble.n	800650c <_printf_common+0x3c>
 8006566:	0022      	movs	r2, r4
 8006568:	2301      	movs	r3, #1
 800656a:	9901      	ldr	r1, [sp, #4]
 800656c:	9800      	ldr	r0, [sp, #0]
 800656e:	9f08      	ldr	r7, [sp, #32]
 8006570:	3219      	adds	r2, #25
 8006572:	47b8      	blx	r7
 8006574:	3001      	adds	r0, #1
 8006576:	d1f0      	bne.n	800655a <_printf_common+0x8a>
 8006578:	2001      	movs	r0, #1
 800657a:	4240      	negs	r0, r0
 800657c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800657e:	2030      	movs	r0, #48	; 0x30
 8006580:	18e1      	adds	r1, r4, r3
 8006582:	3143      	adds	r1, #67	; 0x43
 8006584:	7008      	strb	r0, [r1, #0]
 8006586:	0021      	movs	r1, r4
 8006588:	1c5a      	adds	r2, r3, #1
 800658a:	3145      	adds	r1, #69	; 0x45
 800658c:	7809      	ldrb	r1, [r1, #0]
 800658e:	18a2      	adds	r2, r4, r2
 8006590:	3243      	adds	r2, #67	; 0x43
 8006592:	3302      	adds	r3, #2
 8006594:	7011      	strb	r1, [r2, #0]
 8006596:	e7c1      	b.n	800651c <_printf_common+0x4c>
 8006598:	0022      	movs	r2, r4
 800659a:	2301      	movs	r3, #1
 800659c:	9901      	ldr	r1, [sp, #4]
 800659e:	9800      	ldr	r0, [sp, #0]
 80065a0:	9f08      	ldr	r7, [sp, #32]
 80065a2:	321a      	adds	r2, #26
 80065a4:	47b8      	blx	r7
 80065a6:	3001      	adds	r0, #1
 80065a8:	d0e6      	beq.n	8006578 <_printf_common+0xa8>
 80065aa:	3601      	adds	r6, #1
 80065ac:	e7d1      	b.n	8006552 <_printf_common+0x82>
	...

080065b0 <_printf_i>:
 80065b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065b2:	b08b      	sub	sp, #44	; 0x2c
 80065b4:	9206      	str	r2, [sp, #24]
 80065b6:	000a      	movs	r2, r1
 80065b8:	3243      	adds	r2, #67	; 0x43
 80065ba:	9307      	str	r3, [sp, #28]
 80065bc:	9005      	str	r0, [sp, #20]
 80065be:	9204      	str	r2, [sp, #16]
 80065c0:	7e0a      	ldrb	r2, [r1, #24]
 80065c2:	000c      	movs	r4, r1
 80065c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80065c6:	2a78      	cmp	r2, #120	; 0x78
 80065c8:	d809      	bhi.n	80065de <_printf_i+0x2e>
 80065ca:	2a62      	cmp	r2, #98	; 0x62
 80065cc:	d80b      	bhi.n	80065e6 <_printf_i+0x36>
 80065ce:	2a00      	cmp	r2, #0
 80065d0:	d100      	bne.n	80065d4 <_printf_i+0x24>
 80065d2:	e0be      	b.n	8006752 <_printf_i+0x1a2>
 80065d4:	497c      	ldr	r1, [pc, #496]	; (80067c8 <_printf_i+0x218>)
 80065d6:	9103      	str	r1, [sp, #12]
 80065d8:	2a58      	cmp	r2, #88	; 0x58
 80065da:	d100      	bne.n	80065de <_printf_i+0x2e>
 80065dc:	e093      	b.n	8006706 <_printf_i+0x156>
 80065de:	0026      	movs	r6, r4
 80065e0:	3642      	adds	r6, #66	; 0x42
 80065e2:	7032      	strb	r2, [r6, #0]
 80065e4:	e022      	b.n	800662c <_printf_i+0x7c>
 80065e6:	0010      	movs	r0, r2
 80065e8:	3863      	subs	r0, #99	; 0x63
 80065ea:	2815      	cmp	r0, #21
 80065ec:	d8f7      	bhi.n	80065de <_printf_i+0x2e>
 80065ee:	f7f9 fd8b 	bl	8000108 <__gnu_thumb1_case_shi>
 80065f2:	0016      	.short	0x0016
 80065f4:	fff6001f 	.word	0xfff6001f
 80065f8:	fff6fff6 	.word	0xfff6fff6
 80065fc:	001ffff6 	.word	0x001ffff6
 8006600:	fff6fff6 	.word	0xfff6fff6
 8006604:	fff6fff6 	.word	0xfff6fff6
 8006608:	003600a3 	.word	0x003600a3
 800660c:	fff60083 	.word	0xfff60083
 8006610:	00b4fff6 	.word	0x00b4fff6
 8006614:	0036fff6 	.word	0x0036fff6
 8006618:	fff6fff6 	.word	0xfff6fff6
 800661c:	0087      	.short	0x0087
 800661e:	0026      	movs	r6, r4
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	3642      	adds	r6, #66	; 0x42
 8006624:	1d11      	adds	r1, r2, #4
 8006626:	6019      	str	r1, [r3, #0]
 8006628:	6813      	ldr	r3, [r2, #0]
 800662a:	7033      	strb	r3, [r6, #0]
 800662c:	2301      	movs	r3, #1
 800662e:	e0a2      	b.n	8006776 <_printf_i+0x1c6>
 8006630:	6818      	ldr	r0, [r3, #0]
 8006632:	6809      	ldr	r1, [r1, #0]
 8006634:	1d02      	adds	r2, r0, #4
 8006636:	060d      	lsls	r5, r1, #24
 8006638:	d50b      	bpl.n	8006652 <_printf_i+0xa2>
 800663a:	6805      	ldr	r5, [r0, #0]
 800663c:	601a      	str	r2, [r3, #0]
 800663e:	2d00      	cmp	r5, #0
 8006640:	da03      	bge.n	800664a <_printf_i+0x9a>
 8006642:	232d      	movs	r3, #45	; 0x2d
 8006644:	9a04      	ldr	r2, [sp, #16]
 8006646:	426d      	negs	r5, r5
 8006648:	7013      	strb	r3, [r2, #0]
 800664a:	4b5f      	ldr	r3, [pc, #380]	; (80067c8 <_printf_i+0x218>)
 800664c:	270a      	movs	r7, #10
 800664e:	9303      	str	r3, [sp, #12]
 8006650:	e01b      	b.n	800668a <_printf_i+0xda>
 8006652:	6805      	ldr	r5, [r0, #0]
 8006654:	601a      	str	r2, [r3, #0]
 8006656:	0649      	lsls	r1, r1, #25
 8006658:	d5f1      	bpl.n	800663e <_printf_i+0x8e>
 800665a:	b22d      	sxth	r5, r5
 800665c:	e7ef      	b.n	800663e <_printf_i+0x8e>
 800665e:	680d      	ldr	r5, [r1, #0]
 8006660:	6819      	ldr	r1, [r3, #0]
 8006662:	1d08      	adds	r0, r1, #4
 8006664:	6018      	str	r0, [r3, #0]
 8006666:	062e      	lsls	r6, r5, #24
 8006668:	d501      	bpl.n	800666e <_printf_i+0xbe>
 800666a:	680d      	ldr	r5, [r1, #0]
 800666c:	e003      	b.n	8006676 <_printf_i+0xc6>
 800666e:	066d      	lsls	r5, r5, #25
 8006670:	d5fb      	bpl.n	800666a <_printf_i+0xba>
 8006672:	680d      	ldr	r5, [r1, #0]
 8006674:	b2ad      	uxth	r5, r5
 8006676:	4b54      	ldr	r3, [pc, #336]	; (80067c8 <_printf_i+0x218>)
 8006678:	2708      	movs	r7, #8
 800667a:	9303      	str	r3, [sp, #12]
 800667c:	2a6f      	cmp	r2, #111	; 0x6f
 800667e:	d000      	beq.n	8006682 <_printf_i+0xd2>
 8006680:	3702      	adds	r7, #2
 8006682:	0023      	movs	r3, r4
 8006684:	2200      	movs	r2, #0
 8006686:	3343      	adds	r3, #67	; 0x43
 8006688:	701a      	strb	r2, [r3, #0]
 800668a:	6863      	ldr	r3, [r4, #4]
 800668c:	60a3      	str	r3, [r4, #8]
 800668e:	2b00      	cmp	r3, #0
 8006690:	db03      	blt.n	800669a <_printf_i+0xea>
 8006692:	2104      	movs	r1, #4
 8006694:	6822      	ldr	r2, [r4, #0]
 8006696:	438a      	bics	r2, r1
 8006698:	6022      	str	r2, [r4, #0]
 800669a:	2d00      	cmp	r5, #0
 800669c:	d102      	bne.n	80066a4 <_printf_i+0xf4>
 800669e:	9e04      	ldr	r6, [sp, #16]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00c      	beq.n	80066be <_printf_i+0x10e>
 80066a4:	9e04      	ldr	r6, [sp, #16]
 80066a6:	0028      	movs	r0, r5
 80066a8:	0039      	movs	r1, r7
 80066aa:	f7f9 fdbd 	bl	8000228 <__aeabi_uidivmod>
 80066ae:	9b03      	ldr	r3, [sp, #12]
 80066b0:	3e01      	subs	r6, #1
 80066b2:	5c5b      	ldrb	r3, [r3, r1]
 80066b4:	7033      	strb	r3, [r6, #0]
 80066b6:	002b      	movs	r3, r5
 80066b8:	0005      	movs	r5, r0
 80066ba:	429f      	cmp	r7, r3
 80066bc:	d9f3      	bls.n	80066a6 <_printf_i+0xf6>
 80066be:	2f08      	cmp	r7, #8
 80066c0:	d109      	bne.n	80066d6 <_printf_i+0x126>
 80066c2:	6823      	ldr	r3, [r4, #0]
 80066c4:	07db      	lsls	r3, r3, #31
 80066c6:	d506      	bpl.n	80066d6 <_printf_i+0x126>
 80066c8:	6862      	ldr	r2, [r4, #4]
 80066ca:	6923      	ldr	r3, [r4, #16]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	dc02      	bgt.n	80066d6 <_printf_i+0x126>
 80066d0:	2330      	movs	r3, #48	; 0x30
 80066d2:	3e01      	subs	r6, #1
 80066d4:	7033      	strb	r3, [r6, #0]
 80066d6:	9b04      	ldr	r3, [sp, #16]
 80066d8:	1b9b      	subs	r3, r3, r6
 80066da:	6123      	str	r3, [r4, #16]
 80066dc:	9b07      	ldr	r3, [sp, #28]
 80066de:	0021      	movs	r1, r4
 80066e0:	9300      	str	r3, [sp, #0]
 80066e2:	9805      	ldr	r0, [sp, #20]
 80066e4:	9b06      	ldr	r3, [sp, #24]
 80066e6:	aa09      	add	r2, sp, #36	; 0x24
 80066e8:	f7ff fef2 	bl	80064d0 <_printf_common>
 80066ec:	3001      	adds	r0, #1
 80066ee:	d147      	bne.n	8006780 <_printf_i+0x1d0>
 80066f0:	2001      	movs	r0, #1
 80066f2:	4240      	negs	r0, r0
 80066f4:	b00b      	add	sp, #44	; 0x2c
 80066f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066f8:	2220      	movs	r2, #32
 80066fa:	6809      	ldr	r1, [r1, #0]
 80066fc:	430a      	orrs	r2, r1
 80066fe:	6022      	str	r2, [r4, #0]
 8006700:	2278      	movs	r2, #120	; 0x78
 8006702:	4932      	ldr	r1, [pc, #200]	; (80067cc <_printf_i+0x21c>)
 8006704:	9103      	str	r1, [sp, #12]
 8006706:	0021      	movs	r1, r4
 8006708:	3145      	adds	r1, #69	; 0x45
 800670a:	700a      	strb	r2, [r1, #0]
 800670c:	6819      	ldr	r1, [r3, #0]
 800670e:	6822      	ldr	r2, [r4, #0]
 8006710:	c920      	ldmia	r1!, {r5}
 8006712:	0610      	lsls	r0, r2, #24
 8006714:	d402      	bmi.n	800671c <_printf_i+0x16c>
 8006716:	0650      	lsls	r0, r2, #25
 8006718:	d500      	bpl.n	800671c <_printf_i+0x16c>
 800671a:	b2ad      	uxth	r5, r5
 800671c:	6019      	str	r1, [r3, #0]
 800671e:	07d3      	lsls	r3, r2, #31
 8006720:	d502      	bpl.n	8006728 <_printf_i+0x178>
 8006722:	2320      	movs	r3, #32
 8006724:	4313      	orrs	r3, r2
 8006726:	6023      	str	r3, [r4, #0]
 8006728:	2710      	movs	r7, #16
 800672a:	2d00      	cmp	r5, #0
 800672c:	d1a9      	bne.n	8006682 <_printf_i+0xd2>
 800672e:	2220      	movs	r2, #32
 8006730:	6823      	ldr	r3, [r4, #0]
 8006732:	4393      	bics	r3, r2
 8006734:	6023      	str	r3, [r4, #0]
 8006736:	e7a4      	b.n	8006682 <_printf_i+0xd2>
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	680d      	ldr	r5, [r1, #0]
 800673c:	1d10      	adds	r0, r2, #4
 800673e:	6949      	ldr	r1, [r1, #20]
 8006740:	6018      	str	r0, [r3, #0]
 8006742:	6813      	ldr	r3, [r2, #0]
 8006744:	062e      	lsls	r6, r5, #24
 8006746:	d501      	bpl.n	800674c <_printf_i+0x19c>
 8006748:	6019      	str	r1, [r3, #0]
 800674a:	e002      	b.n	8006752 <_printf_i+0x1a2>
 800674c:	066d      	lsls	r5, r5, #25
 800674e:	d5fb      	bpl.n	8006748 <_printf_i+0x198>
 8006750:	8019      	strh	r1, [r3, #0]
 8006752:	2300      	movs	r3, #0
 8006754:	9e04      	ldr	r6, [sp, #16]
 8006756:	6123      	str	r3, [r4, #16]
 8006758:	e7c0      	b.n	80066dc <_printf_i+0x12c>
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	1d11      	adds	r1, r2, #4
 800675e:	6019      	str	r1, [r3, #0]
 8006760:	6816      	ldr	r6, [r2, #0]
 8006762:	2100      	movs	r1, #0
 8006764:	0030      	movs	r0, r6
 8006766:	6862      	ldr	r2, [r4, #4]
 8006768:	f000 f858 	bl	800681c <memchr>
 800676c:	2800      	cmp	r0, #0
 800676e:	d001      	beq.n	8006774 <_printf_i+0x1c4>
 8006770:	1b80      	subs	r0, r0, r6
 8006772:	6060      	str	r0, [r4, #4]
 8006774:	6863      	ldr	r3, [r4, #4]
 8006776:	6123      	str	r3, [r4, #16]
 8006778:	2300      	movs	r3, #0
 800677a:	9a04      	ldr	r2, [sp, #16]
 800677c:	7013      	strb	r3, [r2, #0]
 800677e:	e7ad      	b.n	80066dc <_printf_i+0x12c>
 8006780:	0032      	movs	r2, r6
 8006782:	6923      	ldr	r3, [r4, #16]
 8006784:	9906      	ldr	r1, [sp, #24]
 8006786:	9805      	ldr	r0, [sp, #20]
 8006788:	9d07      	ldr	r5, [sp, #28]
 800678a:	47a8      	blx	r5
 800678c:	3001      	adds	r0, #1
 800678e:	d0af      	beq.n	80066f0 <_printf_i+0x140>
 8006790:	6823      	ldr	r3, [r4, #0]
 8006792:	079b      	lsls	r3, r3, #30
 8006794:	d415      	bmi.n	80067c2 <_printf_i+0x212>
 8006796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006798:	68e0      	ldr	r0, [r4, #12]
 800679a:	4298      	cmp	r0, r3
 800679c:	daaa      	bge.n	80066f4 <_printf_i+0x144>
 800679e:	0018      	movs	r0, r3
 80067a0:	e7a8      	b.n	80066f4 <_printf_i+0x144>
 80067a2:	0022      	movs	r2, r4
 80067a4:	2301      	movs	r3, #1
 80067a6:	9906      	ldr	r1, [sp, #24]
 80067a8:	9805      	ldr	r0, [sp, #20]
 80067aa:	9e07      	ldr	r6, [sp, #28]
 80067ac:	3219      	adds	r2, #25
 80067ae:	47b0      	blx	r6
 80067b0:	3001      	adds	r0, #1
 80067b2:	d09d      	beq.n	80066f0 <_printf_i+0x140>
 80067b4:	3501      	adds	r5, #1
 80067b6:	68e3      	ldr	r3, [r4, #12]
 80067b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067ba:	1a9b      	subs	r3, r3, r2
 80067bc:	42ab      	cmp	r3, r5
 80067be:	dcf0      	bgt.n	80067a2 <_printf_i+0x1f2>
 80067c0:	e7e9      	b.n	8006796 <_printf_i+0x1e6>
 80067c2:	2500      	movs	r5, #0
 80067c4:	e7f7      	b.n	80067b6 <_printf_i+0x206>
 80067c6:	46c0      	nop			; (mov r8, r8)
 80067c8:	08006ae5 	.word	0x08006ae5
 80067cc:	08006af6 	.word	0x08006af6

080067d0 <memmove>:
 80067d0:	b510      	push	{r4, lr}
 80067d2:	4288      	cmp	r0, r1
 80067d4:	d902      	bls.n	80067dc <memmove+0xc>
 80067d6:	188b      	adds	r3, r1, r2
 80067d8:	4298      	cmp	r0, r3
 80067da:	d303      	bcc.n	80067e4 <memmove+0x14>
 80067dc:	2300      	movs	r3, #0
 80067de:	e007      	b.n	80067f0 <memmove+0x20>
 80067e0:	5c8b      	ldrb	r3, [r1, r2]
 80067e2:	5483      	strb	r3, [r0, r2]
 80067e4:	3a01      	subs	r2, #1
 80067e6:	d2fb      	bcs.n	80067e0 <memmove+0x10>
 80067e8:	bd10      	pop	{r4, pc}
 80067ea:	5ccc      	ldrb	r4, [r1, r3]
 80067ec:	54c4      	strb	r4, [r0, r3]
 80067ee:	3301      	adds	r3, #1
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d1fa      	bne.n	80067ea <memmove+0x1a>
 80067f4:	e7f8      	b.n	80067e8 <memmove+0x18>
	...

080067f8 <_sbrk_r>:
 80067f8:	2300      	movs	r3, #0
 80067fa:	b570      	push	{r4, r5, r6, lr}
 80067fc:	4d06      	ldr	r5, [pc, #24]	; (8006818 <_sbrk_r+0x20>)
 80067fe:	0004      	movs	r4, r0
 8006800:	0008      	movs	r0, r1
 8006802:	602b      	str	r3, [r5, #0]
 8006804:	f7fb fdfa 	bl	80023fc <_sbrk>
 8006808:	1c43      	adds	r3, r0, #1
 800680a:	d103      	bne.n	8006814 <_sbrk_r+0x1c>
 800680c:	682b      	ldr	r3, [r5, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d000      	beq.n	8006814 <_sbrk_r+0x1c>
 8006812:	6023      	str	r3, [r4, #0]
 8006814:	bd70      	pop	{r4, r5, r6, pc}
 8006816:	46c0      	nop			; (mov r8, r8)
 8006818:	20000294 	.word	0x20000294

0800681c <memchr>:
 800681c:	b2c9      	uxtb	r1, r1
 800681e:	1882      	adds	r2, r0, r2
 8006820:	4290      	cmp	r0, r2
 8006822:	d101      	bne.n	8006828 <memchr+0xc>
 8006824:	2000      	movs	r0, #0
 8006826:	4770      	bx	lr
 8006828:	7803      	ldrb	r3, [r0, #0]
 800682a:	428b      	cmp	r3, r1
 800682c:	d0fb      	beq.n	8006826 <memchr+0xa>
 800682e:	3001      	adds	r0, #1
 8006830:	e7f6      	b.n	8006820 <memchr+0x4>

08006832 <memcpy>:
 8006832:	2300      	movs	r3, #0
 8006834:	b510      	push	{r4, lr}
 8006836:	429a      	cmp	r2, r3
 8006838:	d100      	bne.n	800683c <memcpy+0xa>
 800683a:	bd10      	pop	{r4, pc}
 800683c:	5ccc      	ldrb	r4, [r1, r3]
 800683e:	54c4      	strb	r4, [r0, r3]
 8006840:	3301      	adds	r3, #1
 8006842:	e7f8      	b.n	8006836 <memcpy+0x4>

08006844 <_realloc_r>:
 8006844:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006846:	0007      	movs	r7, r0
 8006848:	000e      	movs	r6, r1
 800684a:	0014      	movs	r4, r2
 800684c:	2900      	cmp	r1, #0
 800684e:	d105      	bne.n	800685c <_realloc_r+0x18>
 8006850:	0011      	movs	r1, r2
 8006852:	f7ff fc49 	bl	80060e8 <_malloc_r>
 8006856:	0005      	movs	r5, r0
 8006858:	0028      	movs	r0, r5
 800685a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800685c:	2a00      	cmp	r2, #0
 800685e:	d103      	bne.n	8006868 <_realloc_r+0x24>
 8006860:	f7ff fbd6 	bl	8006010 <_free_r>
 8006864:	0025      	movs	r5, r4
 8006866:	e7f7      	b.n	8006858 <_realloc_r+0x14>
 8006868:	f000 f81b 	bl	80068a2 <_malloc_usable_size_r>
 800686c:	9001      	str	r0, [sp, #4]
 800686e:	4284      	cmp	r4, r0
 8006870:	d803      	bhi.n	800687a <_realloc_r+0x36>
 8006872:	0035      	movs	r5, r6
 8006874:	0843      	lsrs	r3, r0, #1
 8006876:	42a3      	cmp	r3, r4
 8006878:	d3ee      	bcc.n	8006858 <_realloc_r+0x14>
 800687a:	0021      	movs	r1, r4
 800687c:	0038      	movs	r0, r7
 800687e:	f7ff fc33 	bl	80060e8 <_malloc_r>
 8006882:	1e05      	subs	r5, r0, #0
 8006884:	d0e8      	beq.n	8006858 <_realloc_r+0x14>
 8006886:	9b01      	ldr	r3, [sp, #4]
 8006888:	0022      	movs	r2, r4
 800688a:	429c      	cmp	r4, r3
 800688c:	d900      	bls.n	8006890 <_realloc_r+0x4c>
 800688e:	001a      	movs	r2, r3
 8006890:	0031      	movs	r1, r6
 8006892:	0028      	movs	r0, r5
 8006894:	f7ff ffcd 	bl	8006832 <memcpy>
 8006898:	0031      	movs	r1, r6
 800689a:	0038      	movs	r0, r7
 800689c:	f7ff fbb8 	bl	8006010 <_free_r>
 80068a0:	e7da      	b.n	8006858 <_realloc_r+0x14>

080068a2 <_malloc_usable_size_r>:
 80068a2:	1f0b      	subs	r3, r1, #4
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	1f18      	subs	r0, r3, #4
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	da01      	bge.n	80068b0 <_malloc_usable_size_r+0xe>
 80068ac:	580b      	ldr	r3, [r1, r0]
 80068ae:	18c0      	adds	r0, r0, r3
 80068b0:	4770      	bx	lr
	...

080068b4 <_init>:
 80068b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068b6:	46c0      	nop			; (mov r8, r8)
 80068b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ba:	bc08      	pop	{r3}
 80068bc:	469e      	mov	lr, r3
 80068be:	4770      	bx	lr

080068c0 <_fini>:
 80068c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068c2:	46c0      	nop			; (mov r8, r8)
 80068c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068c6:	bc08      	pop	{r3}
 80068c8:	469e      	mov	lr, r3
 80068ca:	4770      	bx	lr
