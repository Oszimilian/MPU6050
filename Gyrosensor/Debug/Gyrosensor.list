
Gyrosensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6d4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  0800a798  0800a798  0001a798  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800add8  0800add8  00020278  2**0
                  CONTENTS
  4 .ARM          00000008  0800add8  0800add8  0001add8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ade0  0800ade0  00020278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ade0  0800ade0  0001ade0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ade4  0800ade4  0001ade4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  0800ade8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000278  0800b060  00020278  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  0800b060  00020520  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d5ca  00000000  00000000  000202e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020d6  00000000  00000000  0002d8ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b88  00000000  00000000  0002f988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008f6  00000000  00000000  00030510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015b43  00000000  00000000  00030e06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eeed  00000000  00000000  00046949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00080c38  00000000  00000000  00055836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003bb0  00000000  00000000  000d6470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000da020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000278 	.word	0x20000278
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a77c 	.word	0x0800a77c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000027c 	.word	0x2000027c
 8000104:	0800a77c 	.word	0x0800a77c

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_shi>:
 800011c:	b403      	push	{r0, r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0040      	lsls	r0, r0, #1
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	5e09      	ldrsh	r1, [r1, r0]
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	448e      	add	lr, r1
 800012c:	bc03      	pop	{r0, r1}
 800012e:	4770      	bx	lr

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f8f0 	bl	8000418 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__divsi3>:
 8000244:	4603      	mov	r3, r0
 8000246:	430b      	orrs	r3, r1
 8000248:	d47f      	bmi.n	800034a <__divsi3+0x106>
 800024a:	2200      	movs	r2, #0
 800024c:	0843      	lsrs	r3, r0, #1
 800024e:	428b      	cmp	r3, r1
 8000250:	d374      	bcc.n	800033c <__divsi3+0xf8>
 8000252:	0903      	lsrs	r3, r0, #4
 8000254:	428b      	cmp	r3, r1
 8000256:	d35f      	bcc.n	8000318 <__divsi3+0xd4>
 8000258:	0a03      	lsrs	r3, r0, #8
 800025a:	428b      	cmp	r3, r1
 800025c:	d344      	bcc.n	80002e8 <__divsi3+0xa4>
 800025e:	0b03      	lsrs	r3, r0, #12
 8000260:	428b      	cmp	r3, r1
 8000262:	d328      	bcc.n	80002b6 <__divsi3+0x72>
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d30d      	bcc.n	8000286 <__divsi3+0x42>
 800026a:	22ff      	movs	r2, #255	; 0xff
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	ba12      	rev	r2, r2
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__divsi3+0x38>
 8000276:	1212      	asrs	r2, r2, #8
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	d065      	beq.n	8000348 <__divsi3+0x104>
 800027c:	0b03      	lsrs	r3, r0, #12
 800027e:	428b      	cmp	r3, r1
 8000280:	d319      	bcc.n	80002b6 <__divsi3+0x72>
 8000282:	e000      	b.n	8000286 <__divsi3+0x42>
 8000284:	0a09      	lsrs	r1, r1, #8
 8000286:	0bc3      	lsrs	r3, r0, #15
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x4c>
 800028c:	03cb      	lsls	r3, r1, #15
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b83      	lsrs	r3, r0, #14
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x58>
 8000298:	038b      	lsls	r3, r1, #14
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b43      	lsrs	r3, r0, #13
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x64>
 80002a4:	034b      	lsls	r3, r1, #13
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b03      	lsrs	r3, r0, #12
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x70>
 80002b0:	030b      	lsls	r3, r1, #12
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0ac3      	lsrs	r3, r0, #11
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x7c>
 80002bc:	02cb      	lsls	r3, r1, #11
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a83      	lsrs	r3, r0, #10
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x88>
 80002c8:	028b      	lsls	r3, r1, #10
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a43      	lsrs	r3, r0, #9
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x94>
 80002d4:	024b      	lsls	r3, r1, #9
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a03      	lsrs	r3, r0, #8
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0xa0>
 80002e0:	020b      	lsls	r3, r1, #8
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	d2cd      	bcs.n	8000284 <__divsi3+0x40>
 80002e8:	09c3      	lsrs	r3, r0, #7
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xae>
 80002ee:	01cb      	lsls	r3, r1, #7
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0983      	lsrs	r3, r0, #6
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xba>
 80002fa:	018b      	lsls	r3, r1, #6
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0943      	lsrs	r3, r0, #5
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xc6>
 8000306:	014b      	lsls	r3, r1, #5
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0903      	lsrs	r3, r0, #4
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xd2>
 8000312:	010b      	lsls	r3, r1, #4
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	08c3      	lsrs	r3, r0, #3
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xde>
 800031e:	00cb      	lsls	r3, r1, #3
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0883      	lsrs	r3, r0, #2
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xea>
 800032a:	008b      	lsls	r3, r1, #2
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0843      	lsrs	r3, r0, #1
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xf6>
 8000336:	004b      	lsls	r3, r1, #1
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	1a41      	subs	r1, r0, r1
 800033e:	d200      	bcs.n	8000342 <__divsi3+0xfe>
 8000340:	4601      	mov	r1, r0
 8000342:	4152      	adcs	r2, r2
 8000344:	4610      	mov	r0, r2
 8000346:	4770      	bx	lr
 8000348:	e05d      	b.n	8000406 <__divsi3+0x1c2>
 800034a:	0fca      	lsrs	r2, r1, #31
 800034c:	d000      	beq.n	8000350 <__divsi3+0x10c>
 800034e:	4249      	negs	r1, r1
 8000350:	1003      	asrs	r3, r0, #32
 8000352:	d300      	bcc.n	8000356 <__divsi3+0x112>
 8000354:	4240      	negs	r0, r0
 8000356:	4053      	eors	r3, r2
 8000358:	2200      	movs	r2, #0
 800035a:	469c      	mov	ip, r3
 800035c:	0903      	lsrs	r3, r0, #4
 800035e:	428b      	cmp	r3, r1
 8000360:	d32d      	bcc.n	80003be <__divsi3+0x17a>
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d312      	bcc.n	800038e <__divsi3+0x14a>
 8000368:	22fc      	movs	r2, #252	; 0xfc
 800036a:	0189      	lsls	r1, r1, #6
 800036c:	ba12      	rev	r2, r2
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d30c      	bcc.n	800038e <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d308      	bcc.n	800038e <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d304      	bcc.n	800038e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	d03a      	beq.n	80003fe <__divsi3+0x1ba>
 8000388:	1192      	asrs	r2, r2, #6
 800038a:	e000      	b.n	800038e <__divsi3+0x14a>
 800038c:	0989      	lsrs	r1, r1, #6
 800038e:	09c3      	lsrs	r3, r0, #7
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x154>
 8000394:	01cb      	lsls	r3, r1, #7
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0983      	lsrs	r3, r0, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x160>
 80003a0:	018b      	lsls	r3, r1, #6
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0943      	lsrs	r3, r0, #5
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x16c>
 80003ac:	014b      	lsls	r3, r1, #5
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0903      	lsrs	r3, r0, #4
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x178>
 80003b8:	010b      	lsls	r3, r1, #4
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	08c3      	lsrs	r3, r0, #3
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x184>
 80003c4:	00cb      	lsls	r3, r1, #3
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0883      	lsrs	r3, r0, #2
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x190>
 80003d0:	008b      	lsls	r3, r1, #2
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	d2d9      	bcs.n	800038c <__divsi3+0x148>
 80003d8:	0843      	lsrs	r3, r0, #1
 80003da:	428b      	cmp	r3, r1
 80003dc:	d301      	bcc.n	80003e2 <__divsi3+0x19e>
 80003de:	004b      	lsls	r3, r1, #1
 80003e0:	1ac0      	subs	r0, r0, r3
 80003e2:	4152      	adcs	r2, r2
 80003e4:	1a41      	subs	r1, r0, r1
 80003e6:	d200      	bcs.n	80003ea <__divsi3+0x1a6>
 80003e8:	4601      	mov	r1, r0
 80003ea:	4663      	mov	r3, ip
 80003ec:	4152      	adcs	r2, r2
 80003ee:	105b      	asrs	r3, r3, #1
 80003f0:	4610      	mov	r0, r2
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x1b4>
 80003f4:	4240      	negs	r0, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d500      	bpl.n	80003fc <__divsi3+0x1b8>
 80003fa:	4249      	negs	r1, r1
 80003fc:	4770      	bx	lr
 80003fe:	4663      	mov	r3, ip
 8000400:	105b      	asrs	r3, r3, #1
 8000402:	d300      	bcc.n	8000406 <__divsi3+0x1c2>
 8000404:	4240      	negs	r0, r0
 8000406:	b501      	push	{r0, lr}
 8000408:	2000      	movs	r0, #0
 800040a:	f000 f805 	bl	8000418 <__aeabi_idiv0>
 800040e:	bd02      	pop	{r1, pc}

08000410 <__aeabi_idivmod>:
 8000410:	2900      	cmp	r1, #0
 8000412:	d0f8      	beq.n	8000406 <__divsi3+0x1c2>
 8000414:	e716      	b.n	8000244 <__divsi3>
 8000416:	4770      	bx	lr

08000418 <__aeabi_idiv0>:
 8000418:	4770      	bx	lr
 800041a:	46c0      	nop			; (mov r8, r8)

0800041c <__aeabi_cdrcmple>:
 800041c:	4684      	mov	ip, r0
 800041e:	0010      	movs	r0, r2
 8000420:	4662      	mov	r2, ip
 8000422:	468c      	mov	ip, r1
 8000424:	0019      	movs	r1, r3
 8000426:	4663      	mov	r3, ip
 8000428:	e000      	b.n	800042c <__aeabi_cdcmpeq>
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdcmpeq>:
 800042c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042e:	f001 fb4f 	bl	8001ad0 <__ledf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	d401      	bmi.n	800043a <__aeabi_cdcmpeq+0xe>
 8000436:	2100      	movs	r1, #0
 8000438:	42c8      	cmn	r0, r1
 800043a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800043c <__aeabi_dcmpeq>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f001 fa9f 	bl	8001980 <__eqdf2>
 8000442:	4240      	negs	r0, r0
 8000444:	3001      	adds	r0, #1
 8000446:	bd10      	pop	{r4, pc}

08000448 <__aeabi_dcmplt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fb41 	bl	8001ad0 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	db01      	blt.n	8000456 <__aeabi_dcmplt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmple>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fb37 	bl	8001ad0 <__ledf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	dd01      	ble.n	800046a <__aeabi_dcmple+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dcmpgt>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f001 fac7 	bl	8001a04 <__gedf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	dc01      	bgt.n	800047e <__aeabi_dcmpgt+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_dcmpge>:
 8000484:	b510      	push	{r4, lr}
 8000486:	f001 fabd 	bl	8001a04 <__gedf2>
 800048a:	2800      	cmp	r0, #0
 800048c:	da01      	bge.n	8000492 <__aeabi_dcmpge+0xe>
 800048e:	2000      	movs	r0, #0
 8000490:	bd10      	pop	{r4, pc}
 8000492:	2001      	movs	r0, #1
 8000494:	bd10      	pop	{r4, pc}
 8000496:	46c0      	nop			; (mov r8, r8)

08000498 <__aeabi_uldivmod>:
 8000498:	2b00      	cmp	r3, #0
 800049a:	d111      	bne.n	80004c0 <__aeabi_uldivmod+0x28>
 800049c:	2a00      	cmp	r2, #0
 800049e:	d10f      	bne.n	80004c0 <__aeabi_uldivmod+0x28>
 80004a0:	2900      	cmp	r1, #0
 80004a2:	d100      	bne.n	80004a6 <__aeabi_uldivmod+0xe>
 80004a4:	2800      	cmp	r0, #0
 80004a6:	d002      	beq.n	80004ae <__aeabi_uldivmod+0x16>
 80004a8:	2100      	movs	r1, #0
 80004aa:	43c9      	mvns	r1, r1
 80004ac:	0008      	movs	r0, r1
 80004ae:	b407      	push	{r0, r1, r2}
 80004b0:	4802      	ldr	r0, [pc, #8]	; (80004bc <__aeabi_uldivmod+0x24>)
 80004b2:	a102      	add	r1, pc, #8	; (adr r1, 80004bc <__aeabi_uldivmod+0x24>)
 80004b4:	1840      	adds	r0, r0, r1
 80004b6:	9002      	str	r0, [sp, #8]
 80004b8:	bd03      	pop	{r0, r1, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	ffffff5d 	.word	0xffffff5d
 80004c0:	b403      	push	{r0, r1}
 80004c2:	4668      	mov	r0, sp
 80004c4:	b501      	push	{r0, lr}
 80004c6:	9802      	ldr	r0, [sp, #8]
 80004c8:	f000 f834 	bl	8000534 <__udivmoddi4>
 80004cc:	9b01      	ldr	r3, [sp, #4]
 80004ce:	469e      	mov	lr, r3
 80004d0:	b002      	add	sp, #8
 80004d2:	bc0c      	pop	{r2, r3}
 80004d4:	4770      	bx	lr
 80004d6:	46c0      	nop			; (mov r8, r8)

080004d8 <__aeabi_lmul>:
 80004d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004da:	46ce      	mov	lr, r9
 80004dc:	4699      	mov	r9, r3
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	469c      	mov	ip, r3
 80004e2:	0413      	lsls	r3, r2, #16
 80004e4:	4647      	mov	r7, r8
 80004e6:	0c1b      	lsrs	r3, r3, #16
 80004e8:	001d      	movs	r5, r3
 80004ea:	000e      	movs	r6, r1
 80004ec:	4661      	mov	r1, ip
 80004ee:	0404      	lsls	r4, r0, #16
 80004f0:	0c24      	lsrs	r4, r4, #16
 80004f2:	b580      	push	{r7, lr}
 80004f4:	0007      	movs	r7, r0
 80004f6:	0c10      	lsrs	r0, r2, #16
 80004f8:	434b      	muls	r3, r1
 80004fa:	4365      	muls	r5, r4
 80004fc:	4341      	muls	r1, r0
 80004fe:	4360      	muls	r0, r4
 8000500:	0c2c      	lsrs	r4, r5, #16
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	1820      	adds	r0, r4, r0
 8000506:	468c      	mov	ip, r1
 8000508:	4283      	cmp	r3, r0
 800050a:	d903      	bls.n	8000514 <__aeabi_lmul+0x3c>
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	025b      	lsls	r3, r3, #9
 8000510:	4698      	mov	r8, r3
 8000512:	44c4      	add	ip, r8
 8000514:	4649      	mov	r1, r9
 8000516:	4379      	muls	r1, r7
 8000518:	4356      	muls	r6, r2
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	042d      	lsls	r5, r5, #16
 800051e:	0c2d      	lsrs	r5, r5, #16
 8000520:	1989      	adds	r1, r1, r6
 8000522:	4463      	add	r3, ip
 8000524:	0400      	lsls	r0, r0, #16
 8000526:	1940      	adds	r0, r0, r5
 8000528:	18c9      	adds	r1, r1, r3
 800052a:	bcc0      	pop	{r6, r7}
 800052c:	46b9      	mov	r9, r7
 800052e:	46b0      	mov	r8, r6
 8000530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000532:	46c0      	nop			; (mov r8, r8)

08000534 <__udivmoddi4>:
 8000534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000536:	4657      	mov	r7, sl
 8000538:	464e      	mov	r6, r9
 800053a:	4645      	mov	r5, r8
 800053c:	46de      	mov	lr, fp
 800053e:	b5e0      	push	{r5, r6, r7, lr}
 8000540:	0004      	movs	r4, r0
 8000542:	000d      	movs	r5, r1
 8000544:	4692      	mov	sl, r2
 8000546:	4699      	mov	r9, r3
 8000548:	b083      	sub	sp, #12
 800054a:	428b      	cmp	r3, r1
 800054c:	d830      	bhi.n	80005b0 <__udivmoddi4+0x7c>
 800054e:	d02d      	beq.n	80005ac <__udivmoddi4+0x78>
 8000550:	4649      	mov	r1, r9
 8000552:	4650      	mov	r0, sl
 8000554:	f002 fa2c 	bl	80029b0 <__clzdi2>
 8000558:	0029      	movs	r1, r5
 800055a:	0006      	movs	r6, r0
 800055c:	0020      	movs	r0, r4
 800055e:	f002 fa27 	bl	80029b0 <__clzdi2>
 8000562:	1a33      	subs	r3, r6, r0
 8000564:	4698      	mov	r8, r3
 8000566:	3b20      	subs	r3, #32
 8000568:	d434      	bmi.n	80005d4 <__udivmoddi4+0xa0>
 800056a:	469b      	mov	fp, r3
 800056c:	4653      	mov	r3, sl
 800056e:	465a      	mov	r2, fp
 8000570:	4093      	lsls	r3, r2
 8000572:	4642      	mov	r2, r8
 8000574:	001f      	movs	r7, r3
 8000576:	4653      	mov	r3, sl
 8000578:	4093      	lsls	r3, r2
 800057a:	001e      	movs	r6, r3
 800057c:	42af      	cmp	r7, r5
 800057e:	d83b      	bhi.n	80005f8 <__udivmoddi4+0xc4>
 8000580:	42af      	cmp	r7, r5
 8000582:	d100      	bne.n	8000586 <__udivmoddi4+0x52>
 8000584:	e079      	b.n	800067a <__udivmoddi4+0x146>
 8000586:	465b      	mov	r3, fp
 8000588:	1ba4      	subs	r4, r4, r6
 800058a:	41bd      	sbcs	r5, r7
 800058c:	2b00      	cmp	r3, #0
 800058e:	da00      	bge.n	8000592 <__udivmoddi4+0x5e>
 8000590:	e076      	b.n	8000680 <__udivmoddi4+0x14c>
 8000592:	2200      	movs	r2, #0
 8000594:	2300      	movs	r3, #0
 8000596:	9200      	str	r2, [sp, #0]
 8000598:	9301      	str	r3, [sp, #4]
 800059a:	2301      	movs	r3, #1
 800059c:	465a      	mov	r2, fp
 800059e:	4093      	lsls	r3, r2
 80005a0:	9301      	str	r3, [sp, #4]
 80005a2:	2301      	movs	r3, #1
 80005a4:	4642      	mov	r2, r8
 80005a6:	4093      	lsls	r3, r2
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	e029      	b.n	8000600 <__udivmoddi4+0xcc>
 80005ac:	4282      	cmp	r2, r0
 80005ae:	d9cf      	bls.n	8000550 <__udivmoddi4+0x1c>
 80005b0:	2200      	movs	r2, #0
 80005b2:	2300      	movs	r3, #0
 80005b4:	9200      	str	r2, [sp, #0]
 80005b6:	9301      	str	r3, [sp, #4]
 80005b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <__udivmoddi4+0x8e>
 80005be:	601c      	str	r4, [r3, #0]
 80005c0:	605d      	str	r5, [r3, #4]
 80005c2:	9800      	ldr	r0, [sp, #0]
 80005c4:	9901      	ldr	r1, [sp, #4]
 80005c6:	b003      	add	sp, #12
 80005c8:	bcf0      	pop	{r4, r5, r6, r7}
 80005ca:	46bb      	mov	fp, r7
 80005cc:	46b2      	mov	sl, r6
 80005ce:	46a9      	mov	r9, r5
 80005d0:	46a0      	mov	r8, r4
 80005d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005d4:	4642      	mov	r2, r8
 80005d6:	469b      	mov	fp, r3
 80005d8:	2320      	movs	r3, #32
 80005da:	1a9b      	subs	r3, r3, r2
 80005dc:	4652      	mov	r2, sl
 80005de:	40da      	lsrs	r2, r3
 80005e0:	4641      	mov	r1, r8
 80005e2:	0013      	movs	r3, r2
 80005e4:	464a      	mov	r2, r9
 80005e6:	408a      	lsls	r2, r1
 80005e8:	0017      	movs	r7, r2
 80005ea:	4642      	mov	r2, r8
 80005ec:	431f      	orrs	r7, r3
 80005ee:	4653      	mov	r3, sl
 80005f0:	4093      	lsls	r3, r2
 80005f2:	001e      	movs	r6, r3
 80005f4:	42af      	cmp	r7, r5
 80005f6:	d9c3      	bls.n	8000580 <__udivmoddi4+0x4c>
 80005f8:	2200      	movs	r2, #0
 80005fa:	2300      	movs	r3, #0
 80005fc:	9200      	str	r2, [sp, #0]
 80005fe:	9301      	str	r3, [sp, #4]
 8000600:	4643      	mov	r3, r8
 8000602:	2b00      	cmp	r3, #0
 8000604:	d0d8      	beq.n	80005b8 <__udivmoddi4+0x84>
 8000606:	07fb      	lsls	r3, r7, #31
 8000608:	0872      	lsrs	r2, r6, #1
 800060a:	431a      	orrs	r2, r3
 800060c:	4646      	mov	r6, r8
 800060e:	087b      	lsrs	r3, r7, #1
 8000610:	e00e      	b.n	8000630 <__udivmoddi4+0xfc>
 8000612:	42ab      	cmp	r3, r5
 8000614:	d101      	bne.n	800061a <__udivmoddi4+0xe6>
 8000616:	42a2      	cmp	r2, r4
 8000618:	d80c      	bhi.n	8000634 <__udivmoddi4+0x100>
 800061a:	1aa4      	subs	r4, r4, r2
 800061c:	419d      	sbcs	r5, r3
 800061e:	2001      	movs	r0, #1
 8000620:	1924      	adds	r4, r4, r4
 8000622:	416d      	adcs	r5, r5
 8000624:	2100      	movs	r1, #0
 8000626:	3e01      	subs	r6, #1
 8000628:	1824      	adds	r4, r4, r0
 800062a:	414d      	adcs	r5, r1
 800062c:	2e00      	cmp	r6, #0
 800062e:	d006      	beq.n	800063e <__udivmoddi4+0x10a>
 8000630:	42ab      	cmp	r3, r5
 8000632:	d9ee      	bls.n	8000612 <__udivmoddi4+0xde>
 8000634:	3e01      	subs	r6, #1
 8000636:	1924      	adds	r4, r4, r4
 8000638:	416d      	adcs	r5, r5
 800063a:	2e00      	cmp	r6, #0
 800063c:	d1f8      	bne.n	8000630 <__udivmoddi4+0xfc>
 800063e:	9800      	ldr	r0, [sp, #0]
 8000640:	9901      	ldr	r1, [sp, #4]
 8000642:	465b      	mov	r3, fp
 8000644:	1900      	adds	r0, r0, r4
 8000646:	4169      	adcs	r1, r5
 8000648:	2b00      	cmp	r3, #0
 800064a:	db24      	blt.n	8000696 <__udivmoddi4+0x162>
 800064c:	002b      	movs	r3, r5
 800064e:	465a      	mov	r2, fp
 8000650:	4644      	mov	r4, r8
 8000652:	40d3      	lsrs	r3, r2
 8000654:	002a      	movs	r2, r5
 8000656:	40e2      	lsrs	r2, r4
 8000658:	001c      	movs	r4, r3
 800065a:	465b      	mov	r3, fp
 800065c:	0015      	movs	r5, r2
 800065e:	2b00      	cmp	r3, #0
 8000660:	db2a      	blt.n	80006b8 <__udivmoddi4+0x184>
 8000662:	0026      	movs	r6, r4
 8000664:	409e      	lsls	r6, r3
 8000666:	0033      	movs	r3, r6
 8000668:	0026      	movs	r6, r4
 800066a:	4647      	mov	r7, r8
 800066c:	40be      	lsls	r6, r7
 800066e:	0032      	movs	r2, r6
 8000670:	1a80      	subs	r0, r0, r2
 8000672:	4199      	sbcs	r1, r3
 8000674:	9000      	str	r0, [sp, #0]
 8000676:	9101      	str	r1, [sp, #4]
 8000678:	e79e      	b.n	80005b8 <__udivmoddi4+0x84>
 800067a:	42a3      	cmp	r3, r4
 800067c:	d8bc      	bhi.n	80005f8 <__udivmoddi4+0xc4>
 800067e:	e782      	b.n	8000586 <__udivmoddi4+0x52>
 8000680:	4642      	mov	r2, r8
 8000682:	2320      	movs	r3, #32
 8000684:	2100      	movs	r1, #0
 8000686:	1a9b      	subs	r3, r3, r2
 8000688:	2200      	movs	r2, #0
 800068a:	9100      	str	r1, [sp, #0]
 800068c:	9201      	str	r2, [sp, #4]
 800068e:	2201      	movs	r2, #1
 8000690:	40da      	lsrs	r2, r3
 8000692:	9201      	str	r2, [sp, #4]
 8000694:	e785      	b.n	80005a2 <__udivmoddi4+0x6e>
 8000696:	4642      	mov	r2, r8
 8000698:	2320      	movs	r3, #32
 800069a:	1a9b      	subs	r3, r3, r2
 800069c:	002a      	movs	r2, r5
 800069e:	4646      	mov	r6, r8
 80006a0:	409a      	lsls	r2, r3
 80006a2:	0023      	movs	r3, r4
 80006a4:	40f3      	lsrs	r3, r6
 80006a6:	4644      	mov	r4, r8
 80006a8:	4313      	orrs	r3, r2
 80006aa:	002a      	movs	r2, r5
 80006ac:	40e2      	lsrs	r2, r4
 80006ae:	001c      	movs	r4, r3
 80006b0:	465b      	mov	r3, fp
 80006b2:	0015      	movs	r5, r2
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	dad4      	bge.n	8000662 <__udivmoddi4+0x12e>
 80006b8:	4642      	mov	r2, r8
 80006ba:	002f      	movs	r7, r5
 80006bc:	2320      	movs	r3, #32
 80006be:	0026      	movs	r6, r4
 80006c0:	4097      	lsls	r7, r2
 80006c2:	1a9b      	subs	r3, r3, r2
 80006c4:	40de      	lsrs	r6, r3
 80006c6:	003b      	movs	r3, r7
 80006c8:	4333      	orrs	r3, r6
 80006ca:	e7cd      	b.n	8000668 <__udivmoddi4+0x134>

080006cc <__aeabi_fadd>:
 80006cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ce:	4647      	mov	r7, r8
 80006d0:	46ce      	mov	lr, r9
 80006d2:	024a      	lsls	r2, r1, #9
 80006d4:	0243      	lsls	r3, r0, #9
 80006d6:	0045      	lsls	r5, r0, #1
 80006d8:	0fc4      	lsrs	r4, r0, #31
 80006da:	0a50      	lsrs	r0, r2, #9
 80006dc:	4680      	mov	r8, r0
 80006de:	0048      	lsls	r0, r1, #1
 80006e0:	0a5b      	lsrs	r3, r3, #9
 80006e2:	0e00      	lsrs	r0, r0, #24
 80006e4:	0992      	lsrs	r2, r2, #6
 80006e6:	4694      	mov	ip, r2
 80006e8:	b580      	push	{r7, lr}
 80006ea:	001e      	movs	r6, r3
 80006ec:	4681      	mov	r9, r0
 80006ee:	0002      	movs	r2, r0
 80006f0:	0e2d      	lsrs	r5, r5, #24
 80006f2:	00df      	lsls	r7, r3, #3
 80006f4:	0fc9      	lsrs	r1, r1, #31
 80006f6:	428c      	cmp	r4, r1
 80006f8:	d024      	beq.n	8000744 <__aeabi_fadd+0x78>
 80006fa:	1a28      	subs	r0, r5, r0
 80006fc:	2800      	cmp	r0, #0
 80006fe:	dd0e      	ble.n	800071e <__aeabi_fadd+0x52>
 8000700:	2a00      	cmp	r2, #0
 8000702:	d13e      	bne.n	8000782 <__aeabi_fadd+0xb6>
 8000704:	4662      	mov	r2, ip
 8000706:	2a00      	cmp	r2, #0
 8000708:	d100      	bne.n	800070c <__aeabi_fadd+0x40>
 800070a:	e0fd      	b.n	8000908 <__aeabi_fadd+0x23c>
 800070c:	1e42      	subs	r2, r0, #1
 800070e:	2801      	cmp	r0, #1
 8000710:	d100      	bne.n	8000714 <__aeabi_fadd+0x48>
 8000712:	e137      	b.n	8000984 <__aeabi_fadd+0x2b8>
 8000714:	28ff      	cmp	r0, #255	; 0xff
 8000716:	d100      	bne.n	800071a <__aeabi_fadd+0x4e>
 8000718:	e0a9      	b.n	800086e <__aeabi_fadd+0x1a2>
 800071a:	0010      	movs	r0, r2
 800071c:	e039      	b.n	8000792 <__aeabi_fadd+0xc6>
 800071e:	2800      	cmp	r0, #0
 8000720:	d063      	beq.n	80007ea <__aeabi_fadd+0x11e>
 8000722:	464b      	mov	r3, r9
 8000724:	1b52      	subs	r2, r2, r5
 8000726:	2d00      	cmp	r5, #0
 8000728:	d000      	beq.n	800072c <__aeabi_fadd+0x60>
 800072a:	e0e0      	b.n	80008ee <__aeabi_fadd+0x222>
 800072c:	2f00      	cmp	r7, #0
 800072e:	d100      	bne.n	8000732 <__aeabi_fadd+0x66>
 8000730:	e0ce      	b.n	80008d0 <__aeabi_fadd+0x204>
 8000732:	1e53      	subs	r3, r2, #1
 8000734:	2a01      	cmp	r2, #1
 8000736:	d100      	bne.n	800073a <__aeabi_fadd+0x6e>
 8000738:	e155      	b.n	80009e6 <__aeabi_fadd+0x31a>
 800073a:	2aff      	cmp	r2, #255	; 0xff
 800073c:	d100      	bne.n	8000740 <__aeabi_fadd+0x74>
 800073e:	e094      	b.n	800086a <__aeabi_fadd+0x19e>
 8000740:	001a      	movs	r2, r3
 8000742:	e0d9      	b.n	80008f8 <__aeabi_fadd+0x22c>
 8000744:	1a2a      	subs	r2, r5, r0
 8000746:	2a00      	cmp	r2, #0
 8000748:	dc00      	bgt.n	800074c <__aeabi_fadd+0x80>
 800074a:	e099      	b.n	8000880 <__aeabi_fadd+0x1b4>
 800074c:	2800      	cmp	r0, #0
 800074e:	d062      	beq.n	8000816 <__aeabi_fadd+0x14a>
 8000750:	2dff      	cmp	r5, #255	; 0xff
 8000752:	d100      	bne.n	8000756 <__aeabi_fadd+0x8a>
 8000754:	e08b      	b.n	800086e <__aeabi_fadd+0x1a2>
 8000756:	2380      	movs	r3, #128	; 0x80
 8000758:	4661      	mov	r1, ip
 800075a:	04db      	lsls	r3, r3, #19
 800075c:	4319      	orrs	r1, r3
 800075e:	468c      	mov	ip, r1
 8000760:	2a1b      	cmp	r2, #27
 8000762:	dc00      	bgt.n	8000766 <__aeabi_fadd+0x9a>
 8000764:	e0d2      	b.n	800090c <__aeabi_fadd+0x240>
 8000766:	2301      	movs	r3, #1
 8000768:	19db      	adds	r3, r3, r7
 800076a:	015a      	lsls	r2, r3, #5
 800076c:	d56a      	bpl.n	8000844 <__aeabi_fadd+0x178>
 800076e:	3501      	adds	r5, #1
 8000770:	2dff      	cmp	r5, #255	; 0xff
 8000772:	d05b      	beq.n	800082c <__aeabi_fadd+0x160>
 8000774:	2201      	movs	r2, #1
 8000776:	49a3      	ldr	r1, [pc, #652]	; (8000a04 <__aeabi_fadd+0x338>)
 8000778:	401a      	ands	r2, r3
 800077a:	085b      	lsrs	r3, r3, #1
 800077c:	400b      	ands	r3, r1
 800077e:	4313      	orrs	r3, r2
 8000780:	e01c      	b.n	80007bc <__aeabi_fadd+0xf0>
 8000782:	2dff      	cmp	r5, #255	; 0xff
 8000784:	d100      	bne.n	8000788 <__aeabi_fadd+0xbc>
 8000786:	e072      	b.n	800086e <__aeabi_fadd+0x1a2>
 8000788:	2380      	movs	r3, #128	; 0x80
 800078a:	4662      	mov	r2, ip
 800078c:	04db      	lsls	r3, r3, #19
 800078e:	431a      	orrs	r2, r3
 8000790:	4694      	mov	ip, r2
 8000792:	281b      	cmp	r0, #27
 8000794:	dc00      	bgt.n	8000798 <__aeabi_fadd+0xcc>
 8000796:	e090      	b.n	80008ba <__aeabi_fadd+0x1ee>
 8000798:	2301      	movs	r3, #1
 800079a:	1afb      	subs	r3, r7, r3
 800079c:	015a      	lsls	r2, r3, #5
 800079e:	d551      	bpl.n	8000844 <__aeabi_fadd+0x178>
 80007a0:	019b      	lsls	r3, r3, #6
 80007a2:	099e      	lsrs	r6, r3, #6
 80007a4:	0030      	movs	r0, r6
 80007a6:	f002 f8e5 	bl	8002974 <__clzsi2>
 80007aa:	0033      	movs	r3, r6
 80007ac:	3805      	subs	r0, #5
 80007ae:	4083      	lsls	r3, r0
 80007b0:	4285      	cmp	r5, r0
 80007b2:	dc00      	bgt.n	80007b6 <__aeabi_fadd+0xea>
 80007b4:	e075      	b.n	80008a2 <__aeabi_fadd+0x1d6>
 80007b6:	4a94      	ldr	r2, [pc, #592]	; (8000a08 <__aeabi_fadd+0x33c>)
 80007b8:	1a2d      	subs	r5, r5, r0
 80007ba:	4013      	ands	r3, r2
 80007bc:	075a      	lsls	r2, r3, #29
 80007be:	d004      	beq.n	80007ca <__aeabi_fadd+0xfe>
 80007c0:	220f      	movs	r2, #15
 80007c2:	401a      	ands	r2, r3
 80007c4:	2a04      	cmp	r2, #4
 80007c6:	d000      	beq.n	80007ca <__aeabi_fadd+0xfe>
 80007c8:	3304      	adds	r3, #4
 80007ca:	015a      	lsls	r2, r3, #5
 80007cc:	d53c      	bpl.n	8000848 <__aeabi_fadd+0x17c>
 80007ce:	1c68      	adds	r0, r5, #1
 80007d0:	2dfe      	cmp	r5, #254	; 0xfe
 80007d2:	d02b      	beq.n	800082c <__aeabi_fadd+0x160>
 80007d4:	019b      	lsls	r3, r3, #6
 80007d6:	0a5e      	lsrs	r6, r3, #9
 80007d8:	b2c0      	uxtb	r0, r0
 80007da:	05c0      	lsls	r0, r0, #23
 80007dc:	4330      	orrs	r0, r6
 80007de:	07e4      	lsls	r4, r4, #31
 80007e0:	4320      	orrs	r0, r4
 80007e2:	bcc0      	pop	{r6, r7}
 80007e4:	46b9      	mov	r9, r7
 80007e6:	46b0      	mov	r8, r6
 80007e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007ea:	20fe      	movs	r0, #254	; 0xfe
 80007ec:	1c6a      	adds	r2, r5, #1
 80007ee:	4210      	tst	r0, r2
 80007f0:	d172      	bne.n	80008d8 <__aeabi_fadd+0x20c>
 80007f2:	2d00      	cmp	r5, #0
 80007f4:	d000      	beq.n	80007f8 <__aeabi_fadd+0x12c>
 80007f6:	e0ae      	b.n	8000956 <__aeabi_fadd+0x28a>
 80007f8:	2f00      	cmp	r7, #0
 80007fa:	d100      	bne.n	80007fe <__aeabi_fadd+0x132>
 80007fc:	e0ec      	b.n	80009d8 <__aeabi_fadd+0x30c>
 80007fe:	4663      	mov	r3, ip
 8000800:	2000      	movs	r0, #0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d0e9      	beq.n	80007da <__aeabi_fadd+0x10e>
 8000806:	1afb      	subs	r3, r7, r3
 8000808:	015a      	lsls	r2, r3, #5
 800080a:	d400      	bmi.n	800080e <__aeabi_fadd+0x142>
 800080c:	e0f3      	b.n	80009f6 <__aeabi_fadd+0x32a>
 800080e:	4663      	mov	r3, ip
 8000810:	000c      	movs	r4, r1
 8000812:	1bdb      	subs	r3, r3, r7
 8000814:	e7d2      	b.n	80007bc <__aeabi_fadd+0xf0>
 8000816:	4661      	mov	r1, ip
 8000818:	2900      	cmp	r1, #0
 800081a:	d05b      	beq.n	80008d4 <__aeabi_fadd+0x208>
 800081c:	1e51      	subs	r1, r2, #1
 800081e:	2a01      	cmp	r2, #1
 8000820:	d100      	bne.n	8000824 <__aeabi_fadd+0x158>
 8000822:	e0a7      	b.n	8000974 <__aeabi_fadd+0x2a8>
 8000824:	2aff      	cmp	r2, #255	; 0xff
 8000826:	d022      	beq.n	800086e <__aeabi_fadd+0x1a2>
 8000828:	000a      	movs	r2, r1
 800082a:	e799      	b.n	8000760 <__aeabi_fadd+0x94>
 800082c:	20ff      	movs	r0, #255	; 0xff
 800082e:	2600      	movs	r6, #0
 8000830:	e7d3      	b.n	80007da <__aeabi_fadd+0x10e>
 8000832:	21fe      	movs	r1, #254	; 0xfe
 8000834:	1c6a      	adds	r2, r5, #1
 8000836:	4211      	tst	r1, r2
 8000838:	d073      	beq.n	8000922 <__aeabi_fadd+0x256>
 800083a:	2aff      	cmp	r2, #255	; 0xff
 800083c:	d0f6      	beq.n	800082c <__aeabi_fadd+0x160>
 800083e:	0015      	movs	r5, r2
 8000840:	4467      	add	r7, ip
 8000842:	087b      	lsrs	r3, r7, #1
 8000844:	075a      	lsls	r2, r3, #29
 8000846:	d1bb      	bne.n	80007c0 <__aeabi_fadd+0xf4>
 8000848:	08db      	lsrs	r3, r3, #3
 800084a:	2dff      	cmp	r5, #255	; 0xff
 800084c:	d00f      	beq.n	800086e <__aeabi_fadd+0x1a2>
 800084e:	025b      	lsls	r3, r3, #9
 8000850:	0a5e      	lsrs	r6, r3, #9
 8000852:	b2e8      	uxtb	r0, r5
 8000854:	e7c1      	b.n	80007da <__aeabi_fadd+0x10e>
 8000856:	4662      	mov	r2, ip
 8000858:	2a00      	cmp	r2, #0
 800085a:	d008      	beq.n	800086e <__aeabi_fadd+0x1a2>
 800085c:	2280      	movs	r2, #128	; 0x80
 800085e:	03d2      	lsls	r2, r2, #15
 8000860:	4213      	tst	r3, r2
 8000862:	d004      	beq.n	800086e <__aeabi_fadd+0x1a2>
 8000864:	4640      	mov	r0, r8
 8000866:	4210      	tst	r0, r2
 8000868:	d101      	bne.n	800086e <__aeabi_fadd+0x1a2>
 800086a:	000c      	movs	r4, r1
 800086c:	4643      	mov	r3, r8
 800086e:	2b00      	cmp	r3, #0
 8000870:	d0dc      	beq.n	800082c <__aeabi_fadd+0x160>
 8000872:	2680      	movs	r6, #128	; 0x80
 8000874:	03f6      	lsls	r6, r6, #15
 8000876:	431e      	orrs	r6, r3
 8000878:	0276      	lsls	r6, r6, #9
 800087a:	20ff      	movs	r0, #255	; 0xff
 800087c:	0a76      	lsrs	r6, r6, #9
 800087e:	e7ac      	b.n	80007da <__aeabi_fadd+0x10e>
 8000880:	2a00      	cmp	r2, #0
 8000882:	d0d6      	beq.n	8000832 <__aeabi_fadd+0x166>
 8000884:	1b42      	subs	r2, r0, r5
 8000886:	2d00      	cmp	r5, #0
 8000888:	d05c      	beq.n	8000944 <__aeabi_fadd+0x278>
 800088a:	28ff      	cmp	r0, #255	; 0xff
 800088c:	d0ee      	beq.n	800086c <__aeabi_fadd+0x1a0>
 800088e:	2380      	movs	r3, #128	; 0x80
 8000890:	04db      	lsls	r3, r3, #19
 8000892:	431f      	orrs	r7, r3
 8000894:	2a1b      	cmp	r2, #27
 8000896:	dc00      	bgt.n	800089a <__aeabi_fadd+0x1ce>
 8000898:	e082      	b.n	80009a0 <__aeabi_fadd+0x2d4>
 800089a:	2301      	movs	r3, #1
 800089c:	464d      	mov	r5, r9
 800089e:	4463      	add	r3, ip
 80008a0:	e763      	b.n	800076a <__aeabi_fadd+0x9e>
 80008a2:	2220      	movs	r2, #32
 80008a4:	1b40      	subs	r0, r0, r5
 80008a6:	3001      	adds	r0, #1
 80008a8:	1a12      	subs	r2, r2, r0
 80008aa:	0019      	movs	r1, r3
 80008ac:	4093      	lsls	r3, r2
 80008ae:	40c1      	lsrs	r1, r0
 80008b0:	1e5a      	subs	r2, r3, #1
 80008b2:	4193      	sbcs	r3, r2
 80008b4:	2500      	movs	r5, #0
 80008b6:	430b      	orrs	r3, r1
 80008b8:	e780      	b.n	80007bc <__aeabi_fadd+0xf0>
 80008ba:	2320      	movs	r3, #32
 80008bc:	4661      	mov	r1, ip
 80008be:	1a1b      	subs	r3, r3, r0
 80008c0:	4099      	lsls	r1, r3
 80008c2:	4662      	mov	r2, ip
 80008c4:	000b      	movs	r3, r1
 80008c6:	40c2      	lsrs	r2, r0
 80008c8:	1e59      	subs	r1, r3, #1
 80008ca:	418b      	sbcs	r3, r1
 80008cc:	4313      	orrs	r3, r2
 80008ce:	e764      	b.n	800079a <__aeabi_fadd+0xce>
 80008d0:	000c      	movs	r4, r1
 80008d2:	4643      	mov	r3, r8
 80008d4:	0015      	movs	r5, r2
 80008d6:	e7b8      	b.n	800084a <__aeabi_fadd+0x17e>
 80008d8:	4663      	mov	r3, ip
 80008da:	1afe      	subs	r6, r7, r3
 80008dc:	0173      	lsls	r3, r6, #5
 80008de:	d445      	bmi.n	800096c <__aeabi_fadd+0x2a0>
 80008e0:	2e00      	cmp	r6, #0
 80008e2:	d000      	beq.n	80008e6 <__aeabi_fadd+0x21a>
 80008e4:	e75e      	b.n	80007a4 <__aeabi_fadd+0xd8>
 80008e6:	2400      	movs	r4, #0
 80008e8:	2000      	movs	r0, #0
 80008ea:	2600      	movs	r6, #0
 80008ec:	e775      	b.n	80007da <__aeabi_fadd+0x10e>
 80008ee:	2bff      	cmp	r3, #255	; 0xff
 80008f0:	d0bb      	beq.n	800086a <__aeabi_fadd+0x19e>
 80008f2:	2380      	movs	r3, #128	; 0x80
 80008f4:	04db      	lsls	r3, r3, #19
 80008f6:	431f      	orrs	r7, r3
 80008f8:	2a1b      	cmp	r2, #27
 80008fa:	dd47      	ble.n	800098c <__aeabi_fadd+0x2c0>
 80008fc:	2301      	movs	r3, #1
 80008fe:	4662      	mov	r2, ip
 8000900:	000c      	movs	r4, r1
 8000902:	464d      	mov	r5, r9
 8000904:	1ad3      	subs	r3, r2, r3
 8000906:	e749      	b.n	800079c <__aeabi_fadd+0xd0>
 8000908:	0005      	movs	r5, r0
 800090a:	e79e      	b.n	800084a <__aeabi_fadd+0x17e>
 800090c:	4661      	mov	r1, ip
 800090e:	2320      	movs	r3, #32
 8000910:	40d1      	lsrs	r1, r2
 8000912:	1a9b      	subs	r3, r3, r2
 8000914:	4662      	mov	r2, ip
 8000916:	409a      	lsls	r2, r3
 8000918:	0013      	movs	r3, r2
 800091a:	1e5a      	subs	r2, r3, #1
 800091c:	4193      	sbcs	r3, r2
 800091e:	430b      	orrs	r3, r1
 8000920:	e722      	b.n	8000768 <__aeabi_fadd+0x9c>
 8000922:	2d00      	cmp	r5, #0
 8000924:	d146      	bne.n	80009b4 <__aeabi_fadd+0x2e8>
 8000926:	2f00      	cmp	r7, #0
 8000928:	d062      	beq.n	80009f0 <__aeabi_fadd+0x324>
 800092a:	4663      	mov	r3, ip
 800092c:	2000      	movs	r0, #0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d100      	bne.n	8000934 <__aeabi_fadd+0x268>
 8000932:	e752      	b.n	80007da <__aeabi_fadd+0x10e>
 8000934:	003b      	movs	r3, r7
 8000936:	4463      	add	r3, ip
 8000938:	015a      	lsls	r2, r3, #5
 800093a:	d583      	bpl.n	8000844 <__aeabi_fadd+0x178>
 800093c:	4a32      	ldr	r2, [pc, #200]	; (8000a08 <__aeabi_fadd+0x33c>)
 800093e:	3501      	adds	r5, #1
 8000940:	4013      	ands	r3, r2
 8000942:	e77f      	b.n	8000844 <__aeabi_fadd+0x178>
 8000944:	2f00      	cmp	r7, #0
 8000946:	d0c4      	beq.n	80008d2 <__aeabi_fadd+0x206>
 8000948:	1e53      	subs	r3, r2, #1
 800094a:	2a01      	cmp	r2, #1
 800094c:	d012      	beq.n	8000974 <__aeabi_fadd+0x2a8>
 800094e:	2aff      	cmp	r2, #255	; 0xff
 8000950:	d08c      	beq.n	800086c <__aeabi_fadd+0x1a0>
 8000952:	001a      	movs	r2, r3
 8000954:	e79e      	b.n	8000894 <__aeabi_fadd+0x1c8>
 8000956:	2f00      	cmp	r7, #0
 8000958:	d000      	beq.n	800095c <__aeabi_fadd+0x290>
 800095a:	e77c      	b.n	8000856 <__aeabi_fadd+0x18a>
 800095c:	4663      	mov	r3, ip
 800095e:	2b00      	cmp	r3, #0
 8000960:	d183      	bne.n	800086a <__aeabi_fadd+0x19e>
 8000962:	2680      	movs	r6, #128	; 0x80
 8000964:	2400      	movs	r4, #0
 8000966:	20ff      	movs	r0, #255	; 0xff
 8000968:	03f6      	lsls	r6, r6, #15
 800096a:	e736      	b.n	80007da <__aeabi_fadd+0x10e>
 800096c:	4663      	mov	r3, ip
 800096e:	000c      	movs	r4, r1
 8000970:	1bde      	subs	r6, r3, r7
 8000972:	e717      	b.n	80007a4 <__aeabi_fadd+0xd8>
 8000974:	003b      	movs	r3, r7
 8000976:	4463      	add	r3, ip
 8000978:	2501      	movs	r5, #1
 800097a:	015a      	lsls	r2, r3, #5
 800097c:	d400      	bmi.n	8000980 <__aeabi_fadd+0x2b4>
 800097e:	e761      	b.n	8000844 <__aeabi_fadd+0x178>
 8000980:	2502      	movs	r5, #2
 8000982:	e6f7      	b.n	8000774 <__aeabi_fadd+0xa8>
 8000984:	4663      	mov	r3, ip
 8000986:	2501      	movs	r5, #1
 8000988:	1afb      	subs	r3, r7, r3
 800098a:	e707      	b.n	800079c <__aeabi_fadd+0xd0>
 800098c:	2320      	movs	r3, #32
 800098e:	1a9b      	subs	r3, r3, r2
 8000990:	0038      	movs	r0, r7
 8000992:	409f      	lsls	r7, r3
 8000994:	003b      	movs	r3, r7
 8000996:	40d0      	lsrs	r0, r2
 8000998:	1e5a      	subs	r2, r3, #1
 800099a:	4193      	sbcs	r3, r2
 800099c:	4303      	orrs	r3, r0
 800099e:	e7ae      	b.n	80008fe <__aeabi_fadd+0x232>
 80009a0:	2320      	movs	r3, #32
 80009a2:	1a9b      	subs	r3, r3, r2
 80009a4:	0039      	movs	r1, r7
 80009a6:	409f      	lsls	r7, r3
 80009a8:	003b      	movs	r3, r7
 80009aa:	40d1      	lsrs	r1, r2
 80009ac:	1e5a      	subs	r2, r3, #1
 80009ae:	4193      	sbcs	r3, r2
 80009b0:	430b      	orrs	r3, r1
 80009b2:	e773      	b.n	800089c <__aeabi_fadd+0x1d0>
 80009b4:	2f00      	cmp	r7, #0
 80009b6:	d100      	bne.n	80009ba <__aeabi_fadd+0x2ee>
 80009b8:	e758      	b.n	800086c <__aeabi_fadd+0x1a0>
 80009ba:	4662      	mov	r2, ip
 80009bc:	2a00      	cmp	r2, #0
 80009be:	d100      	bne.n	80009c2 <__aeabi_fadd+0x2f6>
 80009c0:	e755      	b.n	800086e <__aeabi_fadd+0x1a2>
 80009c2:	2280      	movs	r2, #128	; 0x80
 80009c4:	03d2      	lsls	r2, r2, #15
 80009c6:	4213      	tst	r3, r2
 80009c8:	d100      	bne.n	80009cc <__aeabi_fadd+0x300>
 80009ca:	e750      	b.n	800086e <__aeabi_fadd+0x1a2>
 80009cc:	4641      	mov	r1, r8
 80009ce:	4211      	tst	r1, r2
 80009d0:	d000      	beq.n	80009d4 <__aeabi_fadd+0x308>
 80009d2:	e74c      	b.n	800086e <__aeabi_fadd+0x1a2>
 80009d4:	4643      	mov	r3, r8
 80009d6:	e74a      	b.n	800086e <__aeabi_fadd+0x1a2>
 80009d8:	4663      	mov	r3, ip
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d083      	beq.n	80008e6 <__aeabi_fadd+0x21a>
 80009de:	000c      	movs	r4, r1
 80009e0:	4646      	mov	r6, r8
 80009e2:	2000      	movs	r0, #0
 80009e4:	e6f9      	b.n	80007da <__aeabi_fadd+0x10e>
 80009e6:	4663      	mov	r3, ip
 80009e8:	000c      	movs	r4, r1
 80009ea:	1bdb      	subs	r3, r3, r7
 80009ec:	3501      	adds	r5, #1
 80009ee:	e6d5      	b.n	800079c <__aeabi_fadd+0xd0>
 80009f0:	4646      	mov	r6, r8
 80009f2:	2000      	movs	r0, #0
 80009f4:	e6f1      	b.n	80007da <__aeabi_fadd+0x10e>
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d000      	beq.n	80009fc <__aeabi_fadd+0x330>
 80009fa:	e723      	b.n	8000844 <__aeabi_fadd+0x178>
 80009fc:	2400      	movs	r4, #0
 80009fe:	2600      	movs	r6, #0
 8000a00:	e6eb      	b.n	80007da <__aeabi_fadd+0x10e>
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	7dffffff 	.word	0x7dffffff
 8000a08:	fbffffff 	.word	0xfbffffff

08000a0c <__aeabi_fdiv>:
 8000a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a0e:	464f      	mov	r7, r9
 8000a10:	4646      	mov	r6, r8
 8000a12:	46d6      	mov	lr, sl
 8000a14:	0245      	lsls	r5, r0, #9
 8000a16:	b5c0      	push	{r6, r7, lr}
 8000a18:	0047      	lsls	r7, r0, #1
 8000a1a:	1c0c      	adds	r4, r1, #0
 8000a1c:	0a6d      	lsrs	r5, r5, #9
 8000a1e:	0e3f      	lsrs	r7, r7, #24
 8000a20:	0fc6      	lsrs	r6, r0, #31
 8000a22:	2f00      	cmp	r7, #0
 8000a24:	d100      	bne.n	8000a28 <__aeabi_fdiv+0x1c>
 8000a26:	e06f      	b.n	8000b08 <__aeabi_fdiv+0xfc>
 8000a28:	2fff      	cmp	r7, #255	; 0xff
 8000a2a:	d100      	bne.n	8000a2e <__aeabi_fdiv+0x22>
 8000a2c:	e074      	b.n	8000b18 <__aeabi_fdiv+0x10c>
 8000a2e:	2300      	movs	r3, #0
 8000a30:	2280      	movs	r2, #128	; 0x80
 8000a32:	4699      	mov	r9, r3
 8000a34:	469a      	mov	sl, r3
 8000a36:	00ed      	lsls	r5, r5, #3
 8000a38:	04d2      	lsls	r2, r2, #19
 8000a3a:	4315      	orrs	r5, r2
 8000a3c:	3f7f      	subs	r7, #127	; 0x7f
 8000a3e:	0263      	lsls	r3, r4, #9
 8000a40:	0a5b      	lsrs	r3, r3, #9
 8000a42:	4698      	mov	r8, r3
 8000a44:	0063      	lsls	r3, r4, #1
 8000a46:	0e1b      	lsrs	r3, r3, #24
 8000a48:	0fe4      	lsrs	r4, r4, #31
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d04d      	beq.n	8000aea <__aeabi_fdiv+0xde>
 8000a4e:	2bff      	cmp	r3, #255	; 0xff
 8000a50:	d045      	beq.n	8000ade <__aeabi_fdiv+0xd2>
 8000a52:	4642      	mov	r2, r8
 8000a54:	2180      	movs	r1, #128	; 0x80
 8000a56:	00d2      	lsls	r2, r2, #3
 8000a58:	04c9      	lsls	r1, r1, #19
 8000a5a:	4311      	orrs	r1, r2
 8000a5c:	4688      	mov	r8, r1
 8000a5e:	2200      	movs	r2, #0
 8000a60:	3b7f      	subs	r3, #127	; 0x7f
 8000a62:	0031      	movs	r1, r6
 8000a64:	1aff      	subs	r7, r7, r3
 8000a66:	464b      	mov	r3, r9
 8000a68:	4061      	eors	r1, r4
 8000a6a:	b2c9      	uxtb	r1, r1
 8000a6c:	2b0f      	cmp	r3, #15
 8000a6e:	d900      	bls.n	8000a72 <__aeabi_fdiv+0x66>
 8000a70:	e0b8      	b.n	8000be4 <__aeabi_fdiv+0x1d8>
 8000a72:	4870      	ldr	r0, [pc, #448]	; (8000c34 <__aeabi_fdiv+0x228>)
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	58c3      	ldr	r3, [r0, r3]
 8000a78:	469f      	mov	pc, r3
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	4698      	mov	r8, r3
 8000a7e:	0026      	movs	r6, r4
 8000a80:	4645      	mov	r5, r8
 8000a82:	4692      	mov	sl, r2
 8000a84:	4653      	mov	r3, sl
 8000a86:	2b02      	cmp	r3, #2
 8000a88:	d100      	bne.n	8000a8c <__aeabi_fdiv+0x80>
 8000a8a:	e08d      	b.n	8000ba8 <__aeabi_fdiv+0x19c>
 8000a8c:	2b03      	cmp	r3, #3
 8000a8e:	d100      	bne.n	8000a92 <__aeabi_fdiv+0x86>
 8000a90:	e0a1      	b.n	8000bd6 <__aeabi_fdiv+0x1ca>
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d018      	beq.n	8000ac8 <__aeabi_fdiv+0xbc>
 8000a96:	003b      	movs	r3, r7
 8000a98:	337f      	adds	r3, #127	; 0x7f
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	dd6d      	ble.n	8000b7a <__aeabi_fdiv+0x16e>
 8000a9e:	076a      	lsls	r2, r5, #29
 8000aa0:	d004      	beq.n	8000aac <__aeabi_fdiv+0xa0>
 8000aa2:	220f      	movs	r2, #15
 8000aa4:	402a      	ands	r2, r5
 8000aa6:	2a04      	cmp	r2, #4
 8000aa8:	d000      	beq.n	8000aac <__aeabi_fdiv+0xa0>
 8000aaa:	3504      	adds	r5, #4
 8000aac:	012a      	lsls	r2, r5, #4
 8000aae:	d503      	bpl.n	8000ab8 <__aeabi_fdiv+0xac>
 8000ab0:	4b61      	ldr	r3, [pc, #388]	; (8000c38 <__aeabi_fdiv+0x22c>)
 8000ab2:	401d      	ands	r5, r3
 8000ab4:	003b      	movs	r3, r7
 8000ab6:	3380      	adds	r3, #128	; 0x80
 8000ab8:	2bfe      	cmp	r3, #254	; 0xfe
 8000aba:	dd00      	ble.n	8000abe <__aeabi_fdiv+0xb2>
 8000abc:	e074      	b.n	8000ba8 <__aeabi_fdiv+0x19c>
 8000abe:	01aa      	lsls	r2, r5, #6
 8000ac0:	0a52      	lsrs	r2, r2, #9
 8000ac2:	b2d8      	uxtb	r0, r3
 8000ac4:	e002      	b.n	8000acc <__aeabi_fdiv+0xc0>
 8000ac6:	000e      	movs	r6, r1
 8000ac8:	2000      	movs	r0, #0
 8000aca:	2200      	movs	r2, #0
 8000acc:	05c0      	lsls	r0, r0, #23
 8000ace:	07f6      	lsls	r6, r6, #31
 8000ad0:	4310      	orrs	r0, r2
 8000ad2:	4330      	orrs	r0, r6
 8000ad4:	bce0      	pop	{r5, r6, r7}
 8000ad6:	46ba      	mov	sl, r7
 8000ad8:	46b1      	mov	r9, r6
 8000ada:	46a8      	mov	r8, r5
 8000adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ade:	4643      	mov	r3, r8
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d13f      	bne.n	8000b64 <__aeabi_fdiv+0x158>
 8000ae4:	2202      	movs	r2, #2
 8000ae6:	3fff      	subs	r7, #255	; 0xff
 8000ae8:	e003      	b.n	8000af2 <__aeabi_fdiv+0xe6>
 8000aea:	4643      	mov	r3, r8
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d12d      	bne.n	8000b4c <__aeabi_fdiv+0x140>
 8000af0:	2201      	movs	r2, #1
 8000af2:	0031      	movs	r1, r6
 8000af4:	464b      	mov	r3, r9
 8000af6:	4061      	eors	r1, r4
 8000af8:	b2c9      	uxtb	r1, r1
 8000afa:	4313      	orrs	r3, r2
 8000afc:	2b0f      	cmp	r3, #15
 8000afe:	d838      	bhi.n	8000b72 <__aeabi_fdiv+0x166>
 8000b00:	484e      	ldr	r0, [pc, #312]	; (8000c3c <__aeabi_fdiv+0x230>)
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	58c3      	ldr	r3, [r0, r3]
 8000b06:	469f      	mov	pc, r3
 8000b08:	2d00      	cmp	r5, #0
 8000b0a:	d113      	bne.n	8000b34 <__aeabi_fdiv+0x128>
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	4699      	mov	r9, r3
 8000b10:	3b03      	subs	r3, #3
 8000b12:	2700      	movs	r7, #0
 8000b14:	469a      	mov	sl, r3
 8000b16:	e792      	b.n	8000a3e <__aeabi_fdiv+0x32>
 8000b18:	2d00      	cmp	r5, #0
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_fdiv+0x11c>
 8000b1c:	2308      	movs	r3, #8
 8000b1e:	4699      	mov	r9, r3
 8000b20:	3b06      	subs	r3, #6
 8000b22:	27ff      	movs	r7, #255	; 0xff
 8000b24:	469a      	mov	sl, r3
 8000b26:	e78a      	b.n	8000a3e <__aeabi_fdiv+0x32>
 8000b28:	230c      	movs	r3, #12
 8000b2a:	4699      	mov	r9, r3
 8000b2c:	3b09      	subs	r3, #9
 8000b2e:	27ff      	movs	r7, #255	; 0xff
 8000b30:	469a      	mov	sl, r3
 8000b32:	e784      	b.n	8000a3e <__aeabi_fdiv+0x32>
 8000b34:	0028      	movs	r0, r5
 8000b36:	f001 ff1d 	bl	8002974 <__clzsi2>
 8000b3a:	2776      	movs	r7, #118	; 0x76
 8000b3c:	1f43      	subs	r3, r0, #5
 8000b3e:	409d      	lsls	r5, r3
 8000b40:	2300      	movs	r3, #0
 8000b42:	427f      	negs	r7, r7
 8000b44:	4699      	mov	r9, r3
 8000b46:	469a      	mov	sl, r3
 8000b48:	1a3f      	subs	r7, r7, r0
 8000b4a:	e778      	b.n	8000a3e <__aeabi_fdiv+0x32>
 8000b4c:	4640      	mov	r0, r8
 8000b4e:	f001 ff11 	bl	8002974 <__clzsi2>
 8000b52:	4642      	mov	r2, r8
 8000b54:	1f43      	subs	r3, r0, #5
 8000b56:	409a      	lsls	r2, r3
 8000b58:	2376      	movs	r3, #118	; 0x76
 8000b5a:	425b      	negs	r3, r3
 8000b5c:	4690      	mov	r8, r2
 8000b5e:	1a1b      	subs	r3, r3, r0
 8000b60:	2200      	movs	r2, #0
 8000b62:	e77e      	b.n	8000a62 <__aeabi_fdiv+0x56>
 8000b64:	2303      	movs	r3, #3
 8000b66:	464a      	mov	r2, r9
 8000b68:	431a      	orrs	r2, r3
 8000b6a:	4691      	mov	r9, r2
 8000b6c:	33fc      	adds	r3, #252	; 0xfc
 8000b6e:	2203      	movs	r2, #3
 8000b70:	e777      	b.n	8000a62 <__aeabi_fdiv+0x56>
 8000b72:	000e      	movs	r6, r1
 8000b74:	20ff      	movs	r0, #255	; 0xff
 8000b76:	2200      	movs	r2, #0
 8000b78:	e7a8      	b.n	8000acc <__aeabi_fdiv+0xc0>
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	2b1b      	cmp	r3, #27
 8000b80:	dca2      	bgt.n	8000ac8 <__aeabi_fdiv+0xbc>
 8000b82:	379e      	adds	r7, #158	; 0x9e
 8000b84:	002a      	movs	r2, r5
 8000b86:	40bd      	lsls	r5, r7
 8000b88:	40da      	lsrs	r2, r3
 8000b8a:	1e6b      	subs	r3, r5, #1
 8000b8c:	419d      	sbcs	r5, r3
 8000b8e:	4315      	orrs	r5, r2
 8000b90:	076a      	lsls	r2, r5, #29
 8000b92:	d004      	beq.n	8000b9e <__aeabi_fdiv+0x192>
 8000b94:	220f      	movs	r2, #15
 8000b96:	402a      	ands	r2, r5
 8000b98:	2a04      	cmp	r2, #4
 8000b9a:	d000      	beq.n	8000b9e <__aeabi_fdiv+0x192>
 8000b9c:	3504      	adds	r5, #4
 8000b9e:	016a      	lsls	r2, r5, #5
 8000ba0:	d544      	bpl.n	8000c2c <__aeabi_fdiv+0x220>
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	e791      	b.n	8000acc <__aeabi_fdiv+0xc0>
 8000ba8:	20ff      	movs	r0, #255	; 0xff
 8000baa:	2200      	movs	r2, #0
 8000bac:	e78e      	b.n	8000acc <__aeabi_fdiv+0xc0>
 8000bae:	2280      	movs	r2, #128	; 0x80
 8000bb0:	2600      	movs	r6, #0
 8000bb2:	20ff      	movs	r0, #255	; 0xff
 8000bb4:	03d2      	lsls	r2, r2, #15
 8000bb6:	e789      	b.n	8000acc <__aeabi_fdiv+0xc0>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	4698      	mov	r8, r3
 8000bbc:	2280      	movs	r2, #128	; 0x80
 8000bbe:	03d2      	lsls	r2, r2, #15
 8000bc0:	4215      	tst	r5, r2
 8000bc2:	d008      	beq.n	8000bd6 <__aeabi_fdiv+0x1ca>
 8000bc4:	4643      	mov	r3, r8
 8000bc6:	4213      	tst	r3, r2
 8000bc8:	d105      	bne.n	8000bd6 <__aeabi_fdiv+0x1ca>
 8000bca:	431a      	orrs	r2, r3
 8000bcc:	0252      	lsls	r2, r2, #9
 8000bce:	0026      	movs	r6, r4
 8000bd0:	20ff      	movs	r0, #255	; 0xff
 8000bd2:	0a52      	lsrs	r2, r2, #9
 8000bd4:	e77a      	b.n	8000acc <__aeabi_fdiv+0xc0>
 8000bd6:	2280      	movs	r2, #128	; 0x80
 8000bd8:	03d2      	lsls	r2, r2, #15
 8000bda:	432a      	orrs	r2, r5
 8000bdc:	0252      	lsls	r2, r2, #9
 8000bde:	20ff      	movs	r0, #255	; 0xff
 8000be0:	0a52      	lsrs	r2, r2, #9
 8000be2:	e773      	b.n	8000acc <__aeabi_fdiv+0xc0>
 8000be4:	4642      	mov	r2, r8
 8000be6:	016b      	lsls	r3, r5, #5
 8000be8:	0155      	lsls	r5, r2, #5
 8000bea:	42ab      	cmp	r3, r5
 8000bec:	d21a      	bcs.n	8000c24 <__aeabi_fdiv+0x218>
 8000bee:	201b      	movs	r0, #27
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	3f01      	subs	r7, #1
 8000bf4:	2601      	movs	r6, #1
 8000bf6:	001c      	movs	r4, r3
 8000bf8:	0052      	lsls	r2, r2, #1
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	2c00      	cmp	r4, #0
 8000bfe:	db01      	blt.n	8000c04 <__aeabi_fdiv+0x1f8>
 8000c00:	429d      	cmp	r5, r3
 8000c02:	d801      	bhi.n	8000c08 <__aeabi_fdiv+0x1fc>
 8000c04:	1b5b      	subs	r3, r3, r5
 8000c06:	4332      	orrs	r2, r6
 8000c08:	3801      	subs	r0, #1
 8000c0a:	2800      	cmp	r0, #0
 8000c0c:	d1f3      	bne.n	8000bf6 <__aeabi_fdiv+0x1ea>
 8000c0e:	1e58      	subs	r0, r3, #1
 8000c10:	4183      	sbcs	r3, r0
 8000c12:	4313      	orrs	r3, r2
 8000c14:	001d      	movs	r5, r3
 8000c16:	003b      	movs	r3, r7
 8000c18:	337f      	adds	r3, #127	; 0x7f
 8000c1a:	000e      	movs	r6, r1
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	dd00      	ble.n	8000c22 <__aeabi_fdiv+0x216>
 8000c20:	e73d      	b.n	8000a9e <__aeabi_fdiv+0x92>
 8000c22:	e7aa      	b.n	8000b7a <__aeabi_fdiv+0x16e>
 8000c24:	201a      	movs	r0, #26
 8000c26:	2201      	movs	r2, #1
 8000c28:	1b5b      	subs	r3, r3, r5
 8000c2a:	e7e3      	b.n	8000bf4 <__aeabi_fdiv+0x1e8>
 8000c2c:	01aa      	lsls	r2, r5, #6
 8000c2e:	2000      	movs	r0, #0
 8000c30:	0a52      	lsrs	r2, r2, #9
 8000c32:	e74b      	b.n	8000acc <__aeabi_fdiv+0xc0>
 8000c34:	0800a8c8 	.word	0x0800a8c8
 8000c38:	f7ffffff 	.word	0xf7ffffff
 8000c3c:	0800a908 	.word	0x0800a908

08000c40 <__aeabi_i2f>:
 8000c40:	b570      	push	{r4, r5, r6, lr}
 8000c42:	2800      	cmp	r0, #0
 8000c44:	d013      	beq.n	8000c6e <__aeabi_i2f+0x2e>
 8000c46:	17c3      	asrs	r3, r0, #31
 8000c48:	18c5      	adds	r5, r0, r3
 8000c4a:	405d      	eors	r5, r3
 8000c4c:	0fc4      	lsrs	r4, r0, #31
 8000c4e:	0028      	movs	r0, r5
 8000c50:	f001 fe90 	bl	8002974 <__clzsi2>
 8000c54:	239e      	movs	r3, #158	; 0x9e
 8000c56:	0001      	movs	r1, r0
 8000c58:	1a1b      	subs	r3, r3, r0
 8000c5a:	2b96      	cmp	r3, #150	; 0x96
 8000c5c:	dc0f      	bgt.n	8000c7e <__aeabi_i2f+0x3e>
 8000c5e:	2808      	cmp	r0, #8
 8000c60:	d031      	beq.n	8000cc6 <__aeabi_i2f+0x86>
 8000c62:	3908      	subs	r1, #8
 8000c64:	408d      	lsls	r5, r1
 8000c66:	026d      	lsls	r5, r5, #9
 8000c68:	0a6d      	lsrs	r5, r5, #9
 8000c6a:	b2d8      	uxtb	r0, r3
 8000c6c:	e002      	b.n	8000c74 <__aeabi_i2f+0x34>
 8000c6e:	2400      	movs	r4, #0
 8000c70:	2000      	movs	r0, #0
 8000c72:	2500      	movs	r5, #0
 8000c74:	05c0      	lsls	r0, r0, #23
 8000c76:	4328      	orrs	r0, r5
 8000c78:	07e4      	lsls	r4, r4, #31
 8000c7a:	4320      	orrs	r0, r4
 8000c7c:	bd70      	pop	{r4, r5, r6, pc}
 8000c7e:	2b99      	cmp	r3, #153	; 0x99
 8000c80:	dd0c      	ble.n	8000c9c <__aeabi_i2f+0x5c>
 8000c82:	2205      	movs	r2, #5
 8000c84:	1a12      	subs	r2, r2, r0
 8000c86:	0028      	movs	r0, r5
 8000c88:	40d0      	lsrs	r0, r2
 8000c8a:	0002      	movs	r2, r0
 8000c8c:	0008      	movs	r0, r1
 8000c8e:	301b      	adds	r0, #27
 8000c90:	4085      	lsls	r5, r0
 8000c92:	0028      	movs	r0, r5
 8000c94:	1e45      	subs	r5, r0, #1
 8000c96:	41a8      	sbcs	r0, r5
 8000c98:	4302      	orrs	r2, r0
 8000c9a:	0015      	movs	r5, r2
 8000c9c:	2905      	cmp	r1, #5
 8000c9e:	dc16      	bgt.n	8000cce <__aeabi_i2f+0x8e>
 8000ca0:	002a      	movs	r2, r5
 8000ca2:	480f      	ldr	r0, [pc, #60]	; (8000ce0 <__aeabi_i2f+0xa0>)
 8000ca4:	4002      	ands	r2, r0
 8000ca6:	076e      	lsls	r6, r5, #29
 8000ca8:	d009      	beq.n	8000cbe <__aeabi_i2f+0x7e>
 8000caa:	260f      	movs	r6, #15
 8000cac:	4035      	ands	r5, r6
 8000cae:	2d04      	cmp	r5, #4
 8000cb0:	d005      	beq.n	8000cbe <__aeabi_i2f+0x7e>
 8000cb2:	3204      	adds	r2, #4
 8000cb4:	0155      	lsls	r5, r2, #5
 8000cb6:	d502      	bpl.n	8000cbe <__aeabi_i2f+0x7e>
 8000cb8:	239f      	movs	r3, #159	; 0x9f
 8000cba:	4002      	ands	r2, r0
 8000cbc:	1a5b      	subs	r3, r3, r1
 8000cbe:	0192      	lsls	r2, r2, #6
 8000cc0:	0a55      	lsrs	r5, r2, #9
 8000cc2:	b2d8      	uxtb	r0, r3
 8000cc4:	e7d6      	b.n	8000c74 <__aeabi_i2f+0x34>
 8000cc6:	026d      	lsls	r5, r5, #9
 8000cc8:	2096      	movs	r0, #150	; 0x96
 8000cca:	0a6d      	lsrs	r5, r5, #9
 8000ccc:	e7d2      	b.n	8000c74 <__aeabi_i2f+0x34>
 8000cce:	1f4a      	subs	r2, r1, #5
 8000cd0:	4095      	lsls	r5, r2
 8000cd2:	002a      	movs	r2, r5
 8000cd4:	4802      	ldr	r0, [pc, #8]	; (8000ce0 <__aeabi_i2f+0xa0>)
 8000cd6:	4002      	ands	r2, r0
 8000cd8:	076e      	lsls	r6, r5, #29
 8000cda:	d0f0      	beq.n	8000cbe <__aeabi_i2f+0x7e>
 8000cdc:	e7e5      	b.n	8000caa <__aeabi_i2f+0x6a>
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	fbffffff 	.word	0xfbffffff

08000ce4 <__aeabi_dadd>:
 8000ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ce6:	464f      	mov	r7, r9
 8000ce8:	4646      	mov	r6, r8
 8000cea:	46d6      	mov	lr, sl
 8000cec:	0004      	movs	r4, r0
 8000cee:	b5c0      	push	{r6, r7, lr}
 8000cf0:	001f      	movs	r7, r3
 8000cf2:	030b      	lsls	r3, r1, #12
 8000cf4:	0010      	movs	r0, r2
 8000cf6:	004e      	lsls	r6, r1, #1
 8000cf8:	0a5b      	lsrs	r3, r3, #9
 8000cfa:	0fcd      	lsrs	r5, r1, #31
 8000cfc:	0f61      	lsrs	r1, r4, #29
 8000cfe:	007a      	lsls	r2, r7, #1
 8000d00:	4319      	orrs	r1, r3
 8000d02:	00e3      	lsls	r3, r4, #3
 8000d04:	033c      	lsls	r4, r7, #12
 8000d06:	0fff      	lsrs	r7, r7, #31
 8000d08:	46bc      	mov	ip, r7
 8000d0a:	0a64      	lsrs	r4, r4, #9
 8000d0c:	0f47      	lsrs	r7, r0, #29
 8000d0e:	4327      	orrs	r7, r4
 8000d10:	0d76      	lsrs	r6, r6, #21
 8000d12:	0d52      	lsrs	r2, r2, #21
 8000d14:	00c0      	lsls	r0, r0, #3
 8000d16:	46b9      	mov	r9, r7
 8000d18:	4680      	mov	r8, r0
 8000d1a:	1ab7      	subs	r7, r6, r2
 8000d1c:	4565      	cmp	r5, ip
 8000d1e:	d100      	bne.n	8000d22 <__aeabi_dadd+0x3e>
 8000d20:	e09b      	b.n	8000e5a <__aeabi_dadd+0x176>
 8000d22:	2f00      	cmp	r7, #0
 8000d24:	dc00      	bgt.n	8000d28 <__aeabi_dadd+0x44>
 8000d26:	e084      	b.n	8000e32 <__aeabi_dadd+0x14e>
 8000d28:	2a00      	cmp	r2, #0
 8000d2a:	d100      	bne.n	8000d2e <__aeabi_dadd+0x4a>
 8000d2c:	e0be      	b.n	8000eac <__aeabi_dadd+0x1c8>
 8000d2e:	4ac8      	ldr	r2, [pc, #800]	; (8001050 <__aeabi_dadd+0x36c>)
 8000d30:	4296      	cmp	r6, r2
 8000d32:	d100      	bne.n	8000d36 <__aeabi_dadd+0x52>
 8000d34:	e124      	b.n	8000f80 <__aeabi_dadd+0x29c>
 8000d36:	2280      	movs	r2, #128	; 0x80
 8000d38:	464c      	mov	r4, r9
 8000d3a:	0412      	lsls	r2, r2, #16
 8000d3c:	4314      	orrs	r4, r2
 8000d3e:	46a1      	mov	r9, r4
 8000d40:	2f38      	cmp	r7, #56	; 0x38
 8000d42:	dd00      	ble.n	8000d46 <__aeabi_dadd+0x62>
 8000d44:	e167      	b.n	8001016 <__aeabi_dadd+0x332>
 8000d46:	2f1f      	cmp	r7, #31
 8000d48:	dd00      	ble.n	8000d4c <__aeabi_dadd+0x68>
 8000d4a:	e1d6      	b.n	80010fa <__aeabi_dadd+0x416>
 8000d4c:	2220      	movs	r2, #32
 8000d4e:	464c      	mov	r4, r9
 8000d50:	1bd2      	subs	r2, r2, r7
 8000d52:	4094      	lsls	r4, r2
 8000d54:	46a2      	mov	sl, r4
 8000d56:	4644      	mov	r4, r8
 8000d58:	40fc      	lsrs	r4, r7
 8000d5a:	0020      	movs	r0, r4
 8000d5c:	4654      	mov	r4, sl
 8000d5e:	4304      	orrs	r4, r0
 8000d60:	4640      	mov	r0, r8
 8000d62:	4090      	lsls	r0, r2
 8000d64:	1e42      	subs	r2, r0, #1
 8000d66:	4190      	sbcs	r0, r2
 8000d68:	464a      	mov	r2, r9
 8000d6a:	40fa      	lsrs	r2, r7
 8000d6c:	4304      	orrs	r4, r0
 8000d6e:	1a89      	subs	r1, r1, r2
 8000d70:	1b1c      	subs	r4, r3, r4
 8000d72:	42a3      	cmp	r3, r4
 8000d74:	4192      	sbcs	r2, r2
 8000d76:	4252      	negs	r2, r2
 8000d78:	1a8b      	subs	r3, r1, r2
 8000d7a:	469a      	mov	sl, r3
 8000d7c:	4653      	mov	r3, sl
 8000d7e:	021b      	lsls	r3, r3, #8
 8000d80:	d400      	bmi.n	8000d84 <__aeabi_dadd+0xa0>
 8000d82:	e0d4      	b.n	8000f2e <__aeabi_dadd+0x24a>
 8000d84:	4653      	mov	r3, sl
 8000d86:	025a      	lsls	r2, r3, #9
 8000d88:	0a53      	lsrs	r3, r2, #9
 8000d8a:	469a      	mov	sl, r3
 8000d8c:	4653      	mov	r3, sl
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d100      	bne.n	8000d94 <__aeabi_dadd+0xb0>
 8000d92:	e104      	b.n	8000f9e <__aeabi_dadd+0x2ba>
 8000d94:	4650      	mov	r0, sl
 8000d96:	f001 fded 	bl	8002974 <__clzsi2>
 8000d9a:	0003      	movs	r3, r0
 8000d9c:	3b08      	subs	r3, #8
 8000d9e:	2220      	movs	r2, #32
 8000da0:	0020      	movs	r0, r4
 8000da2:	1ad2      	subs	r2, r2, r3
 8000da4:	4651      	mov	r1, sl
 8000da6:	40d0      	lsrs	r0, r2
 8000da8:	4099      	lsls	r1, r3
 8000daa:	0002      	movs	r2, r0
 8000dac:	409c      	lsls	r4, r3
 8000dae:	430a      	orrs	r2, r1
 8000db0:	42b3      	cmp	r3, r6
 8000db2:	da00      	bge.n	8000db6 <__aeabi_dadd+0xd2>
 8000db4:	e102      	b.n	8000fbc <__aeabi_dadd+0x2d8>
 8000db6:	1b9b      	subs	r3, r3, r6
 8000db8:	1c59      	adds	r1, r3, #1
 8000dba:	291f      	cmp	r1, #31
 8000dbc:	dd00      	ble.n	8000dc0 <__aeabi_dadd+0xdc>
 8000dbe:	e0a7      	b.n	8000f10 <__aeabi_dadd+0x22c>
 8000dc0:	2320      	movs	r3, #32
 8000dc2:	0010      	movs	r0, r2
 8000dc4:	0026      	movs	r6, r4
 8000dc6:	1a5b      	subs	r3, r3, r1
 8000dc8:	409c      	lsls	r4, r3
 8000dca:	4098      	lsls	r0, r3
 8000dcc:	40ce      	lsrs	r6, r1
 8000dce:	40ca      	lsrs	r2, r1
 8000dd0:	1e63      	subs	r3, r4, #1
 8000dd2:	419c      	sbcs	r4, r3
 8000dd4:	4330      	orrs	r0, r6
 8000dd6:	4692      	mov	sl, r2
 8000dd8:	2600      	movs	r6, #0
 8000dda:	4304      	orrs	r4, r0
 8000ddc:	0763      	lsls	r3, r4, #29
 8000dde:	d009      	beq.n	8000df4 <__aeabi_dadd+0x110>
 8000de0:	230f      	movs	r3, #15
 8000de2:	4023      	ands	r3, r4
 8000de4:	2b04      	cmp	r3, #4
 8000de6:	d005      	beq.n	8000df4 <__aeabi_dadd+0x110>
 8000de8:	1d23      	adds	r3, r4, #4
 8000dea:	42a3      	cmp	r3, r4
 8000dec:	41a4      	sbcs	r4, r4
 8000dee:	4264      	negs	r4, r4
 8000df0:	44a2      	add	sl, r4
 8000df2:	001c      	movs	r4, r3
 8000df4:	4653      	mov	r3, sl
 8000df6:	021b      	lsls	r3, r3, #8
 8000df8:	d400      	bmi.n	8000dfc <__aeabi_dadd+0x118>
 8000dfa:	e09b      	b.n	8000f34 <__aeabi_dadd+0x250>
 8000dfc:	4b94      	ldr	r3, [pc, #592]	; (8001050 <__aeabi_dadd+0x36c>)
 8000dfe:	3601      	adds	r6, #1
 8000e00:	429e      	cmp	r6, r3
 8000e02:	d100      	bne.n	8000e06 <__aeabi_dadd+0x122>
 8000e04:	e0b8      	b.n	8000f78 <__aeabi_dadd+0x294>
 8000e06:	4653      	mov	r3, sl
 8000e08:	4992      	ldr	r1, [pc, #584]	; (8001054 <__aeabi_dadd+0x370>)
 8000e0a:	08e4      	lsrs	r4, r4, #3
 8000e0c:	400b      	ands	r3, r1
 8000e0e:	0019      	movs	r1, r3
 8000e10:	075b      	lsls	r3, r3, #29
 8000e12:	4323      	orrs	r3, r4
 8000e14:	0572      	lsls	r2, r6, #21
 8000e16:	024c      	lsls	r4, r1, #9
 8000e18:	0b24      	lsrs	r4, r4, #12
 8000e1a:	0d52      	lsrs	r2, r2, #21
 8000e1c:	0512      	lsls	r2, r2, #20
 8000e1e:	07ed      	lsls	r5, r5, #31
 8000e20:	4322      	orrs	r2, r4
 8000e22:	432a      	orrs	r2, r5
 8000e24:	0018      	movs	r0, r3
 8000e26:	0011      	movs	r1, r2
 8000e28:	bce0      	pop	{r5, r6, r7}
 8000e2a:	46ba      	mov	sl, r7
 8000e2c:	46b1      	mov	r9, r6
 8000e2e:	46a8      	mov	r8, r5
 8000e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e32:	2f00      	cmp	r7, #0
 8000e34:	d048      	beq.n	8000ec8 <__aeabi_dadd+0x1e4>
 8000e36:	1b97      	subs	r7, r2, r6
 8000e38:	2e00      	cmp	r6, #0
 8000e3a:	d000      	beq.n	8000e3e <__aeabi_dadd+0x15a>
 8000e3c:	e10e      	b.n	800105c <__aeabi_dadd+0x378>
 8000e3e:	000c      	movs	r4, r1
 8000e40:	431c      	orrs	r4, r3
 8000e42:	d100      	bne.n	8000e46 <__aeabi_dadd+0x162>
 8000e44:	e1b7      	b.n	80011b6 <__aeabi_dadd+0x4d2>
 8000e46:	1e7c      	subs	r4, r7, #1
 8000e48:	2f01      	cmp	r7, #1
 8000e4a:	d100      	bne.n	8000e4e <__aeabi_dadd+0x16a>
 8000e4c:	e226      	b.n	800129c <__aeabi_dadd+0x5b8>
 8000e4e:	4d80      	ldr	r5, [pc, #512]	; (8001050 <__aeabi_dadd+0x36c>)
 8000e50:	42af      	cmp	r7, r5
 8000e52:	d100      	bne.n	8000e56 <__aeabi_dadd+0x172>
 8000e54:	e1d5      	b.n	8001202 <__aeabi_dadd+0x51e>
 8000e56:	0027      	movs	r7, r4
 8000e58:	e107      	b.n	800106a <__aeabi_dadd+0x386>
 8000e5a:	2f00      	cmp	r7, #0
 8000e5c:	dc00      	bgt.n	8000e60 <__aeabi_dadd+0x17c>
 8000e5e:	e0b2      	b.n	8000fc6 <__aeabi_dadd+0x2e2>
 8000e60:	2a00      	cmp	r2, #0
 8000e62:	d047      	beq.n	8000ef4 <__aeabi_dadd+0x210>
 8000e64:	4a7a      	ldr	r2, [pc, #488]	; (8001050 <__aeabi_dadd+0x36c>)
 8000e66:	4296      	cmp	r6, r2
 8000e68:	d100      	bne.n	8000e6c <__aeabi_dadd+0x188>
 8000e6a:	e089      	b.n	8000f80 <__aeabi_dadd+0x29c>
 8000e6c:	2280      	movs	r2, #128	; 0x80
 8000e6e:	464c      	mov	r4, r9
 8000e70:	0412      	lsls	r2, r2, #16
 8000e72:	4314      	orrs	r4, r2
 8000e74:	46a1      	mov	r9, r4
 8000e76:	2f38      	cmp	r7, #56	; 0x38
 8000e78:	dc6b      	bgt.n	8000f52 <__aeabi_dadd+0x26e>
 8000e7a:	2f1f      	cmp	r7, #31
 8000e7c:	dc00      	bgt.n	8000e80 <__aeabi_dadd+0x19c>
 8000e7e:	e16e      	b.n	800115e <__aeabi_dadd+0x47a>
 8000e80:	003a      	movs	r2, r7
 8000e82:	4648      	mov	r0, r9
 8000e84:	3a20      	subs	r2, #32
 8000e86:	40d0      	lsrs	r0, r2
 8000e88:	4684      	mov	ip, r0
 8000e8a:	2f20      	cmp	r7, #32
 8000e8c:	d007      	beq.n	8000e9e <__aeabi_dadd+0x1ba>
 8000e8e:	2240      	movs	r2, #64	; 0x40
 8000e90:	4648      	mov	r0, r9
 8000e92:	1bd2      	subs	r2, r2, r7
 8000e94:	4090      	lsls	r0, r2
 8000e96:	0002      	movs	r2, r0
 8000e98:	4640      	mov	r0, r8
 8000e9a:	4310      	orrs	r0, r2
 8000e9c:	4680      	mov	r8, r0
 8000e9e:	4640      	mov	r0, r8
 8000ea0:	1e42      	subs	r2, r0, #1
 8000ea2:	4190      	sbcs	r0, r2
 8000ea4:	4662      	mov	r2, ip
 8000ea6:	0004      	movs	r4, r0
 8000ea8:	4314      	orrs	r4, r2
 8000eaa:	e057      	b.n	8000f5c <__aeabi_dadd+0x278>
 8000eac:	464a      	mov	r2, r9
 8000eae:	4302      	orrs	r2, r0
 8000eb0:	d100      	bne.n	8000eb4 <__aeabi_dadd+0x1d0>
 8000eb2:	e103      	b.n	80010bc <__aeabi_dadd+0x3d8>
 8000eb4:	1e7a      	subs	r2, r7, #1
 8000eb6:	2f01      	cmp	r7, #1
 8000eb8:	d100      	bne.n	8000ebc <__aeabi_dadd+0x1d8>
 8000eba:	e193      	b.n	80011e4 <__aeabi_dadd+0x500>
 8000ebc:	4c64      	ldr	r4, [pc, #400]	; (8001050 <__aeabi_dadd+0x36c>)
 8000ebe:	42a7      	cmp	r7, r4
 8000ec0:	d100      	bne.n	8000ec4 <__aeabi_dadd+0x1e0>
 8000ec2:	e18a      	b.n	80011da <__aeabi_dadd+0x4f6>
 8000ec4:	0017      	movs	r7, r2
 8000ec6:	e73b      	b.n	8000d40 <__aeabi_dadd+0x5c>
 8000ec8:	4c63      	ldr	r4, [pc, #396]	; (8001058 <__aeabi_dadd+0x374>)
 8000eca:	1c72      	adds	r2, r6, #1
 8000ecc:	4222      	tst	r2, r4
 8000ece:	d000      	beq.n	8000ed2 <__aeabi_dadd+0x1ee>
 8000ed0:	e0e0      	b.n	8001094 <__aeabi_dadd+0x3b0>
 8000ed2:	000a      	movs	r2, r1
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	2e00      	cmp	r6, #0
 8000ed8:	d000      	beq.n	8000edc <__aeabi_dadd+0x1f8>
 8000eda:	e174      	b.n	80011c6 <__aeabi_dadd+0x4e2>
 8000edc:	2a00      	cmp	r2, #0
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_dadd+0x1fe>
 8000ee0:	e1d0      	b.n	8001284 <__aeabi_dadd+0x5a0>
 8000ee2:	464a      	mov	r2, r9
 8000ee4:	4302      	orrs	r2, r0
 8000ee6:	d000      	beq.n	8000eea <__aeabi_dadd+0x206>
 8000ee8:	e1e3      	b.n	80012b2 <__aeabi_dadd+0x5ce>
 8000eea:	074a      	lsls	r2, r1, #29
 8000eec:	08db      	lsrs	r3, r3, #3
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	08c9      	lsrs	r1, r1, #3
 8000ef2:	e029      	b.n	8000f48 <__aeabi_dadd+0x264>
 8000ef4:	464a      	mov	r2, r9
 8000ef6:	4302      	orrs	r2, r0
 8000ef8:	d100      	bne.n	8000efc <__aeabi_dadd+0x218>
 8000efa:	e17d      	b.n	80011f8 <__aeabi_dadd+0x514>
 8000efc:	1e7a      	subs	r2, r7, #1
 8000efe:	2f01      	cmp	r7, #1
 8000f00:	d100      	bne.n	8000f04 <__aeabi_dadd+0x220>
 8000f02:	e0e0      	b.n	80010c6 <__aeabi_dadd+0x3e2>
 8000f04:	4c52      	ldr	r4, [pc, #328]	; (8001050 <__aeabi_dadd+0x36c>)
 8000f06:	42a7      	cmp	r7, r4
 8000f08:	d100      	bne.n	8000f0c <__aeabi_dadd+0x228>
 8000f0a:	e166      	b.n	80011da <__aeabi_dadd+0x4f6>
 8000f0c:	0017      	movs	r7, r2
 8000f0e:	e7b2      	b.n	8000e76 <__aeabi_dadd+0x192>
 8000f10:	0010      	movs	r0, r2
 8000f12:	3b1f      	subs	r3, #31
 8000f14:	40d8      	lsrs	r0, r3
 8000f16:	2920      	cmp	r1, #32
 8000f18:	d003      	beq.n	8000f22 <__aeabi_dadd+0x23e>
 8000f1a:	2340      	movs	r3, #64	; 0x40
 8000f1c:	1a5b      	subs	r3, r3, r1
 8000f1e:	409a      	lsls	r2, r3
 8000f20:	4314      	orrs	r4, r2
 8000f22:	1e63      	subs	r3, r4, #1
 8000f24:	419c      	sbcs	r4, r3
 8000f26:	2300      	movs	r3, #0
 8000f28:	2600      	movs	r6, #0
 8000f2a:	469a      	mov	sl, r3
 8000f2c:	4304      	orrs	r4, r0
 8000f2e:	0763      	lsls	r3, r4, #29
 8000f30:	d000      	beq.n	8000f34 <__aeabi_dadd+0x250>
 8000f32:	e755      	b.n	8000de0 <__aeabi_dadd+0xfc>
 8000f34:	4652      	mov	r2, sl
 8000f36:	08e3      	lsrs	r3, r4, #3
 8000f38:	0752      	lsls	r2, r2, #29
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	4652      	mov	r2, sl
 8000f3e:	0037      	movs	r7, r6
 8000f40:	08d1      	lsrs	r1, r2, #3
 8000f42:	4a43      	ldr	r2, [pc, #268]	; (8001050 <__aeabi_dadd+0x36c>)
 8000f44:	4297      	cmp	r7, r2
 8000f46:	d01f      	beq.n	8000f88 <__aeabi_dadd+0x2a4>
 8000f48:	0309      	lsls	r1, r1, #12
 8000f4a:	057a      	lsls	r2, r7, #21
 8000f4c:	0b0c      	lsrs	r4, r1, #12
 8000f4e:	0d52      	lsrs	r2, r2, #21
 8000f50:	e764      	b.n	8000e1c <__aeabi_dadd+0x138>
 8000f52:	4642      	mov	r2, r8
 8000f54:	464c      	mov	r4, r9
 8000f56:	4314      	orrs	r4, r2
 8000f58:	1e62      	subs	r2, r4, #1
 8000f5a:	4194      	sbcs	r4, r2
 8000f5c:	18e4      	adds	r4, r4, r3
 8000f5e:	429c      	cmp	r4, r3
 8000f60:	4192      	sbcs	r2, r2
 8000f62:	4252      	negs	r2, r2
 8000f64:	4692      	mov	sl, r2
 8000f66:	448a      	add	sl, r1
 8000f68:	4653      	mov	r3, sl
 8000f6a:	021b      	lsls	r3, r3, #8
 8000f6c:	d5df      	bpl.n	8000f2e <__aeabi_dadd+0x24a>
 8000f6e:	4b38      	ldr	r3, [pc, #224]	; (8001050 <__aeabi_dadd+0x36c>)
 8000f70:	3601      	adds	r6, #1
 8000f72:	429e      	cmp	r6, r3
 8000f74:	d000      	beq.n	8000f78 <__aeabi_dadd+0x294>
 8000f76:	e0b3      	b.n	80010e0 <__aeabi_dadd+0x3fc>
 8000f78:	0032      	movs	r2, r6
 8000f7a:	2400      	movs	r4, #0
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	e74d      	b.n	8000e1c <__aeabi_dadd+0x138>
 8000f80:	074a      	lsls	r2, r1, #29
 8000f82:	08db      	lsrs	r3, r3, #3
 8000f84:	4313      	orrs	r3, r2
 8000f86:	08c9      	lsrs	r1, r1, #3
 8000f88:	001a      	movs	r2, r3
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	d100      	bne.n	8000f90 <__aeabi_dadd+0x2ac>
 8000f8e:	e200      	b.n	8001392 <__aeabi_dadd+0x6ae>
 8000f90:	2480      	movs	r4, #128	; 0x80
 8000f92:	0324      	lsls	r4, r4, #12
 8000f94:	430c      	orrs	r4, r1
 8000f96:	0324      	lsls	r4, r4, #12
 8000f98:	4a2d      	ldr	r2, [pc, #180]	; (8001050 <__aeabi_dadd+0x36c>)
 8000f9a:	0b24      	lsrs	r4, r4, #12
 8000f9c:	e73e      	b.n	8000e1c <__aeabi_dadd+0x138>
 8000f9e:	0020      	movs	r0, r4
 8000fa0:	f001 fce8 	bl	8002974 <__clzsi2>
 8000fa4:	0003      	movs	r3, r0
 8000fa6:	3318      	adds	r3, #24
 8000fa8:	2b1f      	cmp	r3, #31
 8000faa:	dc00      	bgt.n	8000fae <__aeabi_dadd+0x2ca>
 8000fac:	e6f7      	b.n	8000d9e <__aeabi_dadd+0xba>
 8000fae:	0022      	movs	r2, r4
 8000fb0:	3808      	subs	r0, #8
 8000fb2:	4082      	lsls	r2, r0
 8000fb4:	2400      	movs	r4, #0
 8000fb6:	42b3      	cmp	r3, r6
 8000fb8:	db00      	blt.n	8000fbc <__aeabi_dadd+0x2d8>
 8000fba:	e6fc      	b.n	8000db6 <__aeabi_dadd+0xd2>
 8000fbc:	1af6      	subs	r6, r6, r3
 8000fbe:	4b25      	ldr	r3, [pc, #148]	; (8001054 <__aeabi_dadd+0x370>)
 8000fc0:	401a      	ands	r2, r3
 8000fc2:	4692      	mov	sl, r2
 8000fc4:	e70a      	b.n	8000ddc <__aeabi_dadd+0xf8>
 8000fc6:	2f00      	cmp	r7, #0
 8000fc8:	d02b      	beq.n	8001022 <__aeabi_dadd+0x33e>
 8000fca:	1b97      	subs	r7, r2, r6
 8000fcc:	2e00      	cmp	r6, #0
 8000fce:	d100      	bne.n	8000fd2 <__aeabi_dadd+0x2ee>
 8000fd0:	e0b8      	b.n	8001144 <__aeabi_dadd+0x460>
 8000fd2:	4c1f      	ldr	r4, [pc, #124]	; (8001050 <__aeabi_dadd+0x36c>)
 8000fd4:	42a2      	cmp	r2, r4
 8000fd6:	d100      	bne.n	8000fda <__aeabi_dadd+0x2f6>
 8000fd8:	e11c      	b.n	8001214 <__aeabi_dadd+0x530>
 8000fda:	2480      	movs	r4, #128	; 0x80
 8000fdc:	0424      	lsls	r4, r4, #16
 8000fde:	4321      	orrs	r1, r4
 8000fe0:	2f38      	cmp	r7, #56	; 0x38
 8000fe2:	dd00      	ble.n	8000fe6 <__aeabi_dadd+0x302>
 8000fe4:	e11e      	b.n	8001224 <__aeabi_dadd+0x540>
 8000fe6:	2f1f      	cmp	r7, #31
 8000fe8:	dd00      	ble.n	8000fec <__aeabi_dadd+0x308>
 8000fea:	e19e      	b.n	800132a <__aeabi_dadd+0x646>
 8000fec:	2620      	movs	r6, #32
 8000fee:	000c      	movs	r4, r1
 8000ff0:	1bf6      	subs	r6, r6, r7
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	40b3      	lsls	r3, r6
 8000ff6:	40b4      	lsls	r4, r6
 8000ff8:	40f8      	lsrs	r0, r7
 8000ffa:	1e5e      	subs	r6, r3, #1
 8000ffc:	41b3      	sbcs	r3, r6
 8000ffe:	40f9      	lsrs	r1, r7
 8001000:	4304      	orrs	r4, r0
 8001002:	431c      	orrs	r4, r3
 8001004:	4489      	add	r9, r1
 8001006:	4444      	add	r4, r8
 8001008:	4544      	cmp	r4, r8
 800100a:	419b      	sbcs	r3, r3
 800100c:	425b      	negs	r3, r3
 800100e:	444b      	add	r3, r9
 8001010:	469a      	mov	sl, r3
 8001012:	0016      	movs	r6, r2
 8001014:	e7a8      	b.n	8000f68 <__aeabi_dadd+0x284>
 8001016:	4642      	mov	r2, r8
 8001018:	464c      	mov	r4, r9
 800101a:	4314      	orrs	r4, r2
 800101c:	1e62      	subs	r2, r4, #1
 800101e:	4194      	sbcs	r4, r2
 8001020:	e6a6      	b.n	8000d70 <__aeabi_dadd+0x8c>
 8001022:	4c0d      	ldr	r4, [pc, #52]	; (8001058 <__aeabi_dadd+0x374>)
 8001024:	1c72      	adds	r2, r6, #1
 8001026:	4222      	tst	r2, r4
 8001028:	d000      	beq.n	800102c <__aeabi_dadd+0x348>
 800102a:	e0a8      	b.n	800117e <__aeabi_dadd+0x49a>
 800102c:	000a      	movs	r2, r1
 800102e:	431a      	orrs	r2, r3
 8001030:	2e00      	cmp	r6, #0
 8001032:	d000      	beq.n	8001036 <__aeabi_dadd+0x352>
 8001034:	e10a      	b.n	800124c <__aeabi_dadd+0x568>
 8001036:	2a00      	cmp	r2, #0
 8001038:	d100      	bne.n	800103c <__aeabi_dadd+0x358>
 800103a:	e15e      	b.n	80012fa <__aeabi_dadd+0x616>
 800103c:	464a      	mov	r2, r9
 800103e:	4302      	orrs	r2, r0
 8001040:	d000      	beq.n	8001044 <__aeabi_dadd+0x360>
 8001042:	e161      	b.n	8001308 <__aeabi_dadd+0x624>
 8001044:	074a      	lsls	r2, r1, #29
 8001046:	08db      	lsrs	r3, r3, #3
 8001048:	4313      	orrs	r3, r2
 800104a:	08c9      	lsrs	r1, r1, #3
 800104c:	e77c      	b.n	8000f48 <__aeabi_dadd+0x264>
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	000007ff 	.word	0x000007ff
 8001054:	ff7fffff 	.word	0xff7fffff
 8001058:	000007fe 	.word	0x000007fe
 800105c:	4ccf      	ldr	r4, [pc, #828]	; (800139c <__aeabi_dadd+0x6b8>)
 800105e:	42a2      	cmp	r2, r4
 8001060:	d100      	bne.n	8001064 <__aeabi_dadd+0x380>
 8001062:	e0ce      	b.n	8001202 <__aeabi_dadd+0x51e>
 8001064:	2480      	movs	r4, #128	; 0x80
 8001066:	0424      	lsls	r4, r4, #16
 8001068:	4321      	orrs	r1, r4
 800106a:	2f38      	cmp	r7, #56	; 0x38
 800106c:	dc5b      	bgt.n	8001126 <__aeabi_dadd+0x442>
 800106e:	2f1f      	cmp	r7, #31
 8001070:	dd00      	ble.n	8001074 <__aeabi_dadd+0x390>
 8001072:	e0dc      	b.n	800122e <__aeabi_dadd+0x54a>
 8001074:	2520      	movs	r5, #32
 8001076:	000c      	movs	r4, r1
 8001078:	1bed      	subs	r5, r5, r7
 800107a:	001e      	movs	r6, r3
 800107c:	40ab      	lsls	r3, r5
 800107e:	40ac      	lsls	r4, r5
 8001080:	40fe      	lsrs	r6, r7
 8001082:	1e5d      	subs	r5, r3, #1
 8001084:	41ab      	sbcs	r3, r5
 8001086:	4334      	orrs	r4, r6
 8001088:	40f9      	lsrs	r1, r7
 800108a:	431c      	orrs	r4, r3
 800108c:	464b      	mov	r3, r9
 800108e:	1a5b      	subs	r3, r3, r1
 8001090:	4699      	mov	r9, r3
 8001092:	e04c      	b.n	800112e <__aeabi_dadd+0x44a>
 8001094:	464a      	mov	r2, r9
 8001096:	1a1c      	subs	r4, r3, r0
 8001098:	1a88      	subs	r0, r1, r2
 800109a:	42a3      	cmp	r3, r4
 800109c:	4192      	sbcs	r2, r2
 800109e:	4252      	negs	r2, r2
 80010a0:	4692      	mov	sl, r2
 80010a2:	0002      	movs	r2, r0
 80010a4:	4650      	mov	r0, sl
 80010a6:	1a12      	subs	r2, r2, r0
 80010a8:	4692      	mov	sl, r2
 80010aa:	0212      	lsls	r2, r2, #8
 80010ac:	d478      	bmi.n	80011a0 <__aeabi_dadd+0x4bc>
 80010ae:	4653      	mov	r3, sl
 80010b0:	4323      	orrs	r3, r4
 80010b2:	d000      	beq.n	80010b6 <__aeabi_dadd+0x3d2>
 80010b4:	e66a      	b.n	8000d8c <__aeabi_dadd+0xa8>
 80010b6:	2100      	movs	r1, #0
 80010b8:	2500      	movs	r5, #0
 80010ba:	e745      	b.n	8000f48 <__aeabi_dadd+0x264>
 80010bc:	074a      	lsls	r2, r1, #29
 80010be:	08db      	lsrs	r3, r3, #3
 80010c0:	4313      	orrs	r3, r2
 80010c2:	08c9      	lsrs	r1, r1, #3
 80010c4:	e73d      	b.n	8000f42 <__aeabi_dadd+0x25e>
 80010c6:	181c      	adds	r4, r3, r0
 80010c8:	429c      	cmp	r4, r3
 80010ca:	419b      	sbcs	r3, r3
 80010cc:	4449      	add	r1, r9
 80010ce:	468a      	mov	sl, r1
 80010d0:	425b      	negs	r3, r3
 80010d2:	449a      	add	sl, r3
 80010d4:	4653      	mov	r3, sl
 80010d6:	2601      	movs	r6, #1
 80010d8:	021b      	lsls	r3, r3, #8
 80010da:	d400      	bmi.n	80010de <__aeabi_dadd+0x3fa>
 80010dc:	e727      	b.n	8000f2e <__aeabi_dadd+0x24a>
 80010de:	2602      	movs	r6, #2
 80010e0:	4652      	mov	r2, sl
 80010e2:	4baf      	ldr	r3, [pc, #700]	; (80013a0 <__aeabi_dadd+0x6bc>)
 80010e4:	2101      	movs	r1, #1
 80010e6:	401a      	ands	r2, r3
 80010e8:	0013      	movs	r3, r2
 80010ea:	4021      	ands	r1, r4
 80010ec:	0862      	lsrs	r2, r4, #1
 80010ee:	430a      	orrs	r2, r1
 80010f0:	07dc      	lsls	r4, r3, #31
 80010f2:	085b      	lsrs	r3, r3, #1
 80010f4:	469a      	mov	sl, r3
 80010f6:	4314      	orrs	r4, r2
 80010f8:	e670      	b.n	8000ddc <__aeabi_dadd+0xf8>
 80010fa:	003a      	movs	r2, r7
 80010fc:	464c      	mov	r4, r9
 80010fe:	3a20      	subs	r2, #32
 8001100:	40d4      	lsrs	r4, r2
 8001102:	46a4      	mov	ip, r4
 8001104:	2f20      	cmp	r7, #32
 8001106:	d007      	beq.n	8001118 <__aeabi_dadd+0x434>
 8001108:	2240      	movs	r2, #64	; 0x40
 800110a:	4648      	mov	r0, r9
 800110c:	1bd2      	subs	r2, r2, r7
 800110e:	4090      	lsls	r0, r2
 8001110:	0002      	movs	r2, r0
 8001112:	4640      	mov	r0, r8
 8001114:	4310      	orrs	r0, r2
 8001116:	4680      	mov	r8, r0
 8001118:	4640      	mov	r0, r8
 800111a:	1e42      	subs	r2, r0, #1
 800111c:	4190      	sbcs	r0, r2
 800111e:	4662      	mov	r2, ip
 8001120:	0004      	movs	r4, r0
 8001122:	4314      	orrs	r4, r2
 8001124:	e624      	b.n	8000d70 <__aeabi_dadd+0x8c>
 8001126:	4319      	orrs	r1, r3
 8001128:	000c      	movs	r4, r1
 800112a:	1e63      	subs	r3, r4, #1
 800112c:	419c      	sbcs	r4, r3
 800112e:	4643      	mov	r3, r8
 8001130:	1b1c      	subs	r4, r3, r4
 8001132:	45a0      	cmp	r8, r4
 8001134:	419b      	sbcs	r3, r3
 8001136:	4649      	mov	r1, r9
 8001138:	425b      	negs	r3, r3
 800113a:	1acb      	subs	r3, r1, r3
 800113c:	469a      	mov	sl, r3
 800113e:	4665      	mov	r5, ip
 8001140:	0016      	movs	r6, r2
 8001142:	e61b      	b.n	8000d7c <__aeabi_dadd+0x98>
 8001144:	000c      	movs	r4, r1
 8001146:	431c      	orrs	r4, r3
 8001148:	d100      	bne.n	800114c <__aeabi_dadd+0x468>
 800114a:	e0c7      	b.n	80012dc <__aeabi_dadd+0x5f8>
 800114c:	1e7c      	subs	r4, r7, #1
 800114e:	2f01      	cmp	r7, #1
 8001150:	d100      	bne.n	8001154 <__aeabi_dadd+0x470>
 8001152:	e0f9      	b.n	8001348 <__aeabi_dadd+0x664>
 8001154:	4e91      	ldr	r6, [pc, #580]	; (800139c <__aeabi_dadd+0x6b8>)
 8001156:	42b7      	cmp	r7, r6
 8001158:	d05c      	beq.n	8001214 <__aeabi_dadd+0x530>
 800115a:	0027      	movs	r7, r4
 800115c:	e740      	b.n	8000fe0 <__aeabi_dadd+0x2fc>
 800115e:	2220      	movs	r2, #32
 8001160:	464c      	mov	r4, r9
 8001162:	4640      	mov	r0, r8
 8001164:	1bd2      	subs	r2, r2, r7
 8001166:	4094      	lsls	r4, r2
 8001168:	40f8      	lsrs	r0, r7
 800116a:	4304      	orrs	r4, r0
 800116c:	4640      	mov	r0, r8
 800116e:	4090      	lsls	r0, r2
 8001170:	1e42      	subs	r2, r0, #1
 8001172:	4190      	sbcs	r0, r2
 8001174:	464a      	mov	r2, r9
 8001176:	40fa      	lsrs	r2, r7
 8001178:	4304      	orrs	r4, r0
 800117a:	1889      	adds	r1, r1, r2
 800117c:	e6ee      	b.n	8000f5c <__aeabi_dadd+0x278>
 800117e:	4c87      	ldr	r4, [pc, #540]	; (800139c <__aeabi_dadd+0x6b8>)
 8001180:	42a2      	cmp	r2, r4
 8001182:	d100      	bne.n	8001186 <__aeabi_dadd+0x4a2>
 8001184:	e6f9      	b.n	8000f7a <__aeabi_dadd+0x296>
 8001186:	1818      	adds	r0, r3, r0
 8001188:	4298      	cmp	r0, r3
 800118a:	419b      	sbcs	r3, r3
 800118c:	4449      	add	r1, r9
 800118e:	425b      	negs	r3, r3
 8001190:	18cb      	adds	r3, r1, r3
 8001192:	07dc      	lsls	r4, r3, #31
 8001194:	0840      	lsrs	r0, r0, #1
 8001196:	085b      	lsrs	r3, r3, #1
 8001198:	469a      	mov	sl, r3
 800119a:	0016      	movs	r6, r2
 800119c:	4304      	orrs	r4, r0
 800119e:	e6c6      	b.n	8000f2e <__aeabi_dadd+0x24a>
 80011a0:	4642      	mov	r2, r8
 80011a2:	1ad4      	subs	r4, r2, r3
 80011a4:	45a0      	cmp	r8, r4
 80011a6:	4180      	sbcs	r0, r0
 80011a8:	464b      	mov	r3, r9
 80011aa:	4240      	negs	r0, r0
 80011ac:	1a59      	subs	r1, r3, r1
 80011ae:	1a0b      	subs	r3, r1, r0
 80011b0:	469a      	mov	sl, r3
 80011b2:	4665      	mov	r5, ip
 80011b4:	e5ea      	b.n	8000d8c <__aeabi_dadd+0xa8>
 80011b6:	464b      	mov	r3, r9
 80011b8:	464a      	mov	r2, r9
 80011ba:	08c0      	lsrs	r0, r0, #3
 80011bc:	075b      	lsls	r3, r3, #29
 80011be:	4665      	mov	r5, ip
 80011c0:	4303      	orrs	r3, r0
 80011c2:	08d1      	lsrs	r1, r2, #3
 80011c4:	e6bd      	b.n	8000f42 <__aeabi_dadd+0x25e>
 80011c6:	2a00      	cmp	r2, #0
 80011c8:	d000      	beq.n	80011cc <__aeabi_dadd+0x4e8>
 80011ca:	e08e      	b.n	80012ea <__aeabi_dadd+0x606>
 80011cc:	464b      	mov	r3, r9
 80011ce:	4303      	orrs	r3, r0
 80011d0:	d117      	bne.n	8001202 <__aeabi_dadd+0x51e>
 80011d2:	2180      	movs	r1, #128	; 0x80
 80011d4:	2500      	movs	r5, #0
 80011d6:	0309      	lsls	r1, r1, #12
 80011d8:	e6da      	b.n	8000f90 <__aeabi_dadd+0x2ac>
 80011da:	074a      	lsls	r2, r1, #29
 80011dc:	08db      	lsrs	r3, r3, #3
 80011de:	4313      	orrs	r3, r2
 80011e0:	08c9      	lsrs	r1, r1, #3
 80011e2:	e6d1      	b.n	8000f88 <__aeabi_dadd+0x2a4>
 80011e4:	1a1c      	subs	r4, r3, r0
 80011e6:	464a      	mov	r2, r9
 80011e8:	42a3      	cmp	r3, r4
 80011ea:	419b      	sbcs	r3, r3
 80011ec:	1a89      	subs	r1, r1, r2
 80011ee:	425b      	negs	r3, r3
 80011f0:	1acb      	subs	r3, r1, r3
 80011f2:	469a      	mov	sl, r3
 80011f4:	2601      	movs	r6, #1
 80011f6:	e5c1      	b.n	8000d7c <__aeabi_dadd+0x98>
 80011f8:	074a      	lsls	r2, r1, #29
 80011fa:	08db      	lsrs	r3, r3, #3
 80011fc:	4313      	orrs	r3, r2
 80011fe:	08c9      	lsrs	r1, r1, #3
 8001200:	e69f      	b.n	8000f42 <__aeabi_dadd+0x25e>
 8001202:	4643      	mov	r3, r8
 8001204:	08d8      	lsrs	r0, r3, #3
 8001206:	464b      	mov	r3, r9
 8001208:	464a      	mov	r2, r9
 800120a:	075b      	lsls	r3, r3, #29
 800120c:	4665      	mov	r5, ip
 800120e:	4303      	orrs	r3, r0
 8001210:	08d1      	lsrs	r1, r2, #3
 8001212:	e6b9      	b.n	8000f88 <__aeabi_dadd+0x2a4>
 8001214:	4643      	mov	r3, r8
 8001216:	08d8      	lsrs	r0, r3, #3
 8001218:	464b      	mov	r3, r9
 800121a:	464a      	mov	r2, r9
 800121c:	075b      	lsls	r3, r3, #29
 800121e:	4303      	orrs	r3, r0
 8001220:	08d1      	lsrs	r1, r2, #3
 8001222:	e6b1      	b.n	8000f88 <__aeabi_dadd+0x2a4>
 8001224:	4319      	orrs	r1, r3
 8001226:	000c      	movs	r4, r1
 8001228:	1e63      	subs	r3, r4, #1
 800122a:	419c      	sbcs	r4, r3
 800122c:	e6eb      	b.n	8001006 <__aeabi_dadd+0x322>
 800122e:	003c      	movs	r4, r7
 8001230:	000d      	movs	r5, r1
 8001232:	3c20      	subs	r4, #32
 8001234:	40e5      	lsrs	r5, r4
 8001236:	2f20      	cmp	r7, #32
 8001238:	d003      	beq.n	8001242 <__aeabi_dadd+0x55e>
 800123a:	2440      	movs	r4, #64	; 0x40
 800123c:	1be4      	subs	r4, r4, r7
 800123e:	40a1      	lsls	r1, r4
 8001240:	430b      	orrs	r3, r1
 8001242:	001c      	movs	r4, r3
 8001244:	1e63      	subs	r3, r4, #1
 8001246:	419c      	sbcs	r4, r3
 8001248:	432c      	orrs	r4, r5
 800124a:	e770      	b.n	800112e <__aeabi_dadd+0x44a>
 800124c:	2a00      	cmp	r2, #0
 800124e:	d0e1      	beq.n	8001214 <__aeabi_dadd+0x530>
 8001250:	464a      	mov	r2, r9
 8001252:	4302      	orrs	r2, r0
 8001254:	d0c1      	beq.n	80011da <__aeabi_dadd+0x4f6>
 8001256:	074a      	lsls	r2, r1, #29
 8001258:	08db      	lsrs	r3, r3, #3
 800125a:	4313      	orrs	r3, r2
 800125c:	2280      	movs	r2, #128	; 0x80
 800125e:	08c9      	lsrs	r1, r1, #3
 8001260:	0312      	lsls	r2, r2, #12
 8001262:	4211      	tst	r1, r2
 8001264:	d008      	beq.n	8001278 <__aeabi_dadd+0x594>
 8001266:	4648      	mov	r0, r9
 8001268:	08c4      	lsrs	r4, r0, #3
 800126a:	4214      	tst	r4, r2
 800126c:	d104      	bne.n	8001278 <__aeabi_dadd+0x594>
 800126e:	4643      	mov	r3, r8
 8001270:	0021      	movs	r1, r4
 8001272:	08db      	lsrs	r3, r3, #3
 8001274:	0742      	lsls	r2, r0, #29
 8001276:	4313      	orrs	r3, r2
 8001278:	0f5a      	lsrs	r2, r3, #29
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	0752      	lsls	r2, r2, #29
 800127e:	08db      	lsrs	r3, r3, #3
 8001280:	4313      	orrs	r3, r2
 8001282:	e681      	b.n	8000f88 <__aeabi_dadd+0x2a4>
 8001284:	464b      	mov	r3, r9
 8001286:	4303      	orrs	r3, r0
 8001288:	d100      	bne.n	800128c <__aeabi_dadd+0x5a8>
 800128a:	e714      	b.n	80010b6 <__aeabi_dadd+0x3d2>
 800128c:	464b      	mov	r3, r9
 800128e:	464a      	mov	r2, r9
 8001290:	08c0      	lsrs	r0, r0, #3
 8001292:	075b      	lsls	r3, r3, #29
 8001294:	4665      	mov	r5, ip
 8001296:	4303      	orrs	r3, r0
 8001298:	08d1      	lsrs	r1, r2, #3
 800129a:	e655      	b.n	8000f48 <__aeabi_dadd+0x264>
 800129c:	1ac4      	subs	r4, r0, r3
 800129e:	45a0      	cmp	r8, r4
 80012a0:	4180      	sbcs	r0, r0
 80012a2:	464b      	mov	r3, r9
 80012a4:	4240      	negs	r0, r0
 80012a6:	1a59      	subs	r1, r3, r1
 80012a8:	1a0b      	subs	r3, r1, r0
 80012aa:	469a      	mov	sl, r3
 80012ac:	4665      	mov	r5, ip
 80012ae:	2601      	movs	r6, #1
 80012b0:	e564      	b.n	8000d7c <__aeabi_dadd+0x98>
 80012b2:	1a1c      	subs	r4, r3, r0
 80012b4:	464a      	mov	r2, r9
 80012b6:	42a3      	cmp	r3, r4
 80012b8:	4180      	sbcs	r0, r0
 80012ba:	1a8a      	subs	r2, r1, r2
 80012bc:	4240      	negs	r0, r0
 80012be:	1a12      	subs	r2, r2, r0
 80012c0:	4692      	mov	sl, r2
 80012c2:	0212      	lsls	r2, r2, #8
 80012c4:	d549      	bpl.n	800135a <__aeabi_dadd+0x676>
 80012c6:	4642      	mov	r2, r8
 80012c8:	1ad4      	subs	r4, r2, r3
 80012ca:	45a0      	cmp	r8, r4
 80012cc:	4180      	sbcs	r0, r0
 80012ce:	464b      	mov	r3, r9
 80012d0:	4240      	negs	r0, r0
 80012d2:	1a59      	subs	r1, r3, r1
 80012d4:	1a0b      	subs	r3, r1, r0
 80012d6:	469a      	mov	sl, r3
 80012d8:	4665      	mov	r5, ip
 80012da:	e57f      	b.n	8000ddc <__aeabi_dadd+0xf8>
 80012dc:	464b      	mov	r3, r9
 80012de:	464a      	mov	r2, r9
 80012e0:	08c0      	lsrs	r0, r0, #3
 80012e2:	075b      	lsls	r3, r3, #29
 80012e4:	4303      	orrs	r3, r0
 80012e6:	08d1      	lsrs	r1, r2, #3
 80012e8:	e62b      	b.n	8000f42 <__aeabi_dadd+0x25e>
 80012ea:	464a      	mov	r2, r9
 80012ec:	08db      	lsrs	r3, r3, #3
 80012ee:	4302      	orrs	r2, r0
 80012f0:	d138      	bne.n	8001364 <__aeabi_dadd+0x680>
 80012f2:	074a      	lsls	r2, r1, #29
 80012f4:	4313      	orrs	r3, r2
 80012f6:	08c9      	lsrs	r1, r1, #3
 80012f8:	e646      	b.n	8000f88 <__aeabi_dadd+0x2a4>
 80012fa:	464b      	mov	r3, r9
 80012fc:	464a      	mov	r2, r9
 80012fe:	08c0      	lsrs	r0, r0, #3
 8001300:	075b      	lsls	r3, r3, #29
 8001302:	4303      	orrs	r3, r0
 8001304:	08d1      	lsrs	r1, r2, #3
 8001306:	e61f      	b.n	8000f48 <__aeabi_dadd+0x264>
 8001308:	181c      	adds	r4, r3, r0
 800130a:	429c      	cmp	r4, r3
 800130c:	419b      	sbcs	r3, r3
 800130e:	4449      	add	r1, r9
 8001310:	468a      	mov	sl, r1
 8001312:	425b      	negs	r3, r3
 8001314:	449a      	add	sl, r3
 8001316:	4653      	mov	r3, sl
 8001318:	021b      	lsls	r3, r3, #8
 800131a:	d400      	bmi.n	800131e <__aeabi_dadd+0x63a>
 800131c:	e607      	b.n	8000f2e <__aeabi_dadd+0x24a>
 800131e:	4652      	mov	r2, sl
 8001320:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <__aeabi_dadd+0x6bc>)
 8001322:	2601      	movs	r6, #1
 8001324:	401a      	ands	r2, r3
 8001326:	4692      	mov	sl, r2
 8001328:	e601      	b.n	8000f2e <__aeabi_dadd+0x24a>
 800132a:	003c      	movs	r4, r7
 800132c:	000e      	movs	r6, r1
 800132e:	3c20      	subs	r4, #32
 8001330:	40e6      	lsrs	r6, r4
 8001332:	2f20      	cmp	r7, #32
 8001334:	d003      	beq.n	800133e <__aeabi_dadd+0x65a>
 8001336:	2440      	movs	r4, #64	; 0x40
 8001338:	1be4      	subs	r4, r4, r7
 800133a:	40a1      	lsls	r1, r4
 800133c:	430b      	orrs	r3, r1
 800133e:	001c      	movs	r4, r3
 8001340:	1e63      	subs	r3, r4, #1
 8001342:	419c      	sbcs	r4, r3
 8001344:	4334      	orrs	r4, r6
 8001346:	e65e      	b.n	8001006 <__aeabi_dadd+0x322>
 8001348:	4443      	add	r3, r8
 800134a:	4283      	cmp	r3, r0
 800134c:	4180      	sbcs	r0, r0
 800134e:	4449      	add	r1, r9
 8001350:	468a      	mov	sl, r1
 8001352:	4240      	negs	r0, r0
 8001354:	001c      	movs	r4, r3
 8001356:	4482      	add	sl, r0
 8001358:	e6bc      	b.n	80010d4 <__aeabi_dadd+0x3f0>
 800135a:	4653      	mov	r3, sl
 800135c:	4323      	orrs	r3, r4
 800135e:	d100      	bne.n	8001362 <__aeabi_dadd+0x67e>
 8001360:	e6a9      	b.n	80010b6 <__aeabi_dadd+0x3d2>
 8001362:	e5e4      	b.n	8000f2e <__aeabi_dadd+0x24a>
 8001364:	074a      	lsls	r2, r1, #29
 8001366:	4313      	orrs	r3, r2
 8001368:	2280      	movs	r2, #128	; 0x80
 800136a:	08c9      	lsrs	r1, r1, #3
 800136c:	0312      	lsls	r2, r2, #12
 800136e:	4211      	tst	r1, r2
 8001370:	d009      	beq.n	8001386 <__aeabi_dadd+0x6a2>
 8001372:	4648      	mov	r0, r9
 8001374:	08c4      	lsrs	r4, r0, #3
 8001376:	4214      	tst	r4, r2
 8001378:	d105      	bne.n	8001386 <__aeabi_dadd+0x6a2>
 800137a:	4643      	mov	r3, r8
 800137c:	4665      	mov	r5, ip
 800137e:	0021      	movs	r1, r4
 8001380:	08db      	lsrs	r3, r3, #3
 8001382:	0742      	lsls	r2, r0, #29
 8001384:	4313      	orrs	r3, r2
 8001386:	0f5a      	lsrs	r2, r3, #29
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	08db      	lsrs	r3, r3, #3
 800138c:	0752      	lsls	r2, r2, #29
 800138e:	4313      	orrs	r3, r2
 8001390:	e5fa      	b.n	8000f88 <__aeabi_dadd+0x2a4>
 8001392:	2300      	movs	r3, #0
 8001394:	4a01      	ldr	r2, [pc, #4]	; (800139c <__aeabi_dadd+0x6b8>)
 8001396:	001c      	movs	r4, r3
 8001398:	e540      	b.n	8000e1c <__aeabi_dadd+0x138>
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	000007ff 	.word	0x000007ff
 80013a0:	ff7fffff 	.word	0xff7fffff

080013a4 <__aeabi_ddiv>:
 80013a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a6:	4657      	mov	r7, sl
 80013a8:	464e      	mov	r6, r9
 80013aa:	4645      	mov	r5, r8
 80013ac:	46de      	mov	lr, fp
 80013ae:	b5e0      	push	{r5, r6, r7, lr}
 80013b0:	030c      	lsls	r4, r1, #12
 80013b2:	001f      	movs	r7, r3
 80013b4:	004b      	lsls	r3, r1, #1
 80013b6:	4681      	mov	r9, r0
 80013b8:	4692      	mov	sl, r2
 80013ba:	0005      	movs	r5, r0
 80013bc:	b085      	sub	sp, #20
 80013be:	0b24      	lsrs	r4, r4, #12
 80013c0:	0d5b      	lsrs	r3, r3, #21
 80013c2:	0fce      	lsrs	r6, r1, #31
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d100      	bne.n	80013ca <__aeabi_ddiv+0x26>
 80013c8:	e152      	b.n	8001670 <__aeabi_ddiv+0x2cc>
 80013ca:	4ad2      	ldr	r2, [pc, #840]	; (8001714 <__aeabi_ddiv+0x370>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d100      	bne.n	80013d2 <__aeabi_ddiv+0x2e>
 80013d0:	e16e      	b.n	80016b0 <__aeabi_ddiv+0x30c>
 80013d2:	0f42      	lsrs	r2, r0, #29
 80013d4:	00e4      	lsls	r4, r4, #3
 80013d6:	4314      	orrs	r4, r2
 80013d8:	2280      	movs	r2, #128	; 0x80
 80013da:	0412      	lsls	r2, r2, #16
 80013dc:	4322      	orrs	r2, r4
 80013de:	4690      	mov	r8, r2
 80013e0:	4acd      	ldr	r2, [pc, #820]	; (8001718 <__aeabi_ddiv+0x374>)
 80013e2:	00c5      	lsls	r5, r0, #3
 80013e4:	4693      	mov	fp, r2
 80013e6:	449b      	add	fp, r3
 80013e8:	2300      	movs	r3, #0
 80013ea:	4699      	mov	r9, r3
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	033c      	lsls	r4, r7, #12
 80013f0:	007b      	lsls	r3, r7, #1
 80013f2:	4650      	mov	r0, sl
 80013f4:	0b24      	lsrs	r4, r4, #12
 80013f6:	0d5b      	lsrs	r3, r3, #21
 80013f8:	0fff      	lsrs	r7, r7, #31
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d100      	bne.n	8001400 <__aeabi_ddiv+0x5c>
 80013fe:	e11a      	b.n	8001636 <__aeabi_ddiv+0x292>
 8001400:	4ac4      	ldr	r2, [pc, #784]	; (8001714 <__aeabi_ddiv+0x370>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d100      	bne.n	8001408 <__aeabi_ddiv+0x64>
 8001406:	e15e      	b.n	80016c6 <__aeabi_ddiv+0x322>
 8001408:	0f42      	lsrs	r2, r0, #29
 800140a:	00e4      	lsls	r4, r4, #3
 800140c:	4322      	orrs	r2, r4
 800140e:	2480      	movs	r4, #128	; 0x80
 8001410:	0424      	lsls	r4, r4, #16
 8001412:	4314      	orrs	r4, r2
 8001414:	4ac0      	ldr	r2, [pc, #768]	; (8001718 <__aeabi_ddiv+0x374>)
 8001416:	00c1      	lsls	r1, r0, #3
 8001418:	4694      	mov	ip, r2
 800141a:	465a      	mov	r2, fp
 800141c:	4463      	add	r3, ip
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	469b      	mov	fp, r3
 8001422:	2000      	movs	r0, #0
 8001424:	0033      	movs	r3, r6
 8001426:	407b      	eors	r3, r7
 8001428:	469a      	mov	sl, r3
 800142a:	464b      	mov	r3, r9
 800142c:	2b0f      	cmp	r3, #15
 800142e:	d827      	bhi.n	8001480 <__aeabi_ddiv+0xdc>
 8001430:	4aba      	ldr	r2, [pc, #744]	; (800171c <__aeabi_ddiv+0x378>)
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	58d3      	ldr	r3, [r2, r3]
 8001436:	469f      	mov	pc, r3
 8001438:	46b2      	mov	sl, r6
 800143a:	9b00      	ldr	r3, [sp, #0]
 800143c:	2b02      	cmp	r3, #2
 800143e:	d016      	beq.n	800146e <__aeabi_ddiv+0xca>
 8001440:	2b03      	cmp	r3, #3
 8001442:	d100      	bne.n	8001446 <__aeabi_ddiv+0xa2>
 8001444:	e287      	b.n	8001956 <__aeabi_ddiv+0x5b2>
 8001446:	2b01      	cmp	r3, #1
 8001448:	d000      	beq.n	800144c <__aeabi_ddiv+0xa8>
 800144a:	e0d5      	b.n	80015f8 <__aeabi_ddiv+0x254>
 800144c:	2300      	movs	r3, #0
 800144e:	2200      	movs	r2, #0
 8001450:	2500      	movs	r5, #0
 8001452:	051b      	lsls	r3, r3, #20
 8001454:	4313      	orrs	r3, r2
 8001456:	4652      	mov	r2, sl
 8001458:	07d2      	lsls	r2, r2, #31
 800145a:	4313      	orrs	r3, r2
 800145c:	0028      	movs	r0, r5
 800145e:	0019      	movs	r1, r3
 8001460:	b005      	add	sp, #20
 8001462:	bcf0      	pop	{r4, r5, r6, r7}
 8001464:	46bb      	mov	fp, r7
 8001466:	46b2      	mov	sl, r6
 8001468:	46a9      	mov	r9, r5
 800146a:	46a0      	mov	r8, r4
 800146c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800146e:	2200      	movs	r2, #0
 8001470:	2500      	movs	r5, #0
 8001472:	4ba8      	ldr	r3, [pc, #672]	; (8001714 <__aeabi_ddiv+0x370>)
 8001474:	e7ed      	b.n	8001452 <__aeabi_ddiv+0xae>
 8001476:	46ba      	mov	sl, r7
 8001478:	46a0      	mov	r8, r4
 800147a:	000d      	movs	r5, r1
 800147c:	9000      	str	r0, [sp, #0]
 800147e:	e7dc      	b.n	800143a <__aeabi_ddiv+0x96>
 8001480:	4544      	cmp	r4, r8
 8001482:	d200      	bcs.n	8001486 <__aeabi_ddiv+0xe2>
 8001484:	e1c4      	b.n	8001810 <__aeabi_ddiv+0x46c>
 8001486:	d100      	bne.n	800148a <__aeabi_ddiv+0xe6>
 8001488:	e1bf      	b.n	800180a <__aeabi_ddiv+0x466>
 800148a:	2301      	movs	r3, #1
 800148c:	425b      	negs	r3, r3
 800148e:	469c      	mov	ip, r3
 8001490:	002e      	movs	r6, r5
 8001492:	4640      	mov	r0, r8
 8001494:	2500      	movs	r5, #0
 8001496:	44e3      	add	fp, ip
 8001498:	0223      	lsls	r3, r4, #8
 800149a:	0e0c      	lsrs	r4, r1, #24
 800149c:	431c      	orrs	r4, r3
 800149e:	0c1b      	lsrs	r3, r3, #16
 80014a0:	4699      	mov	r9, r3
 80014a2:	0423      	lsls	r3, r4, #16
 80014a4:	020a      	lsls	r2, r1, #8
 80014a6:	0c1f      	lsrs	r7, r3, #16
 80014a8:	4649      	mov	r1, r9
 80014aa:	9200      	str	r2, [sp, #0]
 80014ac:	9701      	str	r7, [sp, #4]
 80014ae:	f7fe fec5 	bl	800023c <__aeabi_uidivmod>
 80014b2:	0002      	movs	r2, r0
 80014b4:	437a      	muls	r2, r7
 80014b6:	040b      	lsls	r3, r1, #16
 80014b8:	0c31      	lsrs	r1, r6, #16
 80014ba:	4680      	mov	r8, r0
 80014bc:	4319      	orrs	r1, r3
 80014be:	428a      	cmp	r2, r1
 80014c0:	d907      	bls.n	80014d2 <__aeabi_ddiv+0x12e>
 80014c2:	2301      	movs	r3, #1
 80014c4:	425b      	negs	r3, r3
 80014c6:	469c      	mov	ip, r3
 80014c8:	1909      	adds	r1, r1, r4
 80014ca:	44e0      	add	r8, ip
 80014cc:	428c      	cmp	r4, r1
 80014ce:	d800      	bhi.n	80014d2 <__aeabi_ddiv+0x12e>
 80014d0:	e201      	b.n	80018d6 <__aeabi_ddiv+0x532>
 80014d2:	1a88      	subs	r0, r1, r2
 80014d4:	4649      	mov	r1, r9
 80014d6:	f7fe feb1 	bl	800023c <__aeabi_uidivmod>
 80014da:	9a01      	ldr	r2, [sp, #4]
 80014dc:	0436      	lsls	r6, r6, #16
 80014de:	4342      	muls	r2, r0
 80014e0:	0409      	lsls	r1, r1, #16
 80014e2:	0c36      	lsrs	r6, r6, #16
 80014e4:	0003      	movs	r3, r0
 80014e6:	430e      	orrs	r6, r1
 80014e8:	42b2      	cmp	r2, r6
 80014ea:	d904      	bls.n	80014f6 <__aeabi_ddiv+0x152>
 80014ec:	1936      	adds	r6, r6, r4
 80014ee:	3b01      	subs	r3, #1
 80014f0:	42b4      	cmp	r4, r6
 80014f2:	d800      	bhi.n	80014f6 <__aeabi_ddiv+0x152>
 80014f4:	e1e9      	b.n	80018ca <__aeabi_ddiv+0x526>
 80014f6:	1ab0      	subs	r0, r6, r2
 80014f8:	4642      	mov	r2, r8
 80014fa:	9e00      	ldr	r6, [sp, #0]
 80014fc:	0412      	lsls	r2, r2, #16
 80014fe:	431a      	orrs	r2, r3
 8001500:	0c33      	lsrs	r3, r6, #16
 8001502:	001f      	movs	r7, r3
 8001504:	0c11      	lsrs	r1, r2, #16
 8001506:	4690      	mov	r8, r2
 8001508:	9302      	str	r3, [sp, #8]
 800150a:	0413      	lsls	r3, r2, #16
 800150c:	0432      	lsls	r2, r6, #16
 800150e:	0c16      	lsrs	r6, r2, #16
 8001510:	0032      	movs	r2, r6
 8001512:	0c1b      	lsrs	r3, r3, #16
 8001514:	435a      	muls	r2, r3
 8001516:	9603      	str	r6, [sp, #12]
 8001518:	437b      	muls	r3, r7
 800151a:	434e      	muls	r6, r1
 800151c:	4379      	muls	r1, r7
 800151e:	0c17      	lsrs	r7, r2, #16
 8001520:	46bc      	mov	ip, r7
 8001522:	199b      	adds	r3, r3, r6
 8001524:	4463      	add	r3, ip
 8001526:	429e      	cmp	r6, r3
 8001528:	d903      	bls.n	8001532 <__aeabi_ddiv+0x18e>
 800152a:	2680      	movs	r6, #128	; 0x80
 800152c:	0276      	lsls	r6, r6, #9
 800152e:	46b4      	mov	ip, r6
 8001530:	4461      	add	r1, ip
 8001532:	0c1e      	lsrs	r6, r3, #16
 8001534:	1871      	adds	r1, r6, r1
 8001536:	0416      	lsls	r6, r2, #16
 8001538:	041b      	lsls	r3, r3, #16
 800153a:	0c36      	lsrs	r6, r6, #16
 800153c:	199e      	adds	r6, r3, r6
 800153e:	4288      	cmp	r0, r1
 8001540:	d302      	bcc.n	8001548 <__aeabi_ddiv+0x1a4>
 8001542:	d112      	bne.n	800156a <__aeabi_ddiv+0x1c6>
 8001544:	42b5      	cmp	r5, r6
 8001546:	d210      	bcs.n	800156a <__aeabi_ddiv+0x1c6>
 8001548:	4643      	mov	r3, r8
 800154a:	1e5a      	subs	r2, r3, #1
 800154c:	9b00      	ldr	r3, [sp, #0]
 800154e:	469c      	mov	ip, r3
 8001550:	4465      	add	r5, ip
 8001552:	001f      	movs	r7, r3
 8001554:	429d      	cmp	r5, r3
 8001556:	419b      	sbcs	r3, r3
 8001558:	425b      	negs	r3, r3
 800155a:	191b      	adds	r3, r3, r4
 800155c:	18c0      	adds	r0, r0, r3
 800155e:	4284      	cmp	r4, r0
 8001560:	d200      	bcs.n	8001564 <__aeabi_ddiv+0x1c0>
 8001562:	e19e      	b.n	80018a2 <__aeabi_ddiv+0x4fe>
 8001564:	d100      	bne.n	8001568 <__aeabi_ddiv+0x1c4>
 8001566:	e199      	b.n	800189c <__aeabi_ddiv+0x4f8>
 8001568:	4690      	mov	r8, r2
 800156a:	1bae      	subs	r6, r5, r6
 800156c:	42b5      	cmp	r5, r6
 800156e:	41ad      	sbcs	r5, r5
 8001570:	1a40      	subs	r0, r0, r1
 8001572:	426d      	negs	r5, r5
 8001574:	1b40      	subs	r0, r0, r5
 8001576:	4284      	cmp	r4, r0
 8001578:	d100      	bne.n	800157c <__aeabi_ddiv+0x1d8>
 800157a:	e1d2      	b.n	8001922 <__aeabi_ddiv+0x57e>
 800157c:	4649      	mov	r1, r9
 800157e:	f7fe fe5d 	bl	800023c <__aeabi_uidivmod>
 8001582:	9a01      	ldr	r2, [sp, #4]
 8001584:	040b      	lsls	r3, r1, #16
 8001586:	4342      	muls	r2, r0
 8001588:	0c31      	lsrs	r1, r6, #16
 800158a:	0005      	movs	r5, r0
 800158c:	4319      	orrs	r1, r3
 800158e:	428a      	cmp	r2, r1
 8001590:	d900      	bls.n	8001594 <__aeabi_ddiv+0x1f0>
 8001592:	e16c      	b.n	800186e <__aeabi_ddiv+0x4ca>
 8001594:	1a88      	subs	r0, r1, r2
 8001596:	4649      	mov	r1, r9
 8001598:	f7fe fe50 	bl	800023c <__aeabi_uidivmod>
 800159c:	9a01      	ldr	r2, [sp, #4]
 800159e:	0436      	lsls	r6, r6, #16
 80015a0:	4342      	muls	r2, r0
 80015a2:	0409      	lsls	r1, r1, #16
 80015a4:	0c36      	lsrs	r6, r6, #16
 80015a6:	0003      	movs	r3, r0
 80015a8:	430e      	orrs	r6, r1
 80015aa:	42b2      	cmp	r2, r6
 80015ac:	d900      	bls.n	80015b0 <__aeabi_ddiv+0x20c>
 80015ae:	e153      	b.n	8001858 <__aeabi_ddiv+0x4b4>
 80015b0:	9803      	ldr	r0, [sp, #12]
 80015b2:	1ab6      	subs	r6, r6, r2
 80015b4:	0002      	movs	r2, r0
 80015b6:	042d      	lsls	r5, r5, #16
 80015b8:	431d      	orrs	r5, r3
 80015ba:	9f02      	ldr	r7, [sp, #8]
 80015bc:	042b      	lsls	r3, r5, #16
 80015be:	0c1b      	lsrs	r3, r3, #16
 80015c0:	435a      	muls	r2, r3
 80015c2:	437b      	muls	r3, r7
 80015c4:	469c      	mov	ip, r3
 80015c6:	0c29      	lsrs	r1, r5, #16
 80015c8:	4348      	muls	r0, r1
 80015ca:	0c13      	lsrs	r3, r2, #16
 80015cc:	4484      	add	ip, r0
 80015ce:	4463      	add	r3, ip
 80015d0:	4379      	muls	r1, r7
 80015d2:	4298      	cmp	r0, r3
 80015d4:	d903      	bls.n	80015de <__aeabi_ddiv+0x23a>
 80015d6:	2080      	movs	r0, #128	; 0x80
 80015d8:	0240      	lsls	r0, r0, #9
 80015da:	4684      	mov	ip, r0
 80015dc:	4461      	add	r1, ip
 80015de:	0c18      	lsrs	r0, r3, #16
 80015e0:	0412      	lsls	r2, r2, #16
 80015e2:	041b      	lsls	r3, r3, #16
 80015e4:	0c12      	lsrs	r2, r2, #16
 80015e6:	1840      	adds	r0, r0, r1
 80015e8:	189b      	adds	r3, r3, r2
 80015ea:	4286      	cmp	r6, r0
 80015ec:	d200      	bcs.n	80015f0 <__aeabi_ddiv+0x24c>
 80015ee:	e100      	b.n	80017f2 <__aeabi_ddiv+0x44e>
 80015f0:	d100      	bne.n	80015f4 <__aeabi_ddiv+0x250>
 80015f2:	e0fb      	b.n	80017ec <__aeabi_ddiv+0x448>
 80015f4:	2301      	movs	r3, #1
 80015f6:	431d      	orrs	r5, r3
 80015f8:	4b49      	ldr	r3, [pc, #292]	; (8001720 <__aeabi_ddiv+0x37c>)
 80015fa:	445b      	add	r3, fp
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	dc00      	bgt.n	8001602 <__aeabi_ddiv+0x25e>
 8001600:	e0aa      	b.n	8001758 <__aeabi_ddiv+0x3b4>
 8001602:	076a      	lsls	r2, r5, #29
 8001604:	d000      	beq.n	8001608 <__aeabi_ddiv+0x264>
 8001606:	e13d      	b.n	8001884 <__aeabi_ddiv+0x4e0>
 8001608:	08e9      	lsrs	r1, r5, #3
 800160a:	4642      	mov	r2, r8
 800160c:	01d2      	lsls	r2, r2, #7
 800160e:	d506      	bpl.n	800161e <__aeabi_ddiv+0x27a>
 8001610:	4642      	mov	r2, r8
 8001612:	4b44      	ldr	r3, [pc, #272]	; (8001724 <__aeabi_ddiv+0x380>)
 8001614:	401a      	ands	r2, r3
 8001616:	2380      	movs	r3, #128	; 0x80
 8001618:	4690      	mov	r8, r2
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	445b      	add	r3, fp
 800161e:	4a42      	ldr	r2, [pc, #264]	; (8001728 <__aeabi_ddiv+0x384>)
 8001620:	4293      	cmp	r3, r2
 8001622:	dd00      	ble.n	8001626 <__aeabi_ddiv+0x282>
 8001624:	e723      	b.n	800146e <__aeabi_ddiv+0xca>
 8001626:	4642      	mov	r2, r8
 8001628:	055b      	lsls	r3, r3, #21
 800162a:	0755      	lsls	r5, r2, #29
 800162c:	0252      	lsls	r2, r2, #9
 800162e:	430d      	orrs	r5, r1
 8001630:	0b12      	lsrs	r2, r2, #12
 8001632:	0d5b      	lsrs	r3, r3, #21
 8001634:	e70d      	b.n	8001452 <__aeabi_ddiv+0xae>
 8001636:	4651      	mov	r1, sl
 8001638:	4321      	orrs	r1, r4
 800163a:	d100      	bne.n	800163e <__aeabi_ddiv+0x29a>
 800163c:	e07c      	b.n	8001738 <__aeabi_ddiv+0x394>
 800163e:	2c00      	cmp	r4, #0
 8001640:	d100      	bne.n	8001644 <__aeabi_ddiv+0x2a0>
 8001642:	e0fb      	b.n	800183c <__aeabi_ddiv+0x498>
 8001644:	0020      	movs	r0, r4
 8001646:	f001 f995 	bl	8002974 <__clzsi2>
 800164a:	0002      	movs	r2, r0
 800164c:	3a0b      	subs	r2, #11
 800164e:	231d      	movs	r3, #29
 8001650:	1a9b      	subs	r3, r3, r2
 8001652:	4652      	mov	r2, sl
 8001654:	0001      	movs	r1, r0
 8001656:	40da      	lsrs	r2, r3
 8001658:	4653      	mov	r3, sl
 800165a:	3908      	subs	r1, #8
 800165c:	408b      	lsls	r3, r1
 800165e:	408c      	lsls	r4, r1
 8001660:	0019      	movs	r1, r3
 8001662:	4314      	orrs	r4, r2
 8001664:	4b31      	ldr	r3, [pc, #196]	; (800172c <__aeabi_ddiv+0x388>)
 8001666:	4458      	add	r0, fp
 8001668:	469b      	mov	fp, r3
 800166a:	4483      	add	fp, r0
 800166c:	2000      	movs	r0, #0
 800166e:	e6d9      	b.n	8001424 <__aeabi_ddiv+0x80>
 8001670:	0003      	movs	r3, r0
 8001672:	4323      	orrs	r3, r4
 8001674:	4698      	mov	r8, r3
 8001676:	d044      	beq.n	8001702 <__aeabi_ddiv+0x35e>
 8001678:	2c00      	cmp	r4, #0
 800167a:	d100      	bne.n	800167e <__aeabi_ddiv+0x2da>
 800167c:	e0cf      	b.n	800181e <__aeabi_ddiv+0x47a>
 800167e:	0020      	movs	r0, r4
 8001680:	f001 f978 	bl	8002974 <__clzsi2>
 8001684:	0001      	movs	r1, r0
 8001686:	0002      	movs	r2, r0
 8001688:	390b      	subs	r1, #11
 800168a:	231d      	movs	r3, #29
 800168c:	1a5b      	subs	r3, r3, r1
 800168e:	4649      	mov	r1, r9
 8001690:	0010      	movs	r0, r2
 8001692:	40d9      	lsrs	r1, r3
 8001694:	3808      	subs	r0, #8
 8001696:	4084      	lsls	r4, r0
 8001698:	000b      	movs	r3, r1
 800169a:	464d      	mov	r5, r9
 800169c:	4323      	orrs	r3, r4
 800169e:	4698      	mov	r8, r3
 80016a0:	4085      	lsls	r5, r0
 80016a2:	4b23      	ldr	r3, [pc, #140]	; (8001730 <__aeabi_ddiv+0x38c>)
 80016a4:	1a9b      	subs	r3, r3, r2
 80016a6:	469b      	mov	fp, r3
 80016a8:	2300      	movs	r3, #0
 80016aa:	4699      	mov	r9, r3
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	e69e      	b.n	80013ee <__aeabi_ddiv+0x4a>
 80016b0:	0002      	movs	r2, r0
 80016b2:	4322      	orrs	r2, r4
 80016b4:	4690      	mov	r8, r2
 80016b6:	d11d      	bne.n	80016f4 <__aeabi_ddiv+0x350>
 80016b8:	2208      	movs	r2, #8
 80016ba:	469b      	mov	fp, r3
 80016bc:	2302      	movs	r3, #2
 80016be:	2500      	movs	r5, #0
 80016c0:	4691      	mov	r9, r2
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	e693      	b.n	80013ee <__aeabi_ddiv+0x4a>
 80016c6:	4651      	mov	r1, sl
 80016c8:	4321      	orrs	r1, r4
 80016ca:	d109      	bne.n	80016e0 <__aeabi_ddiv+0x33c>
 80016cc:	2302      	movs	r3, #2
 80016ce:	464a      	mov	r2, r9
 80016d0:	431a      	orrs	r2, r3
 80016d2:	4b18      	ldr	r3, [pc, #96]	; (8001734 <__aeabi_ddiv+0x390>)
 80016d4:	4691      	mov	r9, r2
 80016d6:	469c      	mov	ip, r3
 80016d8:	2400      	movs	r4, #0
 80016da:	2002      	movs	r0, #2
 80016dc:	44e3      	add	fp, ip
 80016de:	e6a1      	b.n	8001424 <__aeabi_ddiv+0x80>
 80016e0:	2303      	movs	r3, #3
 80016e2:	464a      	mov	r2, r9
 80016e4:	431a      	orrs	r2, r3
 80016e6:	4b13      	ldr	r3, [pc, #76]	; (8001734 <__aeabi_ddiv+0x390>)
 80016e8:	4691      	mov	r9, r2
 80016ea:	469c      	mov	ip, r3
 80016ec:	4651      	mov	r1, sl
 80016ee:	2003      	movs	r0, #3
 80016f0:	44e3      	add	fp, ip
 80016f2:	e697      	b.n	8001424 <__aeabi_ddiv+0x80>
 80016f4:	220c      	movs	r2, #12
 80016f6:	469b      	mov	fp, r3
 80016f8:	2303      	movs	r3, #3
 80016fa:	46a0      	mov	r8, r4
 80016fc:	4691      	mov	r9, r2
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	e675      	b.n	80013ee <__aeabi_ddiv+0x4a>
 8001702:	2304      	movs	r3, #4
 8001704:	4699      	mov	r9, r3
 8001706:	2300      	movs	r3, #0
 8001708:	469b      	mov	fp, r3
 800170a:	3301      	adds	r3, #1
 800170c:	2500      	movs	r5, #0
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	e66d      	b.n	80013ee <__aeabi_ddiv+0x4a>
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	000007ff 	.word	0x000007ff
 8001718:	fffffc01 	.word	0xfffffc01
 800171c:	0800a948 	.word	0x0800a948
 8001720:	000003ff 	.word	0x000003ff
 8001724:	feffffff 	.word	0xfeffffff
 8001728:	000007fe 	.word	0x000007fe
 800172c:	000003f3 	.word	0x000003f3
 8001730:	fffffc0d 	.word	0xfffffc0d
 8001734:	fffff801 	.word	0xfffff801
 8001738:	464a      	mov	r2, r9
 800173a:	2301      	movs	r3, #1
 800173c:	431a      	orrs	r2, r3
 800173e:	4691      	mov	r9, r2
 8001740:	2400      	movs	r4, #0
 8001742:	2001      	movs	r0, #1
 8001744:	e66e      	b.n	8001424 <__aeabi_ddiv+0x80>
 8001746:	2300      	movs	r3, #0
 8001748:	2280      	movs	r2, #128	; 0x80
 800174a:	469a      	mov	sl, r3
 800174c:	2500      	movs	r5, #0
 800174e:	4b88      	ldr	r3, [pc, #544]	; (8001970 <__aeabi_ddiv+0x5cc>)
 8001750:	0312      	lsls	r2, r2, #12
 8001752:	e67e      	b.n	8001452 <__aeabi_ddiv+0xae>
 8001754:	2501      	movs	r5, #1
 8001756:	426d      	negs	r5, r5
 8001758:	2201      	movs	r2, #1
 800175a:	1ad2      	subs	r2, r2, r3
 800175c:	2a38      	cmp	r2, #56	; 0x38
 800175e:	dd00      	ble.n	8001762 <__aeabi_ddiv+0x3be>
 8001760:	e674      	b.n	800144c <__aeabi_ddiv+0xa8>
 8001762:	2a1f      	cmp	r2, #31
 8001764:	dc00      	bgt.n	8001768 <__aeabi_ddiv+0x3c4>
 8001766:	e0bd      	b.n	80018e4 <__aeabi_ddiv+0x540>
 8001768:	211f      	movs	r1, #31
 800176a:	4249      	negs	r1, r1
 800176c:	1acb      	subs	r3, r1, r3
 800176e:	4641      	mov	r1, r8
 8001770:	40d9      	lsrs	r1, r3
 8001772:	000b      	movs	r3, r1
 8001774:	2a20      	cmp	r2, #32
 8001776:	d004      	beq.n	8001782 <__aeabi_ddiv+0x3de>
 8001778:	4641      	mov	r1, r8
 800177a:	4a7e      	ldr	r2, [pc, #504]	; (8001974 <__aeabi_ddiv+0x5d0>)
 800177c:	445a      	add	r2, fp
 800177e:	4091      	lsls	r1, r2
 8001780:	430d      	orrs	r5, r1
 8001782:	0029      	movs	r1, r5
 8001784:	1e4a      	subs	r2, r1, #1
 8001786:	4191      	sbcs	r1, r2
 8001788:	4319      	orrs	r1, r3
 800178a:	2307      	movs	r3, #7
 800178c:	001d      	movs	r5, r3
 800178e:	2200      	movs	r2, #0
 8001790:	400d      	ands	r5, r1
 8001792:	420b      	tst	r3, r1
 8001794:	d100      	bne.n	8001798 <__aeabi_ddiv+0x3f4>
 8001796:	e0d0      	b.n	800193a <__aeabi_ddiv+0x596>
 8001798:	220f      	movs	r2, #15
 800179a:	2300      	movs	r3, #0
 800179c:	400a      	ands	r2, r1
 800179e:	2a04      	cmp	r2, #4
 80017a0:	d100      	bne.n	80017a4 <__aeabi_ddiv+0x400>
 80017a2:	e0c7      	b.n	8001934 <__aeabi_ddiv+0x590>
 80017a4:	1d0a      	adds	r2, r1, #4
 80017a6:	428a      	cmp	r2, r1
 80017a8:	4189      	sbcs	r1, r1
 80017aa:	4249      	negs	r1, r1
 80017ac:	185b      	adds	r3, r3, r1
 80017ae:	0011      	movs	r1, r2
 80017b0:	021a      	lsls	r2, r3, #8
 80017b2:	d400      	bmi.n	80017b6 <__aeabi_ddiv+0x412>
 80017b4:	e0be      	b.n	8001934 <__aeabi_ddiv+0x590>
 80017b6:	2301      	movs	r3, #1
 80017b8:	2200      	movs	r2, #0
 80017ba:	2500      	movs	r5, #0
 80017bc:	e649      	b.n	8001452 <__aeabi_ddiv+0xae>
 80017be:	2280      	movs	r2, #128	; 0x80
 80017c0:	4643      	mov	r3, r8
 80017c2:	0312      	lsls	r2, r2, #12
 80017c4:	4213      	tst	r3, r2
 80017c6:	d008      	beq.n	80017da <__aeabi_ddiv+0x436>
 80017c8:	4214      	tst	r4, r2
 80017ca:	d106      	bne.n	80017da <__aeabi_ddiv+0x436>
 80017cc:	4322      	orrs	r2, r4
 80017ce:	0312      	lsls	r2, r2, #12
 80017d0:	46ba      	mov	sl, r7
 80017d2:	000d      	movs	r5, r1
 80017d4:	4b66      	ldr	r3, [pc, #408]	; (8001970 <__aeabi_ddiv+0x5cc>)
 80017d6:	0b12      	lsrs	r2, r2, #12
 80017d8:	e63b      	b.n	8001452 <__aeabi_ddiv+0xae>
 80017da:	2280      	movs	r2, #128	; 0x80
 80017dc:	4643      	mov	r3, r8
 80017de:	0312      	lsls	r2, r2, #12
 80017e0:	431a      	orrs	r2, r3
 80017e2:	0312      	lsls	r2, r2, #12
 80017e4:	46b2      	mov	sl, r6
 80017e6:	4b62      	ldr	r3, [pc, #392]	; (8001970 <__aeabi_ddiv+0x5cc>)
 80017e8:	0b12      	lsrs	r2, r2, #12
 80017ea:	e632      	b.n	8001452 <__aeabi_ddiv+0xae>
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d100      	bne.n	80017f2 <__aeabi_ddiv+0x44e>
 80017f0:	e702      	b.n	80015f8 <__aeabi_ddiv+0x254>
 80017f2:	19a6      	adds	r6, r4, r6
 80017f4:	1e6a      	subs	r2, r5, #1
 80017f6:	42a6      	cmp	r6, r4
 80017f8:	d200      	bcs.n	80017fc <__aeabi_ddiv+0x458>
 80017fa:	e089      	b.n	8001910 <__aeabi_ddiv+0x56c>
 80017fc:	4286      	cmp	r6, r0
 80017fe:	d200      	bcs.n	8001802 <__aeabi_ddiv+0x45e>
 8001800:	e09f      	b.n	8001942 <__aeabi_ddiv+0x59e>
 8001802:	d100      	bne.n	8001806 <__aeabi_ddiv+0x462>
 8001804:	e0af      	b.n	8001966 <__aeabi_ddiv+0x5c2>
 8001806:	0015      	movs	r5, r2
 8001808:	e6f4      	b.n	80015f4 <__aeabi_ddiv+0x250>
 800180a:	42a9      	cmp	r1, r5
 800180c:	d900      	bls.n	8001810 <__aeabi_ddiv+0x46c>
 800180e:	e63c      	b.n	800148a <__aeabi_ddiv+0xe6>
 8001810:	4643      	mov	r3, r8
 8001812:	07de      	lsls	r6, r3, #31
 8001814:	0858      	lsrs	r0, r3, #1
 8001816:	086b      	lsrs	r3, r5, #1
 8001818:	431e      	orrs	r6, r3
 800181a:	07ed      	lsls	r5, r5, #31
 800181c:	e63c      	b.n	8001498 <__aeabi_ddiv+0xf4>
 800181e:	f001 f8a9 	bl	8002974 <__clzsi2>
 8001822:	0001      	movs	r1, r0
 8001824:	0002      	movs	r2, r0
 8001826:	3115      	adds	r1, #21
 8001828:	3220      	adds	r2, #32
 800182a:	291c      	cmp	r1, #28
 800182c:	dc00      	bgt.n	8001830 <__aeabi_ddiv+0x48c>
 800182e:	e72c      	b.n	800168a <__aeabi_ddiv+0x2e6>
 8001830:	464b      	mov	r3, r9
 8001832:	3808      	subs	r0, #8
 8001834:	4083      	lsls	r3, r0
 8001836:	2500      	movs	r5, #0
 8001838:	4698      	mov	r8, r3
 800183a:	e732      	b.n	80016a2 <__aeabi_ddiv+0x2fe>
 800183c:	f001 f89a 	bl	8002974 <__clzsi2>
 8001840:	0003      	movs	r3, r0
 8001842:	001a      	movs	r2, r3
 8001844:	3215      	adds	r2, #21
 8001846:	3020      	adds	r0, #32
 8001848:	2a1c      	cmp	r2, #28
 800184a:	dc00      	bgt.n	800184e <__aeabi_ddiv+0x4aa>
 800184c:	e6ff      	b.n	800164e <__aeabi_ddiv+0x2aa>
 800184e:	4654      	mov	r4, sl
 8001850:	3b08      	subs	r3, #8
 8001852:	2100      	movs	r1, #0
 8001854:	409c      	lsls	r4, r3
 8001856:	e705      	b.n	8001664 <__aeabi_ddiv+0x2c0>
 8001858:	1936      	adds	r6, r6, r4
 800185a:	3b01      	subs	r3, #1
 800185c:	42b4      	cmp	r4, r6
 800185e:	d900      	bls.n	8001862 <__aeabi_ddiv+0x4be>
 8001860:	e6a6      	b.n	80015b0 <__aeabi_ddiv+0x20c>
 8001862:	42b2      	cmp	r2, r6
 8001864:	d800      	bhi.n	8001868 <__aeabi_ddiv+0x4c4>
 8001866:	e6a3      	b.n	80015b0 <__aeabi_ddiv+0x20c>
 8001868:	1e83      	subs	r3, r0, #2
 800186a:	1936      	adds	r6, r6, r4
 800186c:	e6a0      	b.n	80015b0 <__aeabi_ddiv+0x20c>
 800186e:	1909      	adds	r1, r1, r4
 8001870:	3d01      	subs	r5, #1
 8001872:	428c      	cmp	r4, r1
 8001874:	d900      	bls.n	8001878 <__aeabi_ddiv+0x4d4>
 8001876:	e68d      	b.n	8001594 <__aeabi_ddiv+0x1f0>
 8001878:	428a      	cmp	r2, r1
 800187a:	d800      	bhi.n	800187e <__aeabi_ddiv+0x4da>
 800187c:	e68a      	b.n	8001594 <__aeabi_ddiv+0x1f0>
 800187e:	1e85      	subs	r5, r0, #2
 8001880:	1909      	adds	r1, r1, r4
 8001882:	e687      	b.n	8001594 <__aeabi_ddiv+0x1f0>
 8001884:	220f      	movs	r2, #15
 8001886:	402a      	ands	r2, r5
 8001888:	2a04      	cmp	r2, #4
 800188a:	d100      	bne.n	800188e <__aeabi_ddiv+0x4ea>
 800188c:	e6bc      	b.n	8001608 <__aeabi_ddiv+0x264>
 800188e:	1d29      	adds	r1, r5, #4
 8001890:	42a9      	cmp	r1, r5
 8001892:	41ad      	sbcs	r5, r5
 8001894:	426d      	negs	r5, r5
 8001896:	08c9      	lsrs	r1, r1, #3
 8001898:	44a8      	add	r8, r5
 800189a:	e6b6      	b.n	800160a <__aeabi_ddiv+0x266>
 800189c:	42af      	cmp	r7, r5
 800189e:	d900      	bls.n	80018a2 <__aeabi_ddiv+0x4fe>
 80018a0:	e662      	b.n	8001568 <__aeabi_ddiv+0x1c4>
 80018a2:	4281      	cmp	r1, r0
 80018a4:	d804      	bhi.n	80018b0 <__aeabi_ddiv+0x50c>
 80018a6:	d000      	beq.n	80018aa <__aeabi_ddiv+0x506>
 80018a8:	e65e      	b.n	8001568 <__aeabi_ddiv+0x1c4>
 80018aa:	42ae      	cmp	r6, r5
 80018ac:	d800      	bhi.n	80018b0 <__aeabi_ddiv+0x50c>
 80018ae:	e65b      	b.n	8001568 <__aeabi_ddiv+0x1c4>
 80018b0:	2302      	movs	r3, #2
 80018b2:	425b      	negs	r3, r3
 80018b4:	469c      	mov	ip, r3
 80018b6:	9b00      	ldr	r3, [sp, #0]
 80018b8:	44e0      	add	r8, ip
 80018ba:	469c      	mov	ip, r3
 80018bc:	4465      	add	r5, ip
 80018be:	429d      	cmp	r5, r3
 80018c0:	419b      	sbcs	r3, r3
 80018c2:	425b      	negs	r3, r3
 80018c4:	191b      	adds	r3, r3, r4
 80018c6:	18c0      	adds	r0, r0, r3
 80018c8:	e64f      	b.n	800156a <__aeabi_ddiv+0x1c6>
 80018ca:	42b2      	cmp	r2, r6
 80018cc:	d800      	bhi.n	80018d0 <__aeabi_ddiv+0x52c>
 80018ce:	e612      	b.n	80014f6 <__aeabi_ddiv+0x152>
 80018d0:	1e83      	subs	r3, r0, #2
 80018d2:	1936      	adds	r6, r6, r4
 80018d4:	e60f      	b.n	80014f6 <__aeabi_ddiv+0x152>
 80018d6:	428a      	cmp	r2, r1
 80018d8:	d800      	bhi.n	80018dc <__aeabi_ddiv+0x538>
 80018da:	e5fa      	b.n	80014d2 <__aeabi_ddiv+0x12e>
 80018dc:	1e83      	subs	r3, r0, #2
 80018de:	4698      	mov	r8, r3
 80018e0:	1909      	adds	r1, r1, r4
 80018e2:	e5f6      	b.n	80014d2 <__aeabi_ddiv+0x12e>
 80018e4:	4b24      	ldr	r3, [pc, #144]	; (8001978 <__aeabi_ddiv+0x5d4>)
 80018e6:	0028      	movs	r0, r5
 80018e8:	445b      	add	r3, fp
 80018ea:	4641      	mov	r1, r8
 80018ec:	409d      	lsls	r5, r3
 80018ee:	4099      	lsls	r1, r3
 80018f0:	40d0      	lsrs	r0, r2
 80018f2:	1e6b      	subs	r3, r5, #1
 80018f4:	419d      	sbcs	r5, r3
 80018f6:	4643      	mov	r3, r8
 80018f8:	4301      	orrs	r1, r0
 80018fa:	4329      	orrs	r1, r5
 80018fc:	40d3      	lsrs	r3, r2
 80018fe:	074a      	lsls	r2, r1, #29
 8001900:	d100      	bne.n	8001904 <__aeabi_ddiv+0x560>
 8001902:	e755      	b.n	80017b0 <__aeabi_ddiv+0x40c>
 8001904:	220f      	movs	r2, #15
 8001906:	400a      	ands	r2, r1
 8001908:	2a04      	cmp	r2, #4
 800190a:	d000      	beq.n	800190e <__aeabi_ddiv+0x56a>
 800190c:	e74a      	b.n	80017a4 <__aeabi_ddiv+0x400>
 800190e:	e74f      	b.n	80017b0 <__aeabi_ddiv+0x40c>
 8001910:	0015      	movs	r5, r2
 8001912:	4286      	cmp	r6, r0
 8001914:	d000      	beq.n	8001918 <__aeabi_ddiv+0x574>
 8001916:	e66d      	b.n	80015f4 <__aeabi_ddiv+0x250>
 8001918:	9a00      	ldr	r2, [sp, #0]
 800191a:	429a      	cmp	r2, r3
 800191c:	d000      	beq.n	8001920 <__aeabi_ddiv+0x57c>
 800191e:	e669      	b.n	80015f4 <__aeabi_ddiv+0x250>
 8001920:	e66a      	b.n	80015f8 <__aeabi_ddiv+0x254>
 8001922:	4b16      	ldr	r3, [pc, #88]	; (800197c <__aeabi_ddiv+0x5d8>)
 8001924:	445b      	add	r3, fp
 8001926:	2b00      	cmp	r3, #0
 8001928:	dc00      	bgt.n	800192c <__aeabi_ddiv+0x588>
 800192a:	e713      	b.n	8001754 <__aeabi_ddiv+0x3b0>
 800192c:	2501      	movs	r5, #1
 800192e:	2100      	movs	r1, #0
 8001930:	44a8      	add	r8, r5
 8001932:	e66a      	b.n	800160a <__aeabi_ddiv+0x266>
 8001934:	075d      	lsls	r5, r3, #29
 8001936:	025b      	lsls	r3, r3, #9
 8001938:	0b1a      	lsrs	r2, r3, #12
 800193a:	08c9      	lsrs	r1, r1, #3
 800193c:	2300      	movs	r3, #0
 800193e:	430d      	orrs	r5, r1
 8001940:	e587      	b.n	8001452 <__aeabi_ddiv+0xae>
 8001942:	9900      	ldr	r1, [sp, #0]
 8001944:	3d02      	subs	r5, #2
 8001946:	004a      	lsls	r2, r1, #1
 8001948:	428a      	cmp	r2, r1
 800194a:	41bf      	sbcs	r7, r7
 800194c:	427f      	negs	r7, r7
 800194e:	193f      	adds	r7, r7, r4
 8001950:	19f6      	adds	r6, r6, r7
 8001952:	9200      	str	r2, [sp, #0]
 8001954:	e7dd      	b.n	8001912 <__aeabi_ddiv+0x56e>
 8001956:	2280      	movs	r2, #128	; 0x80
 8001958:	4643      	mov	r3, r8
 800195a:	0312      	lsls	r2, r2, #12
 800195c:	431a      	orrs	r2, r3
 800195e:	0312      	lsls	r2, r2, #12
 8001960:	4b03      	ldr	r3, [pc, #12]	; (8001970 <__aeabi_ddiv+0x5cc>)
 8001962:	0b12      	lsrs	r2, r2, #12
 8001964:	e575      	b.n	8001452 <__aeabi_ddiv+0xae>
 8001966:	9900      	ldr	r1, [sp, #0]
 8001968:	4299      	cmp	r1, r3
 800196a:	d3ea      	bcc.n	8001942 <__aeabi_ddiv+0x59e>
 800196c:	0015      	movs	r5, r2
 800196e:	e7d3      	b.n	8001918 <__aeabi_ddiv+0x574>
 8001970:	000007ff 	.word	0x000007ff
 8001974:	0000043e 	.word	0x0000043e
 8001978:	0000041e 	.word	0x0000041e
 800197c:	000003ff 	.word	0x000003ff

08001980 <__eqdf2>:
 8001980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001982:	464e      	mov	r6, r9
 8001984:	4645      	mov	r5, r8
 8001986:	46de      	mov	lr, fp
 8001988:	4657      	mov	r7, sl
 800198a:	4690      	mov	r8, r2
 800198c:	b5e0      	push	{r5, r6, r7, lr}
 800198e:	0017      	movs	r7, r2
 8001990:	031a      	lsls	r2, r3, #12
 8001992:	0b12      	lsrs	r2, r2, #12
 8001994:	0005      	movs	r5, r0
 8001996:	4684      	mov	ip, r0
 8001998:	4819      	ldr	r0, [pc, #100]	; (8001a00 <__eqdf2+0x80>)
 800199a:	030e      	lsls	r6, r1, #12
 800199c:	004c      	lsls	r4, r1, #1
 800199e:	4691      	mov	r9, r2
 80019a0:	005a      	lsls	r2, r3, #1
 80019a2:	0fdb      	lsrs	r3, r3, #31
 80019a4:	469b      	mov	fp, r3
 80019a6:	0b36      	lsrs	r6, r6, #12
 80019a8:	0d64      	lsrs	r4, r4, #21
 80019aa:	0fc9      	lsrs	r1, r1, #31
 80019ac:	0d52      	lsrs	r2, r2, #21
 80019ae:	4284      	cmp	r4, r0
 80019b0:	d019      	beq.n	80019e6 <__eqdf2+0x66>
 80019b2:	4282      	cmp	r2, r0
 80019b4:	d010      	beq.n	80019d8 <__eqdf2+0x58>
 80019b6:	2001      	movs	r0, #1
 80019b8:	4294      	cmp	r4, r2
 80019ba:	d10e      	bne.n	80019da <__eqdf2+0x5a>
 80019bc:	454e      	cmp	r6, r9
 80019be:	d10c      	bne.n	80019da <__eqdf2+0x5a>
 80019c0:	2001      	movs	r0, #1
 80019c2:	45c4      	cmp	ip, r8
 80019c4:	d109      	bne.n	80019da <__eqdf2+0x5a>
 80019c6:	4559      	cmp	r1, fp
 80019c8:	d017      	beq.n	80019fa <__eqdf2+0x7a>
 80019ca:	2c00      	cmp	r4, #0
 80019cc:	d105      	bne.n	80019da <__eqdf2+0x5a>
 80019ce:	0030      	movs	r0, r6
 80019d0:	4328      	orrs	r0, r5
 80019d2:	1e43      	subs	r3, r0, #1
 80019d4:	4198      	sbcs	r0, r3
 80019d6:	e000      	b.n	80019da <__eqdf2+0x5a>
 80019d8:	2001      	movs	r0, #1
 80019da:	bcf0      	pop	{r4, r5, r6, r7}
 80019dc:	46bb      	mov	fp, r7
 80019de:	46b2      	mov	sl, r6
 80019e0:	46a9      	mov	r9, r5
 80019e2:	46a0      	mov	r8, r4
 80019e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019e6:	0033      	movs	r3, r6
 80019e8:	2001      	movs	r0, #1
 80019ea:	432b      	orrs	r3, r5
 80019ec:	d1f5      	bne.n	80019da <__eqdf2+0x5a>
 80019ee:	42a2      	cmp	r2, r4
 80019f0:	d1f3      	bne.n	80019da <__eqdf2+0x5a>
 80019f2:	464b      	mov	r3, r9
 80019f4:	433b      	orrs	r3, r7
 80019f6:	d1f0      	bne.n	80019da <__eqdf2+0x5a>
 80019f8:	e7e2      	b.n	80019c0 <__eqdf2+0x40>
 80019fa:	2000      	movs	r0, #0
 80019fc:	e7ed      	b.n	80019da <__eqdf2+0x5a>
 80019fe:	46c0      	nop			; (mov r8, r8)
 8001a00:	000007ff 	.word	0x000007ff

08001a04 <__gedf2>:
 8001a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a06:	4647      	mov	r7, r8
 8001a08:	46ce      	mov	lr, r9
 8001a0a:	0004      	movs	r4, r0
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	0016      	movs	r6, r2
 8001a10:	031b      	lsls	r3, r3, #12
 8001a12:	0b1b      	lsrs	r3, r3, #12
 8001a14:	4d2d      	ldr	r5, [pc, #180]	; (8001acc <__gedf2+0xc8>)
 8001a16:	004a      	lsls	r2, r1, #1
 8001a18:	4699      	mov	r9, r3
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	0043      	lsls	r3, r0, #1
 8001a1e:	030f      	lsls	r7, r1, #12
 8001a20:	46a4      	mov	ip, r4
 8001a22:	46b0      	mov	r8, r6
 8001a24:	0b3f      	lsrs	r7, r7, #12
 8001a26:	0d52      	lsrs	r2, r2, #21
 8001a28:	0fc9      	lsrs	r1, r1, #31
 8001a2a:	0d5b      	lsrs	r3, r3, #21
 8001a2c:	0fc0      	lsrs	r0, r0, #31
 8001a2e:	42aa      	cmp	r2, r5
 8001a30:	d021      	beq.n	8001a76 <__gedf2+0x72>
 8001a32:	42ab      	cmp	r3, r5
 8001a34:	d013      	beq.n	8001a5e <__gedf2+0x5a>
 8001a36:	2a00      	cmp	r2, #0
 8001a38:	d122      	bne.n	8001a80 <__gedf2+0x7c>
 8001a3a:	433c      	orrs	r4, r7
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d102      	bne.n	8001a46 <__gedf2+0x42>
 8001a40:	464d      	mov	r5, r9
 8001a42:	432e      	orrs	r6, r5
 8001a44:	d022      	beq.n	8001a8c <__gedf2+0x88>
 8001a46:	2c00      	cmp	r4, #0
 8001a48:	d010      	beq.n	8001a6c <__gedf2+0x68>
 8001a4a:	4281      	cmp	r1, r0
 8001a4c:	d022      	beq.n	8001a94 <__gedf2+0x90>
 8001a4e:	2002      	movs	r0, #2
 8001a50:	3901      	subs	r1, #1
 8001a52:	4008      	ands	r0, r1
 8001a54:	3801      	subs	r0, #1
 8001a56:	bcc0      	pop	{r6, r7}
 8001a58:	46b9      	mov	r9, r7
 8001a5a:	46b0      	mov	r8, r6
 8001a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a5e:	464d      	mov	r5, r9
 8001a60:	432e      	orrs	r6, r5
 8001a62:	d129      	bne.n	8001ab8 <__gedf2+0xb4>
 8001a64:	2a00      	cmp	r2, #0
 8001a66:	d1f0      	bne.n	8001a4a <__gedf2+0x46>
 8001a68:	433c      	orrs	r4, r7
 8001a6a:	d1ee      	bne.n	8001a4a <__gedf2+0x46>
 8001a6c:	2800      	cmp	r0, #0
 8001a6e:	d1f2      	bne.n	8001a56 <__gedf2+0x52>
 8001a70:	2001      	movs	r0, #1
 8001a72:	4240      	negs	r0, r0
 8001a74:	e7ef      	b.n	8001a56 <__gedf2+0x52>
 8001a76:	003d      	movs	r5, r7
 8001a78:	4325      	orrs	r5, r4
 8001a7a:	d11d      	bne.n	8001ab8 <__gedf2+0xb4>
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d0ee      	beq.n	8001a5e <__gedf2+0x5a>
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1e2      	bne.n	8001a4a <__gedf2+0x46>
 8001a84:	464c      	mov	r4, r9
 8001a86:	4326      	orrs	r6, r4
 8001a88:	d1df      	bne.n	8001a4a <__gedf2+0x46>
 8001a8a:	e7e0      	b.n	8001a4e <__gedf2+0x4a>
 8001a8c:	2000      	movs	r0, #0
 8001a8e:	2c00      	cmp	r4, #0
 8001a90:	d0e1      	beq.n	8001a56 <__gedf2+0x52>
 8001a92:	e7dc      	b.n	8001a4e <__gedf2+0x4a>
 8001a94:	429a      	cmp	r2, r3
 8001a96:	dc0a      	bgt.n	8001aae <__gedf2+0xaa>
 8001a98:	dbe8      	blt.n	8001a6c <__gedf2+0x68>
 8001a9a:	454f      	cmp	r7, r9
 8001a9c:	d8d7      	bhi.n	8001a4e <__gedf2+0x4a>
 8001a9e:	d00e      	beq.n	8001abe <__gedf2+0xba>
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	454f      	cmp	r7, r9
 8001aa4:	d2d7      	bcs.n	8001a56 <__gedf2+0x52>
 8001aa6:	2900      	cmp	r1, #0
 8001aa8:	d0e2      	beq.n	8001a70 <__gedf2+0x6c>
 8001aaa:	0008      	movs	r0, r1
 8001aac:	e7d3      	b.n	8001a56 <__gedf2+0x52>
 8001aae:	4243      	negs	r3, r0
 8001ab0:	4158      	adcs	r0, r3
 8001ab2:	0040      	lsls	r0, r0, #1
 8001ab4:	3801      	subs	r0, #1
 8001ab6:	e7ce      	b.n	8001a56 <__gedf2+0x52>
 8001ab8:	2002      	movs	r0, #2
 8001aba:	4240      	negs	r0, r0
 8001abc:	e7cb      	b.n	8001a56 <__gedf2+0x52>
 8001abe:	45c4      	cmp	ip, r8
 8001ac0:	d8c5      	bhi.n	8001a4e <__gedf2+0x4a>
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	45c4      	cmp	ip, r8
 8001ac6:	d2c6      	bcs.n	8001a56 <__gedf2+0x52>
 8001ac8:	e7ed      	b.n	8001aa6 <__gedf2+0xa2>
 8001aca:	46c0      	nop			; (mov r8, r8)
 8001acc:	000007ff 	.word	0x000007ff

08001ad0 <__ledf2>:
 8001ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ad2:	4647      	mov	r7, r8
 8001ad4:	46ce      	mov	lr, r9
 8001ad6:	0004      	movs	r4, r0
 8001ad8:	0018      	movs	r0, r3
 8001ada:	0016      	movs	r6, r2
 8001adc:	031b      	lsls	r3, r3, #12
 8001ade:	0b1b      	lsrs	r3, r3, #12
 8001ae0:	4d2c      	ldr	r5, [pc, #176]	; (8001b94 <__ledf2+0xc4>)
 8001ae2:	004a      	lsls	r2, r1, #1
 8001ae4:	4699      	mov	r9, r3
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	0043      	lsls	r3, r0, #1
 8001aea:	030f      	lsls	r7, r1, #12
 8001aec:	46a4      	mov	ip, r4
 8001aee:	46b0      	mov	r8, r6
 8001af0:	0b3f      	lsrs	r7, r7, #12
 8001af2:	0d52      	lsrs	r2, r2, #21
 8001af4:	0fc9      	lsrs	r1, r1, #31
 8001af6:	0d5b      	lsrs	r3, r3, #21
 8001af8:	0fc0      	lsrs	r0, r0, #31
 8001afa:	42aa      	cmp	r2, r5
 8001afc:	d00d      	beq.n	8001b1a <__ledf2+0x4a>
 8001afe:	42ab      	cmp	r3, r5
 8001b00:	d010      	beq.n	8001b24 <__ledf2+0x54>
 8001b02:	2a00      	cmp	r2, #0
 8001b04:	d127      	bne.n	8001b56 <__ledf2+0x86>
 8001b06:	433c      	orrs	r4, r7
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d111      	bne.n	8001b30 <__ledf2+0x60>
 8001b0c:	464d      	mov	r5, r9
 8001b0e:	432e      	orrs	r6, r5
 8001b10:	d10e      	bne.n	8001b30 <__ledf2+0x60>
 8001b12:	2000      	movs	r0, #0
 8001b14:	2c00      	cmp	r4, #0
 8001b16:	d015      	beq.n	8001b44 <__ledf2+0x74>
 8001b18:	e00e      	b.n	8001b38 <__ledf2+0x68>
 8001b1a:	003d      	movs	r5, r7
 8001b1c:	4325      	orrs	r5, r4
 8001b1e:	d110      	bne.n	8001b42 <__ledf2+0x72>
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d118      	bne.n	8001b56 <__ledf2+0x86>
 8001b24:	464d      	mov	r5, r9
 8001b26:	432e      	orrs	r6, r5
 8001b28:	d10b      	bne.n	8001b42 <__ledf2+0x72>
 8001b2a:	2a00      	cmp	r2, #0
 8001b2c:	d102      	bne.n	8001b34 <__ledf2+0x64>
 8001b2e:	433c      	orrs	r4, r7
 8001b30:	2c00      	cmp	r4, #0
 8001b32:	d00b      	beq.n	8001b4c <__ledf2+0x7c>
 8001b34:	4281      	cmp	r1, r0
 8001b36:	d014      	beq.n	8001b62 <__ledf2+0x92>
 8001b38:	2002      	movs	r0, #2
 8001b3a:	3901      	subs	r1, #1
 8001b3c:	4008      	ands	r0, r1
 8001b3e:	3801      	subs	r0, #1
 8001b40:	e000      	b.n	8001b44 <__ledf2+0x74>
 8001b42:	2002      	movs	r0, #2
 8001b44:	bcc0      	pop	{r6, r7}
 8001b46:	46b9      	mov	r9, r7
 8001b48:	46b0      	mov	r8, r6
 8001b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b4c:	2800      	cmp	r0, #0
 8001b4e:	d1f9      	bne.n	8001b44 <__ledf2+0x74>
 8001b50:	2001      	movs	r0, #1
 8001b52:	4240      	negs	r0, r0
 8001b54:	e7f6      	b.n	8001b44 <__ledf2+0x74>
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1ec      	bne.n	8001b34 <__ledf2+0x64>
 8001b5a:	464c      	mov	r4, r9
 8001b5c:	4326      	orrs	r6, r4
 8001b5e:	d1e9      	bne.n	8001b34 <__ledf2+0x64>
 8001b60:	e7ea      	b.n	8001b38 <__ledf2+0x68>
 8001b62:	429a      	cmp	r2, r3
 8001b64:	dd04      	ble.n	8001b70 <__ledf2+0xa0>
 8001b66:	4243      	negs	r3, r0
 8001b68:	4158      	adcs	r0, r3
 8001b6a:	0040      	lsls	r0, r0, #1
 8001b6c:	3801      	subs	r0, #1
 8001b6e:	e7e9      	b.n	8001b44 <__ledf2+0x74>
 8001b70:	429a      	cmp	r2, r3
 8001b72:	dbeb      	blt.n	8001b4c <__ledf2+0x7c>
 8001b74:	454f      	cmp	r7, r9
 8001b76:	d8df      	bhi.n	8001b38 <__ledf2+0x68>
 8001b78:	d006      	beq.n	8001b88 <__ledf2+0xb8>
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	454f      	cmp	r7, r9
 8001b7e:	d2e1      	bcs.n	8001b44 <__ledf2+0x74>
 8001b80:	2900      	cmp	r1, #0
 8001b82:	d0e5      	beq.n	8001b50 <__ledf2+0x80>
 8001b84:	0008      	movs	r0, r1
 8001b86:	e7dd      	b.n	8001b44 <__ledf2+0x74>
 8001b88:	45c4      	cmp	ip, r8
 8001b8a:	d8d5      	bhi.n	8001b38 <__ledf2+0x68>
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	45c4      	cmp	ip, r8
 8001b90:	d2d8      	bcs.n	8001b44 <__ledf2+0x74>
 8001b92:	e7f5      	b.n	8001b80 <__ledf2+0xb0>
 8001b94:	000007ff 	.word	0x000007ff

08001b98 <__aeabi_dmul>:
 8001b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b9a:	4645      	mov	r5, r8
 8001b9c:	46de      	mov	lr, fp
 8001b9e:	4657      	mov	r7, sl
 8001ba0:	464e      	mov	r6, r9
 8001ba2:	b5e0      	push	{r5, r6, r7, lr}
 8001ba4:	001f      	movs	r7, r3
 8001ba6:	030b      	lsls	r3, r1, #12
 8001ba8:	0b1b      	lsrs	r3, r3, #12
 8001baa:	469b      	mov	fp, r3
 8001bac:	004d      	lsls	r5, r1, #1
 8001bae:	0fcb      	lsrs	r3, r1, #31
 8001bb0:	0004      	movs	r4, r0
 8001bb2:	4691      	mov	r9, r2
 8001bb4:	4698      	mov	r8, r3
 8001bb6:	b087      	sub	sp, #28
 8001bb8:	0d6d      	lsrs	r5, r5, #21
 8001bba:	d100      	bne.n	8001bbe <__aeabi_dmul+0x26>
 8001bbc:	e1cd      	b.n	8001f5a <__aeabi_dmul+0x3c2>
 8001bbe:	4bce      	ldr	r3, [pc, #824]	; (8001ef8 <__aeabi_dmul+0x360>)
 8001bc0:	429d      	cmp	r5, r3
 8001bc2:	d100      	bne.n	8001bc6 <__aeabi_dmul+0x2e>
 8001bc4:	e1e9      	b.n	8001f9a <__aeabi_dmul+0x402>
 8001bc6:	465a      	mov	r2, fp
 8001bc8:	0f43      	lsrs	r3, r0, #29
 8001bca:	00d2      	lsls	r2, r2, #3
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	2280      	movs	r2, #128	; 0x80
 8001bd0:	0412      	lsls	r2, r2, #16
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	00c3      	lsls	r3, r0, #3
 8001bd6:	469a      	mov	sl, r3
 8001bd8:	4bc8      	ldr	r3, [pc, #800]	; (8001efc <__aeabi_dmul+0x364>)
 8001bda:	4693      	mov	fp, r2
 8001bdc:	469c      	mov	ip, r3
 8001bde:	2300      	movs	r3, #0
 8001be0:	2600      	movs	r6, #0
 8001be2:	4465      	add	r5, ip
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	033c      	lsls	r4, r7, #12
 8001be8:	007b      	lsls	r3, r7, #1
 8001bea:	4648      	mov	r0, r9
 8001bec:	0b24      	lsrs	r4, r4, #12
 8001bee:	0d5b      	lsrs	r3, r3, #21
 8001bf0:	0fff      	lsrs	r7, r7, #31
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d100      	bne.n	8001bf8 <__aeabi_dmul+0x60>
 8001bf6:	e189      	b.n	8001f0c <__aeabi_dmul+0x374>
 8001bf8:	4abf      	ldr	r2, [pc, #764]	; (8001ef8 <__aeabi_dmul+0x360>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d019      	beq.n	8001c32 <__aeabi_dmul+0x9a>
 8001bfe:	0f42      	lsrs	r2, r0, #29
 8001c00:	00e4      	lsls	r4, r4, #3
 8001c02:	4322      	orrs	r2, r4
 8001c04:	2480      	movs	r4, #128	; 0x80
 8001c06:	0424      	lsls	r4, r4, #16
 8001c08:	4314      	orrs	r4, r2
 8001c0a:	4abc      	ldr	r2, [pc, #752]	; (8001efc <__aeabi_dmul+0x364>)
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	4694      	mov	ip, r2
 8001c10:	4642      	mov	r2, r8
 8001c12:	4463      	add	r3, ip
 8001c14:	195b      	adds	r3, r3, r5
 8001c16:	9301      	str	r3, [sp, #4]
 8001c18:	9b01      	ldr	r3, [sp, #4]
 8001c1a:	407a      	eors	r2, r7
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	00c0      	lsls	r0, r0, #3
 8001c20:	b2d2      	uxtb	r2, r2
 8001c22:	9302      	str	r3, [sp, #8]
 8001c24:	2e0a      	cmp	r6, #10
 8001c26:	dd1c      	ble.n	8001c62 <__aeabi_dmul+0xca>
 8001c28:	003a      	movs	r2, r7
 8001c2a:	2e0b      	cmp	r6, #11
 8001c2c:	d05e      	beq.n	8001cec <__aeabi_dmul+0x154>
 8001c2e:	4647      	mov	r7, r8
 8001c30:	e056      	b.n	8001ce0 <__aeabi_dmul+0x148>
 8001c32:	4649      	mov	r1, r9
 8001c34:	4bb0      	ldr	r3, [pc, #704]	; (8001ef8 <__aeabi_dmul+0x360>)
 8001c36:	4321      	orrs	r1, r4
 8001c38:	18eb      	adds	r3, r5, r3
 8001c3a:	9301      	str	r3, [sp, #4]
 8001c3c:	2900      	cmp	r1, #0
 8001c3e:	d12a      	bne.n	8001c96 <__aeabi_dmul+0xfe>
 8001c40:	2080      	movs	r0, #128	; 0x80
 8001c42:	2202      	movs	r2, #2
 8001c44:	0100      	lsls	r0, r0, #4
 8001c46:	002b      	movs	r3, r5
 8001c48:	4684      	mov	ip, r0
 8001c4a:	4316      	orrs	r6, r2
 8001c4c:	4642      	mov	r2, r8
 8001c4e:	4463      	add	r3, ip
 8001c50:	407a      	eors	r2, r7
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	9302      	str	r3, [sp, #8]
 8001c56:	2e0a      	cmp	r6, #10
 8001c58:	dd00      	ble.n	8001c5c <__aeabi_dmul+0xc4>
 8001c5a:	e231      	b.n	80020c0 <__aeabi_dmul+0x528>
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	2400      	movs	r4, #0
 8001c60:	2102      	movs	r1, #2
 8001c62:	2e02      	cmp	r6, #2
 8001c64:	dc26      	bgt.n	8001cb4 <__aeabi_dmul+0x11c>
 8001c66:	3e01      	subs	r6, #1
 8001c68:	2e01      	cmp	r6, #1
 8001c6a:	d852      	bhi.n	8001d12 <__aeabi_dmul+0x17a>
 8001c6c:	2902      	cmp	r1, #2
 8001c6e:	d04c      	beq.n	8001d0a <__aeabi_dmul+0x172>
 8001c70:	2901      	cmp	r1, #1
 8001c72:	d000      	beq.n	8001c76 <__aeabi_dmul+0xde>
 8001c74:	e118      	b.n	8001ea8 <__aeabi_dmul+0x310>
 8001c76:	2300      	movs	r3, #0
 8001c78:	2400      	movs	r4, #0
 8001c7a:	2500      	movs	r5, #0
 8001c7c:	051b      	lsls	r3, r3, #20
 8001c7e:	4323      	orrs	r3, r4
 8001c80:	07d2      	lsls	r2, r2, #31
 8001c82:	4313      	orrs	r3, r2
 8001c84:	0028      	movs	r0, r5
 8001c86:	0019      	movs	r1, r3
 8001c88:	b007      	add	sp, #28
 8001c8a:	bcf0      	pop	{r4, r5, r6, r7}
 8001c8c:	46bb      	mov	fp, r7
 8001c8e:	46b2      	mov	sl, r6
 8001c90:	46a9      	mov	r9, r5
 8001c92:	46a0      	mov	r8, r4
 8001c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c96:	2180      	movs	r1, #128	; 0x80
 8001c98:	2203      	movs	r2, #3
 8001c9a:	0109      	lsls	r1, r1, #4
 8001c9c:	002b      	movs	r3, r5
 8001c9e:	468c      	mov	ip, r1
 8001ca0:	4316      	orrs	r6, r2
 8001ca2:	4642      	mov	r2, r8
 8001ca4:	4463      	add	r3, ip
 8001ca6:	407a      	eors	r2, r7
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	9302      	str	r3, [sp, #8]
 8001cac:	2e0a      	cmp	r6, #10
 8001cae:	dd00      	ble.n	8001cb2 <__aeabi_dmul+0x11a>
 8001cb0:	e228      	b.n	8002104 <__aeabi_dmul+0x56c>
 8001cb2:	2103      	movs	r1, #3
 8001cb4:	2501      	movs	r5, #1
 8001cb6:	40b5      	lsls	r5, r6
 8001cb8:	46ac      	mov	ip, r5
 8001cba:	26a6      	movs	r6, #166	; 0xa6
 8001cbc:	4663      	mov	r3, ip
 8001cbe:	00f6      	lsls	r6, r6, #3
 8001cc0:	4035      	ands	r5, r6
 8001cc2:	4233      	tst	r3, r6
 8001cc4:	d10b      	bne.n	8001cde <__aeabi_dmul+0x146>
 8001cc6:	2690      	movs	r6, #144	; 0x90
 8001cc8:	00b6      	lsls	r6, r6, #2
 8001cca:	4233      	tst	r3, r6
 8001ccc:	d118      	bne.n	8001d00 <__aeabi_dmul+0x168>
 8001cce:	3eb9      	subs	r6, #185	; 0xb9
 8001cd0:	3eff      	subs	r6, #255	; 0xff
 8001cd2:	421e      	tst	r6, r3
 8001cd4:	d01d      	beq.n	8001d12 <__aeabi_dmul+0x17a>
 8001cd6:	46a3      	mov	fp, r4
 8001cd8:	4682      	mov	sl, r0
 8001cda:	9100      	str	r1, [sp, #0]
 8001cdc:	e000      	b.n	8001ce0 <__aeabi_dmul+0x148>
 8001cde:	0017      	movs	r7, r2
 8001ce0:	9900      	ldr	r1, [sp, #0]
 8001ce2:	003a      	movs	r2, r7
 8001ce4:	2902      	cmp	r1, #2
 8001ce6:	d010      	beq.n	8001d0a <__aeabi_dmul+0x172>
 8001ce8:	465c      	mov	r4, fp
 8001cea:	4650      	mov	r0, sl
 8001cec:	2903      	cmp	r1, #3
 8001cee:	d1bf      	bne.n	8001c70 <__aeabi_dmul+0xd8>
 8001cf0:	2380      	movs	r3, #128	; 0x80
 8001cf2:	031b      	lsls	r3, r3, #12
 8001cf4:	431c      	orrs	r4, r3
 8001cf6:	0324      	lsls	r4, r4, #12
 8001cf8:	0005      	movs	r5, r0
 8001cfa:	4b7f      	ldr	r3, [pc, #508]	; (8001ef8 <__aeabi_dmul+0x360>)
 8001cfc:	0b24      	lsrs	r4, r4, #12
 8001cfe:	e7bd      	b.n	8001c7c <__aeabi_dmul+0xe4>
 8001d00:	2480      	movs	r4, #128	; 0x80
 8001d02:	2200      	movs	r2, #0
 8001d04:	4b7c      	ldr	r3, [pc, #496]	; (8001ef8 <__aeabi_dmul+0x360>)
 8001d06:	0324      	lsls	r4, r4, #12
 8001d08:	e7b8      	b.n	8001c7c <__aeabi_dmul+0xe4>
 8001d0a:	2400      	movs	r4, #0
 8001d0c:	2500      	movs	r5, #0
 8001d0e:	4b7a      	ldr	r3, [pc, #488]	; (8001ef8 <__aeabi_dmul+0x360>)
 8001d10:	e7b4      	b.n	8001c7c <__aeabi_dmul+0xe4>
 8001d12:	4653      	mov	r3, sl
 8001d14:	041e      	lsls	r6, r3, #16
 8001d16:	0c36      	lsrs	r6, r6, #16
 8001d18:	0c1f      	lsrs	r7, r3, #16
 8001d1a:	0033      	movs	r3, r6
 8001d1c:	0c01      	lsrs	r1, r0, #16
 8001d1e:	0400      	lsls	r0, r0, #16
 8001d20:	0c00      	lsrs	r0, r0, #16
 8001d22:	4343      	muls	r3, r0
 8001d24:	4698      	mov	r8, r3
 8001d26:	0003      	movs	r3, r0
 8001d28:	437b      	muls	r3, r7
 8001d2a:	4699      	mov	r9, r3
 8001d2c:	0033      	movs	r3, r6
 8001d2e:	434b      	muls	r3, r1
 8001d30:	469c      	mov	ip, r3
 8001d32:	4643      	mov	r3, r8
 8001d34:	000d      	movs	r5, r1
 8001d36:	0c1b      	lsrs	r3, r3, #16
 8001d38:	469a      	mov	sl, r3
 8001d3a:	437d      	muls	r5, r7
 8001d3c:	44cc      	add	ip, r9
 8001d3e:	44d4      	add	ip, sl
 8001d40:	9500      	str	r5, [sp, #0]
 8001d42:	45e1      	cmp	r9, ip
 8001d44:	d904      	bls.n	8001d50 <__aeabi_dmul+0x1b8>
 8001d46:	2380      	movs	r3, #128	; 0x80
 8001d48:	025b      	lsls	r3, r3, #9
 8001d4a:	4699      	mov	r9, r3
 8001d4c:	444d      	add	r5, r9
 8001d4e:	9500      	str	r5, [sp, #0]
 8001d50:	4663      	mov	r3, ip
 8001d52:	0c1b      	lsrs	r3, r3, #16
 8001d54:	001d      	movs	r5, r3
 8001d56:	4663      	mov	r3, ip
 8001d58:	041b      	lsls	r3, r3, #16
 8001d5a:	469c      	mov	ip, r3
 8001d5c:	4643      	mov	r3, r8
 8001d5e:	041b      	lsls	r3, r3, #16
 8001d60:	0c1b      	lsrs	r3, r3, #16
 8001d62:	4698      	mov	r8, r3
 8001d64:	4663      	mov	r3, ip
 8001d66:	4443      	add	r3, r8
 8001d68:	9303      	str	r3, [sp, #12]
 8001d6a:	0c23      	lsrs	r3, r4, #16
 8001d6c:	4698      	mov	r8, r3
 8001d6e:	0033      	movs	r3, r6
 8001d70:	0424      	lsls	r4, r4, #16
 8001d72:	0c24      	lsrs	r4, r4, #16
 8001d74:	4363      	muls	r3, r4
 8001d76:	469c      	mov	ip, r3
 8001d78:	0023      	movs	r3, r4
 8001d7a:	437b      	muls	r3, r7
 8001d7c:	4699      	mov	r9, r3
 8001d7e:	4643      	mov	r3, r8
 8001d80:	435e      	muls	r6, r3
 8001d82:	435f      	muls	r7, r3
 8001d84:	444e      	add	r6, r9
 8001d86:	4663      	mov	r3, ip
 8001d88:	46b2      	mov	sl, r6
 8001d8a:	0c1e      	lsrs	r6, r3, #16
 8001d8c:	4456      	add	r6, sl
 8001d8e:	45b1      	cmp	r9, r6
 8001d90:	d903      	bls.n	8001d9a <__aeabi_dmul+0x202>
 8001d92:	2380      	movs	r3, #128	; 0x80
 8001d94:	025b      	lsls	r3, r3, #9
 8001d96:	4699      	mov	r9, r3
 8001d98:	444f      	add	r7, r9
 8001d9a:	0c33      	lsrs	r3, r6, #16
 8001d9c:	4699      	mov	r9, r3
 8001d9e:	003b      	movs	r3, r7
 8001da0:	444b      	add	r3, r9
 8001da2:	9305      	str	r3, [sp, #20]
 8001da4:	4663      	mov	r3, ip
 8001da6:	46ac      	mov	ip, r5
 8001da8:	041f      	lsls	r7, r3, #16
 8001daa:	0c3f      	lsrs	r7, r7, #16
 8001dac:	0436      	lsls	r6, r6, #16
 8001dae:	19f6      	adds	r6, r6, r7
 8001db0:	44b4      	add	ip, r6
 8001db2:	4663      	mov	r3, ip
 8001db4:	9304      	str	r3, [sp, #16]
 8001db6:	465b      	mov	r3, fp
 8001db8:	0c1b      	lsrs	r3, r3, #16
 8001dba:	469c      	mov	ip, r3
 8001dbc:	465b      	mov	r3, fp
 8001dbe:	041f      	lsls	r7, r3, #16
 8001dc0:	0c3f      	lsrs	r7, r7, #16
 8001dc2:	003b      	movs	r3, r7
 8001dc4:	4343      	muls	r3, r0
 8001dc6:	4699      	mov	r9, r3
 8001dc8:	4663      	mov	r3, ip
 8001dca:	4343      	muls	r3, r0
 8001dcc:	469a      	mov	sl, r3
 8001dce:	464b      	mov	r3, r9
 8001dd0:	4660      	mov	r0, ip
 8001dd2:	0c1b      	lsrs	r3, r3, #16
 8001dd4:	469b      	mov	fp, r3
 8001dd6:	4348      	muls	r0, r1
 8001dd8:	4379      	muls	r1, r7
 8001dda:	4451      	add	r1, sl
 8001ddc:	4459      	add	r1, fp
 8001dde:	458a      	cmp	sl, r1
 8001de0:	d903      	bls.n	8001dea <__aeabi_dmul+0x252>
 8001de2:	2380      	movs	r3, #128	; 0x80
 8001de4:	025b      	lsls	r3, r3, #9
 8001de6:	469a      	mov	sl, r3
 8001de8:	4450      	add	r0, sl
 8001dea:	0c0b      	lsrs	r3, r1, #16
 8001dec:	469a      	mov	sl, r3
 8001dee:	464b      	mov	r3, r9
 8001df0:	041b      	lsls	r3, r3, #16
 8001df2:	0c1b      	lsrs	r3, r3, #16
 8001df4:	4699      	mov	r9, r3
 8001df6:	003b      	movs	r3, r7
 8001df8:	4363      	muls	r3, r4
 8001dfa:	0409      	lsls	r1, r1, #16
 8001dfc:	4645      	mov	r5, r8
 8001dfe:	4449      	add	r1, r9
 8001e00:	4699      	mov	r9, r3
 8001e02:	4663      	mov	r3, ip
 8001e04:	435c      	muls	r4, r3
 8001e06:	436b      	muls	r3, r5
 8001e08:	469c      	mov	ip, r3
 8001e0a:	464b      	mov	r3, r9
 8001e0c:	0c1b      	lsrs	r3, r3, #16
 8001e0e:	4698      	mov	r8, r3
 8001e10:	436f      	muls	r7, r5
 8001e12:	193f      	adds	r7, r7, r4
 8001e14:	4447      	add	r7, r8
 8001e16:	4450      	add	r0, sl
 8001e18:	42bc      	cmp	r4, r7
 8001e1a:	d903      	bls.n	8001e24 <__aeabi_dmul+0x28c>
 8001e1c:	2380      	movs	r3, #128	; 0x80
 8001e1e:	025b      	lsls	r3, r3, #9
 8001e20:	4698      	mov	r8, r3
 8001e22:	44c4      	add	ip, r8
 8001e24:	9b04      	ldr	r3, [sp, #16]
 8001e26:	9d00      	ldr	r5, [sp, #0]
 8001e28:	4698      	mov	r8, r3
 8001e2a:	4445      	add	r5, r8
 8001e2c:	42b5      	cmp	r5, r6
 8001e2e:	41b6      	sbcs	r6, r6
 8001e30:	4273      	negs	r3, r6
 8001e32:	4698      	mov	r8, r3
 8001e34:	464b      	mov	r3, r9
 8001e36:	041e      	lsls	r6, r3, #16
 8001e38:	9b05      	ldr	r3, [sp, #20]
 8001e3a:	043c      	lsls	r4, r7, #16
 8001e3c:	4699      	mov	r9, r3
 8001e3e:	0c36      	lsrs	r6, r6, #16
 8001e40:	19a4      	adds	r4, r4, r6
 8001e42:	444c      	add	r4, r9
 8001e44:	46a1      	mov	r9, r4
 8001e46:	4683      	mov	fp, r0
 8001e48:	186e      	adds	r6, r5, r1
 8001e4a:	44c1      	add	r9, r8
 8001e4c:	428e      	cmp	r6, r1
 8001e4e:	4189      	sbcs	r1, r1
 8001e50:	44cb      	add	fp, r9
 8001e52:	465d      	mov	r5, fp
 8001e54:	4249      	negs	r1, r1
 8001e56:	186d      	adds	r5, r5, r1
 8001e58:	429c      	cmp	r4, r3
 8001e5a:	41a4      	sbcs	r4, r4
 8001e5c:	45c1      	cmp	r9, r8
 8001e5e:	419b      	sbcs	r3, r3
 8001e60:	4583      	cmp	fp, r0
 8001e62:	4180      	sbcs	r0, r0
 8001e64:	428d      	cmp	r5, r1
 8001e66:	4189      	sbcs	r1, r1
 8001e68:	425b      	negs	r3, r3
 8001e6a:	4264      	negs	r4, r4
 8001e6c:	431c      	orrs	r4, r3
 8001e6e:	4240      	negs	r0, r0
 8001e70:	9b03      	ldr	r3, [sp, #12]
 8001e72:	4249      	negs	r1, r1
 8001e74:	4301      	orrs	r1, r0
 8001e76:	0270      	lsls	r0, r6, #9
 8001e78:	0c3f      	lsrs	r7, r7, #16
 8001e7a:	4318      	orrs	r0, r3
 8001e7c:	19e4      	adds	r4, r4, r7
 8001e7e:	1e47      	subs	r7, r0, #1
 8001e80:	41b8      	sbcs	r0, r7
 8001e82:	1864      	adds	r4, r4, r1
 8001e84:	4464      	add	r4, ip
 8001e86:	0df6      	lsrs	r6, r6, #23
 8001e88:	0261      	lsls	r1, r4, #9
 8001e8a:	4330      	orrs	r0, r6
 8001e8c:	0dec      	lsrs	r4, r5, #23
 8001e8e:	026e      	lsls	r6, r5, #9
 8001e90:	430c      	orrs	r4, r1
 8001e92:	4330      	orrs	r0, r6
 8001e94:	01c9      	lsls	r1, r1, #7
 8001e96:	d400      	bmi.n	8001e9a <__aeabi_dmul+0x302>
 8001e98:	e0f1      	b.n	800207e <__aeabi_dmul+0x4e6>
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	0843      	lsrs	r3, r0, #1
 8001e9e:	4001      	ands	r1, r0
 8001ea0:	430b      	orrs	r3, r1
 8001ea2:	07e0      	lsls	r0, r4, #31
 8001ea4:	4318      	orrs	r0, r3
 8001ea6:	0864      	lsrs	r4, r4, #1
 8001ea8:	4915      	ldr	r1, [pc, #84]	; (8001f00 <__aeabi_dmul+0x368>)
 8001eaa:	9b02      	ldr	r3, [sp, #8]
 8001eac:	468c      	mov	ip, r1
 8001eae:	4463      	add	r3, ip
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	dc00      	bgt.n	8001eb6 <__aeabi_dmul+0x31e>
 8001eb4:	e097      	b.n	8001fe6 <__aeabi_dmul+0x44e>
 8001eb6:	0741      	lsls	r1, r0, #29
 8001eb8:	d009      	beq.n	8001ece <__aeabi_dmul+0x336>
 8001eba:	210f      	movs	r1, #15
 8001ebc:	4001      	ands	r1, r0
 8001ebe:	2904      	cmp	r1, #4
 8001ec0:	d005      	beq.n	8001ece <__aeabi_dmul+0x336>
 8001ec2:	1d01      	adds	r1, r0, #4
 8001ec4:	4281      	cmp	r1, r0
 8001ec6:	4180      	sbcs	r0, r0
 8001ec8:	4240      	negs	r0, r0
 8001eca:	1824      	adds	r4, r4, r0
 8001ecc:	0008      	movs	r0, r1
 8001ece:	01e1      	lsls	r1, r4, #7
 8001ed0:	d506      	bpl.n	8001ee0 <__aeabi_dmul+0x348>
 8001ed2:	2180      	movs	r1, #128	; 0x80
 8001ed4:	00c9      	lsls	r1, r1, #3
 8001ed6:	468c      	mov	ip, r1
 8001ed8:	4b0a      	ldr	r3, [pc, #40]	; (8001f04 <__aeabi_dmul+0x36c>)
 8001eda:	401c      	ands	r4, r3
 8001edc:	9b02      	ldr	r3, [sp, #8]
 8001ede:	4463      	add	r3, ip
 8001ee0:	4909      	ldr	r1, [pc, #36]	; (8001f08 <__aeabi_dmul+0x370>)
 8001ee2:	428b      	cmp	r3, r1
 8001ee4:	dd00      	ble.n	8001ee8 <__aeabi_dmul+0x350>
 8001ee6:	e710      	b.n	8001d0a <__aeabi_dmul+0x172>
 8001ee8:	0761      	lsls	r1, r4, #29
 8001eea:	08c5      	lsrs	r5, r0, #3
 8001eec:	0264      	lsls	r4, r4, #9
 8001eee:	055b      	lsls	r3, r3, #21
 8001ef0:	430d      	orrs	r5, r1
 8001ef2:	0b24      	lsrs	r4, r4, #12
 8001ef4:	0d5b      	lsrs	r3, r3, #21
 8001ef6:	e6c1      	b.n	8001c7c <__aeabi_dmul+0xe4>
 8001ef8:	000007ff 	.word	0x000007ff
 8001efc:	fffffc01 	.word	0xfffffc01
 8001f00:	000003ff 	.word	0x000003ff
 8001f04:	feffffff 	.word	0xfeffffff
 8001f08:	000007fe 	.word	0x000007fe
 8001f0c:	464b      	mov	r3, r9
 8001f0e:	4323      	orrs	r3, r4
 8001f10:	d059      	beq.n	8001fc6 <__aeabi_dmul+0x42e>
 8001f12:	2c00      	cmp	r4, #0
 8001f14:	d100      	bne.n	8001f18 <__aeabi_dmul+0x380>
 8001f16:	e0a3      	b.n	8002060 <__aeabi_dmul+0x4c8>
 8001f18:	0020      	movs	r0, r4
 8001f1a:	f000 fd2b 	bl	8002974 <__clzsi2>
 8001f1e:	0001      	movs	r1, r0
 8001f20:	0003      	movs	r3, r0
 8001f22:	390b      	subs	r1, #11
 8001f24:	221d      	movs	r2, #29
 8001f26:	1a52      	subs	r2, r2, r1
 8001f28:	4649      	mov	r1, r9
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	40d1      	lsrs	r1, r2
 8001f2e:	464a      	mov	r2, r9
 8001f30:	3808      	subs	r0, #8
 8001f32:	4082      	lsls	r2, r0
 8001f34:	4084      	lsls	r4, r0
 8001f36:	0010      	movs	r0, r2
 8001f38:	430c      	orrs	r4, r1
 8001f3a:	4a74      	ldr	r2, [pc, #464]	; (800210c <__aeabi_dmul+0x574>)
 8001f3c:	1aeb      	subs	r3, r5, r3
 8001f3e:	4694      	mov	ip, r2
 8001f40:	4642      	mov	r2, r8
 8001f42:	4463      	add	r3, ip
 8001f44:	9301      	str	r3, [sp, #4]
 8001f46:	9b01      	ldr	r3, [sp, #4]
 8001f48:	407a      	eors	r2, r7
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	9302      	str	r3, [sp, #8]
 8001f52:	2e0a      	cmp	r6, #10
 8001f54:	dd00      	ble.n	8001f58 <__aeabi_dmul+0x3c0>
 8001f56:	e667      	b.n	8001c28 <__aeabi_dmul+0x90>
 8001f58:	e683      	b.n	8001c62 <__aeabi_dmul+0xca>
 8001f5a:	465b      	mov	r3, fp
 8001f5c:	4303      	orrs	r3, r0
 8001f5e:	469a      	mov	sl, r3
 8001f60:	d02a      	beq.n	8001fb8 <__aeabi_dmul+0x420>
 8001f62:	465b      	mov	r3, fp
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d06d      	beq.n	8002044 <__aeabi_dmul+0x4ac>
 8001f68:	4658      	mov	r0, fp
 8001f6a:	f000 fd03 	bl	8002974 <__clzsi2>
 8001f6e:	0001      	movs	r1, r0
 8001f70:	0003      	movs	r3, r0
 8001f72:	390b      	subs	r1, #11
 8001f74:	221d      	movs	r2, #29
 8001f76:	1a52      	subs	r2, r2, r1
 8001f78:	0021      	movs	r1, r4
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	465d      	mov	r5, fp
 8001f7e:	40d1      	lsrs	r1, r2
 8001f80:	3808      	subs	r0, #8
 8001f82:	4085      	lsls	r5, r0
 8001f84:	000a      	movs	r2, r1
 8001f86:	4084      	lsls	r4, r0
 8001f88:	432a      	orrs	r2, r5
 8001f8a:	4693      	mov	fp, r2
 8001f8c:	46a2      	mov	sl, r4
 8001f8e:	4d5f      	ldr	r5, [pc, #380]	; (800210c <__aeabi_dmul+0x574>)
 8001f90:	2600      	movs	r6, #0
 8001f92:	1aed      	subs	r5, r5, r3
 8001f94:	2300      	movs	r3, #0
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	e625      	b.n	8001be6 <__aeabi_dmul+0x4e>
 8001f9a:	465b      	mov	r3, fp
 8001f9c:	4303      	orrs	r3, r0
 8001f9e:	469a      	mov	sl, r3
 8001fa0:	d105      	bne.n	8001fae <__aeabi_dmul+0x416>
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	469b      	mov	fp, r3
 8001fa6:	3302      	adds	r3, #2
 8001fa8:	2608      	movs	r6, #8
 8001faa:	9300      	str	r3, [sp, #0]
 8001fac:	e61b      	b.n	8001be6 <__aeabi_dmul+0x4e>
 8001fae:	2303      	movs	r3, #3
 8001fb0:	4682      	mov	sl, r0
 8001fb2:	260c      	movs	r6, #12
 8001fb4:	9300      	str	r3, [sp, #0]
 8001fb6:	e616      	b.n	8001be6 <__aeabi_dmul+0x4e>
 8001fb8:	2300      	movs	r3, #0
 8001fba:	469b      	mov	fp, r3
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	2604      	movs	r6, #4
 8001fc0:	2500      	movs	r5, #0
 8001fc2:	9300      	str	r3, [sp, #0]
 8001fc4:	e60f      	b.n	8001be6 <__aeabi_dmul+0x4e>
 8001fc6:	4642      	mov	r2, r8
 8001fc8:	3301      	adds	r3, #1
 8001fca:	9501      	str	r5, [sp, #4]
 8001fcc:	431e      	orrs	r6, r3
 8001fce:	9b01      	ldr	r3, [sp, #4]
 8001fd0:	407a      	eors	r2, r7
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	2400      	movs	r4, #0
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	2101      	movs	r1, #1
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	9302      	str	r3, [sp, #8]
 8001fde:	2e0a      	cmp	r6, #10
 8001fe0:	dd00      	ble.n	8001fe4 <__aeabi_dmul+0x44c>
 8001fe2:	e621      	b.n	8001c28 <__aeabi_dmul+0x90>
 8001fe4:	e63d      	b.n	8001c62 <__aeabi_dmul+0xca>
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	1ac9      	subs	r1, r1, r3
 8001fea:	2938      	cmp	r1, #56	; 0x38
 8001fec:	dd00      	ble.n	8001ff0 <__aeabi_dmul+0x458>
 8001fee:	e642      	b.n	8001c76 <__aeabi_dmul+0xde>
 8001ff0:	291f      	cmp	r1, #31
 8001ff2:	dd47      	ble.n	8002084 <__aeabi_dmul+0x4ec>
 8001ff4:	261f      	movs	r6, #31
 8001ff6:	0025      	movs	r5, r4
 8001ff8:	4276      	negs	r6, r6
 8001ffa:	1af3      	subs	r3, r6, r3
 8001ffc:	40dd      	lsrs	r5, r3
 8001ffe:	002b      	movs	r3, r5
 8002000:	2920      	cmp	r1, #32
 8002002:	d005      	beq.n	8002010 <__aeabi_dmul+0x478>
 8002004:	4942      	ldr	r1, [pc, #264]	; (8002110 <__aeabi_dmul+0x578>)
 8002006:	9d02      	ldr	r5, [sp, #8]
 8002008:	468c      	mov	ip, r1
 800200a:	4465      	add	r5, ip
 800200c:	40ac      	lsls	r4, r5
 800200e:	4320      	orrs	r0, r4
 8002010:	1e41      	subs	r1, r0, #1
 8002012:	4188      	sbcs	r0, r1
 8002014:	4318      	orrs	r0, r3
 8002016:	2307      	movs	r3, #7
 8002018:	001d      	movs	r5, r3
 800201a:	2400      	movs	r4, #0
 800201c:	4005      	ands	r5, r0
 800201e:	4203      	tst	r3, r0
 8002020:	d04a      	beq.n	80020b8 <__aeabi_dmul+0x520>
 8002022:	230f      	movs	r3, #15
 8002024:	2400      	movs	r4, #0
 8002026:	4003      	ands	r3, r0
 8002028:	2b04      	cmp	r3, #4
 800202a:	d042      	beq.n	80020b2 <__aeabi_dmul+0x51a>
 800202c:	1d03      	adds	r3, r0, #4
 800202e:	4283      	cmp	r3, r0
 8002030:	4180      	sbcs	r0, r0
 8002032:	4240      	negs	r0, r0
 8002034:	1824      	adds	r4, r4, r0
 8002036:	0018      	movs	r0, r3
 8002038:	0223      	lsls	r3, r4, #8
 800203a:	d53a      	bpl.n	80020b2 <__aeabi_dmul+0x51a>
 800203c:	2301      	movs	r3, #1
 800203e:	2400      	movs	r4, #0
 8002040:	2500      	movs	r5, #0
 8002042:	e61b      	b.n	8001c7c <__aeabi_dmul+0xe4>
 8002044:	f000 fc96 	bl	8002974 <__clzsi2>
 8002048:	0001      	movs	r1, r0
 800204a:	0003      	movs	r3, r0
 800204c:	3115      	adds	r1, #21
 800204e:	3320      	adds	r3, #32
 8002050:	291c      	cmp	r1, #28
 8002052:	dd8f      	ble.n	8001f74 <__aeabi_dmul+0x3dc>
 8002054:	3808      	subs	r0, #8
 8002056:	2200      	movs	r2, #0
 8002058:	4084      	lsls	r4, r0
 800205a:	4692      	mov	sl, r2
 800205c:	46a3      	mov	fp, r4
 800205e:	e796      	b.n	8001f8e <__aeabi_dmul+0x3f6>
 8002060:	f000 fc88 	bl	8002974 <__clzsi2>
 8002064:	0001      	movs	r1, r0
 8002066:	0003      	movs	r3, r0
 8002068:	3115      	adds	r1, #21
 800206a:	3320      	adds	r3, #32
 800206c:	291c      	cmp	r1, #28
 800206e:	dc00      	bgt.n	8002072 <__aeabi_dmul+0x4da>
 8002070:	e758      	b.n	8001f24 <__aeabi_dmul+0x38c>
 8002072:	0002      	movs	r2, r0
 8002074:	464c      	mov	r4, r9
 8002076:	3a08      	subs	r2, #8
 8002078:	2000      	movs	r0, #0
 800207a:	4094      	lsls	r4, r2
 800207c:	e75d      	b.n	8001f3a <__aeabi_dmul+0x3a2>
 800207e:	9b01      	ldr	r3, [sp, #4]
 8002080:	9302      	str	r3, [sp, #8]
 8002082:	e711      	b.n	8001ea8 <__aeabi_dmul+0x310>
 8002084:	4b23      	ldr	r3, [pc, #140]	; (8002114 <__aeabi_dmul+0x57c>)
 8002086:	0026      	movs	r6, r4
 8002088:	469c      	mov	ip, r3
 800208a:	0003      	movs	r3, r0
 800208c:	9d02      	ldr	r5, [sp, #8]
 800208e:	40cb      	lsrs	r3, r1
 8002090:	4465      	add	r5, ip
 8002092:	40ae      	lsls	r6, r5
 8002094:	431e      	orrs	r6, r3
 8002096:	0003      	movs	r3, r0
 8002098:	40ab      	lsls	r3, r5
 800209a:	1e58      	subs	r0, r3, #1
 800209c:	4183      	sbcs	r3, r0
 800209e:	0030      	movs	r0, r6
 80020a0:	4318      	orrs	r0, r3
 80020a2:	40cc      	lsrs	r4, r1
 80020a4:	0743      	lsls	r3, r0, #29
 80020a6:	d0c7      	beq.n	8002038 <__aeabi_dmul+0x4a0>
 80020a8:	230f      	movs	r3, #15
 80020aa:	4003      	ands	r3, r0
 80020ac:	2b04      	cmp	r3, #4
 80020ae:	d1bd      	bne.n	800202c <__aeabi_dmul+0x494>
 80020b0:	e7c2      	b.n	8002038 <__aeabi_dmul+0x4a0>
 80020b2:	0765      	lsls	r5, r4, #29
 80020b4:	0264      	lsls	r4, r4, #9
 80020b6:	0b24      	lsrs	r4, r4, #12
 80020b8:	08c0      	lsrs	r0, r0, #3
 80020ba:	2300      	movs	r3, #0
 80020bc:	4305      	orrs	r5, r0
 80020be:	e5dd      	b.n	8001c7c <__aeabi_dmul+0xe4>
 80020c0:	2500      	movs	r5, #0
 80020c2:	2302      	movs	r3, #2
 80020c4:	2e0f      	cmp	r6, #15
 80020c6:	d10c      	bne.n	80020e2 <__aeabi_dmul+0x54a>
 80020c8:	2480      	movs	r4, #128	; 0x80
 80020ca:	465b      	mov	r3, fp
 80020cc:	0324      	lsls	r4, r4, #12
 80020ce:	4223      	tst	r3, r4
 80020d0:	d00e      	beq.n	80020f0 <__aeabi_dmul+0x558>
 80020d2:	4221      	tst	r1, r4
 80020d4:	d10c      	bne.n	80020f0 <__aeabi_dmul+0x558>
 80020d6:	430c      	orrs	r4, r1
 80020d8:	0324      	lsls	r4, r4, #12
 80020da:	003a      	movs	r2, r7
 80020dc:	4b0e      	ldr	r3, [pc, #56]	; (8002118 <__aeabi_dmul+0x580>)
 80020de:	0b24      	lsrs	r4, r4, #12
 80020e0:	e5cc      	b.n	8001c7c <__aeabi_dmul+0xe4>
 80020e2:	2e0b      	cmp	r6, #11
 80020e4:	d000      	beq.n	80020e8 <__aeabi_dmul+0x550>
 80020e6:	e5a2      	b.n	8001c2e <__aeabi_dmul+0x96>
 80020e8:	468b      	mov	fp, r1
 80020ea:	46aa      	mov	sl, r5
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	e5f7      	b.n	8001ce0 <__aeabi_dmul+0x148>
 80020f0:	2480      	movs	r4, #128	; 0x80
 80020f2:	465b      	mov	r3, fp
 80020f4:	0324      	lsls	r4, r4, #12
 80020f6:	431c      	orrs	r4, r3
 80020f8:	0324      	lsls	r4, r4, #12
 80020fa:	4642      	mov	r2, r8
 80020fc:	4655      	mov	r5, sl
 80020fe:	4b06      	ldr	r3, [pc, #24]	; (8002118 <__aeabi_dmul+0x580>)
 8002100:	0b24      	lsrs	r4, r4, #12
 8002102:	e5bb      	b.n	8001c7c <__aeabi_dmul+0xe4>
 8002104:	464d      	mov	r5, r9
 8002106:	0021      	movs	r1, r4
 8002108:	2303      	movs	r3, #3
 800210a:	e7db      	b.n	80020c4 <__aeabi_dmul+0x52c>
 800210c:	fffffc0d 	.word	0xfffffc0d
 8002110:	0000043e 	.word	0x0000043e
 8002114:	0000041e 	.word	0x0000041e
 8002118:	000007ff 	.word	0x000007ff

0800211c <__aeabi_dsub>:
 800211c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800211e:	4657      	mov	r7, sl
 8002120:	464e      	mov	r6, r9
 8002122:	4645      	mov	r5, r8
 8002124:	46de      	mov	lr, fp
 8002126:	b5e0      	push	{r5, r6, r7, lr}
 8002128:	000d      	movs	r5, r1
 800212a:	0004      	movs	r4, r0
 800212c:	0019      	movs	r1, r3
 800212e:	0010      	movs	r0, r2
 8002130:	032b      	lsls	r3, r5, #12
 8002132:	0a5b      	lsrs	r3, r3, #9
 8002134:	0f62      	lsrs	r2, r4, #29
 8002136:	431a      	orrs	r2, r3
 8002138:	00e3      	lsls	r3, r4, #3
 800213a:	030c      	lsls	r4, r1, #12
 800213c:	0a64      	lsrs	r4, r4, #9
 800213e:	0f47      	lsrs	r7, r0, #29
 8002140:	4327      	orrs	r7, r4
 8002142:	4cd0      	ldr	r4, [pc, #832]	; (8002484 <__aeabi_dsub+0x368>)
 8002144:	006e      	lsls	r6, r5, #1
 8002146:	4691      	mov	r9, r2
 8002148:	b083      	sub	sp, #12
 800214a:	004a      	lsls	r2, r1, #1
 800214c:	00c0      	lsls	r0, r0, #3
 800214e:	4698      	mov	r8, r3
 8002150:	46a2      	mov	sl, r4
 8002152:	0d76      	lsrs	r6, r6, #21
 8002154:	0fed      	lsrs	r5, r5, #31
 8002156:	0d52      	lsrs	r2, r2, #21
 8002158:	0fc9      	lsrs	r1, r1, #31
 800215a:	9001      	str	r0, [sp, #4]
 800215c:	42a2      	cmp	r2, r4
 800215e:	d100      	bne.n	8002162 <__aeabi_dsub+0x46>
 8002160:	e0b9      	b.n	80022d6 <__aeabi_dsub+0x1ba>
 8002162:	2401      	movs	r4, #1
 8002164:	4061      	eors	r1, r4
 8002166:	468b      	mov	fp, r1
 8002168:	428d      	cmp	r5, r1
 800216a:	d100      	bne.n	800216e <__aeabi_dsub+0x52>
 800216c:	e08d      	b.n	800228a <__aeabi_dsub+0x16e>
 800216e:	1ab4      	subs	r4, r6, r2
 8002170:	46a4      	mov	ip, r4
 8002172:	2c00      	cmp	r4, #0
 8002174:	dc00      	bgt.n	8002178 <__aeabi_dsub+0x5c>
 8002176:	e0b7      	b.n	80022e8 <__aeabi_dsub+0x1cc>
 8002178:	2a00      	cmp	r2, #0
 800217a:	d100      	bne.n	800217e <__aeabi_dsub+0x62>
 800217c:	e0cb      	b.n	8002316 <__aeabi_dsub+0x1fa>
 800217e:	4ac1      	ldr	r2, [pc, #772]	; (8002484 <__aeabi_dsub+0x368>)
 8002180:	4296      	cmp	r6, r2
 8002182:	d100      	bne.n	8002186 <__aeabi_dsub+0x6a>
 8002184:	e186      	b.n	8002494 <__aeabi_dsub+0x378>
 8002186:	2280      	movs	r2, #128	; 0x80
 8002188:	0412      	lsls	r2, r2, #16
 800218a:	4317      	orrs	r7, r2
 800218c:	4662      	mov	r2, ip
 800218e:	2a38      	cmp	r2, #56	; 0x38
 8002190:	dd00      	ble.n	8002194 <__aeabi_dsub+0x78>
 8002192:	e1a4      	b.n	80024de <__aeabi_dsub+0x3c2>
 8002194:	2a1f      	cmp	r2, #31
 8002196:	dd00      	ble.n	800219a <__aeabi_dsub+0x7e>
 8002198:	e21d      	b.n	80025d6 <__aeabi_dsub+0x4ba>
 800219a:	4661      	mov	r1, ip
 800219c:	2220      	movs	r2, #32
 800219e:	003c      	movs	r4, r7
 80021a0:	1a52      	subs	r2, r2, r1
 80021a2:	0001      	movs	r1, r0
 80021a4:	4090      	lsls	r0, r2
 80021a6:	4094      	lsls	r4, r2
 80021a8:	1e42      	subs	r2, r0, #1
 80021aa:	4190      	sbcs	r0, r2
 80021ac:	4662      	mov	r2, ip
 80021ae:	46a0      	mov	r8, r4
 80021b0:	4664      	mov	r4, ip
 80021b2:	40d7      	lsrs	r7, r2
 80021b4:	464a      	mov	r2, r9
 80021b6:	40e1      	lsrs	r1, r4
 80021b8:	4644      	mov	r4, r8
 80021ba:	1bd2      	subs	r2, r2, r7
 80021bc:	4691      	mov	r9, r2
 80021be:	430c      	orrs	r4, r1
 80021c0:	4304      	orrs	r4, r0
 80021c2:	1b1c      	subs	r4, r3, r4
 80021c4:	42a3      	cmp	r3, r4
 80021c6:	4192      	sbcs	r2, r2
 80021c8:	464b      	mov	r3, r9
 80021ca:	4252      	negs	r2, r2
 80021cc:	1a9b      	subs	r3, r3, r2
 80021ce:	469a      	mov	sl, r3
 80021d0:	4653      	mov	r3, sl
 80021d2:	021b      	lsls	r3, r3, #8
 80021d4:	d400      	bmi.n	80021d8 <__aeabi_dsub+0xbc>
 80021d6:	e12b      	b.n	8002430 <__aeabi_dsub+0x314>
 80021d8:	4653      	mov	r3, sl
 80021da:	025a      	lsls	r2, r3, #9
 80021dc:	0a53      	lsrs	r3, r2, #9
 80021de:	469a      	mov	sl, r3
 80021e0:	4653      	mov	r3, sl
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d100      	bne.n	80021e8 <__aeabi_dsub+0xcc>
 80021e6:	e166      	b.n	80024b6 <__aeabi_dsub+0x39a>
 80021e8:	4650      	mov	r0, sl
 80021ea:	f000 fbc3 	bl	8002974 <__clzsi2>
 80021ee:	0003      	movs	r3, r0
 80021f0:	3b08      	subs	r3, #8
 80021f2:	2220      	movs	r2, #32
 80021f4:	0020      	movs	r0, r4
 80021f6:	1ad2      	subs	r2, r2, r3
 80021f8:	4651      	mov	r1, sl
 80021fa:	40d0      	lsrs	r0, r2
 80021fc:	4099      	lsls	r1, r3
 80021fe:	0002      	movs	r2, r0
 8002200:	409c      	lsls	r4, r3
 8002202:	430a      	orrs	r2, r1
 8002204:	429e      	cmp	r6, r3
 8002206:	dd00      	ble.n	800220a <__aeabi_dsub+0xee>
 8002208:	e164      	b.n	80024d4 <__aeabi_dsub+0x3b8>
 800220a:	1b9b      	subs	r3, r3, r6
 800220c:	1c59      	adds	r1, r3, #1
 800220e:	291f      	cmp	r1, #31
 8002210:	dd00      	ble.n	8002214 <__aeabi_dsub+0xf8>
 8002212:	e0fe      	b.n	8002412 <__aeabi_dsub+0x2f6>
 8002214:	2320      	movs	r3, #32
 8002216:	0010      	movs	r0, r2
 8002218:	0026      	movs	r6, r4
 800221a:	1a5b      	subs	r3, r3, r1
 800221c:	409c      	lsls	r4, r3
 800221e:	4098      	lsls	r0, r3
 8002220:	40ce      	lsrs	r6, r1
 8002222:	40ca      	lsrs	r2, r1
 8002224:	1e63      	subs	r3, r4, #1
 8002226:	419c      	sbcs	r4, r3
 8002228:	4330      	orrs	r0, r6
 800222a:	4692      	mov	sl, r2
 800222c:	2600      	movs	r6, #0
 800222e:	4304      	orrs	r4, r0
 8002230:	0763      	lsls	r3, r4, #29
 8002232:	d009      	beq.n	8002248 <__aeabi_dsub+0x12c>
 8002234:	230f      	movs	r3, #15
 8002236:	4023      	ands	r3, r4
 8002238:	2b04      	cmp	r3, #4
 800223a:	d005      	beq.n	8002248 <__aeabi_dsub+0x12c>
 800223c:	1d23      	adds	r3, r4, #4
 800223e:	42a3      	cmp	r3, r4
 8002240:	41a4      	sbcs	r4, r4
 8002242:	4264      	negs	r4, r4
 8002244:	44a2      	add	sl, r4
 8002246:	001c      	movs	r4, r3
 8002248:	4653      	mov	r3, sl
 800224a:	021b      	lsls	r3, r3, #8
 800224c:	d400      	bmi.n	8002250 <__aeabi_dsub+0x134>
 800224e:	e0f2      	b.n	8002436 <__aeabi_dsub+0x31a>
 8002250:	4b8c      	ldr	r3, [pc, #560]	; (8002484 <__aeabi_dsub+0x368>)
 8002252:	3601      	adds	r6, #1
 8002254:	429e      	cmp	r6, r3
 8002256:	d100      	bne.n	800225a <__aeabi_dsub+0x13e>
 8002258:	e10f      	b.n	800247a <__aeabi_dsub+0x35e>
 800225a:	4653      	mov	r3, sl
 800225c:	498a      	ldr	r1, [pc, #552]	; (8002488 <__aeabi_dsub+0x36c>)
 800225e:	08e4      	lsrs	r4, r4, #3
 8002260:	400b      	ands	r3, r1
 8002262:	0019      	movs	r1, r3
 8002264:	075b      	lsls	r3, r3, #29
 8002266:	4323      	orrs	r3, r4
 8002268:	0572      	lsls	r2, r6, #21
 800226a:	024c      	lsls	r4, r1, #9
 800226c:	0b24      	lsrs	r4, r4, #12
 800226e:	0d52      	lsrs	r2, r2, #21
 8002270:	0512      	lsls	r2, r2, #20
 8002272:	4322      	orrs	r2, r4
 8002274:	07ed      	lsls	r5, r5, #31
 8002276:	432a      	orrs	r2, r5
 8002278:	0018      	movs	r0, r3
 800227a:	0011      	movs	r1, r2
 800227c:	b003      	add	sp, #12
 800227e:	bcf0      	pop	{r4, r5, r6, r7}
 8002280:	46bb      	mov	fp, r7
 8002282:	46b2      	mov	sl, r6
 8002284:	46a9      	mov	r9, r5
 8002286:	46a0      	mov	r8, r4
 8002288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800228a:	1ab4      	subs	r4, r6, r2
 800228c:	46a4      	mov	ip, r4
 800228e:	2c00      	cmp	r4, #0
 8002290:	dd59      	ble.n	8002346 <__aeabi_dsub+0x22a>
 8002292:	2a00      	cmp	r2, #0
 8002294:	d100      	bne.n	8002298 <__aeabi_dsub+0x17c>
 8002296:	e0b0      	b.n	80023fa <__aeabi_dsub+0x2de>
 8002298:	4556      	cmp	r6, sl
 800229a:	d100      	bne.n	800229e <__aeabi_dsub+0x182>
 800229c:	e0fa      	b.n	8002494 <__aeabi_dsub+0x378>
 800229e:	2280      	movs	r2, #128	; 0x80
 80022a0:	0412      	lsls	r2, r2, #16
 80022a2:	4317      	orrs	r7, r2
 80022a4:	4662      	mov	r2, ip
 80022a6:	2a38      	cmp	r2, #56	; 0x38
 80022a8:	dd00      	ble.n	80022ac <__aeabi_dsub+0x190>
 80022aa:	e0d4      	b.n	8002456 <__aeabi_dsub+0x33a>
 80022ac:	2a1f      	cmp	r2, #31
 80022ae:	dc00      	bgt.n	80022b2 <__aeabi_dsub+0x196>
 80022b0:	e1c0      	b.n	8002634 <__aeabi_dsub+0x518>
 80022b2:	0039      	movs	r1, r7
 80022b4:	3a20      	subs	r2, #32
 80022b6:	40d1      	lsrs	r1, r2
 80022b8:	4662      	mov	r2, ip
 80022ba:	2a20      	cmp	r2, #32
 80022bc:	d006      	beq.n	80022cc <__aeabi_dsub+0x1b0>
 80022be:	4664      	mov	r4, ip
 80022c0:	2240      	movs	r2, #64	; 0x40
 80022c2:	1b12      	subs	r2, r2, r4
 80022c4:	003c      	movs	r4, r7
 80022c6:	4094      	lsls	r4, r2
 80022c8:	4304      	orrs	r4, r0
 80022ca:	9401      	str	r4, [sp, #4]
 80022cc:	9c01      	ldr	r4, [sp, #4]
 80022ce:	1e62      	subs	r2, r4, #1
 80022d0:	4194      	sbcs	r4, r2
 80022d2:	430c      	orrs	r4, r1
 80022d4:	e0c3      	b.n	800245e <__aeabi_dsub+0x342>
 80022d6:	003c      	movs	r4, r7
 80022d8:	4304      	orrs	r4, r0
 80022da:	d02b      	beq.n	8002334 <__aeabi_dsub+0x218>
 80022dc:	468b      	mov	fp, r1
 80022de:	428d      	cmp	r5, r1
 80022e0:	d02e      	beq.n	8002340 <__aeabi_dsub+0x224>
 80022e2:	4c6a      	ldr	r4, [pc, #424]	; (800248c <__aeabi_dsub+0x370>)
 80022e4:	46a4      	mov	ip, r4
 80022e6:	44b4      	add	ip, r6
 80022e8:	4664      	mov	r4, ip
 80022ea:	2c00      	cmp	r4, #0
 80022ec:	d05f      	beq.n	80023ae <__aeabi_dsub+0x292>
 80022ee:	1b94      	subs	r4, r2, r6
 80022f0:	46a4      	mov	ip, r4
 80022f2:	2e00      	cmp	r6, #0
 80022f4:	d000      	beq.n	80022f8 <__aeabi_dsub+0x1dc>
 80022f6:	e120      	b.n	800253a <__aeabi_dsub+0x41e>
 80022f8:	464c      	mov	r4, r9
 80022fa:	431c      	orrs	r4, r3
 80022fc:	d100      	bne.n	8002300 <__aeabi_dsub+0x1e4>
 80022fe:	e1c7      	b.n	8002690 <__aeabi_dsub+0x574>
 8002300:	4661      	mov	r1, ip
 8002302:	1e4c      	subs	r4, r1, #1
 8002304:	2901      	cmp	r1, #1
 8002306:	d100      	bne.n	800230a <__aeabi_dsub+0x1ee>
 8002308:	e223      	b.n	8002752 <__aeabi_dsub+0x636>
 800230a:	4d5e      	ldr	r5, [pc, #376]	; (8002484 <__aeabi_dsub+0x368>)
 800230c:	45ac      	cmp	ip, r5
 800230e:	d100      	bne.n	8002312 <__aeabi_dsub+0x1f6>
 8002310:	e1d8      	b.n	80026c4 <__aeabi_dsub+0x5a8>
 8002312:	46a4      	mov	ip, r4
 8002314:	e11a      	b.n	800254c <__aeabi_dsub+0x430>
 8002316:	003a      	movs	r2, r7
 8002318:	4302      	orrs	r2, r0
 800231a:	d100      	bne.n	800231e <__aeabi_dsub+0x202>
 800231c:	e0e4      	b.n	80024e8 <__aeabi_dsub+0x3cc>
 800231e:	0022      	movs	r2, r4
 8002320:	3a01      	subs	r2, #1
 8002322:	2c01      	cmp	r4, #1
 8002324:	d100      	bne.n	8002328 <__aeabi_dsub+0x20c>
 8002326:	e1c3      	b.n	80026b0 <__aeabi_dsub+0x594>
 8002328:	4956      	ldr	r1, [pc, #344]	; (8002484 <__aeabi_dsub+0x368>)
 800232a:	428c      	cmp	r4, r1
 800232c:	d100      	bne.n	8002330 <__aeabi_dsub+0x214>
 800232e:	e0b1      	b.n	8002494 <__aeabi_dsub+0x378>
 8002330:	4694      	mov	ip, r2
 8002332:	e72b      	b.n	800218c <__aeabi_dsub+0x70>
 8002334:	2401      	movs	r4, #1
 8002336:	4061      	eors	r1, r4
 8002338:	468b      	mov	fp, r1
 800233a:	428d      	cmp	r5, r1
 800233c:	d000      	beq.n	8002340 <__aeabi_dsub+0x224>
 800233e:	e716      	b.n	800216e <__aeabi_dsub+0x52>
 8002340:	4952      	ldr	r1, [pc, #328]	; (800248c <__aeabi_dsub+0x370>)
 8002342:	468c      	mov	ip, r1
 8002344:	44b4      	add	ip, r6
 8002346:	4664      	mov	r4, ip
 8002348:	2c00      	cmp	r4, #0
 800234a:	d100      	bne.n	800234e <__aeabi_dsub+0x232>
 800234c:	e0d3      	b.n	80024f6 <__aeabi_dsub+0x3da>
 800234e:	1b91      	subs	r1, r2, r6
 8002350:	468c      	mov	ip, r1
 8002352:	2e00      	cmp	r6, #0
 8002354:	d100      	bne.n	8002358 <__aeabi_dsub+0x23c>
 8002356:	e15e      	b.n	8002616 <__aeabi_dsub+0x4fa>
 8002358:	494a      	ldr	r1, [pc, #296]	; (8002484 <__aeabi_dsub+0x368>)
 800235a:	428a      	cmp	r2, r1
 800235c:	d100      	bne.n	8002360 <__aeabi_dsub+0x244>
 800235e:	e1be      	b.n	80026de <__aeabi_dsub+0x5c2>
 8002360:	2180      	movs	r1, #128	; 0x80
 8002362:	464c      	mov	r4, r9
 8002364:	0409      	lsls	r1, r1, #16
 8002366:	430c      	orrs	r4, r1
 8002368:	46a1      	mov	r9, r4
 800236a:	4661      	mov	r1, ip
 800236c:	2938      	cmp	r1, #56	; 0x38
 800236e:	dd00      	ble.n	8002372 <__aeabi_dsub+0x256>
 8002370:	e1ba      	b.n	80026e8 <__aeabi_dsub+0x5cc>
 8002372:	291f      	cmp	r1, #31
 8002374:	dd00      	ble.n	8002378 <__aeabi_dsub+0x25c>
 8002376:	e227      	b.n	80027c8 <__aeabi_dsub+0x6ac>
 8002378:	2420      	movs	r4, #32
 800237a:	1a64      	subs	r4, r4, r1
 800237c:	4649      	mov	r1, r9
 800237e:	40a1      	lsls	r1, r4
 8002380:	001e      	movs	r6, r3
 8002382:	4688      	mov	r8, r1
 8002384:	4661      	mov	r1, ip
 8002386:	40a3      	lsls	r3, r4
 8002388:	40ce      	lsrs	r6, r1
 800238a:	4641      	mov	r1, r8
 800238c:	1e5c      	subs	r4, r3, #1
 800238e:	41a3      	sbcs	r3, r4
 8002390:	4331      	orrs	r1, r6
 8002392:	4319      	orrs	r1, r3
 8002394:	000c      	movs	r4, r1
 8002396:	4663      	mov	r3, ip
 8002398:	4649      	mov	r1, r9
 800239a:	40d9      	lsrs	r1, r3
 800239c:	187f      	adds	r7, r7, r1
 800239e:	1824      	adds	r4, r4, r0
 80023a0:	4284      	cmp	r4, r0
 80023a2:	419b      	sbcs	r3, r3
 80023a4:	425b      	negs	r3, r3
 80023a6:	469a      	mov	sl, r3
 80023a8:	0016      	movs	r6, r2
 80023aa:	44ba      	add	sl, r7
 80023ac:	e05d      	b.n	800246a <__aeabi_dsub+0x34e>
 80023ae:	4c38      	ldr	r4, [pc, #224]	; (8002490 <__aeabi_dsub+0x374>)
 80023b0:	1c72      	adds	r2, r6, #1
 80023b2:	4222      	tst	r2, r4
 80023b4:	d000      	beq.n	80023b8 <__aeabi_dsub+0x29c>
 80023b6:	e0df      	b.n	8002578 <__aeabi_dsub+0x45c>
 80023b8:	464a      	mov	r2, r9
 80023ba:	431a      	orrs	r2, r3
 80023bc:	2e00      	cmp	r6, #0
 80023be:	d000      	beq.n	80023c2 <__aeabi_dsub+0x2a6>
 80023c0:	e15c      	b.n	800267c <__aeabi_dsub+0x560>
 80023c2:	2a00      	cmp	r2, #0
 80023c4:	d100      	bne.n	80023c8 <__aeabi_dsub+0x2ac>
 80023c6:	e1cf      	b.n	8002768 <__aeabi_dsub+0x64c>
 80023c8:	003a      	movs	r2, r7
 80023ca:	4302      	orrs	r2, r0
 80023cc:	d100      	bne.n	80023d0 <__aeabi_dsub+0x2b4>
 80023ce:	e17f      	b.n	80026d0 <__aeabi_dsub+0x5b4>
 80023d0:	1a1c      	subs	r4, r3, r0
 80023d2:	464a      	mov	r2, r9
 80023d4:	42a3      	cmp	r3, r4
 80023d6:	4189      	sbcs	r1, r1
 80023d8:	1bd2      	subs	r2, r2, r7
 80023da:	4249      	negs	r1, r1
 80023dc:	1a52      	subs	r2, r2, r1
 80023de:	4692      	mov	sl, r2
 80023e0:	0212      	lsls	r2, r2, #8
 80023e2:	d400      	bmi.n	80023e6 <__aeabi_dsub+0x2ca>
 80023e4:	e20a      	b.n	80027fc <__aeabi_dsub+0x6e0>
 80023e6:	1ac4      	subs	r4, r0, r3
 80023e8:	42a0      	cmp	r0, r4
 80023ea:	4180      	sbcs	r0, r0
 80023ec:	464b      	mov	r3, r9
 80023ee:	4240      	negs	r0, r0
 80023f0:	1aff      	subs	r7, r7, r3
 80023f2:	1a3b      	subs	r3, r7, r0
 80023f4:	469a      	mov	sl, r3
 80023f6:	465d      	mov	r5, fp
 80023f8:	e71a      	b.n	8002230 <__aeabi_dsub+0x114>
 80023fa:	003a      	movs	r2, r7
 80023fc:	4302      	orrs	r2, r0
 80023fe:	d073      	beq.n	80024e8 <__aeabi_dsub+0x3cc>
 8002400:	0022      	movs	r2, r4
 8002402:	3a01      	subs	r2, #1
 8002404:	2c01      	cmp	r4, #1
 8002406:	d100      	bne.n	800240a <__aeabi_dsub+0x2ee>
 8002408:	e0cb      	b.n	80025a2 <__aeabi_dsub+0x486>
 800240a:	4554      	cmp	r4, sl
 800240c:	d042      	beq.n	8002494 <__aeabi_dsub+0x378>
 800240e:	4694      	mov	ip, r2
 8002410:	e748      	b.n	80022a4 <__aeabi_dsub+0x188>
 8002412:	0010      	movs	r0, r2
 8002414:	3b1f      	subs	r3, #31
 8002416:	40d8      	lsrs	r0, r3
 8002418:	2920      	cmp	r1, #32
 800241a:	d003      	beq.n	8002424 <__aeabi_dsub+0x308>
 800241c:	2340      	movs	r3, #64	; 0x40
 800241e:	1a5b      	subs	r3, r3, r1
 8002420:	409a      	lsls	r2, r3
 8002422:	4314      	orrs	r4, r2
 8002424:	1e63      	subs	r3, r4, #1
 8002426:	419c      	sbcs	r4, r3
 8002428:	2300      	movs	r3, #0
 800242a:	2600      	movs	r6, #0
 800242c:	469a      	mov	sl, r3
 800242e:	4304      	orrs	r4, r0
 8002430:	0763      	lsls	r3, r4, #29
 8002432:	d000      	beq.n	8002436 <__aeabi_dsub+0x31a>
 8002434:	e6fe      	b.n	8002234 <__aeabi_dsub+0x118>
 8002436:	4652      	mov	r2, sl
 8002438:	08e3      	lsrs	r3, r4, #3
 800243a:	0752      	lsls	r2, r2, #29
 800243c:	4313      	orrs	r3, r2
 800243e:	4652      	mov	r2, sl
 8002440:	46b4      	mov	ip, r6
 8002442:	08d2      	lsrs	r2, r2, #3
 8002444:	490f      	ldr	r1, [pc, #60]	; (8002484 <__aeabi_dsub+0x368>)
 8002446:	458c      	cmp	ip, r1
 8002448:	d02a      	beq.n	80024a0 <__aeabi_dsub+0x384>
 800244a:	0312      	lsls	r2, r2, #12
 800244c:	0b14      	lsrs	r4, r2, #12
 800244e:	4662      	mov	r2, ip
 8002450:	0552      	lsls	r2, r2, #21
 8002452:	0d52      	lsrs	r2, r2, #21
 8002454:	e70c      	b.n	8002270 <__aeabi_dsub+0x154>
 8002456:	003c      	movs	r4, r7
 8002458:	4304      	orrs	r4, r0
 800245a:	1e62      	subs	r2, r4, #1
 800245c:	4194      	sbcs	r4, r2
 800245e:	18e4      	adds	r4, r4, r3
 8002460:	429c      	cmp	r4, r3
 8002462:	4192      	sbcs	r2, r2
 8002464:	4252      	negs	r2, r2
 8002466:	444a      	add	r2, r9
 8002468:	4692      	mov	sl, r2
 800246a:	4653      	mov	r3, sl
 800246c:	021b      	lsls	r3, r3, #8
 800246e:	d5df      	bpl.n	8002430 <__aeabi_dsub+0x314>
 8002470:	4b04      	ldr	r3, [pc, #16]	; (8002484 <__aeabi_dsub+0x368>)
 8002472:	3601      	adds	r6, #1
 8002474:	429e      	cmp	r6, r3
 8002476:	d000      	beq.n	800247a <__aeabi_dsub+0x35e>
 8002478:	e0a0      	b.n	80025bc <__aeabi_dsub+0x4a0>
 800247a:	0032      	movs	r2, r6
 800247c:	2400      	movs	r4, #0
 800247e:	2300      	movs	r3, #0
 8002480:	e6f6      	b.n	8002270 <__aeabi_dsub+0x154>
 8002482:	46c0      	nop			; (mov r8, r8)
 8002484:	000007ff 	.word	0x000007ff
 8002488:	ff7fffff 	.word	0xff7fffff
 800248c:	fffff801 	.word	0xfffff801
 8002490:	000007fe 	.word	0x000007fe
 8002494:	08db      	lsrs	r3, r3, #3
 8002496:	464a      	mov	r2, r9
 8002498:	0752      	lsls	r2, r2, #29
 800249a:	4313      	orrs	r3, r2
 800249c:	464a      	mov	r2, r9
 800249e:	08d2      	lsrs	r2, r2, #3
 80024a0:	0019      	movs	r1, r3
 80024a2:	4311      	orrs	r1, r2
 80024a4:	d100      	bne.n	80024a8 <__aeabi_dsub+0x38c>
 80024a6:	e1b5      	b.n	8002814 <__aeabi_dsub+0x6f8>
 80024a8:	2480      	movs	r4, #128	; 0x80
 80024aa:	0324      	lsls	r4, r4, #12
 80024ac:	4314      	orrs	r4, r2
 80024ae:	0324      	lsls	r4, r4, #12
 80024b0:	4ad5      	ldr	r2, [pc, #852]	; (8002808 <__aeabi_dsub+0x6ec>)
 80024b2:	0b24      	lsrs	r4, r4, #12
 80024b4:	e6dc      	b.n	8002270 <__aeabi_dsub+0x154>
 80024b6:	0020      	movs	r0, r4
 80024b8:	f000 fa5c 	bl	8002974 <__clzsi2>
 80024bc:	0003      	movs	r3, r0
 80024be:	3318      	adds	r3, #24
 80024c0:	2b1f      	cmp	r3, #31
 80024c2:	dc00      	bgt.n	80024c6 <__aeabi_dsub+0x3aa>
 80024c4:	e695      	b.n	80021f2 <__aeabi_dsub+0xd6>
 80024c6:	0022      	movs	r2, r4
 80024c8:	3808      	subs	r0, #8
 80024ca:	4082      	lsls	r2, r0
 80024cc:	2400      	movs	r4, #0
 80024ce:	429e      	cmp	r6, r3
 80024d0:	dc00      	bgt.n	80024d4 <__aeabi_dsub+0x3b8>
 80024d2:	e69a      	b.n	800220a <__aeabi_dsub+0xee>
 80024d4:	1af6      	subs	r6, r6, r3
 80024d6:	4bcd      	ldr	r3, [pc, #820]	; (800280c <__aeabi_dsub+0x6f0>)
 80024d8:	401a      	ands	r2, r3
 80024da:	4692      	mov	sl, r2
 80024dc:	e6a8      	b.n	8002230 <__aeabi_dsub+0x114>
 80024de:	003c      	movs	r4, r7
 80024e0:	4304      	orrs	r4, r0
 80024e2:	1e62      	subs	r2, r4, #1
 80024e4:	4194      	sbcs	r4, r2
 80024e6:	e66c      	b.n	80021c2 <__aeabi_dsub+0xa6>
 80024e8:	464a      	mov	r2, r9
 80024ea:	08db      	lsrs	r3, r3, #3
 80024ec:	0752      	lsls	r2, r2, #29
 80024ee:	4313      	orrs	r3, r2
 80024f0:	464a      	mov	r2, r9
 80024f2:	08d2      	lsrs	r2, r2, #3
 80024f4:	e7a6      	b.n	8002444 <__aeabi_dsub+0x328>
 80024f6:	4cc6      	ldr	r4, [pc, #792]	; (8002810 <__aeabi_dsub+0x6f4>)
 80024f8:	1c72      	adds	r2, r6, #1
 80024fa:	4222      	tst	r2, r4
 80024fc:	d000      	beq.n	8002500 <__aeabi_dsub+0x3e4>
 80024fe:	e0ac      	b.n	800265a <__aeabi_dsub+0x53e>
 8002500:	464a      	mov	r2, r9
 8002502:	431a      	orrs	r2, r3
 8002504:	2e00      	cmp	r6, #0
 8002506:	d000      	beq.n	800250a <__aeabi_dsub+0x3ee>
 8002508:	e105      	b.n	8002716 <__aeabi_dsub+0x5fa>
 800250a:	2a00      	cmp	r2, #0
 800250c:	d100      	bne.n	8002510 <__aeabi_dsub+0x3f4>
 800250e:	e156      	b.n	80027be <__aeabi_dsub+0x6a2>
 8002510:	003a      	movs	r2, r7
 8002512:	4302      	orrs	r2, r0
 8002514:	d100      	bne.n	8002518 <__aeabi_dsub+0x3fc>
 8002516:	e0db      	b.n	80026d0 <__aeabi_dsub+0x5b4>
 8002518:	181c      	adds	r4, r3, r0
 800251a:	429c      	cmp	r4, r3
 800251c:	419b      	sbcs	r3, r3
 800251e:	444f      	add	r7, r9
 8002520:	46ba      	mov	sl, r7
 8002522:	425b      	negs	r3, r3
 8002524:	449a      	add	sl, r3
 8002526:	4653      	mov	r3, sl
 8002528:	021b      	lsls	r3, r3, #8
 800252a:	d400      	bmi.n	800252e <__aeabi_dsub+0x412>
 800252c:	e780      	b.n	8002430 <__aeabi_dsub+0x314>
 800252e:	4652      	mov	r2, sl
 8002530:	4bb6      	ldr	r3, [pc, #728]	; (800280c <__aeabi_dsub+0x6f0>)
 8002532:	2601      	movs	r6, #1
 8002534:	401a      	ands	r2, r3
 8002536:	4692      	mov	sl, r2
 8002538:	e77a      	b.n	8002430 <__aeabi_dsub+0x314>
 800253a:	4cb3      	ldr	r4, [pc, #716]	; (8002808 <__aeabi_dsub+0x6ec>)
 800253c:	42a2      	cmp	r2, r4
 800253e:	d100      	bne.n	8002542 <__aeabi_dsub+0x426>
 8002540:	e0c0      	b.n	80026c4 <__aeabi_dsub+0x5a8>
 8002542:	2480      	movs	r4, #128	; 0x80
 8002544:	464d      	mov	r5, r9
 8002546:	0424      	lsls	r4, r4, #16
 8002548:	4325      	orrs	r5, r4
 800254a:	46a9      	mov	r9, r5
 800254c:	4664      	mov	r4, ip
 800254e:	2c38      	cmp	r4, #56	; 0x38
 8002550:	dc53      	bgt.n	80025fa <__aeabi_dsub+0x4de>
 8002552:	4661      	mov	r1, ip
 8002554:	2c1f      	cmp	r4, #31
 8002556:	dd00      	ble.n	800255a <__aeabi_dsub+0x43e>
 8002558:	e0cd      	b.n	80026f6 <__aeabi_dsub+0x5da>
 800255a:	2520      	movs	r5, #32
 800255c:	001e      	movs	r6, r3
 800255e:	1b2d      	subs	r5, r5, r4
 8002560:	464c      	mov	r4, r9
 8002562:	40ab      	lsls	r3, r5
 8002564:	40ac      	lsls	r4, r5
 8002566:	40ce      	lsrs	r6, r1
 8002568:	1e5d      	subs	r5, r3, #1
 800256a:	41ab      	sbcs	r3, r5
 800256c:	4334      	orrs	r4, r6
 800256e:	4323      	orrs	r3, r4
 8002570:	464c      	mov	r4, r9
 8002572:	40cc      	lsrs	r4, r1
 8002574:	1b3f      	subs	r7, r7, r4
 8002576:	e045      	b.n	8002604 <__aeabi_dsub+0x4e8>
 8002578:	464a      	mov	r2, r9
 800257a:	1a1c      	subs	r4, r3, r0
 800257c:	1bd1      	subs	r1, r2, r7
 800257e:	42a3      	cmp	r3, r4
 8002580:	4192      	sbcs	r2, r2
 8002582:	4252      	negs	r2, r2
 8002584:	4692      	mov	sl, r2
 8002586:	000a      	movs	r2, r1
 8002588:	4651      	mov	r1, sl
 800258a:	1a52      	subs	r2, r2, r1
 800258c:	4692      	mov	sl, r2
 800258e:	0212      	lsls	r2, r2, #8
 8002590:	d500      	bpl.n	8002594 <__aeabi_dsub+0x478>
 8002592:	e083      	b.n	800269c <__aeabi_dsub+0x580>
 8002594:	4653      	mov	r3, sl
 8002596:	4323      	orrs	r3, r4
 8002598:	d000      	beq.n	800259c <__aeabi_dsub+0x480>
 800259a:	e621      	b.n	80021e0 <__aeabi_dsub+0xc4>
 800259c:	2200      	movs	r2, #0
 800259e:	2500      	movs	r5, #0
 80025a0:	e753      	b.n	800244a <__aeabi_dsub+0x32e>
 80025a2:	181c      	adds	r4, r3, r0
 80025a4:	429c      	cmp	r4, r3
 80025a6:	419b      	sbcs	r3, r3
 80025a8:	444f      	add	r7, r9
 80025aa:	46ba      	mov	sl, r7
 80025ac:	425b      	negs	r3, r3
 80025ae:	449a      	add	sl, r3
 80025b0:	4653      	mov	r3, sl
 80025b2:	2601      	movs	r6, #1
 80025b4:	021b      	lsls	r3, r3, #8
 80025b6:	d400      	bmi.n	80025ba <__aeabi_dsub+0x49e>
 80025b8:	e73a      	b.n	8002430 <__aeabi_dsub+0x314>
 80025ba:	2602      	movs	r6, #2
 80025bc:	4652      	mov	r2, sl
 80025be:	4b93      	ldr	r3, [pc, #588]	; (800280c <__aeabi_dsub+0x6f0>)
 80025c0:	2101      	movs	r1, #1
 80025c2:	401a      	ands	r2, r3
 80025c4:	0013      	movs	r3, r2
 80025c6:	4021      	ands	r1, r4
 80025c8:	0862      	lsrs	r2, r4, #1
 80025ca:	430a      	orrs	r2, r1
 80025cc:	07dc      	lsls	r4, r3, #31
 80025ce:	085b      	lsrs	r3, r3, #1
 80025d0:	469a      	mov	sl, r3
 80025d2:	4314      	orrs	r4, r2
 80025d4:	e62c      	b.n	8002230 <__aeabi_dsub+0x114>
 80025d6:	0039      	movs	r1, r7
 80025d8:	3a20      	subs	r2, #32
 80025da:	40d1      	lsrs	r1, r2
 80025dc:	4662      	mov	r2, ip
 80025de:	2a20      	cmp	r2, #32
 80025e0:	d006      	beq.n	80025f0 <__aeabi_dsub+0x4d4>
 80025e2:	4664      	mov	r4, ip
 80025e4:	2240      	movs	r2, #64	; 0x40
 80025e6:	1b12      	subs	r2, r2, r4
 80025e8:	003c      	movs	r4, r7
 80025ea:	4094      	lsls	r4, r2
 80025ec:	4304      	orrs	r4, r0
 80025ee:	9401      	str	r4, [sp, #4]
 80025f0:	9c01      	ldr	r4, [sp, #4]
 80025f2:	1e62      	subs	r2, r4, #1
 80025f4:	4194      	sbcs	r4, r2
 80025f6:	430c      	orrs	r4, r1
 80025f8:	e5e3      	b.n	80021c2 <__aeabi_dsub+0xa6>
 80025fa:	4649      	mov	r1, r9
 80025fc:	4319      	orrs	r1, r3
 80025fe:	000b      	movs	r3, r1
 8002600:	1e5c      	subs	r4, r3, #1
 8002602:	41a3      	sbcs	r3, r4
 8002604:	1ac4      	subs	r4, r0, r3
 8002606:	42a0      	cmp	r0, r4
 8002608:	419b      	sbcs	r3, r3
 800260a:	425b      	negs	r3, r3
 800260c:	1afb      	subs	r3, r7, r3
 800260e:	469a      	mov	sl, r3
 8002610:	465d      	mov	r5, fp
 8002612:	0016      	movs	r6, r2
 8002614:	e5dc      	b.n	80021d0 <__aeabi_dsub+0xb4>
 8002616:	4649      	mov	r1, r9
 8002618:	4319      	orrs	r1, r3
 800261a:	d100      	bne.n	800261e <__aeabi_dsub+0x502>
 800261c:	e0ae      	b.n	800277c <__aeabi_dsub+0x660>
 800261e:	4661      	mov	r1, ip
 8002620:	4664      	mov	r4, ip
 8002622:	3901      	subs	r1, #1
 8002624:	2c01      	cmp	r4, #1
 8002626:	d100      	bne.n	800262a <__aeabi_dsub+0x50e>
 8002628:	e0e0      	b.n	80027ec <__aeabi_dsub+0x6d0>
 800262a:	4c77      	ldr	r4, [pc, #476]	; (8002808 <__aeabi_dsub+0x6ec>)
 800262c:	45a4      	cmp	ip, r4
 800262e:	d056      	beq.n	80026de <__aeabi_dsub+0x5c2>
 8002630:	468c      	mov	ip, r1
 8002632:	e69a      	b.n	800236a <__aeabi_dsub+0x24e>
 8002634:	4661      	mov	r1, ip
 8002636:	2220      	movs	r2, #32
 8002638:	003c      	movs	r4, r7
 800263a:	1a52      	subs	r2, r2, r1
 800263c:	4094      	lsls	r4, r2
 800263e:	0001      	movs	r1, r0
 8002640:	4090      	lsls	r0, r2
 8002642:	46a0      	mov	r8, r4
 8002644:	4664      	mov	r4, ip
 8002646:	1e42      	subs	r2, r0, #1
 8002648:	4190      	sbcs	r0, r2
 800264a:	4662      	mov	r2, ip
 800264c:	40e1      	lsrs	r1, r4
 800264e:	4644      	mov	r4, r8
 8002650:	40d7      	lsrs	r7, r2
 8002652:	430c      	orrs	r4, r1
 8002654:	4304      	orrs	r4, r0
 8002656:	44b9      	add	r9, r7
 8002658:	e701      	b.n	800245e <__aeabi_dsub+0x342>
 800265a:	496b      	ldr	r1, [pc, #428]	; (8002808 <__aeabi_dsub+0x6ec>)
 800265c:	428a      	cmp	r2, r1
 800265e:	d100      	bne.n	8002662 <__aeabi_dsub+0x546>
 8002660:	e70c      	b.n	800247c <__aeabi_dsub+0x360>
 8002662:	1818      	adds	r0, r3, r0
 8002664:	4298      	cmp	r0, r3
 8002666:	419b      	sbcs	r3, r3
 8002668:	444f      	add	r7, r9
 800266a:	425b      	negs	r3, r3
 800266c:	18fb      	adds	r3, r7, r3
 800266e:	07dc      	lsls	r4, r3, #31
 8002670:	0840      	lsrs	r0, r0, #1
 8002672:	085b      	lsrs	r3, r3, #1
 8002674:	469a      	mov	sl, r3
 8002676:	0016      	movs	r6, r2
 8002678:	4304      	orrs	r4, r0
 800267a:	e6d9      	b.n	8002430 <__aeabi_dsub+0x314>
 800267c:	2a00      	cmp	r2, #0
 800267e:	d000      	beq.n	8002682 <__aeabi_dsub+0x566>
 8002680:	e081      	b.n	8002786 <__aeabi_dsub+0x66a>
 8002682:	003b      	movs	r3, r7
 8002684:	4303      	orrs	r3, r0
 8002686:	d11d      	bne.n	80026c4 <__aeabi_dsub+0x5a8>
 8002688:	2280      	movs	r2, #128	; 0x80
 800268a:	2500      	movs	r5, #0
 800268c:	0312      	lsls	r2, r2, #12
 800268e:	e70b      	b.n	80024a8 <__aeabi_dsub+0x38c>
 8002690:	08c0      	lsrs	r0, r0, #3
 8002692:	077b      	lsls	r3, r7, #29
 8002694:	465d      	mov	r5, fp
 8002696:	4303      	orrs	r3, r0
 8002698:	08fa      	lsrs	r2, r7, #3
 800269a:	e6d3      	b.n	8002444 <__aeabi_dsub+0x328>
 800269c:	1ac4      	subs	r4, r0, r3
 800269e:	42a0      	cmp	r0, r4
 80026a0:	4180      	sbcs	r0, r0
 80026a2:	464b      	mov	r3, r9
 80026a4:	4240      	negs	r0, r0
 80026a6:	1aff      	subs	r7, r7, r3
 80026a8:	1a3b      	subs	r3, r7, r0
 80026aa:	469a      	mov	sl, r3
 80026ac:	465d      	mov	r5, fp
 80026ae:	e597      	b.n	80021e0 <__aeabi_dsub+0xc4>
 80026b0:	1a1c      	subs	r4, r3, r0
 80026b2:	464a      	mov	r2, r9
 80026b4:	42a3      	cmp	r3, r4
 80026b6:	419b      	sbcs	r3, r3
 80026b8:	1bd7      	subs	r7, r2, r7
 80026ba:	425b      	negs	r3, r3
 80026bc:	1afb      	subs	r3, r7, r3
 80026be:	469a      	mov	sl, r3
 80026c0:	2601      	movs	r6, #1
 80026c2:	e585      	b.n	80021d0 <__aeabi_dsub+0xb4>
 80026c4:	08c0      	lsrs	r0, r0, #3
 80026c6:	077b      	lsls	r3, r7, #29
 80026c8:	465d      	mov	r5, fp
 80026ca:	4303      	orrs	r3, r0
 80026cc:	08fa      	lsrs	r2, r7, #3
 80026ce:	e6e7      	b.n	80024a0 <__aeabi_dsub+0x384>
 80026d0:	464a      	mov	r2, r9
 80026d2:	08db      	lsrs	r3, r3, #3
 80026d4:	0752      	lsls	r2, r2, #29
 80026d6:	4313      	orrs	r3, r2
 80026d8:	464a      	mov	r2, r9
 80026da:	08d2      	lsrs	r2, r2, #3
 80026dc:	e6b5      	b.n	800244a <__aeabi_dsub+0x32e>
 80026de:	08c0      	lsrs	r0, r0, #3
 80026e0:	077b      	lsls	r3, r7, #29
 80026e2:	4303      	orrs	r3, r0
 80026e4:	08fa      	lsrs	r2, r7, #3
 80026e6:	e6db      	b.n	80024a0 <__aeabi_dsub+0x384>
 80026e8:	4649      	mov	r1, r9
 80026ea:	4319      	orrs	r1, r3
 80026ec:	000b      	movs	r3, r1
 80026ee:	1e59      	subs	r1, r3, #1
 80026f0:	418b      	sbcs	r3, r1
 80026f2:	001c      	movs	r4, r3
 80026f4:	e653      	b.n	800239e <__aeabi_dsub+0x282>
 80026f6:	464d      	mov	r5, r9
 80026f8:	3c20      	subs	r4, #32
 80026fa:	40e5      	lsrs	r5, r4
 80026fc:	2920      	cmp	r1, #32
 80026fe:	d005      	beq.n	800270c <__aeabi_dsub+0x5f0>
 8002700:	2440      	movs	r4, #64	; 0x40
 8002702:	1a64      	subs	r4, r4, r1
 8002704:	4649      	mov	r1, r9
 8002706:	40a1      	lsls	r1, r4
 8002708:	430b      	orrs	r3, r1
 800270a:	4698      	mov	r8, r3
 800270c:	4643      	mov	r3, r8
 800270e:	1e5c      	subs	r4, r3, #1
 8002710:	41a3      	sbcs	r3, r4
 8002712:	432b      	orrs	r3, r5
 8002714:	e776      	b.n	8002604 <__aeabi_dsub+0x4e8>
 8002716:	2a00      	cmp	r2, #0
 8002718:	d0e1      	beq.n	80026de <__aeabi_dsub+0x5c2>
 800271a:	003a      	movs	r2, r7
 800271c:	08db      	lsrs	r3, r3, #3
 800271e:	4302      	orrs	r2, r0
 8002720:	d100      	bne.n	8002724 <__aeabi_dsub+0x608>
 8002722:	e6b8      	b.n	8002496 <__aeabi_dsub+0x37a>
 8002724:	464a      	mov	r2, r9
 8002726:	0752      	lsls	r2, r2, #29
 8002728:	2480      	movs	r4, #128	; 0x80
 800272a:	4313      	orrs	r3, r2
 800272c:	464a      	mov	r2, r9
 800272e:	0324      	lsls	r4, r4, #12
 8002730:	08d2      	lsrs	r2, r2, #3
 8002732:	4222      	tst	r2, r4
 8002734:	d007      	beq.n	8002746 <__aeabi_dsub+0x62a>
 8002736:	08fe      	lsrs	r6, r7, #3
 8002738:	4226      	tst	r6, r4
 800273a:	d104      	bne.n	8002746 <__aeabi_dsub+0x62a>
 800273c:	465d      	mov	r5, fp
 800273e:	0032      	movs	r2, r6
 8002740:	08c3      	lsrs	r3, r0, #3
 8002742:	077f      	lsls	r7, r7, #29
 8002744:	433b      	orrs	r3, r7
 8002746:	0f59      	lsrs	r1, r3, #29
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	0749      	lsls	r1, r1, #29
 800274c:	08db      	lsrs	r3, r3, #3
 800274e:	430b      	orrs	r3, r1
 8002750:	e6a6      	b.n	80024a0 <__aeabi_dsub+0x384>
 8002752:	1ac4      	subs	r4, r0, r3
 8002754:	42a0      	cmp	r0, r4
 8002756:	4180      	sbcs	r0, r0
 8002758:	464b      	mov	r3, r9
 800275a:	4240      	negs	r0, r0
 800275c:	1aff      	subs	r7, r7, r3
 800275e:	1a3b      	subs	r3, r7, r0
 8002760:	469a      	mov	sl, r3
 8002762:	465d      	mov	r5, fp
 8002764:	2601      	movs	r6, #1
 8002766:	e533      	b.n	80021d0 <__aeabi_dsub+0xb4>
 8002768:	003b      	movs	r3, r7
 800276a:	4303      	orrs	r3, r0
 800276c:	d100      	bne.n	8002770 <__aeabi_dsub+0x654>
 800276e:	e715      	b.n	800259c <__aeabi_dsub+0x480>
 8002770:	08c0      	lsrs	r0, r0, #3
 8002772:	077b      	lsls	r3, r7, #29
 8002774:	465d      	mov	r5, fp
 8002776:	4303      	orrs	r3, r0
 8002778:	08fa      	lsrs	r2, r7, #3
 800277a:	e666      	b.n	800244a <__aeabi_dsub+0x32e>
 800277c:	08c0      	lsrs	r0, r0, #3
 800277e:	077b      	lsls	r3, r7, #29
 8002780:	4303      	orrs	r3, r0
 8002782:	08fa      	lsrs	r2, r7, #3
 8002784:	e65e      	b.n	8002444 <__aeabi_dsub+0x328>
 8002786:	003a      	movs	r2, r7
 8002788:	08db      	lsrs	r3, r3, #3
 800278a:	4302      	orrs	r2, r0
 800278c:	d100      	bne.n	8002790 <__aeabi_dsub+0x674>
 800278e:	e682      	b.n	8002496 <__aeabi_dsub+0x37a>
 8002790:	464a      	mov	r2, r9
 8002792:	0752      	lsls	r2, r2, #29
 8002794:	2480      	movs	r4, #128	; 0x80
 8002796:	4313      	orrs	r3, r2
 8002798:	464a      	mov	r2, r9
 800279a:	0324      	lsls	r4, r4, #12
 800279c:	08d2      	lsrs	r2, r2, #3
 800279e:	4222      	tst	r2, r4
 80027a0:	d007      	beq.n	80027b2 <__aeabi_dsub+0x696>
 80027a2:	08fe      	lsrs	r6, r7, #3
 80027a4:	4226      	tst	r6, r4
 80027a6:	d104      	bne.n	80027b2 <__aeabi_dsub+0x696>
 80027a8:	465d      	mov	r5, fp
 80027aa:	0032      	movs	r2, r6
 80027ac:	08c3      	lsrs	r3, r0, #3
 80027ae:	077f      	lsls	r7, r7, #29
 80027b0:	433b      	orrs	r3, r7
 80027b2:	0f59      	lsrs	r1, r3, #29
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	08db      	lsrs	r3, r3, #3
 80027b8:	0749      	lsls	r1, r1, #29
 80027ba:	430b      	orrs	r3, r1
 80027bc:	e670      	b.n	80024a0 <__aeabi_dsub+0x384>
 80027be:	08c0      	lsrs	r0, r0, #3
 80027c0:	077b      	lsls	r3, r7, #29
 80027c2:	4303      	orrs	r3, r0
 80027c4:	08fa      	lsrs	r2, r7, #3
 80027c6:	e640      	b.n	800244a <__aeabi_dsub+0x32e>
 80027c8:	464c      	mov	r4, r9
 80027ca:	3920      	subs	r1, #32
 80027cc:	40cc      	lsrs	r4, r1
 80027ce:	4661      	mov	r1, ip
 80027d0:	2920      	cmp	r1, #32
 80027d2:	d006      	beq.n	80027e2 <__aeabi_dsub+0x6c6>
 80027d4:	4666      	mov	r6, ip
 80027d6:	2140      	movs	r1, #64	; 0x40
 80027d8:	1b89      	subs	r1, r1, r6
 80027da:	464e      	mov	r6, r9
 80027dc:	408e      	lsls	r6, r1
 80027de:	4333      	orrs	r3, r6
 80027e0:	4698      	mov	r8, r3
 80027e2:	4643      	mov	r3, r8
 80027e4:	1e59      	subs	r1, r3, #1
 80027e6:	418b      	sbcs	r3, r1
 80027e8:	431c      	orrs	r4, r3
 80027ea:	e5d8      	b.n	800239e <__aeabi_dsub+0x282>
 80027ec:	181c      	adds	r4, r3, r0
 80027ee:	4284      	cmp	r4, r0
 80027f0:	4180      	sbcs	r0, r0
 80027f2:	444f      	add	r7, r9
 80027f4:	46ba      	mov	sl, r7
 80027f6:	4240      	negs	r0, r0
 80027f8:	4482      	add	sl, r0
 80027fa:	e6d9      	b.n	80025b0 <__aeabi_dsub+0x494>
 80027fc:	4653      	mov	r3, sl
 80027fe:	4323      	orrs	r3, r4
 8002800:	d100      	bne.n	8002804 <__aeabi_dsub+0x6e8>
 8002802:	e6cb      	b.n	800259c <__aeabi_dsub+0x480>
 8002804:	e614      	b.n	8002430 <__aeabi_dsub+0x314>
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	000007ff 	.word	0x000007ff
 800280c:	ff7fffff 	.word	0xff7fffff
 8002810:	000007fe 	.word	0x000007fe
 8002814:	2300      	movs	r3, #0
 8002816:	4a01      	ldr	r2, [pc, #4]	; (800281c <__aeabi_dsub+0x700>)
 8002818:	001c      	movs	r4, r3
 800281a:	e529      	b.n	8002270 <__aeabi_dsub+0x154>
 800281c:	000007ff 	.word	0x000007ff

08002820 <__aeabi_dcmpun>:
 8002820:	b570      	push	{r4, r5, r6, lr}
 8002822:	0005      	movs	r5, r0
 8002824:	480c      	ldr	r0, [pc, #48]	; (8002858 <__aeabi_dcmpun+0x38>)
 8002826:	031c      	lsls	r4, r3, #12
 8002828:	0016      	movs	r6, r2
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	030a      	lsls	r2, r1, #12
 800282e:	0049      	lsls	r1, r1, #1
 8002830:	0b12      	lsrs	r2, r2, #12
 8002832:	0d49      	lsrs	r1, r1, #21
 8002834:	0b24      	lsrs	r4, r4, #12
 8002836:	0d5b      	lsrs	r3, r3, #21
 8002838:	4281      	cmp	r1, r0
 800283a:	d008      	beq.n	800284e <__aeabi_dcmpun+0x2e>
 800283c:	4a06      	ldr	r2, [pc, #24]	; (8002858 <__aeabi_dcmpun+0x38>)
 800283e:	2000      	movs	r0, #0
 8002840:	4293      	cmp	r3, r2
 8002842:	d103      	bne.n	800284c <__aeabi_dcmpun+0x2c>
 8002844:	0020      	movs	r0, r4
 8002846:	4330      	orrs	r0, r6
 8002848:	1e43      	subs	r3, r0, #1
 800284a:	4198      	sbcs	r0, r3
 800284c:	bd70      	pop	{r4, r5, r6, pc}
 800284e:	2001      	movs	r0, #1
 8002850:	432a      	orrs	r2, r5
 8002852:	d1fb      	bne.n	800284c <__aeabi_dcmpun+0x2c>
 8002854:	e7f2      	b.n	800283c <__aeabi_dcmpun+0x1c>
 8002856:	46c0      	nop			; (mov r8, r8)
 8002858:	000007ff 	.word	0x000007ff

0800285c <__aeabi_d2iz>:
 800285c:	000a      	movs	r2, r1
 800285e:	b530      	push	{r4, r5, lr}
 8002860:	4c13      	ldr	r4, [pc, #76]	; (80028b0 <__aeabi_d2iz+0x54>)
 8002862:	0053      	lsls	r3, r2, #1
 8002864:	0309      	lsls	r1, r1, #12
 8002866:	0005      	movs	r5, r0
 8002868:	0b09      	lsrs	r1, r1, #12
 800286a:	2000      	movs	r0, #0
 800286c:	0d5b      	lsrs	r3, r3, #21
 800286e:	0fd2      	lsrs	r2, r2, #31
 8002870:	42a3      	cmp	r3, r4
 8002872:	dd04      	ble.n	800287e <__aeabi_d2iz+0x22>
 8002874:	480f      	ldr	r0, [pc, #60]	; (80028b4 <__aeabi_d2iz+0x58>)
 8002876:	4283      	cmp	r3, r0
 8002878:	dd02      	ble.n	8002880 <__aeabi_d2iz+0x24>
 800287a:	4b0f      	ldr	r3, [pc, #60]	; (80028b8 <__aeabi_d2iz+0x5c>)
 800287c:	18d0      	adds	r0, r2, r3
 800287e:	bd30      	pop	{r4, r5, pc}
 8002880:	2080      	movs	r0, #128	; 0x80
 8002882:	0340      	lsls	r0, r0, #13
 8002884:	4301      	orrs	r1, r0
 8002886:	480d      	ldr	r0, [pc, #52]	; (80028bc <__aeabi_d2iz+0x60>)
 8002888:	1ac0      	subs	r0, r0, r3
 800288a:	281f      	cmp	r0, #31
 800288c:	dd08      	ble.n	80028a0 <__aeabi_d2iz+0x44>
 800288e:	480c      	ldr	r0, [pc, #48]	; (80028c0 <__aeabi_d2iz+0x64>)
 8002890:	1ac3      	subs	r3, r0, r3
 8002892:	40d9      	lsrs	r1, r3
 8002894:	000b      	movs	r3, r1
 8002896:	4258      	negs	r0, r3
 8002898:	2a00      	cmp	r2, #0
 800289a:	d1f0      	bne.n	800287e <__aeabi_d2iz+0x22>
 800289c:	0018      	movs	r0, r3
 800289e:	e7ee      	b.n	800287e <__aeabi_d2iz+0x22>
 80028a0:	4c08      	ldr	r4, [pc, #32]	; (80028c4 <__aeabi_d2iz+0x68>)
 80028a2:	40c5      	lsrs	r5, r0
 80028a4:	46a4      	mov	ip, r4
 80028a6:	4463      	add	r3, ip
 80028a8:	4099      	lsls	r1, r3
 80028aa:	000b      	movs	r3, r1
 80028ac:	432b      	orrs	r3, r5
 80028ae:	e7f2      	b.n	8002896 <__aeabi_d2iz+0x3a>
 80028b0:	000003fe 	.word	0x000003fe
 80028b4:	0000041d 	.word	0x0000041d
 80028b8:	7fffffff 	.word	0x7fffffff
 80028bc:	00000433 	.word	0x00000433
 80028c0:	00000413 	.word	0x00000413
 80028c4:	fffffbed 	.word	0xfffffbed

080028c8 <__aeabi_i2d>:
 80028c8:	b570      	push	{r4, r5, r6, lr}
 80028ca:	2800      	cmp	r0, #0
 80028cc:	d016      	beq.n	80028fc <__aeabi_i2d+0x34>
 80028ce:	17c3      	asrs	r3, r0, #31
 80028d0:	18c5      	adds	r5, r0, r3
 80028d2:	405d      	eors	r5, r3
 80028d4:	0fc4      	lsrs	r4, r0, #31
 80028d6:	0028      	movs	r0, r5
 80028d8:	f000 f84c 	bl	8002974 <__clzsi2>
 80028dc:	4b11      	ldr	r3, [pc, #68]	; (8002924 <__aeabi_i2d+0x5c>)
 80028de:	1a1b      	subs	r3, r3, r0
 80028e0:	280a      	cmp	r0, #10
 80028e2:	dc16      	bgt.n	8002912 <__aeabi_i2d+0x4a>
 80028e4:	0002      	movs	r2, r0
 80028e6:	002e      	movs	r6, r5
 80028e8:	3215      	adds	r2, #21
 80028ea:	4096      	lsls	r6, r2
 80028ec:	220b      	movs	r2, #11
 80028ee:	1a12      	subs	r2, r2, r0
 80028f0:	40d5      	lsrs	r5, r2
 80028f2:	055b      	lsls	r3, r3, #21
 80028f4:	032d      	lsls	r5, r5, #12
 80028f6:	0b2d      	lsrs	r5, r5, #12
 80028f8:	0d5b      	lsrs	r3, r3, #21
 80028fa:	e003      	b.n	8002904 <__aeabi_i2d+0x3c>
 80028fc:	2400      	movs	r4, #0
 80028fe:	2300      	movs	r3, #0
 8002900:	2500      	movs	r5, #0
 8002902:	2600      	movs	r6, #0
 8002904:	051b      	lsls	r3, r3, #20
 8002906:	432b      	orrs	r3, r5
 8002908:	07e4      	lsls	r4, r4, #31
 800290a:	4323      	orrs	r3, r4
 800290c:	0030      	movs	r0, r6
 800290e:	0019      	movs	r1, r3
 8002910:	bd70      	pop	{r4, r5, r6, pc}
 8002912:	380b      	subs	r0, #11
 8002914:	4085      	lsls	r5, r0
 8002916:	055b      	lsls	r3, r3, #21
 8002918:	032d      	lsls	r5, r5, #12
 800291a:	2600      	movs	r6, #0
 800291c:	0b2d      	lsrs	r5, r5, #12
 800291e:	0d5b      	lsrs	r3, r3, #21
 8002920:	e7f0      	b.n	8002904 <__aeabi_i2d+0x3c>
 8002922:	46c0      	nop			; (mov r8, r8)
 8002924:	0000041e 	.word	0x0000041e

08002928 <__aeabi_ui2d>:
 8002928:	b510      	push	{r4, lr}
 800292a:	1e04      	subs	r4, r0, #0
 800292c:	d010      	beq.n	8002950 <__aeabi_ui2d+0x28>
 800292e:	f000 f821 	bl	8002974 <__clzsi2>
 8002932:	4b0f      	ldr	r3, [pc, #60]	; (8002970 <__aeabi_ui2d+0x48>)
 8002934:	1a1b      	subs	r3, r3, r0
 8002936:	280a      	cmp	r0, #10
 8002938:	dc11      	bgt.n	800295e <__aeabi_ui2d+0x36>
 800293a:	220b      	movs	r2, #11
 800293c:	0021      	movs	r1, r4
 800293e:	1a12      	subs	r2, r2, r0
 8002940:	40d1      	lsrs	r1, r2
 8002942:	3015      	adds	r0, #21
 8002944:	030a      	lsls	r2, r1, #12
 8002946:	055b      	lsls	r3, r3, #21
 8002948:	4084      	lsls	r4, r0
 800294a:	0b12      	lsrs	r2, r2, #12
 800294c:	0d5b      	lsrs	r3, r3, #21
 800294e:	e001      	b.n	8002954 <__aeabi_ui2d+0x2c>
 8002950:	2300      	movs	r3, #0
 8002952:	2200      	movs	r2, #0
 8002954:	051b      	lsls	r3, r3, #20
 8002956:	4313      	orrs	r3, r2
 8002958:	0020      	movs	r0, r4
 800295a:	0019      	movs	r1, r3
 800295c:	bd10      	pop	{r4, pc}
 800295e:	0022      	movs	r2, r4
 8002960:	380b      	subs	r0, #11
 8002962:	4082      	lsls	r2, r0
 8002964:	055b      	lsls	r3, r3, #21
 8002966:	0312      	lsls	r2, r2, #12
 8002968:	2400      	movs	r4, #0
 800296a:	0b12      	lsrs	r2, r2, #12
 800296c:	0d5b      	lsrs	r3, r3, #21
 800296e:	e7f1      	b.n	8002954 <__aeabi_ui2d+0x2c>
 8002970:	0000041e 	.word	0x0000041e

08002974 <__clzsi2>:
 8002974:	211c      	movs	r1, #28
 8002976:	2301      	movs	r3, #1
 8002978:	041b      	lsls	r3, r3, #16
 800297a:	4298      	cmp	r0, r3
 800297c:	d301      	bcc.n	8002982 <__clzsi2+0xe>
 800297e:	0c00      	lsrs	r0, r0, #16
 8002980:	3910      	subs	r1, #16
 8002982:	0a1b      	lsrs	r3, r3, #8
 8002984:	4298      	cmp	r0, r3
 8002986:	d301      	bcc.n	800298c <__clzsi2+0x18>
 8002988:	0a00      	lsrs	r0, r0, #8
 800298a:	3908      	subs	r1, #8
 800298c:	091b      	lsrs	r3, r3, #4
 800298e:	4298      	cmp	r0, r3
 8002990:	d301      	bcc.n	8002996 <__clzsi2+0x22>
 8002992:	0900      	lsrs	r0, r0, #4
 8002994:	3904      	subs	r1, #4
 8002996:	a202      	add	r2, pc, #8	; (adr r2, 80029a0 <__clzsi2+0x2c>)
 8002998:	5c10      	ldrb	r0, [r2, r0]
 800299a:	1840      	adds	r0, r0, r1
 800299c:	4770      	bx	lr
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	02020304 	.word	0x02020304
 80029a4:	01010101 	.word	0x01010101
	...

080029b0 <__clzdi2>:
 80029b0:	b510      	push	{r4, lr}
 80029b2:	2900      	cmp	r1, #0
 80029b4:	d103      	bne.n	80029be <__clzdi2+0xe>
 80029b6:	f7ff ffdd 	bl	8002974 <__clzsi2>
 80029ba:	3020      	adds	r0, #32
 80029bc:	e002      	b.n	80029c4 <__clzdi2+0x14>
 80029be:	0008      	movs	r0, r1
 80029c0:	f7ff ffd8 	bl	8002974 <__clzsi2>
 80029c4:	bd10      	pop	{r4, pc}
 80029c6:	46c0      	nop			; (mov r8, r8)

080029c8 <strlen>:
/* USER CODE BEGIN 0 */

int16_t accX, accY, accZ, gyrX, gyrY, gyrZ, tVal;
double temperature = 0.0;

uint16_t strlen(char* str) {
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
	int len = 0;
 80029d0:	2300      	movs	r3, #0
 80029d2:	60fb      	str	r3, [r7, #12]
	while(*str != '\0') {
 80029d4:	e005      	b.n	80029e2 <strlen+0x1a>
		str++;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	3301      	adds	r3, #1
 80029da:	607b      	str	r3, [r7, #4]
		len++;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	3301      	adds	r3, #1
 80029e0:	60fb      	str	r3, [r7, #12]
	while(*str != '\0') {
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f5      	bne.n	80029d6 <strlen+0xe>
	}
	return len;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	b29b      	uxth	r3, r3
}
 80029ee:	0018      	movs	r0, r3
 80029f0:	46bd      	mov	sp, r7
 80029f2:	b004      	add	sp, #16
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <uart_send_string>:

void uart_send_string(char *ptr) {
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
	  if(HAL_UART_Transmit(&huart2, (uint8_t*)ptr, strlen(ptr), 100) == HAL_OK) {
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	0018      	movs	r0, r3
 8002a04:	f7ff ffe0 	bl	80029c8 <strlen>
 8002a08:	0003      	movs	r3, r0
 8002a0a:	001a      	movs	r2, r3
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	480b      	ldr	r0, [pc, #44]	; (8002a3c <uart_send_string+0x44>)
 8002a10:	2364      	movs	r3, #100	; 0x64
 8002a12:	f003 fecb 	bl	80067ac <HAL_UART_Transmit>
 8002a16:	1e03      	subs	r3, r0, #0
 8002a18:	d106      	bne.n	8002a28 <uart_send_string+0x30>
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002a1a:	23a0      	movs	r3, #160	; 0xa0
 8002a1c:	05db      	lsls	r3, r3, #23
 8002a1e:	2120      	movs	r1, #32
 8002a20:	0018      	movs	r0, r3
 8002a22:	f001 fa5a 	bl	8003eda <HAL_GPIO_TogglePin>
	  } else {
		  while(1) {
			  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		  }
	  }
}
 8002a26:	e006      	b.n	8002a36 <uart_send_string+0x3e>
			  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002a28:	23a0      	movs	r3, #160	; 0xa0
 8002a2a:	05db      	lsls	r3, r3, #23
 8002a2c:	2120      	movs	r1, #32
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f001 fa53 	bl	8003eda <HAL_GPIO_TogglePin>
 8002a34:	e7f8      	b.n	8002a28 <uart_send_string+0x30>
}
 8002a36:	46bd      	mov	sp, r7
 8002a38:	b002      	add	sp, #8
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	200002e8 	.word	0x200002e8

08002a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a40:	b5b0      	push	{r4, r5, r7, lr}
 8002a42:	b09e      	sub	sp, #120	; 0x78
 8002a44:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a46:	f000 fee7 	bl	8003818 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a4a:	f000 f833 	bl	8002ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a4e:	f000 f90f 	bl	8002c70 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002a52:	f000 f8dd 	bl	8002c10 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002a56:	f000 f89b 	bl	8002b90 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //init_mpu6050(&hi2c1);
  while (MPU6050_Init(&hi2c1) == 1);
 8002a5a:	46c0      	nop			; (mov r8, r8)
 8002a5c:	4b12      	ldr	r3, [pc, #72]	; (8002aa8 <main+0x68>)
 8002a5e:	0018      	movs	r0, r3
 8002a60:	f000 f96f 	bl	8002d42 <MPU6050_Init>
 8002a64:	0003      	movs	r3, r0
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d0f8      	beq.n	8002a5c <main+0x1c>
		  if(read_mpu6050_temp(&hi2c1, &temperatur) == SUCCESS) {
			  uart_send_temp(&temperatur);
		  }
		  */

	  MPU6050_Read_All(&hi2c1, &MPU6050);
 8002a6a:	4a10      	ldr	r2, [pc, #64]	; (8002aac <main+0x6c>)
 8002a6c:	4b0e      	ldr	r3, [pc, #56]	; (8002aa8 <main+0x68>)
 8002a6e:	0011      	movs	r1, r2
 8002a70:	0018      	movs	r0, r3
 8002a72:	f000 f9c5 	bl	8002e00 <MPU6050_Read_All>
	  HAL_Delay (100);
 8002a76:	2064      	movs	r0, #100	; 0x64
 8002a78:	f000 ff3e 	bl	80038f8 <HAL_Delay>

	  	  char c[50];

	  	  sprintf(c, "%f %f \r\n", MPU6050.KalmanAngleX, MPU6050.KalmanAngleY);
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <main+0x6c>)
 8002a7e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002a80:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002a82:	4b0a      	ldr	r3, [pc, #40]	; (8002aac <main+0x6c>)
 8002a84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a88:	4d09      	ldr	r5, [pc, #36]	; (8002ab0 <main+0x70>)
 8002a8a:	1d3c      	adds	r4, r7, #4
 8002a8c:	9200      	str	r2, [sp, #0]
 8002a8e:	9301      	str	r3, [sp, #4]
 8002a90:	0002      	movs	r2, r0
 8002a92:	000b      	movs	r3, r1
 8002a94:	0029      	movs	r1, r5
 8002a96:	0020      	movs	r0, r4
 8002a98:	f005 f932 	bl	8007d00 <siprintf>

	  	  uart_send_string(c);
 8002a9c:	1d3b      	adds	r3, r7, #4
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f7ff ffaa 	bl	80029f8 <uart_send_string>
  {
 8002aa4:	e7e1      	b.n	8002a6a <main+0x2a>
 8002aa6:	46c0      	nop			; (mov r8, r8)
 8002aa8:	20000294 	.word	0x20000294
 8002aac:	20000370 	.word	0x20000370
 8002ab0:	0800a8bc 	.word	0x0800a8bc

08002ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ab4:	b590      	push	{r4, r7, lr}
 8002ab6:	b09f      	sub	sp, #124	; 0x7c
 8002ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002aba:	2440      	movs	r4, #64	; 0x40
 8002abc:	193b      	adds	r3, r7, r4
 8002abe:	0018      	movs	r0, r3
 8002ac0:	2338      	movs	r3, #56	; 0x38
 8002ac2:	001a      	movs	r2, r3
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	f005 f987 	bl	8007dd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002aca:	232c      	movs	r3, #44	; 0x2c
 8002acc:	18fb      	adds	r3, r7, r3
 8002ace:	0018      	movs	r0, r3
 8002ad0:	2314      	movs	r3, #20
 8002ad2:	001a      	movs	r2, r3
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	f005 f97f 	bl	8007dd8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ada:	1d3b      	adds	r3, r7, #4
 8002adc:	0018      	movs	r0, r3
 8002ade:	2328      	movs	r3, #40	; 0x28
 8002ae0:	001a      	movs	r2, r3
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	f005 f978 	bl	8007dd8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ae8:	4b27      	ldr	r3, [pc, #156]	; (8002b88 <SystemClock_Config+0xd4>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a27      	ldr	r2, [pc, #156]	; (8002b8c <SystemClock_Config+0xd8>)
 8002aee:	401a      	ands	r2, r3
 8002af0:	4b25      	ldr	r3, [pc, #148]	; (8002b88 <SystemClock_Config+0xd4>)
 8002af2:	2180      	movs	r1, #128	; 0x80
 8002af4:	0109      	lsls	r1, r1, #4
 8002af6:	430a      	orrs	r2, r1
 8002af8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002afa:	0021      	movs	r1, r4
 8002afc:	187b      	adds	r3, r7, r1
 8002afe:	2210      	movs	r2, #16
 8002b00:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002b02:	187b      	adds	r3, r7, r1
 8002b04:	2201      	movs	r2, #1
 8002b06:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002b08:	187b      	adds	r3, r7, r1
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8002b0e:	187b      	adds	r3, r7, r1
 8002b10:	22a0      	movs	r2, #160	; 0xa0
 8002b12:	0212      	lsls	r2, r2, #8
 8002b14:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002b16:	187b      	adds	r3, r7, r1
 8002b18:	2200      	movs	r2, #0
 8002b1a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b1c:	187b      	adds	r3, r7, r1
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f002 fe5a 	bl	80057d8 <HAL_RCC_OscConfig>
 8002b24:	1e03      	subs	r3, r0, #0
 8002b26:	d001      	beq.n	8002b2c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002b28:	f000 f906 	bl	8002d38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b2c:	212c      	movs	r1, #44	; 0x2c
 8002b2e:	187b      	adds	r3, r7, r1
 8002b30:	220f      	movs	r2, #15
 8002b32:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002b34:	187b      	adds	r3, r7, r1
 8002b36:	2200      	movs	r2, #0
 8002b38:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b3a:	187b      	adds	r3, r7, r1
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b40:	187b      	adds	r3, r7, r1
 8002b42:	2200      	movs	r2, #0
 8002b44:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b46:	187b      	adds	r3, r7, r1
 8002b48:	2200      	movs	r2, #0
 8002b4a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002b4c:	187b      	adds	r3, r7, r1
 8002b4e:	2100      	movs	r1, #0
 8002b50:	0018      	movs	r0, r3
 8002b52:	f003 fa15 	bl	8005f80 <HAL_RCC_ClockConfig>
 8002b56:	1e03      	subs	r3, r0, #0
 8002b58:	d001      	beq.n	8002b5e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002b5a:	f000 f8ed 	bl	8002d38 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8002b5e:	1d3b      	adds	r3, r7, #4
 8002b60:	220a      	movs	r2, #10
 8002b62:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002b64:	1d3b      	adds	r3, r7, #4
 8002b66:	2200      	movs	r2, #0
 8002b68:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002b6a:	1d3b      	adds	r3, r7, #4
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b70:	1d3b      	adds	r3, r7, #4
 8002b72:	0018      	movs	r0, r3
 8002b74:	f003 fc28 	bl	80063c8 <HAL_RCCEx_PeriphCLKConfig>
 8002b78:	1e03      	subs	r3, r0, #0
 8002b7a:	d001      	beq.n	8002b80 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002b7c:	f000 f8dc 	bl	8002d38 <Error_Handler>
  }
}
 8002b80:	46c0      	nop			; (mov r8, r8)
 8002b82:	46bd      	mov	sp, r7
 8002b84:	b01f      	add	sp, #124	; 0x7c
 8002b86:	bd90      	pop	{r4, r7, pc}
 8002b88:	40007000 	.word	0x40007000
 8002b8c:	ffffe7ff 	.word	0xffffe7ff

08002b90 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002b94:	4b1c      	ldr	r3, [pc, #112]	; (8002c08 <MX_I2C1_Init+0x78>)
 8002b96:	4a1d      	ldr	r2, [pc, #116]	; (8002c0c <MX_I2C1_Init+0x7c>)
 8002b98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 8002b9a:	4b1b      	ldr	r3, [pc, #108]	; (8002c08 <MX_I2C1_Init+0x78>)
 8002b9c:	22e1      	movs	r2, #225	; 0xe1
 8002b9e:	00d2      	lsls	r2, r2, #3
 8002ba0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002ba2:	4b19      	ldr	r3, [pc, #100]	; (8002c08 <MX_I2C1_Init+0x78>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ba8:	4b17      	ldr	r3, [pc, #92]	; (8002c08 <MX_I2C1_Init+0x78>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bae:	4b16      	ldr	r3, [pc, #88]	; (8002c08 <MX_I2C1_Init+0x78>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002bb4:	4b14      	ldr	r3, [pc, #80]	; (8002c08 <MX_I2C1_Init+0x78>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002bba:	4b13      	ldr	r3, [pc, #76]	; (8002c08 <MX_I2C1_Init+0x78>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002bc0:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <MX_I2C1_Init+0x78>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002bc6:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <MX_I2C1_Init+0x78>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002bcc:	4b0e      	ldr	r3, [pc, #56]	; (8002c08 <MX_I2C1_Init+0x78>)
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f001 f99e 	bl	8003f10 <HAL_I2C_Init>
 8002bd4:	1e03      	subs	r3, r0, #0
 8002bd6:	d001      	beq.n	8002bdc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002bd8:	f000 f8ae 	bl	8002d38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002bdc:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <MX_I2C1_Init+0x78>)
 8002bde:	2100      	movs	r1, #0
 8002be0:	0018      	movs	r0, r3
 8002be2:	f002 fd61 	bl	80056a8 <HAL_I2CEx_ConfigAnalogFilter>
 8002be6:	1e03      	subs	r3, r0, #0
 8002be8:	d001      	beq.n	8002bee <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002bea:	f000 f8a5 	bl	8002d38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002bee:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <MX_I2C1_Init+0x78>)
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	f002 fda4 	bl	8005740 <HAL_I2CEx_ConfigDigitalFilter>
 8002bf8:	1e03      	subs	r3, r0, #0
 8002bfa:	d001      	beq.n	8002c00 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002bfc:	f000 f89c 	bl	8002d38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c00:	46c0      	nop			; (mov r8, r8)
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	46c0      	nop			; (mov r8, r8)
 8002c08:	20000294 	.word	0x20000294
 8002c0c:	40005400 	.word	0x40005400

08002c10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c14:	4b14      	ldr	r3, [pc, #80]	; (8002c68 <MX_USART2_UART_Init+0x58>)
 8002c16:	4a15      	ldr	r2, [pc, #84]	; (8002c6c <MX_USART2_UART_Init+0x5c>)
 8002c18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c1a:	4b13      	ldr	r3, [pc, #76]	; (8002c68 <MX_USART2_UART_Init+0x58>)
 8002c1c:	22e1      	movs	r2, #225	; 0xe1
 8002c1e:	0252      	lsls	r2, r2, #9
 8002c20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c22:	4b11      	ldr	r3, [pc, #68]	; (8002c68 <MX_USART2_UART_Init+0x58>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c28:	4b0f      	ldr	r3, [pc, #60]	; (8002c68 <MX_USART2_UART_Init+0x58>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c2e:	4b0e      	ldr	r3, [pc, #56]	; (8002c68 <MX_USART2_UART_Init+0x58>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c34:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <MX_USART2_UART_Init+0x58>)
 8002c36:	220c      	movs	r2, #12
 8002c38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c3a:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <MX_USART2_UART_Init+0x58>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c40:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <MX_USART2_UART_Init+0x58>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c46:	4b08      	ldr	r3, [pc, #32]	; (8002c68 <MX_USART2_UART_Init+0x58>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c4c:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <MX_USART2_UART_Init+0x58>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c52:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <MX_USART2_UART_Init+0x58>)
 8002c54:	0018      	movs	r0, r3
 8002c56:	f003 fd55 	bl	8006704 <HAL_UART_Init>
 8002c5a:	1e03      	subs	r3, r0, #0
 8002c5c:	d001      	beq.n	8002c62 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002c5e:	f000 f86b 	bl	8002d38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	200002e8 	.word	0x200002e8
 8002c6c:	40004400 	.word	0x40004400

08002c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c70:	b590      	push	{r4, r7, lr}
 8002c72:	b089      	sub	sp, #36	; 0x24
 8002c74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c76:	240c      	movs	r4, #12
 8002c78:	193b      	adds	r3, r7, r4
 8002c7a:	0018      	movs	r0, r3
 8002c7c:	2314      	movs	r3, #20
 8002c7e:	001a      	movs	r2, r3
 8002c80:	2100      	movs	r1, #0
 8002c82:	f005 f8a9 	bl	8007dd8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c86:	4b2a      	ldr	r3, [pc, #168]	; (8002d30 <MX_GPIO_Init+0xc0>)
 8002c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c8a:	4b29      	ldr	r3, [pc, #164]	; (8002d30 <MX_GPIO_Init+0xc0>)
 8002c8c:	2104      	movs	r1, #4
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c92:	4b27      	ldr	r3, [pc, #156]	; (8002d30 <MX_GPIO_Init+0xc0>)
 8002c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c96:	2204      	movs	r2, #4
 8002c98:	4013      	ands	r3, r2
 8002c9a:	60bb      	str	r3, [r7, #8]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c9e:	4b24      	ldr	r3, [pc, #144]	; (8002d30 <MX_GPIO_Init+0xc0>)
 8002ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca2:	4b23      	ldr	r3, [pc, #140]	; (8002d30 <MX_GPIO_Init+0xc0>)
 8002ca4:	2180      	movs	r1, #128	; 0x80
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002caa:	4b21      	ldr	r3, [pc, #132]	; (8002d30 <MX_GPIO_Init+0xc0>)
 8002cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cae:	2280      	movs	r2, #128	; 0x80
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	607b      	str	r3, [r7, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb6:	4b1e      	ldr	r3, [pc, #120]	; (8002d30 <MX_GPIO_Init+0xc0>)
 8002cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cba:	4b1d      	ldr	r3, [pc, #116]	; (8002d30 <MX_GPIO_Init+0xc0>)
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cc2:	4b1b      	ldr	r3, [pc, #108]	; (8002d30 <MX_GPIO_Init+0xc0>)
 8002cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	4013      	ands	r3, r2
 8002cca:	603b      	str	r3, [r7, #0]
 8002ccc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002cce:	23a0      	movs	r3, #160	; 0xa0
 8002cd0:	05db      	lsls	r3, r3, #23
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	2120      	movs	r1, #32
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	f001 f8e2 	bl	8003ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BlueButton_Pin */
  GPIO_InitStruct.Pin = BlueButton_Pin;
 8002cdc:	193b      	adds	r3, r7, r4
 8002cde:	2280      	movs	r2, #128	; 0x80
 8002ce0:	0192      	lsls	r2, r2, #6
 8002ce2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002ce4:	193b      	adds	r3, r7, r4
 8002ce6:	2284      	movs	r2, #132	; 0x84
 8002ce8:	0392      	lsls	r2, r2, #14
 8002cea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cec:	193b      	adds	r3, r7, r4
 8002cee:	2200      	movs	r2, #0
 8002cf0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BlueButton_GPIO_Port, &GPIO_InitStruct);
 8002cf2:	193b      	adds	r3, r7, r4
 8002cf4:	4a0f      	ldr	r2, [pc, #60]	; (8002d34 <MX_GPIO_Init+0xc4>)
 8002cf6:	0019      	movs	r1, r3
 8002cf8:	0010      	movs	r0, r2
 8002cfa:	f000 ff53 	bl	8003ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002cfe:	0021      	movs	r1, r4
 8002d00:	187b      	adds	r3, r7, r1
 8002d02:	2220      	movs	r2, #32
 8002d04:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d06:	187b      	adds	r3, r7, r1
 8002d08:	2201      	movs	r2, #1
 8002d0a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0c:	187b      	adds	r3, r7, r1
 8002d0e:	2200      	movs	r2, #0
 8002d10:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d12:	187b      	adds	r3, r7, r1
 8002d14:	2200      	movs	r2, #0
 8002d16:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002d18:	187a      	adds	r2, r7, r1
 8002d1a:	23a0      	movs	r3, #160	; 0xa0
 8002d1c:	05db      	lsls	r3, r3, #23
 8002d1e:	0011      	movs	r1, r2
 8002d20:	0018      	movs	r0, r3
 8002d22:	f000 ff3f 	bl	8003ba4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	b009      	add	sp, #36	; 0x24
 8002d2c:	bd90      	pop	{r4, r7, pc}
 8002d2e:	46c0      	nop			; (mov r8, r8)
 8002d30:	40021000 	.word	0x40021000
 8002d34:	50000800 	.word	0x50000800

08002d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d3c:	b672      	cpsid	i
}
 8002d3e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d40:	e7fe      	b.n	8002d40 <Error_Handler+0x8>

08002d42 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8002d42:	b590      	push	{r4, r7, lr}
 8002d44:	b089      	sub	sp, #36	; 0x24
 8002d46:	af04      	add	r7, sp, #16
 8002d48:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8002d4a:	2364      	movs	r3, #100	; 0x64
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	9302      	str	r3, [sp, #8]
 8002d50:	2301      	movs	r3, #1
 8002d52:	9301      	str	r3, [sp, #4]
 8002d54:	240f      	movs	r4, #15
 8002d56:	193b      	adds	r3, r7, r4
 8002d58:	9300      	str	r3, [sp, #0]
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	2275      	movs	r2, #117	; 0x75
 8002d5e:	21d0      	movs	r1, #208	; 0xd0
 8002d60:	f001 fa9a 	bl	8004298 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8002d64:	193b      	adds	r3, r7, r4
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b68      	cmp	r3, #104	; 0x68
 8002d6a:	d144      	bne.n	8002df6 <MPU6050_Init+0xb4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8002d6c:	210e      	movs	r1, #14
 8002d6e:	187b      	adds	r3, r7, r1
 8002d70:	2200      	movs	r2, #0
 8002d72:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8002d74:	2364      	movs	r3, #100	; 0x64
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	9302      	str	r3, [sp, #8]
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	9301      	str	r3, [sp, #4]
 8002d7e:	000c      	movs	r4, r1
 8002d80:	187b      	adds	r3, r7, r1
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	2301      	movs	r3, #1
 8002d86:	226b      	movs	r2, #107	; 0x6b
 8002d88:	21d0      	movs	r1, #208	; 0xd0
 8002d8a:	f001 f957 	bl	800403c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8002d8e:	0021      	movs	r1, r4
 8002d90:	187b      	adds	r3, r7, r1
 8002d92:	2207      	movs	r2, #7
 8002d94:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8002d96:	2364      	movs	r3, #100	; 0x64
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	9302      	str	r3, [sp, #8]
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	9301      	str	r3, [sp, #4]
 8002da0:	000c      	movs	r4, r1
 8002da2:	187b      	adds	r3, r7, r1
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	2301      	movs	r3, #1
 8002da8:	2219      	movs	r2, #25
 8002daa:	21d0      	movs	r1, #208	; 0xd0
 8002dac:	f001 f946 	bl	800403c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8002db0:	0021      	movs	r1, r4
 8002db2:	187b      	adds	r3, r7, r1
 8002db4:	2200      	movs	r2, #0
 8002db6:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002db8:	2364      	movs	r3, #100	; 0x64
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	9302      	str	r3, [sp, #8]
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	9301      	str	r3, [sp, #4]
 8002dc2:	000c      	movs	r4, r1
 8002dc4:	187b      	adds	r3, r7, r1
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	2301      	movs	r3, #1
 8002dca:	221c      	movs	r2, #28
 8002dcc:	21d0      	movs	r1, #208	; 0xd0
 8002dce:	f001 f935 	bl	800403c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8002dd2:	0021      	movs	r1, r4
 8002dd4:	187b      	adds	r3, r7, r1
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002dda:	2364      	movs	r3, #100	; 0x64
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	9302      	str	r3, [sp, #8]
 8002de0:	2301      	movs	r3, #1
 8002de2:	9301      	str	r3, [sp, #4]
 8002de4:	187b      	adds	r3, r7, r1
 8002de6:	9300      	str	r3, [sp, #0]
 8002de8:	2301      	movs	r3, #1
 8002dea:	221b      	movs	r2, #27
 8002dec:	21d0      	movs	r1, #208	; 0xd0
 8002dee:	f001 f925 	bl	800403c <HAL_I2C_Mem_Write>
        return 0;
 8002df2:	2300      	movs	r3, #0
 8002df4:	e000      	b.n	8002df8 <MPU6050_Init+0xb6>
    }
    return 1;
 8002df6:	2301      	movs	r3, #1
}
 8002df8:	0018      	movs	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	b005      	add	sp, #20
 8002dfe:	bd90      	pop	{r4, r7, pc}

08002e00 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8002e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e02:	b099      	sub	sp, #100	; 0x64
 8002e04:	af04      	add	r7, sp, #16
 8002e06:	6178      	str	r0, [r7, #20]
 8002e08:	6139      	str	r1, [r7, #16]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8002e0a:	2364      	movs	r3, #100	; 0x64
 8002e0c:	6978      	ldr	r0, [r7, #20]
 8002e0e:	9302      	str	r3, [sp, #8]
 8002e10:	230e      	movs	r3, #14
 8002e12:	9301      	str	r3, [sp, #4]
 8002e14:	2408      	movs	r4, #8
 8002e16:	2510      	movs	r5, #16
 8002e18:	1963      	adds	r3, r4, r5
 8002e1a:	19db      	adds	r3, r3, r7
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	2301      	movs	r3, #1
 8002e20:	223b      	movs	r2, #59	; 0x3b
 8002e22:	21d0      	movs	r1, #208	; 0xd0
 8002e24:	f001 fa38 	bl	8004298 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8002e28:	0020      	movs	r0, r4
 8002e2a:	0029      	movs	r1, r5
 8002e2c:	1843      	adds	r3, r0, r1
 8002e2e:	19db      	adds	r3, r3, r7
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	021b      	lsls	r3, r3, #8
 8002e34:	b21a      	sxth	r2, r3
 8002e36:	1843      	adds	r3, r0, r1
 8002e38:	19db      	adds	r3, r3, r7
 8002e3a:	785b      	ldrb	r3, [r3, #1]
 8002e3c:	b21b      	sxth	r3, r3
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	b21a      	sxth	r2, r3
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8002e46:	1843      	adds	r3, r0, r1
 8002e48:	19db      	adds	r3, r3, r7
 8002e4a:	789b      	ldrb	r3, [r3, #2]
 8002e4c:	021b      	lsls	r3, r3, #8
 8002e4e:	b21a      	sxth	r2, r3
 8002e50:	1843      	adds	r3, r0, r1
 8002e52:	19db      	adds	r3, r3, r7
 8002e54:	78db      	ldrb	r3, [r3, #3]
 8002e56:	b21b      	sxth	r3, r3
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	b21a      	sxth	r2, r3
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8002e60:	1843      	adds	r3, r0, r1
 8002e62:	19db      	adds	r3, r3, r7
 8002e64:	791b      	ldrb	r3, [r3, #4]
 8002e66:	021b      	lsls	r3, r3, #8
 8002e68:	b21a      	sxth	r2, r3
 8002e6a:	1843      	adds	r3, r0, r1
 8002e6c:	19db      	adds	r3, r3, r7
 8002e6e:	795b      	ldrb	r3, [r3, #5]
 8002e70:	b21b      	sxth	r3, r3
 8002e72:	4313      	orrs	r3, r2
 8002e74:	b21a      	sxth	r2, r3
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8002e7a:	000d      	movs	r5, r1
 8002e7c:	1843      	adds	r3, r0, r1
 8002e7e:	19db      	adds	r3, r3, r7
 8002e80:	799b      	ldrb	r3, [r3, #6]
 8002e82:	021b      	lsls	r3, r3, #8
 8002e84:	b219      	sxth	r1, r3
 8002e86:	1943      	adds	r3, r0, r5
 8002e88:	19db      	adds	r3, r3, r7
 8002e8a:	79db      	ldrb	r3, [r3, #7]
 8002e8c:	b21a      	sxth	r2, r3
 8002e8e:	2436      	movs	r4, #54	; 0x36
 8002e90:	1963      	adds	r3, r4, r5
 8002e92:	19db      	adds	r3, r3, r7
 8002e94:	430a      	orrs	r2, r1
 8002e96:	801a      	strh	r2, [r3, #0]
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8002e98:	0001      	movs	r1, r0
 8002e9a:	194b      	adds	r3, r1, r5
 8002e9c:	19db      	adds	r3, r3, r7
 8002e9e:	7a1b      	ldrb	r3, [r3, #8]
 8002ea0:	021b      	lsls	r3, r3, #8
 8002ea2:	b21a      	sxth	r2, r3
 8002ea4:	194b      	adds	r3, r1, r5
 8002ea6:	19db      	adds	r3, r3, r7
 8002ea8:	7a5b      	ldrb	r3, [r3, #9]
 8002eaa:	b21b      	sxth	r3, r3
 8002eac:	4313      	orrs	r3, r2
 8002eae:	b21a      	sxth	r2, r3
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8002eb4:	194b      	adds	r3, r1, r5
 8002eb6:	19db      	adds	r3, r3, r7
 8002eb8:	7a9b      	ldrb	r3, [r3, #10]
 8002eba:	021b      	lsls	r3, r3, #8
 8002ebc:	b21a      	sxth	r2, r3
 8002ebe:	194b      	adds	r3, r1, r5
 8002ec0:	19db      	adds	r3, r3, r7
 8002ec2:	7adb      	ldrb	r3, [r3, #11]
 8002ec4:	b21b      	sxth	r3, r3
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	b21a      	sxth	r2, r3
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8002ece:	194b      	adds	r3, r1, r5
 8002ed0:	19db      	adds	r3, r3, r7
 8002ed2:	7b1b      	ldrb	r3, [r3, #12]
 8002ed4:	021b      	lsls	r3, r3, #8
 8002ed6:	b21a      	sxth	r2, r3
 8002ed8:	194b      	adds	r3, r1, r5
 8002eda:	19db      	adds	r3, r3, r7
 8002edc:	7b5b      	ldrb	r3, [r3, #13]
 8002ede:	b21b      	sxth	r3, r3
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	b21a      	sxth	r2, r3
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	2200      	movs	r2, #0
 8002eec:	5e9b      	ldrsh	r3, [r3, r2]
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f7ff fcea 	bl	80028c8 <__aeabi_i2d>
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	4bac      	ldr	r3, [pc, #688]	; (80031a8 <MPU6050_Read_All+0x3a8>)
 8002ef8:	f7fe fa54 	bl	80013a4 <__aeabi_ddiv>
 8002efc:	0002      	movs	r2, r0
 8002efe:	000b      	movs	r3, r1
 8002f00:	6939      	ldr	r1, [r7, #16]
 8002f02:	608a      	str	r2, [r1, #8]
 8002f04:	60cb      	str	r3, [r1, #12]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	2202      	movs	r2, #2
 8002f0a:	5e9b      	ldrsh	r3, [r3, r2]
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	f7ff fcdb 	bl	80028c8 <__aeabi_i2d>
 8002f12:	2200      	movs	r2, #0
 8002f14:	4ba4      	ldr	r3, [pc, #656]	; (80031a8 <MPU6050_Read_All+0x3a8>)
 8002f16:	f7fe fa45 	bl	80013a4 <__aeabi_ddiv>
 8002f1a:	0002      	movs	r2, r0
 8002f1c:	000b      	movs	r3, r1
 8002f1e:	6939      	ldr	r1, [r7, #16]
 8002f20:	610a      	str	r2, [r1, #16]
 8002f22:	614b      	str	r3, [r1, #20]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	2204      	movs	r2, #4
 8002f28:	5e9b      	ldrsh	r3, [r3, r2]
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	f7ff fccc 	bl	80028c8 <__aeabi_i2d>
 8002f30:	2200      	movs	r2, #0
 8002f32:	4b9e      	ldr	r3, [pc, #632]	; (80031ac <MPU6050_Read_All+0x3ac>)
 8002f34:	f7fe fa36 	bl	80013a4 <__aeabi_ddiv>
 8002f38:	0002      	movs	r2, r0
 8002f3a:	000b      	movs	r3, r1
 8002f3c:	6939      	ldr	r1, [r7, #16]
 8002f3e:	618a      	str	r2, [r1, #24]
 8002f40:	61cb      	str	r3, [r1, #28]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8002f42:	1963      	adds	r3, r4, r5
 8002f44:	19db      	adds	r3, r3, r7
 8002f46:	2200      	movs	r2, #0
 8002f48:	5e9b      	ldrsh	r3, [r3, r2]
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	f7fd fe78 	bl	8000c40 <__aeabi_i2f>
 8002f50:	1c03      	adds	r3, r0, #0
 8002f52:	4997      	ldr	r1, [pc, #604]	; (80031b0 <MPU6050_Read_All+0x3b0>)
 8002f54:	1c18      	adds	r0, r3, #0
 8002f56:	f7fd fd59 	bl	8000a0c <__aeabi_fdiv>
 8002f5a:	1c03      	adds	r3, r0, #0
 8002f5c:	4995      	ldr	r1, [pc, #596]	; (80031b4 <MPU6050_Read_All+0x3b4>)
 8002f5e:	1c18      	adds	r0, r3, #0
 8002f60:	f7fd fbb4 	bl	80006cc <__aeabi_fadd>
 8002f64:	1c03      	adds	r3, r0, #0
 8002f66:	1c1a      	adds	r2, r3, #0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	5e9b      	ldrsh	r3, [r3, r2]
 8002f72:	0018      	movs	r0, r3
 8002f74:	f7ff fca8 	bl	80028c8 <__aeabi_i2d>
 8002f78:	2200      	movs	r2, #0
 8002f7a:	4b8f      	ldr	r3, [pc, #572]	; (80031b8 <MPU6050_Read_All+0x3b8>)
 8002f7c:	f7fe fa12 	bl	80013a4 <__aeabi_ddiv>
 8002f80:	0002      	movs	r2, r0
 8002f82:	000b      	movs	r3, r1
 8002f84:	6939      	ldr	r1, [r7, #16]
 8002f86:	628a      	str	r2, [r1, #40]	; 0x28
 8002f88:	62cb      	str	r3, [r1, #44]	; 0x2c
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	2222      	movs	r2, #34	; 0x22
 8002f8e:	5e9b      	ldrsh	r3, [r3, r2]
 8002f90:	0018      	movs	r0, r3
 8002f92:	f7ff fc99 	bl	80028c8 <__aeabi_i2d>
 8002f96:	2200      	movs	r2, #0
 8002f98:	4b87      	ldr	r3, [pc, #540]	; (80031b8 <MPU6050_Read_All+0x3b8>)
 8002f9a:	f7fe fa03 	bl	80013a4 <__aeabi_ddiv>
 8002f9e:	0002      	movs	r2, r0
 8002fa0:	000b      	movs	r3, r1
 8002fa2:	6939      	ldr	r1, [r7, #16]
 8002fa4:	630a      	str	r2, [r1, #48]	; 0x30
 8002fa6:	634b      	str	r3, [r1, #52]	; 0x34
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	2224      	movs	r2, #36	; 0x24
 8002fac:	5e9b      	ldrsh	r3, [r3, r2]
 8002fae:	0018      	movs	r0, r3
 8002fb0:	f7ff fc8a 	bl	80028c8 <__aeabi_i2d>
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	4b80      	ldr	r3, [pc, #512]	; (80031b8 <MPU6050_Read_All+0x3b8>)
 8002fb8:	f7fe f9f4 	bl	80013a4 <__aeabi_ddiv>
 8002fbc:	0002      	movs	r2, r0
 8002fbe:	000b      	movs	r3, r1
 8002fc0:	6939      	ldr	r1, [r7, #16]
 8002fc2:	638a      	str	r2, [r1, #56]	; 0x38
 8002fc4:	63cb      	str	r3, [r1, #60]	; 0x3c

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8002fc6:	f000 fc8d 	bl	80038e4 <HAL_GetTick>
 8002fca:	0002      	movs	r2, r0
 8002fcc:	4b7b      	ldr	r3, [pc, #492]	; (80031bc <MPU6050_Read_All+0x3bc>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	f7ff fca8 	bl	8002928 <__aeabi_ui2d>
 8002fd8:	2200      	movs	r2, #0
 8002fda:	4b79      	ldr	r3, [pc, #484]	; (80031c0 <MPU6050_Read_All+0x3c0>)
 8002fdc:	f7fe f9e2 	bl	80013a4 <__aeabi_ddiv>
 8002fe0:	0002      	movs	r2, r0
 8002fe2:	000b      	movs	r3, r1
 8002fe4:	63ba      	str	r2, [r7, #56]	; 0x38
 8002fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
    timer = HAL_GetTick();
 8002fe8:	f000 fc7c 	bl	80038e4 <HAL_GetTick>
 8002fec:	0002      	movs	r2, r0
 8002fee:	4b73      	ldr	r3, [pc, #460]	; (80031bc <MPU6050_Read_All+0x3bc>)
 8002ff0:	601a      	str	r2, [r3, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	5e9b      	ldrsh	r3, [r3, r2]
 8002ff8:	001a      	movs	r2, r3
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	5e5b      	ldrsh	r3, [r3, r1]
 8003000:	435a      	muls	r2, r3
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	2104      	movs	r1, #4
 8003006:	5e5b      	ldrsh	r3, [r3, r1]
 8003008:	0019      	movs	r1, r3
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	2004      	movs	r0, #4
 800300e:	5e1b      	ldrsh	r3, [r3, r0]
 8003010:	434b      	muls	r3, r1
 8003012:	18d3      	adds	r3, r2, r3
    double roll_sqrt = sqrt(
 8003014:	0018      	movs	r0, r3
 8003016:	f7ff fc57 	bl	80028c8 <__aeabi_i2d>
 800301a:	0002      	movs	r2, r0
 800301c:	000b      	movs	r3, r1
 800301e:	0010      	movs	r0, r2
 8003020:	0019      	movs	r1, r3
 8003022:	f007 f86b 	bl	800a0fc <sqrt>
 8003026:	0002      	movs	r2, r0
 8003028:	000b      	movs	r3, r1
 800302a:	633a      	str	r2, [r7, #48]	; 0x30
 800302c:	637b      	str	r3, [r7, #52]	; 0x34
    if (roll_sqrt != 0.0)
 800302e:	2200      	movs	r2, #0
 8003030:	2300      	movs	r3, #0
 8003032:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003034:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003036:	f7fd fa01 	bl	800043c <__aeabi_dcmpeq>
 800303a:	1e03      	subs	r3, r0, #0
 800303c:	d118      	bne.n	8003070 <MPU6050_Read_All+0x270>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	2202      	movs	r2, #2
 8003042:	5e9b      	ldrsh	r3, [r3, r2]
 8003044:	0018      	movs	r0, r3
 8003046:	f7ff fc3f 	bl	80028c8 <__aeabi_i2d>
 800304a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800304c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800304e:	f7fe f9a9 	bl	80013a4 <__aeabi_ddiv>
 8003052:	0002      	movs	r2, r0
 8003054:	000b      	movs	r3, r1
 8003056:	0010      	movs	r0, r2
 8003058:	0019      	movs	r1, r3
 800305a:	f007 f875 	bl	800a148 <atan>
 800305e:	4a59      	ldr	r2, [pc, #356]	; (80031c4 <MPU6050_Read_All+0x3c4>)
 8003060:	4b59      	ldr	r3, [pc, #356]	; (80031c8 <MPU6050_Read_All+0x3c8>)
 8003062:	f7fe fd99 	bl	8001b98 <__aeabi_dmul>
 8003066:	0002      	movs	r2, r0
 8003068:	000b      	movs	r3, r1
 800306a:	64ba      	str	r2, [r7, #72]	; 0x48
 800306c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800306e:	e003      	b.n	8003078 <MPU6050_Read_All+0x278>
    }
    else
    {
        roll = 0.0;
 8003070:	2200      	movs	r2, #0
 8003072:	2300      	movs	r3, #0
 8003074:	64ba      	str	r2, [r7, #72]	; 0x48
 8003076:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	2200      	movs	r2, #0
 800307c:	5e9b      	ldrsh	r3, [r3, r2]
 800307e:	425b      	negs	r3, r3
 8003080:	0018      	movs	r0, r3
 8003082:	f7ff fc21 	bl	80028c8 <__aeabi_i2d>
 8003086:	0004      	movs	r4, r0
 8003088:	000d      	movs	r5, r1
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	2204      	movs	r2, #4
 800308e:	5e9b      	ldrsh	r3, [r3, r2]
 8003090:	0018      	movs	r0, r3
 8003092:	f7ff fc19 	bl	80028c8 <__aeabi_i2d>
 8003096:	0002      	movs	r2, r0
 8003098:	000b      	movs	r3, r1
 800309a:	0020      	movs	r0, r4
 800309c:	0029      	movs	r1, r5
 800309e:	f007 f829 	bl	800a0f4 <atan2>
 80030a2:	4a48      	ldr	r2, [pc, #288]	; (80031c4 <MPU6050_Read_All+0x3c4>)
 80030a4:	4b48      	ldr	r3, [pc, #288]	; (80031c8 <MPU6050_Read_All+0x3c8>)
 80030a6:	f7fe fd77 	bl	8001b98 <__aeabi_dmul>
 80030aa:	0002      	movs	r2, r0
 80030ac:	000b      	movs	r3, r1
 80030ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80030b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 80030b2:	2200      	movs	r2, #0
 80030b4:	4b45      	ldr	r3, [pc, #276]	; (80031cc <MPU6050_Read_All+0x3cc>)
 80030b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030ba:	f7fd f9c5 	bl	8000448 <__aeabi_dcmplt>
 80030be:	1e03      	subs	r3, r0, #0
 80030c0:	d008      	beq.n	80030d4 <MPU6050_Read_All+0x2d4>
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80030c6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80030c8:	2200      	movs	r2, #0
 80030ca:	4b41      	ldr	r3, [pc, #260]	; (80031d0 <MPU6050_Read_All+0x3d0>)
 80030cc:	f7fd f9d0 	bl	8000470 <__aeabi_dcmpgt>
 80030d0:	1e03      	subs	r3, r0, #0
 80030d2:	d110      	bne.n	80030f6 <MPU6050_Read_All+0x2f6>
 80030d4:	2200      	movs	r2, #0
 80030d6:	4b3e      	ldr	r3, [pc, #248]	; (80031d0 <MPU6050_Read_All+0x3d0>)
 80030d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030dc:	f7fd f9c8 	bl	8000470 <__aeabi_dcmpgt>
 80030e0:	1e03      	subs	r3, r0, #0
 80030e2:	d013      	beq.n	800310c <MPU6050_Read_All+0x30c>
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80030e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80030ea:	2200      	movs	r2, #0
 80030ec:	4b37      	ldr	r3, [pc, #220]	; (80031cc <MPU6050_Read_All+0x3cc>)
 80030ee:	f7fd f9ab 	bl	8000448 <__aeabi_dcmplt>
 80030f2:	1e03      	subs	r3, r0, #0
 80030f4:	d00a      	beq.n	800310c <MPU6050_Read_All+0x30c>
    {
        KalmanY.angle = pitch;
 80030f6:	4937      	ldr	r1, [pc, #220]	; (80031d4 <MPU6050_Read_All+0x3d4>)
 80030f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030fc:	618a      	str	r2, [r1, #24]
 80030fe:	61cb      	str	r3, [r1, #28]
        DataStruct->KalmanAngleY = pitch;
 8003100:	6939      	ldr	r1, [r7, #16]
 8003102:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003106:	650a      	str	r2, [r1, #80]	; 0x50
 8003108:	654b      	str	r3, [r1, #84]	; 0x54
 800310a:	e015      	b.n	8003138 <MPU6050_Read_All+0x338>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003112:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003114:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8003116:	4e2f      	ldr	r6, [pc, #188]	; (80031d4 <MPU6050_Read_All+0x3d4>)
 8003118:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800311a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800311c:	9002      	str	r0, [sp, #8]
 800311e:	9103      	str	r1, [sp, #12]
 8003120:	9200      	str	r2, [sp, #0]
 8003122:	9301      	str	r3, [sp, #4]
 8003124:	0022      	movs	r2, r4
 8003126:	002b      	movs	r3, r5
 8003128:	0030      	movs	r0, r6
 800312a:	f000 f857 	bl	80031dc <Kalman_getAngle>
 800312e:	0002      	movs	r2, r0
 8003130:	000b      	movs	r3, r1
 8003132:	6939      	ldr	r1, [r7, #16]
 8003134:	650a      	str	r2, [r1, #80]	; 0x50
 8003136:	654b      	str	r3, [r1, #84]	; 0x54
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800313c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313e:	0011      	movs	r1, r2
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	085b      	lsrs	r3, r3, #1
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	4b21      	ldr	r3, [pc, #132]	; (80031d0 <MPU6050_Read_All+0x3d0>)
 800314c:	68b8      	ldr	r0, [r7, #8]
 800314e:	68f9      	ldr	r1, [r7, #12]
 8003150:	f7fd f98e 	bl	8000470 <__aeabi_dcmpgt>
 8003154:	1e03      	subs	r3, r0, #0
 8003156:	d00d      	beq.n	8003174 <MPU6050_Read_All+0x374>
        DataStruct->Gx = -DataStruct->Gx;
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800315c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315e:	0011      	movs	r1, r2
 8003160:	6039      	str	r1, [r7, #0]
 8003162:	2180      	movs	r1, #128	; 0x80
 8003164:	0609      	lsls	r1, r1, #24
 8003166:	4059      	eors	r1, r3
 8003168:	6079      	str	r1, [r7, #4]
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	6839      	ldr	r1, [r7, #0]
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	6299      	str	r1, [r3, #40]	; 0x28
 8003172:	62da      	str	r2, [r3, #44]	; 0x2c
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317a:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800317c:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 800317e:	4e16      	ldr	r6, [pc, #88]	; (80031d8 <MPU6050_Read_All+0x3d8>)
 8003180:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003182:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003184:	9002      	str	r0, [sp, #8]
 8003186:	9103      	str	r1, [sp, #12]
 8003188:	9200      	str	r2, [sp, #0]
 800318a:	9301      	str	r3, [sp, #4]
 800318c:	0022      	movs	r2, r4
 800318e:	002b      	movs	r3, r5
 8003190:	0030      	movs	r0, r6
 8003192:	f000 f823 	bl	80031dc <Kalman_getAngle>
 8003196:	0002      	movs	r2, r0
 8003198:	000b      	movs	r3, r1
 800319a:	6939      	ldr	r1, [r7, #16]
 800319c:	648a      	str	r2, [r1, #72]	; 0x48
 800319e:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 80031a0:	46c0      	nop			; (mov r8, r8)
 80031a2:	46bd      	mov	sp, r7
 80031a4:	b015      	add	sp, #84	; 0x54
 80031a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031a8:	40d00000 	.word	0x40d00000
 80031ac:	40cc2900 	.word	0x40cc2900
 80031b0:	43aa0000 	.word	0x43aa0000
 80031b4:	42121eb8 	.word	0x42121eb8
 80031b8:	40606000 	.word	0x40606000
 80031bc:	200003c8 	.word	0x200003c8
 80031c0:	408f4000 	.word	0x408f4000
 80031c4:	1a63c1f8 	.word	0x1a63c1f8
 80031c8:	404ca5dc 	.word	0x404ca5dc
 80031cc:	c0568000 	.word	0xc0568000
 80031d0:	40568000 	.word	0x40568000
 80031d4:	20000048 	.word	0x20000048
 80031d8:	20000000 	.word	0x20000000

080031dc <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 80031dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031de:	b093      	sub	sp, #76	; 0x4c
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	603a      	str	r2, [r7, #0]
 80031e6:	607b      	str	r3, [r7, #4]
    double rate = newRate - Kalman->bias;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6a1a      	ldr	r2, [r3, #32]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ee:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80031f0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80031f2:	f7fe ff93 	bl	800211c <__aeabi_dsub>
 80031f6:	0002      	movs	r2, r0
 80031f8:	000b      	movs	r3, r1
 80031fa:	643a      	str	r2, [r7, #64]	; 0x40
 80031fc:	647b      	str	r3, [r7, #68]	; 0x44
    Kalman->angle += dt * rate;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	699c      	ldr	r4, [r3, #24]
 8003202:	69dd      	ldr	r5, [r3, #28]
 8003204:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003206:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003208:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800320a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800320c:	f7fe fcc4 	bl	8001b98 <__aeabi_dmul>
 8003210:	0002      	movs	r2, r0
 8003212:	000b      	movs	r3, r1
 8003214:	0020      	movs	r0, r4
 8003216:	0029      	movs	r1, r5
 8003218:	f7fd fd64 	bl	8000ce4 <__aeabi_dadd>
 800321c:	0002      	movs	r2, r0
 800321e:	000b      	movs	r3, r1
 8003220:	68f9      	ldr	r1, [r7, #12]
 8003222:	618a      	str	r2, [r1, #24]
 8003224:	61cb      	str	r3, [r1, #28]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800322a:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003230:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003232:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003236:	f7fe fcaf 	bl	8001b98 <__aeabi_dmul>
 800323a:	0002      	movs	r2, r0
 800323c:	000b      	movs	r3, r1
 800323e:	0010      	movs	r0, r2
 8003240:	0019      	movs	r1, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003248:	f7fe ff68 	bl	800211c <__aeabi_dsub>
 800324c:	0002      	movs	r2, r0
 800324e:	000b      	movs	r3, r1
 8003250:	0010      	movs	r0, r2
 8003252:	0019      	movs	r1, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325a:	f7fe ff5f 	bl	800211c <__aeabi_dsub>
 800325e:	0002      	movs	r2, r0
 8003260:	000b      	movs	r3, r1
 8003262:	0010      	movs	r0, r2
 8003264:	0019      	movs	r1, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f7fd fd3a 	bl	8000ce4 <__aeabi_dadd>
 8003270:	0002      	movs	r2, r0
 8003272:	000b      	movs	r3, r1
 8003274:	0010      	movs	r0, r2
 8003276:	0019      	movs	r1, r3
 8003278:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800327a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800327c:	f7fe fc8c 	bl	8001b98 <__aeabi_dmul>
 8003280:	0002      	movs	r2, r0
 8003282:	000b      	movs	r3, r1
 8003284:	0020      	movs	r0, r4
 8003286:	0029      	movs	r1, r5
 8003288:	f7fd fd2c 	bl	8000ce4 <__aeabi_dadd>
 800328c:	0002      	movs	r2, r0
 800328e:	000b      	movs	r3, r1
 8003290:	68f9      	ldr	r1, [r7, #12]
 8003292:	628a      	str	r2, [r1, #40]	; 0x28
 8003294:	62cb      	str	r3, [r1, #44]	; 0x2c
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800329a:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80032a0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80032a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80032a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a6:	f7fe fc77 	bl	8001b98 <__aeabi_dmul>
 80032aa:	0002      	movs	r2, r0
 80032ac:	000b      	movs	r3, r1
 80032ae:	0020      	movs	r0, r4
 80032b0:	0029      	movs	r1, r5
 80032b2:	f7fe ff33 	bl	800211c <__aeabi_dsub>
 80032b6:	0002      	movs	r2, r0
 80032b8:	000b      	movs	r3, r1
 80032ba:	68f9      	ldr	r1, [r7, #12]
 80032bc:	630a      	str	r2, [r1, #48]	; 0x30
 80032be:	634b      	str	r3, [r1, #52]	; 0x34
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80032c4:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80032ca:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80032cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80032ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032d0:	f7fe fc62 	bl	8001b98 <__aeabi_dmul>
 80032d4:	0002      	movs	r2, r0
 80032d6:	000b      	movs	r3, r1
 80032d8:	0020      	movs	r0, r4
 80032da:	0029      	movs	r1, r5
 80032dc:	f7fe ff1e 	bl	800211c <__aeabi_dsub>
 80032e0:	0002      	movs	r2, r0
 80032e2:	000b      	movs	r3, r1
 80032e4:	68f9      	ldr	r1, [r7, #12]
 80032e6:	638a      	str	r2, [r1, #56]	; 0x38
 80032e8:	63cb      	str	r3, [r1, #60]	; 0x3c
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 80032ee:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6898      	ldr	r0, [r3, #8]
 80032f4:	68d9      	ldr	r1, [r3, #12]
 80032f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80032f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032fa:	f7fe fc4d 	bl	8001b98 <__aeabi_dmul>
 80032fe:	0002      	movs	r2, r0
 8003300:	000b      	movs	r3, r1
 8003302:	0020      	movs	r0, r4
 8003304:	0029      	movs	r1, r5
 8003306:	f7fd fced 	bl	8000ce4 <__aeabi_dadd>
 800330a:	0002      	movs	r2, r0
 800330c:	000b      	movs	r3, r1
 800330e:	68f9      	ldr	r1, [r7, #12]
 8003310:	640a      	str	r2, [r1, #64]	; 0x40
 8003312:	644b      	str	r3, [r1, #68]	; 0x44

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003318:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	691a      	ldr	r2, [r3, #16]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	f7fd fce0 	bl	8000ce4 <__aeabi_dadd>
 8003324:	0002      	movs	r2, r0
 8003326:	000b      	movs	r3, r1
 8003328:	63ba      	str	r2, [r7, #56]	; 0x38
 800332a:	63fb      	str	r3, [r7, #60]	; 0x3c
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003330:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003332:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003336:	f7fe f835 	bl	80013a4 <__aeabi_ddiv>
 800333a:	0002      	movs	r2, r0
 800333c:	000b      	movs	r3, r1
 800333e:	2610      	movs	r6, #16
 8003340:	19b9      	adds	r1, r7, r6
 8003342:	600a      	str	r2, [r1, #0]
 8003344:	604b      	str	r3, [r1, #4]
    K[1] = Kalman->P[1][0] / S;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800334a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800334c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800334e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003350:	f7fe f828 	bl	80013a4 <__aeabi_ddiv>
 8003354:	0002      	movs	r2, r0
 8003356:	000b      	movs	r3, r1
 8003358:	19b9      	adds	r1, r7, r6
 800335a:	608a      	str	r2, [r1, #8]
 800335c:	60cb      	str	r3, [r1, #12]

    double y = newAngle - Kalman->angle;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	699a      	ldr	r2, [r3, #24]
 8003362:	69db      	ldr	r3, [r3, #28]
 8003364:	6838      	ldr	r0, [r7, #0]
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	f7fe fed8 	bl	800211c <__aeabi_dsub>
 800336c:	0002      	movs	r2, r0
 800336e:	000b      	movs	r3, r1
 8003370:	633a      	str	r2, [r7, #48]	; 0x30
 8003372:	637b      	str	r3, [r7, #52]	; 0x34
    Kalman->angle += K[0] * y;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	699c      	ldr	r4, [r3, #24]
 8003378:	69dd      	ldr	r5, [r3, #28]
 800337a:	19bb      	adds	r3, r7, r6
 800337c:	6818      	ldr	r0, [r3, #0]
 800337e:	6859      	ldr	r1, [r3, #4]
 8003380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003384:	f7fe fc08 	bl	8001b98 <__aeabi_dmul>
 8003388:	0002      	movs	r2, r0
 800338a:	000b      	movs	r3, r1
 800338c:	0020      	movs	r0, r4
 800338e:	0029      	movs	r1, r5
 8003390:	f7fd fca8 	bl	8000ce4 <__aeabi_dadd>
 8003394:	0002      	movs	r2, r0
 8003396:	000b      	movs	r3, r1
 8003398:	68f9      	ldr	r1, [r7, #12]
 800339a:	618a      	str	r2, [r1, #24]
 800339c:	61cb      	str	r3, [r1, #28]
    Kalman->bias += K[1] * y;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6a1c      	ldr	r4, [r3, #32]
 80033a2:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80033a4:	19bb      	adds	r3, r7, r6
 80033a6:	6898      	ldr	r0, [r3, #8]
 80033a8:	68d9      	ldr	r1, [r3, #12]
 80033aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ae:	f7fe fbf3 	bl	8001b98 <__aeabi_dmul>
 80033b2:	0002      	movs	r2, r0
 80033b4:	000b      	movs	r3, r1
 80033b6:	0020      	movs	r0, r4
 80033b8:	0029      	movs	r1, r5
 80033ba:	f7fd fc93 	bl	8000ce4 <__aeabi_dadd>
 80033be:	0002      	movs	r2, r0
 80033c0:	000b      	movs	r3, r1
 80033c2:	68f9      	ldr	r1, [r7, #12]
 80033c4:	620a      	str	r2, [r1, #32]
 80033c6:	624b      	str	r3, [r1, #36]	; 0x24

    double P00_temp = Kalman->P[0][0];
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ce:	62ba      	str	r2, [r7, #40]	; 0x28
 80033d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    double P01_temp = Kalman->P[0][1];
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d8:	623a      	str	r2, [r7, #32]
 80033da:	627b      	str	r3, [r7, #36]	; 0x24

    Kalman->P[0][0] -= K[0] * P00_temp;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80033e0:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80033e2:	19bb      	adds	r3, r7, r6
 80033e4:	6818      	ldr	r0, [r3, #0]
 80033e6:	6859      	ldr	r1, [r3, #4]
 80033e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ec:	f7fe fbd4 	bl	8001b98 <__aeabi_dmul>
 80033f0:	0002      	movs	r2, r0
 80033f2:	000b      	movs	r3, r1
 80033f4:	0020      	movs	r0, r4
 80033f6:	0029      	movs	r1, r5
 80033f8:	f7fe fe90 	bl	800211c <__aeabi_dsub>
 80033fc:	0002      	movs	r2, r0
 80033fe:	000b      	movs	r3, r1
 8003400:	68f9      	ldr	r1, [r7, #12]
 8003402:	628a      	str	r2, [r1, #40]	; 0x28
 8003404:	62cb      	str	r3, [r1, #44]	; 0x2c
    Kalman->P[0][1] -= K[0] * P01_temp;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800340a:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800340c:	19bb      	adds	r3, r7, r6
 800340e:	6818      	ldr	r0, [r3, #0]
 8003410:	6859      	ldr	r1, [r3, #4]
 8003412:	6a3a      	ldr	r2, [r7, #32]
 8003414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003416:	f7fe fbbf 	bl	8001b98 <__aeabi_dmul>
 800341a:	0002      	movs	r2, r0
 800341c:	000b      	movs	r3, r1
 800341e:	0020      	movs	r0, r4
 8003420:	0029      	movs	r1, r5
 8003422:	f7fe fe7b 	bl	800211c <__aeabi_dsub>
 8003426:	0002      	movs	r2, r0
 8003428:	000b      	movs	r3, r1
 800342a:	68f9      	ldr	r1, [r7, #12]
 800342c:	630a      	str	r2, [r1, #48]	; 0x30
 800342e:	634b      	str	r3, [r1, #52]	; 0x34
    Kalman->P[1][0] -= K[1] * P00_temp;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8003434:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8003436:	19bb      	adds	r3, r7, r6
 8003438:	6898      	ldr	r0, [r3, #8]
 800343a:	68d9      	ldr	r1, [r3, #12]
 800343c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800343e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003440:	f7fe fbaa 	bl	8001b98 <__aeabi_dmul>
 8003444:	0002      	movs	r2, r0
 8003446:	000b      	movs	r3, r1
 8003448:	0020      	movs	r0, r4
 800344a:	0029      	movs	r1, r5
 800344c:	f7fe fe66 	bl	800211c <__aeabi_dsub>
 8003450:	0002      	movs	r2, r0
 8003452:	000b      	movs	r3, r1
 8003454:	68f9      	ldr	r1, [r7, #12]
 8003456:	638a      	str	r2, [r1, #56]	; 0x38
 8003458:	63cb      	str	r3, [r1, #60]	; 0x3c
    Kalman->P[1][1] -= K[1] * P01_temp;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800345e:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8003460:	19bb      	adds	r3, r7, r6
 8003462:	6898      	ldr	r0, [r3, #8]
 8003464:	68d9      	ldr	r1, [r3, #12]
 8003466:	6a3a      	ldr	r2, [r7, #32]
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	f7fe fb95 	bl	8001b98 <__aeabi_dmul>
 800346e:	0002      	movs	r2, r0
 8003470:	000b      	movs	r3, r1
 8003472:	0020      	movs	r0, r4
 8003474:	0029      	movs	r1, r5
 8003476:	f7fe fe51 	bl	800211c <__aeabi_dsub>
 800347a:	0002      	movs	r2, r0
 800347c:	000b      	movs	r3, r1
 800347e:	68f9      	ldr	r1, [r7, #12]
 8003480:	640a      	str	r2, [r1, #64]	; 0x40
 8003482:	644b      	str	r3, [r1, #68]	; 0x44

    return Kalman->angle;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	699a      	ldr	r2, [r3, #24]
 8003488:	69db      	ldr	r3, [r3, #28]
};
 800348a:	0010      	movs	r0, r2
 800348c:	0019      	movs	r1, r3
 800348e:	46bd      	mov	sp, r7
 8003490:	b013      	add	sp, #76	; 0x4c
 8003492:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003498:	4b07      	ldr	r3, [pc, #28]	; (80034b8 <HAL_MspInit+0x24>)
 800349a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800349c:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <HAL_MspInit+0x24>)
 800349e:	2101      	movs	r1, #1
 80034a0:	430a      	orrs	r2, r1
 80034a2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80034a4:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <HAL_MspInit+0x24>)
 80034a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034a8:	4b03      	ldr	r3, [pc, #12]	; (80034b8 <HAL_MspInit+0x24>)
 80034aa:	2180      	movs	r1, #128	; 0x80
 80034ac:	0549      	lsls	r1, r1, #21
 80034ae:	430a      	orrs	r2, r1
 80034b0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034b2:	46c0      	nop			; (mov r8, r8)
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40021000 	.word	0x40021000

080034bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80034bc:	b590      	push	{r4, r7, lr}
 80034be:	b089      	sub	sp, #36	; 0x24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c4:	240c      	movs	r4, #12
 80034c6:	193b      	adds	r3, r7, r4
 80034c8:	0018      	movs	r0, r3
 80034ca:	2314      	movs	r3, #20
 80034cc:	001a      	movs	r2, r3
 80034ce:	2100      	movs	r1, #0
 80034d0:	f004 fc82 	bl	8007dd8 <memset>
  if(hi2c->Instance==I2C1)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a1c      	ldr	r2, [pc, #112]	; (800354c <HAL_I2C_MspInit+0x90>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d132      	bne.n	8003544 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034de:	4b1c      	ldr	r3, [pc, #112]	; (8003550 <HAL_I2C_MspInit+0x94>)
 80034e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e2:	4b1b      	ldr	r3, [pc, #108]	; (8003550 <HAL_I2C_MspInit+0x94>)
 80034e4:	2101      	movs	r1, #1
 80034e6:	430a      	orrs	r2, r1
 80034e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80034ea:	4b19      	ldr	r3, [pc, #100]	; (8003550 <HAL_I2C_MspInit+0x94>)
 80034ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ee:	2201      	movs	r2, #1
 80034f0:	4013      	ands	r3, r2
 80034f2:	60bb      	str	r3, [r7, #8]
 80034f4:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80034f6:	193b      	adds	r3, r7, r4
 80034f8:	22c0      	movs	r2, #192	; 0xc0
 80034fa:	00d2      	lsls	r2, r2, #3
 80034fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034fe:	0021      	movs	r1, r4
 8003500:	187b      	adds	r3, r7, r1
 8003502:	2212      	movs	r2, #18
 8003504:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003506:	187b      	adds	r3, r7, r1
 8003508:	2201      	movs	r2, #1
 800350a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800350c:	187b      	adds	r3, r7, r1
 800350e:	2203      	movs	r2, #3
 8003510:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8003512:	187b      	adds	r3, r7, r1
 8003514:	2206      	movs	r2, #6
 8003516:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003518:	187a      	adds	r2, r7, r1
 800351a:	23a0      	movs	r3, #160	; 0xa0
 800351c:	05db      	lsls	r3, r3, #23
 800351e:	0011      	movs	r1, r2
 8003520:	0018      	movs	r0, r3
 8003522:	f000 fb3f 	bl	8003ba4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003526:	4b0a      	ldr	r3, [pc, #40]	; (8003550 <HAL_I2C_MspInit+0x94>)
 8003528:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800352a:	4b09      	ldr	r3, [pc, #36]	; (8003550 <HAL_I2C_MspInit+0x94>)
 800352c:	2180      	movs	r1, #128	; 0x80
 800352e:	0389      	lsls	r1, r1, #14
 8003530:	430a      	orrs	r2, r1
 8003532:	639a      	str	r2, [r3, #56]	; 0x38
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8003534:	2200      	movs	r2, #0
 8003536:	2100      	movs	r1, #0
 8003538:	2017      	movs	r0, #23
 800353a:	f000 faad 	bl	8003a98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800353e:	2017      	movs	r0, #23
 8003540:	f000 fabf 	bl	8003ac2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003544:	46c0      	nop			; (mov r8, r8)
 8003546:	46bd      	mov	sp, r7
 8003548:	b009      	add	sp, #36	; 0x24
 800354a:	bd90      	pop	{r4, r7, pc}
 800354c:	40005400 	.word	0x40005400
 8003550:	40021000 	.word	0x40021000

08003554 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003554:	b590      	push	{r4, r7, lr}
 8003556:	b089      	sub	sp, #36	; 0x24
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800355c:	240c      	movs	r4, #12
 800355e:	193b      	adds	r3, r7, r4
 8003560:	0018      	movs	r0, r3
 8003562:	2314      	movs	r3, #20
 8003564:	001a      	movs	r2, r3
 8003566:	2100      	movs	r1, #0
 8003568:	f004 fc36 	bl	8007dd8 <memset>
  if(huart->Instance==USART2)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a18      	ldr	r2, [pc, #96]	; (80035d4 <HAL_UART_MspInit+0x80>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d129      	bne.n	80035ca <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003576:	4b18      	ldr	r3, [pc, #96]	; (80035d8 <HAL_UART_MspInit+0x84>)
 8003578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800357a:	4b17      	ldr	r3, [pc, #92]	; (80035d8 <HAL_UART_MspInit+0x84>)
 800357c:	2180      	movs	r1, #128	; 0x80
 800357e:	0289      	lsls	r1, r1, #10
 8003580:	430a      	orrs	r2, r1
 8003582:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003584:	4b14      	ldr	r3, [pc, #80]	; (80035d8 <HAL_UART_MspInit+0x84>)
 8003586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003588:	4b13      	ldr	r3, [pc, #76]	; (80035d8 <HAL_UART_MspInit+0x84>)
 800358a:	2101      	movs	r1, #1
 800358c:	430a      	orrs	r2, r1
 800358e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003590:	4b11      	ldr	r3, [pc, #68]	; (80035d8 <HAL_UART_MspInit+0x84>)
 8003592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003594:	2201      	movs	r2, #1
 8003596:	4013      	ands	r3, r2
 8003598:	60bb      	str	r3, [r7, #8]
 800359a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800359c:	0021      	movs	r1, r4
 800359e:	187b      	adds	r3, r7, r1
 80035a0:	220c      	movs	r2, #12
 80035a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a4:	187b      	adds	r3, r7, r1
 80035a6:	2202      	movs	r2, #2
 80035a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035aa:	187b      	adds	r3, r7, r1
 80035ac:	2200      	movs	r2, #0
 80035ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035b0:	187b      	adds	r3, r7, r1
 80035b2:	2203      	movs	r2, #3
 80035b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80035b6:	187b      	adds	r3, r7, r1
 80035b8:	2204      	movs	r2, #4
 80035ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035bc:	187a      	adds	r2, r7, r1
 80035be:	23a0      	movs	r3, #160	; 0xa0
 80035c0:	05db      	lsls	r3, r3, #23
 80035c2:	0011      	movs	r1, r2
 80035c4:	0018      	movs	r0, r3
 80035c6:	f000 faed 	bl	8003ba4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80035ca:	46c0      	nop			; (mov r8, r8)
 80035cc:	46bd      	mov	sp, r7
 80035ce:	b009      	add	sp, #36	; 0x24
 80035d0:	bd90      	pop	{r4, r7, pc}
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	40004400 	.word	0x40004400
 80035d8:	40021000 	.word	0x40021000

080035dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80035e0:	e7fe      	b.n	80035e0 <NMI_Handler+0x4>

080035e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035e6:	e7fe      	b.n	80035e6 <HardFault_Handler+0x4>

080035e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80035ec:	46c0      	nop			; (mov r8, r8)
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035f6:	46c0      	nop			; (mov r8, r8)
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003600:	f000 f95e 	bl	80038c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003604:	46c0      	nop			; (mov r8, r8)
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
	...

0800360c <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8003610:	4b09      	ldr	r3, [pc, #36]	; (8003638 <I2C1_IRQHandler+0x2c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699a      	ldr	r2, [r3, #24]
 8003616:	23e0      	movs	r3, #224	; 0xe0
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	4013      	ands	r3, r2
 800361c:	d004      	beq.n	8003628 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800361e:	4b06      	ldr	r3, [pc, #24]	; (8003638 <I2C1_IRQHandler+0x2c>)
 8003620:	0018      	movs	r0, r3
 8003622:	f000 ff87 	bl	8004534 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8003626:	e003      	b.n	8003630 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8003628:	4b03      	ldr	r3, [pc, #12]	; (8003638 <I2C1_IRQHandler+0x2c>)
 800362a:	0018      	movs	r0, r3
 800362c:	f000 ff68 	bl	8004500 <HAL_I2C_EV_IRQHandler>
}
 8003630:	46c0      	nop			; (mov r8, r8)
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	20000294 	.word	0x20000294

0800363c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  return 1;
 8003640:	2301      	movs	r3, #1
}
 8003642:	0018      	movs	r0, r3
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <_kill>:

int _kill(int pid, int sig)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003652:	f004 fc1b 	bl	8007e8c <__errno>
 8003656:	0003      	movs	r3, r0
 8003658:	2216      	movs	r2, #22
 800365a:	601a      	str	r2, [r3, #0]
  return -1;
 800365c:	2301      	movs	r3, #1
 800365e:	425b      	negs	r3, r3
}
 8003660:	0018      	movs	r0, r3
 8003662:	46bd      	mov	sp, r7
 8003664:	b002      	add	sp, #8
 8003666:	bd80      	pop	{r7, pc}

08003668 <_exit>:

void _exit (int status)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003670:	2301      	movs	r3, #1
 8003672:	425a      	negs	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	0011      	movs	r1, r2
 8003678:	0018      	movs	r0, r3
 800367a:	f7ff ffe5 	bl	8003648 <_kill>
  while (1) {}    /* Make sure we hang here */
 800367e:	e7fe      	b.n	800367e <_exit+0x16>

08003680 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800368c:	2300      	movs	r3, #0
 800368e:	617b      	str	r3, [r7, #20]
 8003690:	e00a      	b.n	80036a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003692:	e000      	b.n	8003696 <_read+0x16>
 8003694:	bf00      	nop
 8003696:	0001      	movs	r1, r0
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	1c5a      	adds	r2, r3, #1
 800369c:	60ba      	str	r2, [r7, #8]
 800369e:	b2ca      	uxtb	r2, r1
 80036a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	3301      	adds	r3, #1
 80036a6:	617b      	str	r3, [r7, #20]
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	dbf0      	blt.n	8003692 <_read+0x12>
  }

  return len;
 80036b0:	687b      	ldr	r3, [r7, #4]
}
 80036b2:	0018      	movs	r0, r3
 80036b4:	46bd      	mov	sp, r7
 80036b6:	b006      	add	sp, #24
 80036b8:	bd80      	pop	{r7, pc}

080036ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b086      	sub	sp, #24
 80036be:	af00      	add	r7, sp, #0
 80036c0:	60f8      	str	r0, [r7, #12]
 80036c2:	60b9      	str	r1, [r7, #8]
 80036c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036c6:	2300      	movs	r3, #0
 80036c8:	617b      	str	r3, [r7, #20]
 80036ca:	e009      	b.n	80036e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	1c5a      	adds	r2, r3, #1
 80036d0:	60ba      	str	r2, [r7, #8]
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	0018      	movs	r0, r3
 80036d6:	e000      	b.n	80036da <_write+0x20>
 80036d8:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	3301      	adds	r3, #1
 80036de:	617b      	str	r3, [r7, #20]
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	dbf1      	blt.n	80036cc <_write+0x12>
  }
  return len;
 80036e8:	687b      	ldr	r3, [r7, #4]
}
 80036ea:	0018      	movs	r0, r3
 80036ec:	46bd      	mov	sp, r7
 80036ee:	b006      	add	sp, #24
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <_close>:

int _close(int file)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b082      	sub	sp, #8
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80036fa:	2301      	movs	r3, #1
 80036fc:	425b      	negs	r3, r3
}
 80036fe:	0018      	movs	r0, r3
 8003700:	46bd      	mov	sp, r7
 8003702:	b002      	add	sp, #8
 8003704:	bd80      	pop	{r7, pc}

08003706 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b082      	sub	sp, #8
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
 800370e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	2280      	movs	r2, #128	; 0x80
 8003714:	0192      	lsls	r2, r2, #6
 8003716:	605a      	str	r2, [r3, #4]
  return 0;
 8003718:	2300      	movs	r3, #0
}
 800371a:	0018      	movs	r0, r3
 800371c:	46bd      	mov	sp, r7
 800371e:	b002      	add	sp, #8
 8003720:	bd80      	pop	{r7, pc}

08003722 <_isatty>:

int _isatty(int file)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b082      	sub	sp, #8
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800372a:	2301      	movs	r3, #1
}
 800372c:	0018      	movs	r0, r3
 800372e:	46bd      	mov	sp, r7
 8003730:	b002      	add	sp, #8
 8003732:	bd80      	pop	{r7, pc}

08003734 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003740:	2300      	movs	r3, #0
}
 8003742:	0018      	movs	r0, r3
 8003744:	46bd      	mov	sp, r7
 8003746:	b004      	add	sp, #16
 8003748:	bd80      	pop	{r7, pc}
	...

0800374c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003754:	4a14      	ldr	r2, [pc, #80]	; (80037a8 <_sbrk+0x5c>)
 8003756:	4b15      	ldr	r3, [pc, #84]	; (80037ac <_sbrk+0x60>)
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003760:	4b13      	ldr	r3, [pc, #76]	; (80037b0 <_sbrk+0x64>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d102      	bne.n	800376e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003768:	4b11      	ldr	r3, [pc, #68]	; (80037b0 <_sbrk+0x64>)
 800376a:	4a12      	ldr	r2, [pc, #72]	; (80037b4 <_sbrk+0x68>)
 800376c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800376e:	4b10      	ldr	r3, [pc, #64]	; (80037b0 <_sbrk+0x64>)
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	18d3      	adds	r3, r2, r3
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	429a      	cmp	r2, r3
 800377a:	d207      	bcs.n	800378c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800377c:	f004 fb86 	bl	8007e8c <__errno>
 8003780:	0003      	movs	r3, r0
 8003782:	220c      	movs	r2, #12
 8003784:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003786:	2301      	movs	r3, #1
 8003788:	425b      	negs	r3, r3
 800378a:	e009      	b.n	80037a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800378c:	4b08      	ldr	r3, [pc, #32]	; (80037b0 <_sbrk+0x64>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003792:	4b07      	ldr	r3, [pc, #28]	; (80037b0 <_sbrk+0x64>)
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	18d2      	adds	r2, r2, r3
 800379a:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <_sbrk+0x64>)
 800379c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800379e:	68fb      	ldr	r3, [r7, #12]
}
 80037a0:	0018      	movs	r0, r3
 80037a2:	46bd      	mov	sp, r7
 80037a4:	b006      	add	sp, #24
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	20005000 	.word	0x20005000
 80037ac:	00000400 	.word	0x00000400
 80037b0:	200003cc 	.word	0x200003cc
 80037b4:	20000520 	.word	0x20000520

080037b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037bc:	46c0      	nop			; (mov r8, r8)
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
	...

080037c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80037c4:	480d      	ldr	r0, [pc, #52]	; (80037fc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80037c6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80037c8:	f7ff fff6 	bl	80037b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80037cc:	480c      	ldr	r0, [pc, #48]	; (8003800 <LoopForever+0x6>)
  ldr r1, =_edata
 80037ce:	490d      	ldr	r1, [pc, #52]	; (8003804 <LoopForever+0xa>)
  ldr r2, =_sidata
 80037d0:	4a0d      	ldr	r2, [pc, #52]	; (8003808 <LoopForever+0xe>)
  movs r3, #0
 80037d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037d4:	e002      	b.n	80037dc <LoopCopyDataInit>

080037d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037da:	3304      	adds	r3, #4

080037dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037e0:	d3f9      	bcc.n	80037d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037e2:	4a0a      	ldr	r2, [pc, #40]	; (800380c <LoopForever+0x12>)
  ldr r4, =_ebss
 80037e4:	4c0a      	ldr	r4, [pc, #40]	; (8003810 <LoopForever+0x16>)
  movs r3, #0
 80037e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037e8:	e001      	b.n	80037ee <LoopFillZerobss>

080037ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037ec:	3204      	adds	r2, #4

080037ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037f0:	d3fb      	bcc.n	80037ea <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80037f2:	f004 fb51 	bl	8007e98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037f6:	f7ff f923 	bl	8002a40 <main>

080037fa <LoopForever>:

LoopForever:
    b LoopForever
 80037fa:	e7fe      	b.n	80037fa <LoopForever>
   ldr   r0, =_estack
 80037fc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8003800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003804:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 8003808:	0800ade8 	.word	0x0800ade8
  ldr r2, =_sbss
 800380c:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 8003810:	20000520 	.word	0x20000520

08003814 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003814:	e7fe      	b.n	8003814 <ADC1_COMP_IRQHandler>
	...

08003818 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800381e:	1dfb      	adds	r3, r7, #7
 8003820:	2200      	movs	r2, #0
 8003822:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003824:	4b0b      	ldr	r3, [pc, #44]	; (8003854 <HAL_Init+0x3c>)
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	4b0a      	ldr	r3, [pc, #40]	; (8003854 <HAL_Init+0x3c>)
 800382a:	2140      	movs	r1, #64	; 0x40
 800382c:	430a      	orrs	r2, r1
 800382e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003830:	2000      	movs	r0, #0
 8003832:	f000 f811 	bl	8003858 <HAL_InitTick>
 8003836:	1e03      	subs	r3, r0, #0
 8003838:	d003      	beq.n	8003842 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800383a:	1dfb      	adds	r3, r7, #7
 800383c:	2201      	movs	r2, #1
 800383e:	701a      	strb	r2, [r3, #0]
 8003840:	e001      	b.n	8003846 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003842:	f7ff fe27 	bl	8003494 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003846:	1dfb      	adds	r3, r7, #7
 8003848:	781b      	ldrb	r3, [r3, #0]
}
 800384a:	0018      	movs	r0, r3
 800384c:	46bd      	mov	sp, r7
 800384e:	b002      	add	sp, #8
 8003850:	bd80      	pop	{r7, pc}
 8003852:	46c0      	nop			; (mov r8, r8)
 8003854:	40022000 	.word	0x40022000

08003858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003858:	b590      	push	{r4, r7, lr}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003860:	4b14      	ldr	r3, [pc, #80]	; (80038b4 <HAL_InitTick+0x5c>)
 8003862:	681c      	ldr	r4, [r3, #0]
 8003864:	4b14      	ldr	r3, [pc, #80]	; (80038b8 <HAL_InitTick+0x60>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	0019      	movs	r1, r3
 800386a:	23fa      	movs	r3, #250	; 0xfa
 800386c:	0098      	lsls	r0, r3, #2
 800386e:	f7fc fc5f 	bl	8000130 <__udivsi3>
 8003872:	0003      	movs	r3, r0
 8003874:	0019      	movs	r1, r3
 8003876:	0020      	movs	r0, r4
 8003878:	f7fc fc5a 	bl	8000130 <__udivsi3>
 800387c:	0003      	movs	r3, r0
 800387e:	0018      	movs	r0, r3
 8003880:	f000 f92f 	bl	8003ae2 <HAL_SYSTICK_Config>
 8003884:	1e03      	subs	r3, r0, #0
 8003886:	d001      	beq.n	800388c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e00f      	b.n	80038ac <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b03      	cmp	r3, #3
 8003890:	d80b      	bhi.n	80038aa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003892:	6879      	ldr	r1, [r7, #4]
 8003894:	2301      	movs	r3, #1
 8003896:	425b      	negs	r3, r3
 8003898:	2200      	movs	r2, #0
 800389a:	0018      	movs	r0, r3
 800389c:	f000 f8fc 	bl	8003a98 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038a0:	4b06      	ldr	r3, [pc, #24]	; (80038bc <HAL_InitTick+0x64>)
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
 80038a8:	e000      	b.n	80038ac <HAL_InitTick+0x54>
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
}
 80038ac:	0018      	movs	r0, r3
 80038ae:	46bd      	mov	sp, r7
 80038b0:	b003      	add	sp, #12
 80038b2:	bd90      	pop	{r4, r7, pc}
 80038b4:	20000090 	.word	0x20000090
 80038b8:	20000098 	.word	0x20000098
 80038bc:	20000094 	.word	0x20000094

080038c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038c4:	4b05      	ldr	r3, [pc, #20]	; (80038dc <HAL_IncTick+0x1c>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	001a      	movs	r2, r3
 80038ca:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <HAL_IncTick+0x20>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	18d2      	adds	r2, r2, r3
 80038d0:	4b03      	ldr	r3, [pc, #12]	; (80038e0 <HAL_IncTick+0x20>)
 80038d2:	601a      	str	r2, [r3, #0]
}
 80038d4:	46c0      	nop			; (mov r8, r8)
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	46c0      	nop			; (mov r8, r8)
 80038dc:	20000098 	.word	0x20000098
 80038e0:	200003d0 	.word	0x200003d0

080038e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  return uwTick;
 80038e8:	4b02      	ldr	r3, [pc, #8]	; (80038f4 <HAL_GetTick+0x10>)
 80038ea:	681b      	ldr	r3, [r3, #0]
}
 80038ec:	0018      	movs	r0, r3
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	46c0      	nop			; (mov r8, r8)
 80038f4:	200003d0 	.word	0x200003d0

080038f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003900:	f7ff fff0 	bl	80038e4 <HAL_GetTick>
 8003904:	0003      	movs	r3, r0
 8003906:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	3301      	adds	r3, #1
 8003910:	d005      	beq.n	800391e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003912:	4b0a      	ldr	r3, [pc, #40]	; (800393c <HAL_Delay+0x44>)
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	001a      	movs	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	189b      	adds	r3, r3, r2
 800391c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800391e:	46c0      	nop			; (mov r8, r8)
 8003920:	f7ff ffe0 	bl	80038e4 <HAL_GetTick>
 8003924:	0002      	movs	r2, r0
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	429a      	cmp	r2, r3
 800392e:	d8f7      	bhi.n	8003920 <HAL_Delay+0x28>
  {
  }
}
 8003930:	46c0      	nop			; (mov r8, r8)
 8003932:	46c0      	nop			; (mov r8, r8)
 8003934:	46bd      	mov	sp, r7
 8003936:	b004      	add	sp, #16
 8003938:	bd80      	pop	{r7, pc}
 800393a:	46c0      	nop			; (mov r8, r8)
 800393c:	20000098 	.word	0x20000098

08003940 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	0002      	movs	r2, r0
 8003948:	1dfb      	adds	r3, r7, #7
 800394a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800394c:	1dfb      	adds	r3, r7, #7
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	2b7f      	cmp	r3, #127	; 0x7f
 8003952:	d809      	bhi.n	8003968 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003954:	1dfb      	adds	r3, r7, #7
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	001a      	movs	r2, r3
 800395a:	231f      	movs	r3, #31
 800395c:	401a      	ands	r2, r3
 800395e:	4b04      	ldr	r3, [pc, #16]	; (8003970 <__NVIC_EnableIRQ+0x30>)
 8003960:	2101      	movs	r1, #1
 8003962:	4091      	lsls	r1, r2
 8003964:	000a      	movs	r2, r1
 8003966:	601a      	str	r2, [r3, #0]
  }
}
 8003968:	46c0      	nop			; (mov r8, r8)
 800396a:	46bd      	mov	sp, r7
 800396c:	b002      	add	sp, #8
 800396e:	bd80      	pop	{r7, pc}
 8003970:	e000e100 	.word	0xe000e100

08003974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003974:	b590      	push	{r4, r7, lr}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	0002      	movs	r2, r0
 800397c:	6039      	str	r1, [r7, #0]
 800397e:	1dfb      	adds	r3, r7, #7
 8003980:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003982:	1dfb      	adds	r3, r7, #7
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	2b7f      	cmp	r3, #127	; 0x7f
 8003988:	d828      	bhi.n	80039dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800398a:	4a2f      	ldr	r2, [pc, #188]	; (8003a48 <__NVIC_SetPriority+0xd4>)
 800398c:	1dfb      	adds	r3, r7, #7
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	b25b      	sxtb	r3, r3
 8003992:	089b      	lsrs	r3, r3, #2
 8003994:	33c0      	adds	r3, #192	; 0xc0
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	589b      	ldr	r3, [r3, r2]
 800399a:	1dfa      	adds	r2, r7, #7
 800399c:	7812      	ldrb	r2, [r2, #0]
 800399e:	0011      	movs	r1, r2
 80039a0:	2203      	movs	r2, #3
 80039a2:	400a      	ands	r2, r1
 80039a4:	00d2      	lsls	r2, r2, #3
 80039a6:	21ff      	movs	r1, #255	; 0xff
 80039a8:	4091      	lsls	r1, r2
 80039aa:	000a      	movs	r2, r1
 80039ac:	43d2      	mvns	r2, r2
 80039ae:	401a      	ands	r2, r3
 80039b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	019b      	lsls	r3, r3, #6
 80039b6:	22ff      	movs	r2, #255	; 0xff
 80039b8:	401a      	ands	r2, r3
 80039ba:	1dfb      	adds	r3, r7, #7
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	0018      	movs	r0, r3
 80039c0:	2303      	movs	r3, #3
 80039c2:	4003      	ands	r3, r0
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039c8:	481f      	ldr	r0, [pc, #124]	; (8003a48 <__NVIC_SetPriority+0xd4>)
 80039ca:	1dfb      	adds	r3, r7, #7
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	b25b      	sxtb	r3, r3
 80039d0:	089b      	lsrs	r3, r3, #2
 80039d2:	430a      	orrs	r2, r1
 80039d4:	33c0      	adds	r3, #192	; 0xc0
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80039da:	e031      	b.n	8003a40 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039dc:	4a1b      	ldr	r2, [pc, #108]	; (8003a4c <__NVIC_SetPriority+0xd8>)
 80039de:	1dfb      	adds	r3, r7, #7
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	0019      	movs	r1, r3
 80039e4:	230f      	movs	r3, #15
 80039e6:	400b      	ands	r3, r1
 80039e8:	3b08      	subs	r3, #8
 80039ea:	089b      	lsrs	r3, r3, #2
 80039ec:	3306      	adds	r3, #6
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	18d3      	adds	r3, r2, r3
 80039f2:	3304      	adds	r3, #4
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	1dfa      	adds	r2, r7, #7
 80039f8:	7812      	ldrb	r2, [r2, #0]
 80039fa:	0011      	movs	r1, r2
 80039fc:	2203      	movs	r2, #3
 80039fe:	400a      	ands	r2, r1
 8003a00:	00d2      	lsls	r2, r2, #3
 8003a02:	21ff      	movs	r1, #255	; 0xff
 8003a04:	4091      	lsls	r1, r2
 8003a06:	000a      	movs	r2, r1
 8003a08:	43d2      	mvns	r2, r2
 8003a0a:	401a      	ands	r2, r3
 8003a0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	019b      	lsls	r3, r3, #6
 8003a12:	22ff      	movs	r2, #255	; 0xff
 8003a14:	401a      	ands	r2, r3
 8003a16:	1dfb      	adds	r3, r7, #7
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	4003      	ands	r3, r0
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a24:	4809      	ldr	r0, [pc, #36]	; (8003a4c <__NVIC_SetPriority+0xd8>)
 8003a26:	1dfb      	adds	r3, r7, #7
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	001c      	movs	r4, r3
 8003a2c:	230f      	movs	r3, #15
 8003a2e:	4023      	ands	r3, r4
 8003a30:	3b08      	subs	r3, #8
 8003a32:	089b      	lsrs	r3, r3, #2
 8003a34:	430a      	orrs	r2, r1
 8003a36:	3306      	adds	r3, #6
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	18c3      	adds	r3, r0, r3
 8003a3c:	3304      	adds	r3, #4
 8003a3e:	601a      	str	r2, [r3, #0]
}
 8003a40:	46c0      	nop			; (mov r8, r8)
 8003a42:	46bd      	mov	sp, r7
 8003a44:	b003      	add	sp, #12
 8003a46:	bd90      	pop	{r4, r7, pc}
 8003a48:	e000e100 	.word	0xe000e100
 8003a4c:	e000ed00 	.word	0xe000ed00

08003a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	1e5a      	subs	r2, r3, #1
 8003a5c:	2380      	movs	r3, #128	; 0x80
 8003a5e:	045b      	lsls	r3, r3, #17
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d301      	bcc.n	8003a68 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a64:	2301      	movs	r3, #1
 8003a66:	e010      	b.n	8003a8a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a68:	4b0a      	ldr	r3, [pc, #40]	; (8003a94 <SysTick_Config+0x44>)
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	3a01      	subs	r2, #1
 8003a6e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a70:	2301      	movs	r3, #1
 8003a72:	425b      	negs	r3, r3
 8003a74:	2103      	movs	r1, #3
 8003a76:	0018      	movs	r0, r3
 8003a78:	f7ff ff7c 	bl	8003974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a7c:	4b05      	ldr	r3, [pc, #20]	; (8003a94 <SysTick_Config+0x44>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a82:	4b04      	ldr	r3, [pc, #16]	; (8003a94 <SysTick_Config+0x44>)
 8003a84:	2207      	movs	r2, #7
 8003a86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	0018      	movs	r0, r3
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	b002      	add	sp, #8
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	e000e010 	.word	0xe000e010

08003a98 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60b9      	str	r1, [r7, #8]
 8003aa0:	607a      	str	r2, [r7, #4]
 8003aa2:	210f      	movs	r1, #15
 8003aa4:	187b      	adds	r3, r7, r1
 8003aa6:	1c02      	adds	r2, r0, #0
 8003aa8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	187b      	adds	r3, r7, r1
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	b25b      	sxtb	r3, r3
 8003ab2:	0011      	movs	r1, r2
 8003ab4:	0018      	movs	r0, r3
 8003ab6:	f7ff ff5d 	bl	8003974 <__NVIC_SetPriority>
}
 8003aba:	46c0      	nop			; (mov r8, r8)
 8003abc:	46bd      	mov	sp, r7
 8003abe:	b004      	add	sp, #16
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b082      	sub	sp, #8
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	0002      	movs	r2, r0
 8003aca:	1dfb      	adds	r3, r7, #7
 8003acc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ace:	1dfb      	adds	r3, r7, #7
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	b25b      	sxtb	r3, r3
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	f7ff ff33 	bl	8003940 <__NVIC_EnableIRQ>
}
 8003ada:	46c0      	nop			; (mov r8, r8)
 8003adc:	46bd      	mov	sp, r7
 8003ade:	b002      	add	sp, #8
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b082      	sub	sp, #8
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	0018      	movs	r0, r3
 8003aee:	f7ff ffaf 	bl	8003a50 <SysTick_Config>
 8003af2:	0003      	movs	r3, r0
}
 8003af4:	0018      	movs	r0, r3
 8003af6:	46bd      	mov	sp, r7
 8003af8:	b002      	add	sp, #8
 8003afa:	bd80      	pop	{r7, pc}

08003afc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b04:	210f      	movs	r1, #15
 8003b06:	187b      	adds	r3, r7, r1
 8003b08:	2200      	movs	r2, #0
 8003b0a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2225      	movs	r2, #37	; 0x25
 8003b10:	5c9b      	ldrb	r3, [r3, r2]
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d006      	beq.n	8003b26 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2204      	movs	r2, #4
 8003b1c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003b1e:	187b      	adds	r3, r7, r1
 8003b20:	2201      	movs	r2, #1
 8003b22:	701a      	strb	r2, [r3, #0]
 8003b24:	e02a      	b.n	8003b7c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	210e      	movs	r1, #14
 8003b32:	438a      	bics	r2, r1
 8003b34:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2101      	movs	r1, #1
 8003b42:	438a      	bics	r2, r1
 8003b44:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4a:	221c      	movs	r2, #28
 8003b4c:	401a      	ands	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	2101      	movs	r1, #1
 8003b54:	4091      	lsls	r1, r2
 8003b56:	000a      	movs	r2, r1
 8003b58:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2225      	movs	r2, #37	; 0x25
 8003b5e:	2101      	movs	r1, #1
 8003b60:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2224      	movs	r2, #36	; 0x24
 8003b66:	2100      	movs	r1, #0
 8003b68:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d004      	beq.n	8003b7c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	0010      	movs	r0, r2
 8003b7a:	4798      	blx	r3
    }
  }
  return status;
 8003b7c:	230f      	movs	r3, #15
 8003b7e:	18fb      	adds	r3, r7, r3
 8003b80:	781b      	ldrb	r3, [r3, #0]
}
 8003b82:	0018      	movs	r0, r3
 8003b84:	46bd      	mov	sp, r7
 8003b86:	b004      	add	sp, #16
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b082      	sub	sp, #8
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2225      	movs	r2, #37	; 0x25
 8003b96:	5c9b      	ldrb	r3, [r3, r2]
 8003b98:	b2db      	uxtb	r3, r3
}
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	b002      	add	sp, #8
 8003ba0:	bd80      	pop	{r7, pc}
	...

08003ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003bba:	e155      	b.n	8003e68 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	4091      	lsls	r1, r2
 8003bc6:	000a      	movs	r2, r1
 8003bc8:	4013      	ands	r3, r2
 8003bca:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d100      	bne.n	8003bd4 <HAL_GPIO_Init+0x30>
 8003bd2:	e146      	b.n	8003e62 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2203      	movs	r2, #3
 8003bda:	4013      	ands	r3, r2
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d005      	beq.n	8003bec <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	2203      	movs	r2, #3
 8003be6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d130      	bne.n	8003c4e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	2203      	movs	r2, #3
 8003bf8:	409a      	lsls	r2, r3
 8003bfa:	0013      	movs	r3, r2
 8003bfc:	43da      	mvns	r2, r3
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	4013      	ands	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	68da      	ldr	r2, [r3, #12]
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	409a      	lsls	r2, r3
 8003c0e:	0013      	movs	r3, r2
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c22:	2201      	movs	r2, #1
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	409a      	lsls	r2, r3
 8003c28:	0013      	movs	r3, r2
 8003c2a:	43da      	mvns	r2, r3
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	091b      	lsrs	r3, r3, #4
 8003c38:	2201      	movs	r2, #1
 8003c3a:	401a      	ands	r2, r3
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	409a      	lsls	r2, r3
 8003c40:	0013      	movs	r3, r2
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2203      	movs	r2, #3
 8003c54:	4013      	ands	r3, r2
 8003c56:	2b03      	cmp	r3, #3
 8003c58:	d017      	beq.n	8003c8a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	2203      	movs	r2, #3
 8003c66:	409a      	lsls	r2, r3
 8003c68:	0013      	movs	r3, r2
 8003c6a:	43da      	mvns	r2, r3
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	689a      	ldr	r2, [r3, #8]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	409a      	lsls	r2, r3
 8003c7c:	0013      	movs	r3, r2
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2203      	movs	r2, #3
 8003c90:	4013      	ands	r3, r2
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d123      	bne.n	8003cde <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	08da      	lsrs	r2, r3, #3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	3208      	adds	r2, #8
 8003c9e:	0092      	lsls	r2, r2, #2
 8003ca0:	58d3      	ldr	r3, [r2, r3]
 8003ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	2207      	movs	r2, #7
 8003ca8:	4013      	ands	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	220f      	movs	r2, #15
 8003cae:	409a      	lsls	r2, r3
 8003cb0:	0013      	movs	r3, r2
 8003cb2:	43da      	mvns	r2, r3
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	691a      	ldr	r2, [r3, #16]
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	2107      	movs	r1, #7
 8003cc2:	400b      	ands	r3, r1
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	409a      	lsls	r2, r3
 8003cc8:	0013      	movs	r3, r2
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	08da      	lsrs	r2, r3, #3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3208      	adds	r2, #8
 8003cd8:	0092      	lsls	r2, r2, #2
 8003cda:	6939      	ldr	r1, [r7, #16]
 8003cdc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	005b      	lsls	r3, r3, #1
 8003ce8:	2203      	movs	r2, #3
 8003cea:	409a      	lsls	r2, r3
 8003cec:	0013      	movs	r3, r2
 8003cee:	43da      	mvns	r2, r3
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2203      	movs	r2, #3
 8003cfc:	401a      	ands	r2, r3
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	409a      	lsls	r2, r3
 8003d04:	0013      	movs	r3, r2
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	23c0      	movs	r3, #192	; 0xc0
 8003d18:	029b      	lsls	r3, r3, #10
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	d100      	bne.n	8003d20 <HAL_GPIO_Init+0x17c>
 8003d1e:	e0a0      	b.n	8003e62 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d20:	4b57      	ldr	r3, [pc, #348]	; (8003e80 <HAL_GPIO_Init+0x2dc>)
 8003d22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d24:	4b56      	ldr	r3, [pc, #344]	; (8003e80 <HAL_GPIO_Init+0x2dc>)
 8003d26:	2101      	movs	r1, #1
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d2c:	4a55      	ldr	r2, [pc, #340]	; (8003e84 <HAL_GPIO_Init+0x2e0>)
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	089b      	lsrs	r3, r3, #2
 8003d32:	3302      	adds	r3, #2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	589b      	ldr	r3, [r3, r2]
 8003d38:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	2203      	movs	r2, #3
 8003d3e:	4013      	ands	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	220f      	movs	r2, #15
 8003d44:	409a      	lsls	r2, r3
 8003d46:	0013      	movs	r3, r2
 8003d48:	43da      	mvns	r2, r3
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	23a0      	movs	r3, #160	; 0xa0
 8003d54:	05db      	lsls	r3, r3, #23
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d01f      	beq.n	8003d9a <HAL_GPIO_Init+0x1f6>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a4a      	ldr	r2, [pc, #296]	; (8003e88 <HAL_GPIO_Init+0x2e4>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d019      	beq.n	8003d96 <HAL_GPIO_Init+0x1f2>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a49      	ldr	r2, [pc, #292]	; (8003e8c <HAL_GPIO_Init+0x2e8>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d013      	beq.n	8003d92 <HAL_GPIO_Init+0x1ee>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a48      	ldr	r2, [pc, #288]	; (8003e90 <HAL_GPIO_Init+0x2ec>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d00d      	beq.n	8003d8e <HAL_GPIO_Init+0x1ea>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a47      	ldr	r2, [pc, #284]	; (8003e94 <HAL_GPIO_Init+0x2f0>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d007      	beq.n	8003d8a <HAL_GPIO_Init+0x1e6>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a46      	ldr	r2, [pc, #280]	; (8003e98 <HAL_GPIO_Init+0x2f4>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d101      	bne.n	8003d86 <HAL_GPIO_Init+0x1e2>
 8003d82:	2305      	movs	r3, #5
 8003d84:	e00a      	b.n	8003d9c <HAL_GPIO_Init+0x1f8>
 8003d86:	2306      	movs	r3, #6
 8003d88:	e008      	b.n	8003d9c <HAL_GPIO_Init+0x1f8>
 8003d8a:	2304      	movs	r3, #4
 8003d8c:	e006      	b.n	8003d9c <HAL_GPIO_Init+0x1f8>
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e004      	b.n	8003d9c <HAL_GPIO_Init+0x1f8>
 8003d92:	2302      	movs	r3, #2
 8003d94:	e002      	b.n	8003d9c <HAL_GPIO_Init+0x1f8>
 8003d96:	2301      	movs	r3, #1
 8003d98:	e000      	b.n	8003d9c <HAL_GPIO_Init+0x1f8>
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	2103      	movs	r1, #3
 8003da0:	400a      	ands	r2, r1
 8003da2:	0092      	lsls	r2, r2, #2
 8003da4:	4093      	lsls	r3, r2
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003dac:	4935      	ldr	r1, [pc, #212]	; (8003e84 <HAL_GPIO_Init+0x2e0>)
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	089b      	lsrs	r3, r3, #2
 8003db2:	3302      	adds	r3, #2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dba:	4b38      	ldr	r3, [pc, #224]	; (8003e9c <HAL_GPIO_Init+0x2f8>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	43da      	mvns	r2, r3
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	2380      	movs	r3, #128	; 0x80
 8003dd0:	035b      	lsls	r3, r3, #13
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	d003      	beq.n	8003dde <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003dde:	4b2f      	ldr	r3, [pc, #188]	; (8003e9c <HAL_GPIO_Init+0x2f8>)
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003de4:	4b2d      	ldr	r3, [pc, #180]	; (8003e9c <HAL_GPIO_Init+0x2f8>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	43da      	mvns	r2, r3
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	4013      	ands	r3, r2
 8003df2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	2380      	movs	r3, #128	; 0x80
 8003dfa:	039b      	lsls	r3, r3, #14
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	d003      	beq.n	8003e08 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003e08:	4b24      	ldr	r3, [pc, #144]	; (8003e9c <HAL_GPIO_Init+0x2f8>)
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8003e0e:	4b23      	ldr	r3, [pc, #140]	; (8003e9c <HAL_GPIO_Init+0x2f8>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	43da      	mvns	r2, r3
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	2380      	movs	r3, #128	; 0x80
 8003e24:	029b      	lsls	r3, r3, #10
 8003e26:	4013      	ands	r3, r2
 8003e28:	d003      	beq.n	8003e32 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003e32:	4b1a      	ldr	r3, [pc, #104]	; (8003e9c <HAL_GPIO_Init+0x2f8>)
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e38:	4b18      	ldr	r3, [pc, #96]	; (8003e9c <HAL_GPIO_Init+0x2f8>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	43da      	mvns	r2, r3
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	4013      	ands	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	2380      	movs	r3, #128	; 0x80
 8003e4e:	025b      	lsls	r3, r3, #9
 8003e50:	4013      	ands	r3, r2
 8003e52:	d003      	beq.n	8003e5c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003e5c:	4b0f      	ldr	r3, [pc, #60]	; (8003e9c <HAL_GPIO_Init+0x2f8>)
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	3301      	adds	r3, #1
 8003e66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	40da      	lsrs	r2, r3
 8003e70:	1e13      	subs	r3, r2, #0
 8003e72:	d000      	beq.n	8003e76 <HAL_GPIO_Init+0x2d2>
 8003e74:	e6a2      	b.n	8003bbc <HAL_GPIO_Init+0x18>
  }
}
 8003e76:	46c0      	nop			; (mov r8, r8)
 8003e78:	46c0      	nop			; (mov r8, r8)
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	b006      	add	sp, #24
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	40021000 	.word	0x40021000
 8003e84:	40010000 	.word	0x40010000
 8003e88:	50000400 	.word	0x50000400
 8003e8c:	50000800 	.word	0x50000800
 8003e90:	50000c00 	.word	0x50000c00
 8003e94:	50001000 	.word	0x50001000
 8003e98:	50001c00 	.word	0x50001c00
 8003e9c:	40010400 	.word	0x40010400

08003ea0 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	0008      	movs	r0, r1
 8003eaa:	0011      	movs	r1, r2
 8003eac:	1cbb      	adds	r3, r7, #2
 8003eae:	1c02      	adds	r2, r0, #0
 8003eb0:	801a      	strh	r2, [r3, #0]
 8003eb2:	1c7b      	adds	r3, r7, #1
 8003eb4:	1c0a      	adds	r2, r1, #0
 8003eb6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003eb8:	1c7b      	adds	r3, r7, #1
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d004      	beq.n	8003eca <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ec0:	1cbb      	adds	r3, r7, #2
 8003ec2:	881a      	ldrh	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003ec8:	e003      	b.n	8003ed2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8003eca:	1cbb      	adds	r3, r7, #2
 8003ecc:	881a      	ldrh	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ed2:	46c0      	nop			; (mov r8, r8)
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	b002      	add	sp, #8
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b084      	sub	sp, #16
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
 8003ee2:	000a      	movs	r2, r1
 8003ee4:	1cbb      	adds	r3, r7, #2
 8003ee6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003eee:	1cbb      	adds	r3, r7, #2
 8003ef0:	881b      	ldrh	r3, [r3, #0]
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	041a      	lsls	r2, r3, #16
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	43db      	mvns	r3, r3
 8003efc:	1cb9      	adds	r1, r7, #2
 8003efe:	8809      	ldrh	r1, [r1, #0]
 8003f00:	400b      	ands	r3, r1
 8003f02:	431a      	orrs	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	619a      	str	r2, [r3, #24]
}
 8003f08:	46c0      	nop			; (mov r8, r8)
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	b004      	add	sp, #16
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e082      	b.n	8004028 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2241      	movs	r2, #65	; 0x41
 8003f26:	5c9b      	ldrb	r3, [r3, r2]
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d107      	bne.n	8003f3e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2240      	movs	r2, #64	; 0x40
 8003f32:	2100      	movs	r1, #0
 8003f34:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	0018      	movs	r0, r3
 8003f3a:	f7ff fabf 	bl	80034bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2241      	movs	r2, #65	; 0x41
 8003f42:	2124      	movs	r1, #36	; 0x24
 8003f44:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2101      	movs	r1, #1
 8003f52:	438a      	bics	r2, r1
 8003f54:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4934      	ldr	r1, [pc, #208]	; (8004030 <HAL_I2C_Init+0x120>)
 8003f60:	400a      	ands	r2, r1
 8003f62:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689a      	ldr	r2, [r3, #8]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4931      	ldr	r1, [pc, #196]	; (8004034 <HAL_I2C_Init+0x124>)
 8003f70:	400a      	ands	r2, r1
 8003f72:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d108      	bne.n	8003f8e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689a      	ldr	r2, [r3, #8]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2180      	movs	r1, #128	; 0x80
 8003f86:	0209      	lsls	r1, r1, #8
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	609a      	str	r2, [r3, #8]
 8003f8c:	e007      	b.n	8003f9e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689a      	ldr	r2, [r3, #8]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2184      	movs	r1, #132	; 0x84
 8003f98:	0209      	lsls	r1, r1, #8
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d104      	bne.n	8003fb0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2280      	movs	r2, #128	; 0x80
 8003fac:	0112      	lsls	r2, r2, #4
 8003fae:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	491f      	ldr	r1, [pc, #124]	; (8004038 <HAL_I2C_Init+0x128>)
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68da      	ldr	r2, [r3, #12]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	491a      	ldr	r1, [pc, #104]	; (8004034 <HAL_I2C_Init+0x124>)
 8003fcc:	400a      	ands	r2, r1
 8003fce:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	691a      	ldr	r2, [r3, #16]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	69d9      	ldr	r1, [r3, #28]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a1a      	ldr	r2, [r3, #32]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2101      	movs	r1, #1
 8004006:	430a      	orrs	r2, r1
 8004008:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2241      	movs	r2, #65	; 0x41
 8004014:	2120      	movs	r1, #32
 8004016:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2242      	movs	r2, #66	; 0x42
 8004022:	2100      	movs	r1, #0
 8004024:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	0018      	movs	r0, r3
 800402a:	46bd      	mov	sp, r7
 800402c:	b002      	add	sp, #8
 800402e:	bd80      	pop	{r7, pc}
 8004030:	f0ffffff 	.word	0xf0ffffff
 8004034:	ffff7fff 	.word	0xffff7fff
 8004038:	02008000 	.word	0x02008000

0800403c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800403c:	b590      	push	{r4, r7, lr}
 800403e:	b089      	sub	sp, #36	; 0x24
 8004040:	af02      	add	r7, sp, #8
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	000c      	movs	r4, r1
 8004046:	0010      	movs	r0, r2
 8004048:	0019      	movs	r1, r3
 800404a:	230a      	movs	r3, #10
 800404c:	18fb      	adds	r3, r7, r3
 800404e:	1c22      	adds	r2, r4, #0
 8004050:	801a      	strh	r2, [r3, #0]
 8004052:	2308      	movs	r3, #8
 8004054:	18fb      	adds	r3, r7, r3
 8004056:	1c02      	adds	r2, r0, #0
 8004058:	801a      	strh	r2, [r3, #0]
 800405a:	1dbb      	adds	r3, r7, #6
 800405c:	1c0a      	adds	r2, r1, #0
 800405e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2241      	movs	r2, #65	; 0x41
 8004064:	5c9b      	ldrb	r3, [r3, r2]
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b20      	cmp	r3, #32
 800406a:	d000      	beq.n	800406e <HAL_I2C_Mem_Write+0x32>
 800406c:	e10c      	b.n	8004288 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800406e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004070:	2b00      	cmp	r3, #0
 8004072:	d004      	beq.n	800407e <HAL_I2C_Mem_Write+0x42>
 8004074:	232c      	movs	r3, #44	; 0x2c
 8004076:	18fb      	adds	r3, r7, r3
 8004078:	881b      	ldrh	r3, [r3, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d105      	bne.n	800408a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2280      	movs	r2, #128	; 0x80
 8004082:	0092      	lsls	r2, r2, #2
 8004084:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e0ff      	b.n	800428a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2240      	movs	r2, #64	; 0x40
 800408e:	5c9b      	ldrb	r3, [r3, r2]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d101      	bne.n	8004098 <HAL_I2C_Mem_Write+0x5c>
 8004094:	2302      	movs	r3, #2
 8004096:	e0f8      	b.n	800428a <HAL_I2C_Mem_Write+0x24e>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2240      	movs	r2, #64	; 0x40
 800409c:	2101      	movs	r1, #1
 800409e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80040a0:	f7ff fc20 	bl	80038e4 <HAL_GetTick>
 80040a4:	0003      	movs	r3, r0
 80040a6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040a8:	2380      	movs	r3, #128	; 0x80
 80040aa:	0219      	lsls	r1, r3, #8
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	2319      	movs	r3, #25
 80040b4:	2201      	movs	r2, #1
 80040b6:	f001 f881 	bl	80051bc <I2C_WaitOnFlagUntilTimeout>
 80040ba:	1e03      	subs	r3, r0, #0
 80040bc:	d001      	beq.n	80040c2 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e0e3      	b.n	800428a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2241      	movs	r2, #65	; 0x41
 80040c6:	2121      	movs	r1, #33	; 0x21
 80040c8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2242      	movs	r2, #66	; 0x42
 80040ce:	2140      	movs	r1, #64	; 0x40
 80040d0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	222c      	movs	r2, #44	; 0x2c
 80040e2:	18ba      	adds	r2, r7, r2
 80040e4:	8812      	ldrh	r2, [r2, #0]
 80040e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040ee:	1dbb      	adds	r3, r7, #6
 80040f0:	881c      	ldrh	r4, [r3, #0]
 80040f2:	2308      	movs	r3, #8
 80040f4:	18fb      	adds	r3, r7, r3
 80040f6:	881a      	ldrh	r2, [r3, #0]
 80040f8:	230a      	movs	r3, #10
 80040fa:	18fb      	adds	r3, r7, r3
 80040fc:	8819      	ldrh	r1, [r3, #0]
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	9301      	str	r3, [sp, #4]
 8004104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	0023      	movs	r3, r4
 800410a:	f000 fba5 	bl	8004858 <I2C_RequestMemoryWrite>
 800410e:	1e03      	subs	r3, r0, #0
 8004110:	d005      	beq.n	800411e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2240      	movs	r2, #64	; 0x40
 8004116:	2100      	movs	r1, #0
 8004118:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e0b5      	b.n	800428a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004122:	b29b      	uxth	r3, r3
 8004124:	2bff      	cmp	r3, #255	; 0xff
 8004126:	d911      	bls.n	800414c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	22ff      	movs	r2, #255	; 0xff
 800412c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004132:	b2da      	uxtb	r2, r3
 8004134:	2380      	movs	r3, #128	; 0x80
 8004136:	045c      	lsls	r4, r3, #17
 8004138:	230a      	movs	r3, #10
 800413a:	18fb      	adds	r3, r7, r3
 800413c:	8819      	ldrh	r1, [r3, #0]
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	2300      	movs	r3, #0
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	0023      	movs	r3, r4
 8004146:	f001 fa11 	bl	800556c <I2C_TransferConfig>
 800414a:	e012      	b.n	8004172 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004150:	b29a      	uxth	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800415a:	b2da      	uxtb	r2, r3
 800415c:	2380      	movs	r3, #128	; 0x80
 800415e:	049c      	lsls	r4, r3, #18
 8004160:	230a      	movs	r3, #10
 8004162:	18fb      	adds	r3, r7, r3
 8004164:	8819      	ldrh	r1, [r3, #0]
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	2300      	movs	r3, #0
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	0023      	movs	r3, r4
 800416e:	f001 f9fd 	bl	800556c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	0018      	movs	r0, r3
 800417a:	f001 f86d 	bl	8005258 <I2C_WaitOnTXISFlagUntilTimeout>
 800417e:	1e03      	subs	r3, r0, #0
 8004180:	d001      	beq.n	8004186 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e081      	b.n	800428a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	781a      	ldrb	r2, [r3, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004196:	1c5a      	adds	r2, r3, #1
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	3b01      	subs	r3, #1
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ae:	3b01      	subs	r3, #1
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d03a      	beq.n	8004236 <HAL_I2C_Mem_Write+0x1fa>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d136      	bne.n	8004236 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	0013      	movs	r3, r2
 80041d2:	2200      	movs	r2, #0
 80041d4:	2180      	movs	r1, #128	; 0x80
 80041d6:	f000 fff1 	bl	80051bc <I2C_WaitOnFlagUntilTimeout>
 80041da:	1e03      	subs	r3, r0, #0
 80041dc:	d001      	beq.n	80041e2 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e053      	b.n	800428a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	2bff      	cmp	r3, #255	; 0xff
 80041ea:	d911      	bls.n	8004210 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	22ff      	movs	r2, #255	; 0xff
 80041f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f6:	b2da      	uxtb	r2, r3
 80041f8:	2380      	movs	r3, #128	; 0x80
 80041fa:	045c      	lsls	r4, r3, #17
 80041fc:	230a      	movs	r3, #10
 80041fe:	18fb      	adds	r3, r7, r3
 8004200:	8819      	ldrh	r1, [r3, #0]
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	2300      	movs	r3, #0
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	0023      	movs	r3, r4
 800420a:	f001 f9af 	bl	800556c <I2C_TransferConfig>
 800420e:	e012      	b.n	8004236 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004214:	b29a      	uxth	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800421e:	b2da      	uxtb	r2, r3
 8004220:	2380      	movs	r3, #128	; 0x80
 8004222:	049c      	lsls	r4, r3, #18
 8004224:	230a      	movs	r3, #10
 8004226:	18fb      	adds	r3, r7, r3
 8004228:	8819      	ldrh	r1, [r3, #0]
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	2300      	movs	r3, #0
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	0023      	movs	r3, r4
 8004232:	f001 f99b 	bl	800556c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800423a:	b29b      	uxth	r3, r3
 800423c:	2b00      	cmp	r3, #0
 800423e:	d198      	bne.n	8004172 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	0018      	movs	r0, r3
 8004248:	f001 f84c 	bl	80052e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800424c:	1e03      	subs	r3, r0, #0
 800424e:	d001      	beq.n	8004254 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e01a      	b.n	800428a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2220      	movs	r2, #32
 800425a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	490b      	ldr	r1, [pc, #44]	; (8004294 <HAL_I2C_Mem_Write+0x258>)
 8004268:	400a      	ands	r2, r1
 800426a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2241      	movs	r2, #65	; 0x41
 8004270:	2120      	movs	r1, #32
 8004272:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2242      	movs	r2, #66	; 0x42
 8004278:	2100      	movs	r1, #0
 800427a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2240      	movs	r2, #64	; 0x40
 8004280:	2100      	movs	r1, #0
 8004282:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004284:	2300      	movs	r3, #0
 8004286:	e000      	b.n	800428a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8004288:	2302      	movs	r3, #2
  }
}
 800428a:	0018      	movs	r0, r3
 800428c:	46bd      	mov	sp, r7
 800428e:	b007      	add	sp, #28
 8004290:	bd90      	pop	{r4, r7, pc}
 8004292:	46c0      	nop			; (mov r8, r8)
 8004294:	fe00e800 	.word	0xfe00e800

08004298 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004298:	b590      	push	{r4, r7, lr}
 800429a:	b089      	sub	sp, #36	; 0x24
 800429c:	af02      	add	r7, sp, #8
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	000c      	movs	r4, r1
 80042a2:	0010      	movs	r0, r2
 80042a4:	0019      	movs	r1, r3
 80042a6:	230a      	movs	r3, #10
 80042a8:	18fb      	adds	r3, r7, r3
 80042aa:	1c22      	adds	r2, r4, #0
 80042ac:	801a      	strh	r2, [r3, #0]
 80042ae:	2308      	movs	r3, #8
 80042b0:	18fb      	adds	r3, r7, r3
 80042b2:	1c02      	adds	r2, r0, #0
 80042b4:	801a      	strh	r2, [r3, #0]
 80042b6:	1dbb      	adds	r3, r7, #6
 80042b8:	1c0a      	adds	r2, r1, #0
 80042ba:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2241      	movs	r2, #65	; 0x41
 80042c0:	5c9b      	ldrb	r3, [r3, r2]
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b20      	cmp	r3, #32
 80042c6:	d000      	beq.n	80042ca <HAL_I2C_Mem_Read+0x32>
 80042c8:	e110      	b.n	80044ec <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80042ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d004      	beq.n	80042da <HAL_I2C_Mem_Read+0x42>
 80042d0:	232c      	movs	r3, #44	; 0x2c
 80042d2:	18fb      	adds	r3, r7, r3
 80042d4:	881b      	ldrh	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d105      	bne.n	80042e6 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2280      	movs	r2, #128	; 0x80
 80042de:	0092      	lsls	r2, r2, #2
 80042e0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e103      	b.n	80044ee <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2240      	movs	r2, #64	; 0x40
 80042ea:	5c9b      	ldrb	r3, [r3, r2]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d101      	bne.n	80042f4 <HAL_I2C_Mem_Read+0x5c>
 80042f0:	2302      	movs	r3, #2
 80042f2:	e0fc      	b.n	80044ee <HAL_I2C_Mem_Read+0x256>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2240      	movs	r2, #64	; 0x40
 80042f8:	2101      	movs	r1, #1
 80042fa:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80042fc:	f7ff faf2 	bl	80038e4 <HAL_GetTick>
 8004300:	0003      	movs	r3, r0
 8004302:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004304:	2380      	movs	r3, #128	; 0x80
 8004306:	0219      	lsls	r1, r3, #8
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	2319      	movs	r3, #25
 8004310:	2201      	movs	r2, #1
 8004312:	f000 ff53 	bl	80051bc <I2C_WaitOnFlagUntilTimeout>
 8004316:	1e03      	subs	r3, r0, #0
 8004318:	d001      	beq.n	800431e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e0e7      	b.n	80044ee <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2241      	movs	r2, #65	; 0x41
 8004322:	2122      	movs	r1, #34	; 0x22
 8004324:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2242      	movs	r2, #66	; 0x42
 800432a:	2140      	movs	r1, #64	; 0x40
 800432c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004338:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	222c      	movs	r2, #44	; 0x2c
 800433e:	18ba      	adds	r2, r7, r2
 8004340:	8812      	ldrh	r2, [r2, #0]
 8004342:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800434a:	1dbb      	adds	r3, r7, #6
 800434c:	881c      	ldrh	r4, [r3, #0]
 800434e:	2308      	movs	r3, #8
 8004350:	18fb      	adds	r3, r7, r3
 8004352:	881a      	ldrh	r2, [r3, #0]
 8004354:	230a      	movs	r3, #10
 8004356:	18fb      	adds	r3, r7, r3
 8004358:	8819      	ldrh	r1, [r3, #0]
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	9301      	str	r3, [sp, #4]
 8004360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004362:	9300      	str	r3, [sp, #0]
 8004364:	0023      	movs	r3, r4
 8004366:	f000 fadb 	bl	8004920 <I2C_RequestMemoryRead>
 800436a:	1e03      	subs	r3, r0, #0
 800436c:	d005      	beq.n	800437a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2240      	movs	r2, #64	; 0x40
 8004372:	2100      	movs	r1, #0
 8004374:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e0b9      	b.n	80044ee <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437e:	b29b      	uxth	r3, r3
 8004380:	2bff      	cmp	r3, #255	; 0xff
 8004382:	d911      	bls.n	80043a8 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	22ff      	movs	r2, #255	; 0xff
 8004388:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800438e:	b2da      	uxtb	r2, r3
 8004390:	2380      	movs	r3, #128	; 0x80
 8004392:	045c      	lsls	r4, r3, #17
 8004394:	230a      	movs	r3, #10
 8004396:	18fb      	adds	r3, r7, r3
 8004398:	8819      	ldrh	r1, [r3, #0]
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	4b56      	ldr	r3, [pc, #344]	; (80044f8 <HAL_I2C_Mem_Read+0x260>)
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	0023      	movs	r3, r4
 80043a2:	f001 f8e3 	bl	800556c <I2C_TransferConfig>
 80043a6:	e012      	b.n	80043ce <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b6:	b2da      	uxtb	r2, r3
 80043b8:	2380      	movs	r3, #128	; 0x80
 80043ba:	049c      	lsls	r4, r3, #18
 80043bc:	230a      	movs	r3, #10
 80043be:	18fb      	adds	r3, r7, r3
 80043c0:	8819      	ldrh	r1, [r3, #0]
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	4b4c      	ldr	r3, [pc, #304]	; (80044f8 <HAL_I2C_Mem_Read+0x260>)
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	0023      	movs	r3, r4
 80043ca:	f001 f8cf 	bl	800556c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80043ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	0013      	movs	r3, r2
 80043d8:	2200      	movs	r2, #0
 80043da:	2104      	movs	r1, #4
 80043dc:	f000 feee 	bl	80051bc <I2C_WaitOnFlagUntilTimeout>
 80043e0:	1e03      	subs	r3, r0, #0
 80043e2:	d001      	beq.n	80043e8 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e082      	b.n	80044ee <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fa:	1c5a      	adds	r2, r3, #1
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004404:	3b01      	subs	r3, #1
 8004406:	b29a      	uxth	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004410:	b29b      	uxth	r3, r3
 8004412:	3b01      	subs	r3, #1
 8004414:	b29a      	uxth	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800441e:	b29b      	uxth	r3, r3
 8004420:	2b00      	cmp	r3, #0
 8004422:	d03a      	beq.n	800449a <HAL_I2C_Mem_Read+0x202>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004428:	2b00      	cmp	r3, #0
 800442a:	d136      	bne.n	800449a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800442c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	9300      	str	r3, [sp, #0]
 8004434:	0013      	movs	r3, r2
 8004436:	2200      	movs	r2, #0
 8004438:	2180      	movs	r1, #128	; 0x80
 800443a:	f000 febf 	bl	80051bc <I2C_WaitOnFlagUntilTimeout>
 800443e:	1e03      	subs	r3, r0, #0
 8004440:	d001      	beq.n	8004446 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e053      	b.n	80044ee <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444a:	b29b      	uxth	r3, r3
 800444c:	2bff      	cmp	r3, #255	; 0xff
 800444e:	d911      	bls.n	8004474 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	22ff      	movs	r2, #255	; 0xff
 8004454:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800445a:	b2da      	uxtb	r2, r3
 800445c:	2380      	movs	r3, #128	; 0x80
 800445e:	045c      	lsls	r4, r3, #17
 8004460:	230a      	movs	r3, #10
 8004462:	18fb      	adds	r3, r7, r3
 8004464:	8819      	ldrh	r1, [r3, #0]
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	2300      	movs	r3, #0
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	0023      	movs	r3, r4
 800446e:	f001 f87d 	bl	800556c <I2C_TransferConfig>
 8004472:	e012      	b.n	800449a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004478:	b29a      	uxth	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004482:	b2da      	uxtb	r2, r3
 8004484:	2380      	movs	r3, #128	; 0x80
 8004486:	049c      	lsls	r4, r3, #18
 8004488:	230a      	movs	r3, #10
 800448a:	18fb      	adds	r3, r7, r3
 800448c:	8819      	ldrh	r1, [r3, #0]
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	2300      	movs	r3, #0
 8004492:	9300      	str	r3, [sp, #0]
 8004494:	0023      	movs	r3, r4
 8004496:	f001 f869 	bl	800556c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449e:	b29b      	uxth	r3, r3
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d194      	bne.n	80043ce <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	0018      	movs	r0, r3
 80044ac:	f000 ff1a 	bl	80052e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80044b0:	1e03      	subs	r3, r0, #0
 80044b2:	d001      	beq.n	80044b8 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e01a      	b.n	80044ee <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2220      	movs	r2, #32
 80044be:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	490c      	ldr	r1, [pc, #48]	; (80044fc <HAL_I2C_Mem_Read+0x264>)
 80044cc:	400a      	ands	r2, r1
 80044ce:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2241      	movs	r2, #65	; 0x41
 80044d4:	2120      	movs	r1, #32
 80044d6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2242      	movs	r2, #66	; 0x42
 80044dc:	2100      	movs	r1, #0
 80044de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2240      	movs	r2, #64	; 0x40
 80044e4:	2100      	movs	r1, #0
 80044e6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80044e8:	2300      	movs	r3, #0
 80044ea:	e000      	b.n	80044ee <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80044ec:	2302      	movs	r3, #2
  }
}
 80044ee:	0018      	movs	r0, r3
 80044f0:	46bd      	mov	sp, r7
 80044f2:	b007      	add	sp, #28
 80044f4:	bd90      	pop	{r4, r7, pc}
 80044f6:	46c0      	nop			; (mov r8, r8)
 80044f8:	80002400 	.word	0x80002400
 80044fc:	fe00e800 	.word	0xfe00e800

08004500 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800451c:	2b00      	cmp	r3, #0
 800451e:	d005      	beq.n	800452c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	68f9      	ldr	r1, [r7, #12]
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	4798      	blx	r3
  }
}
 800452c:	46c0      	nop			; (mov r8, r8)
 800452e:	46bd      	mov	sp, r7
 8004530:	b004      	add	sp, #16
 8004532:	bd80      	pop	{r7, pc}

08004534 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	2380      	movs	r3, #128	; 0x80
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	4013      	ands	r3, r2
 8004554:	d00e      	beq.n	8004574 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	2280      	movs	r2, #128	; 0x80
 800455a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800455c:	d00a      	beq.n	8004574 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004562:	2201      	movs	r2, #1
 8004564:	431a      	orrs	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2280      	movs	r2, #128	; 0x80
 8004570:	0052      	lsls	r2, r2, #1
 8004572:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	2380      	movs	r3, #128	; 0x80
 8004578:	00db      	lsls	r3, r3, #3
 800457a:	4013      	ands	r3, r2
 800457c:	d00e      	beq.n	800459c <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	2280      	movs	r2, #128	; 0x80
 8004582:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004584:	d00a      	beq.n	800459c <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458a:	2208      	movs	r2, #8
 800458c:	431a      	orrs	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2280      	movs	r2, #128	; 0x80
 8004598:	00d2      	lsls	r2, r2, #3
 800459a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	2380      	movs	r3, #128	; 0x80
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4013      	ands	r3, r2
 80045a4:	d00e      	beq.n	80045c4 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	2280      	movs	r2, #128	; 0x80
 80045aa:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80045ac:	d00a      	beq.n	80045c4 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b2:	2202      	movs	r2, #2
 80045b4:	431a      	orrs	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2280      	movs	r2, #128	; 0x80
 80045c0:	0092      	lsls	r2, r2, #2
 80045c2:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c8:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	220b      	movs	r2, #11
 80045ce:	4013      	ands	r3, r2
 80045d0:	d005      	beq.n	80045de <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	0011      	movs	r1, r2
 80045d8:	0018      	movs	r0, r3
 80045da:	f000 fc83 	bl	8004ee4 <I2C_ITError>
  }
}
 80045de:	46c0      	nop			; (mov r8, r8)
 80045e0:	46bd      	mov	sp, r7
 80045e2:	b006      	add	sp, #24
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b082      	sub	sp, #8
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80045ee:	46c0      	nop			; (mov r8, r8)
 80045f0:	46bd      	mov	sp, r7
 80045f2:	b002      	add	sp, #8
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b082      	sub	sp, #8
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80045fe:	46c0      	nop			; (mov r8, r8)
 8004600:	46bd      	mov	sp, r7
 8004602:	b002      	add	sp, #8
 8004604:	bd80      	pop	{r7, pc}

08004606 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b082      	sub	sp, #8
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
 800460e:	0008      	movs	r0, r1
 8004610:	0011      	movs	r1, r2
 8004612:	1cfb      	adds	r3, r7, #3
 8004614:	1c02      	adds	r2, r0, #0
 8004616:	701a      	strb	r2, [r3, #0]
 8004618:	003b      	movs	r3, r7
 800461a:	1c0a      	adds	r2, r1, #0
 800461c:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800461e:	46c0      	nop			; (mov r8, r8)
 8004620:	46bd      	mov	sp, r7
 8004622:	b002      	add	sp, #8
 8004624:	bd80      	pop	{r7, pc}

08004626 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b082      	sub	sp, #8
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800462e:	46c0      	nop			; (mov r8, r8)
 8004630:	46bd      	mov	sp, r7
 8004632:	b002      	add	sp, #8
 8004634:	bd80      	pop	{r7, pc}

08004636 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b082      	sub	sp, #8
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800463e:	46c0      	nop			; (mov r8, r8)
 8004640:	46bd      	mov	sp, r7
 8004642:	b002      	add	sp, #8
 8004644:	bd80      	pop	{r7, pc}

08004646 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b082      	sub	sp, #8
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800464e:	46c0      	nop			; (mov r8, r8)
 8004650:	46bd      	mov	sp, r7
 8004652:	b002      	add	sp, #8
 8004654:	bd80      	pop	{r7, pc}
	...

08004658 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004668:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2240      	movs	r2, #64	; 0x40
 8004672:	5c9b      	ldrb	r3, [r3, r2]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d101      	bne.n	800467c <I2C_Slave_ISR_IT+0x24>
 8004678:	2302      	movs	r3, #2
 800467a:	e0e6      	b.n	800484a <I2C_Slave_ISR_IT+0x1f2>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2240      	movs	r2, #64	; 0x40
 8004680:	2101      	movs	r1, #1
 8004682:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	2220      	movs	r2, #32
 8004688:	4013      	ands	r3, r2
 800468a:	d009      	beq.n	80046a0 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2220      	movs	r2, #32
 8004690:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004692:	d005      	beq.n	80046a0 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	0011      	movs	r1, r2
 800469a:	0018      	movs	r0, r3
 800469c:	f000 faaa 	bl	8004bf4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	2210      	movs	r2, #16
 80046a4:	4013      	ands	r3, r2
 80046a6:	d052      	beq.n	800474e <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2210      	movs	r2, #16
 80046ac:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80046ae:	d04e      	beq.n	800474e <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d12d      	bne.n	8004716 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2241      	movs	r2, #65	; 0x41
 80046be:	5c9b      	ldrb	r3, [r3, r2]
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b28      	cmp	r3, #40	; 0x28
 80046c4:	d10b      	bne.n	80046de <I2C_Slave_ISR_IT+0x86>
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	2380      	movs	r3, #128	; 0x80
 80046ca:	049b      	lsls	r3, r3, #18
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d106      	bne.n	80046de <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	0011      	movs	r1, r2
 80046d6:	0018      	movs	r0, r3
 80046d8:	f000 fbac 	bl	8004e34 <I2C_ITListenCplt>
 80046dc:	e036      	b.n	800474c <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2241      	movs	r2, #65	; 0x41
 80046e2:	5c9b      	ldrb	r3, [r3, r2]
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b29      	cmp	r3, #41	; 0x29
 80046e8:	d110      	bne.n	800470c <I2C_Slave_ISR_IT+0xb4>
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	4a59      	ldr	r2, [pc, #356]	; (8004854 <I2C_Slave_ISR_IT+0x1fc>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d00c      	beq.n	800470c <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2210      	movs	r2, #16
 80046f8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	0018      	movs	r0, r3
 80046fe:	f000 fd1c 	bl	800513a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	0018      	movs	r0, r3
 8004706:	f000 fa11 	bl	8004b2c <I2C_ITSlaveSeqCplt>
 800470a:	e01f      	b.n	800474c <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2210      	movs	r2, #16
 8004712:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004714:	e091      	b.n	800483a <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2210      	movs	r2, #16
 800471c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004722:	2204      	movs	r2, #4
 8004724:	431a      	orrs	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d005      	beq.n	800473c <I2C_Slave_ISR_IT+0xe4>
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	2380      	movs	r3, #128	; 0x80
 8004734:	045b      	lsls	r3, r3, #17
 8004736:	429a      	cmp	r2, r3
 8004738:	d000      	beq.n	800473c <I2C_Slave_ISR_IT+0xe4>
 800473a:	e07e      	b.n	800483a <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	0011      	movs	r1, r2
 8004744:	0018      	movs	r0, r3
 8004746:	f000 fbcd 	bl	8004ee4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800474a:	e076      	b.n	800483a <I2C_Slave_ISR_IT+0x1e2>
 800474c:	e075      	b.n	800483a <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	2204      	movs	r2, #4
 8004752:	4013      	ands	r3, r2
 8004754:	d02f      	beq.n	80047b6 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2204      	movs	r2, #4
 800475a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800475c:	d02b      	beq.n	80047b6 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004762:	b29b      	uxth	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d018      	beq.n	800479a <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004772:	b2d2      	uxtb	r2, r2
 8004774:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	1c5a      	adds	r2, r3, #1
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004784:	3b01      	subs	r3, #1
 8004786:	b29a      	uxth	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004790:	b29b      	uxth	r3, r3
 8004792:	3b01      	subs	r3, #1
 8004794:	b29a      	uxth	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800479e:	b29b      	uxth	r3, r3
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d14c      	bne.n	800483e <I2C_Slave_ISR_IT+0x1e6>
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	4a2b      	ldr	r2, [pc, #172]	; (8004854 <I2C_Slave_ISR_IT+0x1fc>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d048      	beq.n	800483e <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	0018      	movs	r0, r3
 80047b0:	f000 f9bc 	bl	8004b2c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80047b4:	e043      	b.n	800483e <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	2208      	movs	r2, #8
 80047ba:	4013      	ands	r3, r2
 80047bc:	d00a      	beq.n	80047d4 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2208      	movs	r2, #8
 80047c2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80047c4:	d006      	beq.n	80047d4 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	0011      	movs	r1, r2
 80047cc:	0018      	movs	r0, r3
 80047ce:	f000 f909 	bl	80049e4 <I2C_ITAddrCplt>
 80047d2:	e035      	b.n	8004840 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	2202      	movs	r2, #2
 80047d8:	4013      	ands	r3, r2
 80047da:	d031      	beq.n	8004840 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2202      	movs	r2, #2
 80047e0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80047e2:	d02d      	beq.n	8004840 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d018      	beq.n	8004820 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f2:	781a      	ldrb	r2, [r3, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fe:	1c5a      	adds	r2, r3, #1
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004808:	b29b      	uxth	r3, r3
 800480a:	3b01      	subs	r3, #1
 800480c:	b29a      	uxth	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004816:	3b01      	subs	r3, #1
 8004818:	b29a      	uxth	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	851a      	strh	r2, [r3, #40]	; 0x28
 800481e:	e00f      	b.n	8004840 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	2380      	movs	r3, #128	; 0x80
 8004824:	045b      	lsls	r3, r3, #17
 8004826:	429a      	cmp	r2, r3
 8004828:	d002      	beq.n	8004830 <I2C_Slave_ISR_IT+0x1d8>
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d107      	bne.n	8004840 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	0018      	movs	r0, r3
 8004834:	f000 f97a 	bl	8004b2c <I2C_ITSlaveSeqCplt>
 8004838:	e002      	b.n	8004840 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 800483a:	46c0      	nop			; (mov r8, r8)
 800483c:	e000      	b.n	8004840 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 800483e:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2240      	movs	r2, #64	; 0x40
 8004844:	2100      	movs	r1, #0
 8004846:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	0018      	movs	r0, r3
 800484c:	46bd      	mov	sp, r7
 800484e:	b006      	add	sp, #24
 8004850:	bd80      	pop	{r7, pc}
 8004852:	46c0      	nop			; (mov r8, r8)
 8004854:	ffff0000 	.word	0xffff0000

08004858 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004858:	b5b0      	push	{r4, r5, r7, lr}
 800485a:	b086      	sub	sp, #24
 800485c:	af02      	add	r7, sp, #8
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	000c      	movs	r4, r1
 8004862:	0010      	movs	r0, r2
 8004864:	0019      	movs	r1, r3
 8004866:	250a      	movs	r5, #10
 8004868:	197b      	adds	r3, r7, r5
 800486a:	1c22      	adds	r2, r4, #0
 800486c:	801a      	strh	r2, [r3, #0]
 800486e:	2308      	movs	r3, #8
 8004870:	18fb      	adds	r3, r7, r3
 8004872:	1c02      	adds	r2, r0, #0
 8004874:	801a      	strh	r2, [r3, #0]
 8004876:	1dbb      	adds	r3, r7, #6
 8004878:	1c0a      	adds	r2, r1, #0
 800487a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800487c:	1dbb      	adds	r3, r7, #6
 800487e:	881b      	ldrh	r3, [r3, #0]
 8004880:	b2da      	uxtb	r2, r3
 8004882:	2380      	movs	r3, #128	; 0x80
 8004884:	045c      	lsls	r4, r3, #17
 8004886:	197b      	adds	r3, r7, r5
 8004888:	8819      	ldrh	r1, [r3, #0]
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	4b23      	ldr	r3, [pc, #140]	; (800491c <I2C_RequestMemoryWrite+0xc4>)
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	0023      	movs	r3, r4
 8004892:	f000 fe6b 	bl	800556c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004898:	6a39      	ldr	r1, [r7, #32]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	0018      	movs	r0, r3
 800489e:	f000 fcdb 	bl	8005258 <I2C_WaitOnTXISFlagUntilTimeout>
 80048a2:	1e03      	subs	r3, r0, #0
 80048a4:	d001      	beq.n	80048aa <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e033      	b.n	8004912 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048aa:	1dbb      	adds	r3, r7, #6
 80048ac:	881b      	ldrh	r3, [r3, #0]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d107      	bne.n	80048c2 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048b2:	2308      	movs	r3, #8
 80048b4:	18fb      	adds	r3, r7, r3
 80048b6:	881b      	ldrh	r3, [r3, #0]
 80048b8:	b2da      	uxtb	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	629a      	str	r2, [r3, #40]	; 0x28
 80048c0:	e019      	b.n	80048f6 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80048c2:	2308      	movs	r3, #8
 80048c4:	18fb      	adds	r3, r7, r3
 80048c6:	881b      	ldrh	r3, [r3, #0]
 80048c8:	0a1b      	lsrs	r3, r3, #8
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	b2da      	uxtb	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d6:	6a39      	ldr	r1, [r7, #32]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	0018      	movs	r0, r3
 80048dc:	f000 fcbc 	bl	8005258 <I2C_WaitOnTXISFlagUntilTimeout>
 80048e0:	1e03      	subs	r3, r0, #0
 80048e2:	d001      	beq.n	80048e8 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e014      	b.n	8004912 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048e8:	2308      	movs	r3, #8
 80048ea:	18fb      	adds	r3, r7, r3
 80048ec:	881b      	ldrh	r3, [r3, #0]
 80048ee:	b2da      	uxtb	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80048f6:	6a3a      	ldr	r2, [r7, #32]
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	9300      	str	r3, [sp, #0]
 80048fe:	0013      	movs	r3, r2
 8004900:	2200      	movs	r2, #0
 8004902:	2180      	movs	r1, #128	; 0x80
 8004904:	f000 fc5a 	bl	80051bc <I2C_WaitOnFlagUntilTimeout>
 8004908:	1e03      	subs	r3, r0, #0
 800490a:	d001      	beq.n	8004910 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e000      	b.n	8004912 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	0018      	movs	r0, r3
 8004914:	46bd      	mov	sp, r7
 8004916:	b004      	add	sp, #16
 8004918:	bdb0      	pop	{r4, r5, r7, pc}
 800491a:	46c0      	nop			; (mov r8, r8)
 800491c:	80002000 	.word	0x80002000

08004920 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004920:	b5b0      	push	{r4, r5, r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af02      	add	r7, sp, #8
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	000c      	movs	r4, r1
 800492a:	0010      	movs	r0, r2
 800492c:	0019      	movs	r1, r3
 800492e:	250a      	movs	r5, #10
 8004930:	197b      	adds	r3, r7, r5
 8004932:	1c22      	adds	r2, r4, #0
 8004934:	801a      	strh	r2, [r3, #0]
 8004936:	2308      	movs	r3, #8
 8004938:	18fb      	adds	r3, r7, r3
 800493a:	1c02      	adds	r2, r0, #0
 800493c:	801a      	strh	r2, [r3, #0]
 800493e:	1dbb      	adds	r3, r7, #6
 8004940:	1c0a      	adds	r2, r1, #0
 8004942:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004944:	1dbb      	adds	r3, r7, #6
 8004946:	881b      	ldrh	r3, [r3, #0]
 8004948:	b2da      	uxtb	r2, r3
 800494a:	197b      	adds	r3, r7, r5
 800494c:	8819      	ldrh	r1, [r3, #0]
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	4b23      	ldr	r3, [pc, #140]	; (80049e0 <I2C_RequestMemoryRead+0xc0>)
 8004952:	9300      	str	r3, [sp, #0]
 8004954:	2300      	movs	r3, #0
 8004956:	f000 fe09 	bl	800556c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800495a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800495c:	6a39      	ldr	r1, [r7, #32]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	0018      	movs	r0, r3
 8004962:	f000 fc79 	bl	8005258 <I2C_WaitOnTXISFlagUntilTimeout>
 8004966:	1e03      	subs	r3, r0, #0
 8004968:	d001      	beq.n	800496e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e033      	b.n	80049d6 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800496e:	1dbb      	adds	r3, r7, #6
 8004970:	881b      	ldrh	r3, [r3, #0]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d107      	bne.n	8004986 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004976:	2308      	movs	r3, #8
 8004978:	18fb      	adds	r3, r7, r3
 800497a:	881b      	ldrh	r3, [r3, #0]
 800497c:	b2da      	uxtb	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	629a      	str	r2, [r3, #40]	; 0x28
 8004984:	e019      	b.n	80049ba <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004986:	2308      	movs	r3, #8
 8004988:	18fb      	adds	r3, r7, r3
 800498a:	881b      	ldrh	r3, [r3, #0]
 800498c:	0a1b      	lsrs	r3, r3, #8
 800498e:	b29b      	uxth	r3, r3
 8004990:	b2da      	uxtb	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800499a:	6a39      	ldr	r1, [r7, #32]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	0018      	movs	r0, r3
 80049a0:	f000 fc5a 	bl	8005258 <I2C_WaitOnTXISFlagUntilTimeout>
 80049a4:	1e03      	subs	r3, r0, #0
 80049a6:	d001      	beq.n	80049ac <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e014      	b.n	80049d6 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049ac:	2308      	movs	r3, #8
 80049ae:	18fb      	adds	r3, r7, r3
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80049ba:	6a3a      	ldr	r2, [r7, #32]
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c0:	9300      	str	r3, [sp, #0]
 80049c2:	0013      	movs	r3, r2
 80049c4:	2200      	movs	r2, #0
 80049c6:	2140      	movs	r1, #64	; 0x40
 80049c8:	f000 fbf8 	bl	80051bc <I2C_WaitOnFlagUntilTimeout>
 80049cc:	1e03      	subs	r3, r0, #0
 80049ce:	d001      	beq.n	80049d4 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e000      	b.n	80049d6 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	0018      	movs	r0, r3
 80049d8:	46bd      	mov	sp, r7
 80049da:	b004      	add	sp, #16
 80049dc:	bdb0      	pop	{r4, r5, r7, pc}
 80049de:	46c0      	nop			; (mov r8, r8)
 80049e0:	80002000 	.word	0x80002000

080049e4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80049e4:	b5b0      	push	{r4, r5, r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2241      	movs	r2, #65	; 0x41
 80049f2:	5c9b      	ldrb	r3, [r3, r2]
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	001a      	movs	r2, r3
 80049f8:	2328      	movs	r3, #40	; 0x28
 80049fa:	4013      	ands	r3, r2
 80049fc:	2b28      	cmp	r3, #40	; 0x28
 80049fe:	d000      	beq.n	8004a02 <I2C_ITAddrCplt+0x1e>
 8004a00:	e088      	b.n	8004b14 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	0c1b      	lsrs	r3, r3, #16
 8004a0a:	b2da      	uxtb	r2, r3
 8004a0c:	250f      	movs	r5, #15
 8004a0e:	197b      	adds	r3, r7, r5
 8004a10:	2101      	movs	r1, #1
 8004a12:	400a      	ands	r2, r1
 8004a14:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	0c1b      	lsrs	r3, r3, #16
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	200c      	movs	r0, #12
 8004a22:	183b      	adds	r3, r7, r0
 8004a24:	21fe      	movs	r1, #254	; 0xfe
 8004a26:	400a      	ands	r2, r1
 8004a28:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	240a      	movs	r4, #10
 8004a34:	193b      	adds	r3, r7, r4
 8004a36:	0592      	lsls	r2, r2, #22
 8004a38:	0d92      	lsrs	r2, r2, #22
 8004a3a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	2308      	movs	r3, #8
 8004a46:	18fb      	adds	r3, r7, r3
 8004a48:	21fe      	movs	r1, #254	; 0xfe
 8004a4a:	400a      	ands	r2, r1
 8004a4c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d148      	bne.n	8004ae8 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004a56:	0021      	movs	r1, r4
 8004a58:	187b      	adds	r3, r7, r1
 8004a5a:	881b      	ldrh	r3, [r3, #0]
 8004a5c:	09db      	lsrs	r3, r3, #7
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	183b      	adds	r3, r7, r0
 8004a62:	881b      	ldrh	r3, [r3, #0]
 8004a64:	4053      	eors	r3, r2
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	001a      	movs	r2, r3
 8004a6a:	2306      	movs	r3, #6
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	d120      	bne.n	8004ab2 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8004a70:	183b      	adds	r3, r7, r0
 8004a72:	187a      	adds	r2, r7, r1
 8004a74:	8812      	ldrh	r2, [r2, #0]
 8004a76:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a7c:	1c5a      	adds	r2, r3, #1
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d14c      	bne.n	8004b24 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2208      	movs	r2, #8
 8004a96:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2240      	movs	r2, #64	; 0x40
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004aa0:	183b      	adds	r3, r7, r0
 8004aa2:	881a      	ldrh	r2, [r3, #0]
 8004aa4:	197b      	adds	r3, r7, r5
 8004aa6:	7819      	ldrb	r1, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	0018      	movs	r0, r3
 8004aac:	f7ff fdab 	bl	8004606 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004ab0:	e038      	b.n	8004b24 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8004ab2:	240c      	movs	r4, #12
 8004ab4:	193b      	adds	r3, r7, r4
 8004ab6:	2208      	movs	r2, #8
 8004ab8:	18ba      	adds	r2, r7, r2
 8004aba:	8812      	ldrh	r2, [r2, #0]
 8004abc:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004abe:	2380      	movs	r3, #128	; 0x80
 8004ac0:	021a      	lsls	r2, r3, #8
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	0011      	movs	r1, r2
 8004ac6:	0018      	movs	r0, r3
 8004ac8:	f000 fd8a 	bl	80055e0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2240      	movs	r2, #64	; 0x40
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004ad4:	193b      	adds	r3, r7, r4
 8004ad6:	881a      	ldrh	r2, [r3, #0]
 8004ad8:	230f      	movs	r3, #15
 8004ada:	18fb      	adds	r3, r7, r3
 8004adc:	7819      	ldrb	r1, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	f7ff fd90 	bl	8004606 <HAL_I2C_AddrCallback>
}
 8004ae6:	e01d      	b.n	8004b24 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004ae8:	2380      	movs	r3, #128	; 0x80
 8004aea:	021a      	lsls	r2, r3, #8
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	0011      	movs	r1, r2
 8004af0:	0018      	movs	r0, r3
 8004af2:	f000 fd75 	bl	80055e0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2240      	movs	r2, #64	; 0x40
 8004afa:	2100      	movs	r1, #0
 8004afc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004afe:	230c      	movs	r3, #12
 8004b00:	18fb      	adds	r3, r7, r3
 8004b02:	881a      	ldrh	r2, [r3, #0]
 8004b04:	230f      	movs	r3, #15
 8004b06:	18fb      	adds	r3, r7, r3
 8004b08:	7819      	ldrb	r1, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	f7ff fd7a 	bl	8004606 <HAL_I2C_AddrCallback>
}
 8004b12:	e007      	b.n	8004b24 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2208      	movs	r2, #8
 8004b1a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2240      	movs	r2, #64	; 0x40
 8004b20:	2100      	movs	r1, #0
 8004b22:	5499      	strb	r1, [r3, r2]
}
 8004b24:	46c0      	nop			; (mov r8, r8)
 8004b26:	46bd      	mov	sp, r7
 8004b28:	b004      	add	sp, #16
 8004b2a:	bdb0      	pop	{r4, r5, r7, pc}

08004b2c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2242      	movs	r2, #66	; 0x42
 8004b40:	2100      	movs	r1, #0
 8004b42:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	2380      	movs	r3, #128	; 0x80
 8004b48:	01db      	lsls	r3, r3, #7
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	d008      	beq.n	8004b60 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4924      	ldr	r1, [pc, #144]	; (8004bec <I2C_ITSlaveSeqCplt+0xc0>)
 8004b5a:	400a      	ands	r2, r1
 8004b5c:	601a      	str	r2, [r3, #0]
 8004b5e:	e00c      	b.n	8004b7a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	2380      	movs	r3, #128	; 0x80
 8004b64:	021b      	lsls	r3, r3, #8
 8004b66:	4013      	ands	r3, r2
 8004b68:	d007      	beq.n	8004b7a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	491e      	ldr	r1, [pc, #120]	; (8004bf0 <I2C_ITSlaveSeqCplt+0xc4>)
 8004b76:	400a      	ands	r2, r1
 8004b78:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2241      	movs	r2, #65	; 0x41
 8004b7e:	5c9b      	ldrb	r3, [r3, r2]
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b29      	cmp	r3, #41	; 0x29
 8004b84:	d114      	bne.n	8004bb0 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2241      	movs	r2, #65	; 0x41
 8004b8a:	2128      	movs	r1, #40	; 0x28
 8004b8c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2221      	movs	r2, #33	; 0x21
 8004b92:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2101      	movs	r1, #1
 8004b98:	0018      	movs	r0, r3
 8004b9a:	f000 fd21 	bl	80055e0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2240      	movs	r2, #64	; 0x40
 8004ba2:	2100      	movs	r1, #0
 8004ba4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	0018      	movs	r0, r3
 8004baa:	f7ff fd1c 	bl	80045e6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004bae:	e019      	b.n	8004be4 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2241      	movs	r2, #65	; 0x41
 8004bb4:	5c9b      	ldrb	r3, [r3, r2]
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b2a      	cmp	r3, #42	; 0x2a
 8004bba:	d113      	bne.n	8004be4 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2241      	movs	r2, #65	; 0x41
 8004bc0:	2128      	movs	r1, #40	; 0x28
 8004bc2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2222      	movs	r2, #34	; 0x22
 8004bc8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2102      	movs	r1, #2
 8004bce:	0018      	movs	r0, r3
 8004bd0:	f000 fd06 	bl	80055e0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2240      	movs	r2, #64	; 0x40
 8004bd8:	2100      	movs	r1, #0
 8004bda:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	0018      	movs	r0, r3
 8004be0:	f7ff fd09 	bl	80045f6 <HAL_I2C_SlaveRxCpltCallback>
}
 8004be4:	46c0      	nop			; (mov r8, r8)
 8004be6:	46bd      	mov	sp, r7
 8004be8:	b004      	add	sp, #16
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	ffffbfff 	.word	0xffffbfff
 8004bf0:	ffff7fff 	.word	0xffff7fff

08004bf4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004c0a:	200f      	movs	r0, #15
 8004c0c:	183b      	adds	r3, r7, r0
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	2141      	movs	r1, #65	; 0x41
 8004c12:	5c52      	ldrb	r2, [r2, r1]
 8004c14:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004c1e:	183b      	adds	r3, r7, r0
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	2b21      	cmp	r3, #33	; 0x21
 8004c24:	d003      	beq.n	8004c2e <I2C_ITSlaveCplt+0x3a>
 8004c26:	183b      	adds	r3, r7, r0
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	2b29      	cmp	r3, #41	; 0x29
 8004c2c:	d109      	bne.n	8004c42 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004c2e:	4a7b      	ldr	r2, [pc, #492]	; (8004e1c <I2C_ITSlaveCplt+0x228>)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	0011      	movs	r1, r2
 8004c34:	0018      	movs	r0, r3
 8004c36:	f000 fcd3 	bl	80055e0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2221      	movs	r2, #33	; 0x21
 8004c3e:	631a      	str	r2, [r3, #48]	; 0x30
 8004c40:	e011      	b.n	8004c66 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c42:	220f      	movs	r2, #15
 8004c44:	18bb      	adds	r3, r7, r2
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	2b22      	cmp	r3, #34	; 0x22
 8004c4a:	d003      	beq.n	8004c54 <I2C_ITSlaveCplt+0x60>
 8004c4c:	18bb      	adds	r3, r7, r2
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2b2a      	cmp	r3, #42	; 0x2a
 8004c52:	d108      	bne.n	8004c66 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004c54:	4a72      	ldr	r2, [pc, #456]	; (8004e20 <I2C_ITSlaveCplt+0x22c>)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	0011      	movs	r1, r2
 8004c5a:	0018      	movs	r0, r3
 8004c5c:	f000 fcc0 	bl	80055e0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2222      	movs	r2, #34	; 0x22
 8004c64:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2180      	movs	r1, #128	; 0x80
 8004c72:	0209      	lsls	r1, r1, #8
 8004c74:	430a      	orrs	r2, r1
 8004c76:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4968      	ldr	r1, [pc, #416]	; (8004e24 <I2C_ITSlaveCplt+0x230>)
 8004c84:	400a      	ands	r2, r1
 8004c86:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	0018      	movs	r0, r3
 8004c8c:	f000 fa55 	bl	800513a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	2380      	movs	r3, #128	; 0x80
 8004c94:	01db      	lsls	r3, r3, #7
 8004c96:	4013      	ands	r3, r2
 8004c98:	d013      	beq.n	8004cc2 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4960      	ldr	r1, [pc, #384]	; (8004e28 <I2C_ITSlaveCplt+0x234>)
 8004ca6:	400a      	ands	r2, r1
 8004ca8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d01f      	beq.n	8004cf2 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cc0:	e017      	b.n	8004cf2 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	2380      	movs	r3, #128	; 0x80
 8004cc6:	021b      	lsls	r3, r3, #8
 8004cc8:	4013      	ands	r3, r2
 8004cca:	d012      	beq.n	8004cf2 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4955      	ldr	r1, [pc, #340]	; (8004e2c <I2C_ITSlaveCplt+0x238>)
 8004cd8:	400a      	ands	r2, r1
 8004cda:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d006      	beq.n	8004cf2 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	2204      	movs	r2, #4
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	d020      	beq.n	8004d3c <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	2204      	movs	r2, #4
 8004cfe:	4393      	bics	r3, r2
 8004d00:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0c:	b2d2      	uxtb	r2, r2
 8004d0e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	1c5a      	adds	r2, r3, #1
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00c      	beq.n	8004d3c <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d26:	3b01      	subs	r3, #1
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	3b01      	subs	r3, #1
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d005      	beq.n	8004d52 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d4a:	2204      	movs	r2, #4
 8004d4c:	431a      	orrs	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2242      	movs	r2, #66	; 0x42
 8004d56:	2100      	movs	r1, #0
 8004d58:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d013      	beq.n	8004d90 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	0011      	movs	r1, r2
 8004d70:	0018      	movs	r0, r3
 8004d72:	f000 f8b7 	bl	8004ee4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2241      	movs	r2, #65	; 0x41
 8004d7a:	5c9b      	ldrb	r3, [r3, r2]
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b28      	cmp	r3, #40	; 0x28
 8004d80:	d147      	bne.n	8004e12 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	0011      	movs	r1, r2
 8004d88:	0018      	movs	r0, r3
 8004d8a:	f000 f853 	bl	8004e34 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d8e:	e040      	b.n	8004e12 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d94:	4a26      	ldr	r2, [pc, #152]	; (8004e30 <I2C_ITSlaveCplt+0x23c>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d016      	beq.n	8004dc8 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	0018      	movs	r0, r3
 8004d9e:	f7ff fec5 	bl	8004b2c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a22      	ldr	r2, [pc, #136]	; (8004e30 <I2C_ITSlaveCplt+0x23c>)
 8004da6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2241      	movs	r2, #65	; 0x41
 8004dac:	2120      	movs	r1, #32
 8004dae:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2240      	movs	r2, #64	; 0x40
 8004dba:	2100      	movs	r1, #0
 8004dbc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	0018      	movs	r0, r3
 8004dc2:	f7ff fc30 	bl	8004626 <HAL_I2C_ListenCpltCallback>
}
 8004dc6:	e024      	b.n	8004e12 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2241      	movs	r2, #65	; 0x41
 8004dcc:	5c9b      	ldrb	r3, [r3, r2]
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b22      	cmp	r3, #34	; 0x22
 8004dd2:	d10f      	bne.n	8004df4 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2241      	movs	r2, #65	; 0x41
 8004dd8:	2120      	movs	r1, #32
 8004dda:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2240      	movs	r2, #64	; 0x40
 8004de6:	2100      	movs	r1, #0
 8004de8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	0018      	movs	r0, r3
 8004dee:	f7ff fc02 	bl	80045f6 <HAL_I2C_SlaveRxCpltCallback>
}
 8004df2:	e00e      	b.n	8004e12 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2241      	movs	r2, #65	; 0x41
 8004df8:	2120      	movs	r1, #32
 8004dfa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2240      	movs	r2, #64	; 0x40
 8004e06:	2100      	movs	r1, #0
 8004e08:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	f7ff fbea 	bl	80045e6 <HAL_I2C_SlaveTxCpltCallback>
}
 8004e12:	46c0      	nop			; (mov r8, r8)
 8004e14:	46bd      	mov	sp, r7
 8004e16:	b006      	add	sp, #24
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	46c0      	nop			; (mov r8, r8)
 8004e1c:	00008001 	.word	0x00008001
 8004e20:	00008002 	.word	0x00008002
 8004e24:	fe00e800 	.word	0xfe00e800
 8004e28:	ffffbfff 	.word	0xffffbfff
 8004e2c:	ffff7fff 	.word	0xffff7fff
 8004e30:	ffff0000 	.word	0xffff0000

08004e34 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a26      	ldr	r2, [pc, #152]	; (8004edc <I2C_ITListenCplt+0xa8>)
 8004e42:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2241      	movs	r2, #65	; 0x41
 8004e4e:	2120      	movs	r1, #32
 8004e50:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2242      	movs	r2, #66	; 0x42
 8004e56:	2100      	movs	r1, #0
 8004e58:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	2204      	movs	r2, #4
 8004e64:	4013      	ands	r3, r2
 8004e66:	d022      	beq.n	8004eae <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e72:	b2d2      	uxtb	r2, r2
 8004e74:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7a:	1c5a      	adds	r2, r3, #1
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d012      	beq.n	8004eae <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea6:	2204      	movs	r2, #4
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004eae:	4a0c      	ldr	r2, [pc, #48]	; (8004ee0 <I2C_ITListenCplt+0xac>)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	0011      	movs	r1, r2
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	f000 fb93 	bl	80055e0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2210      	movs	r2, #16
 8004ec0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2240      	movs	r2, #64	; 0x40
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	0018      	movs	r0, r3
 8004ece:	f7ff fbaa 	bl	8004626 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004ed2:	46c0      	nop			; (mov r8, r8)
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	b002      	add	sp, #8
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	46c0      	nop			; (mov r8, r8)
 8004edc:	ffff0000 	.word	0xffff0000
 8004ee0:	00008003 	.word	0x00008003

08004ee4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004eee:	200f      	movs	r0, #15
 8004ef0:	183b      	adds	r3, r7, r0
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	2141      	movs	r1, #65	; 0x41
 8004ef6:	5c52      	ldrb	r2, [r2, r1]
 8004ef8:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2242      	movs	r2, #66	; 0x42
 8004efe:	2100      	movs	r1, #0
 8004f00:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a72      	ldr	r2, [pc, #456]	; (80050d0 <I2C_ITError+0x1ec>)
 8004f06:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	431a      	orrs	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004f1a:	183b      	adds	r3, r7, r0
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	2b28      	cmp	r3, #40	; 0x28
 8004f20:	d007      	beq.n	8004f32 <I2C_ITError+0x4e>
 8004f22:	183b      	adds	r3, r7, r0
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	2b29      	cmp	r3, #41	; 0x29
 8004f28:	d003      	beq.n	8004f32 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004f2a:	183b      	adds	r3, r7, r0
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	2b2a      	cmp	r3, #42	; 0x2a
 8004f30:	d10c      	bne.n	8004f4c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2103      	movs	r1, #3
 8004f36:	0018      	movs	r0, r3
 8004f38:	f000 fb52 	bl	80055e0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2241      	movs	r2, #65	; 0x41
 8004f40:	2128      	movs	r1, #40	; 0x28
 8004f42:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a63      	ldr	r2, [pc, #396]	; (80050d4 <I2C_ITError+0x1f0>)
 8004f48:	635a      	str	r2, [r3, #52]	; 0x34
 8004f4a:	e032      	b.n	8004fb2 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004f4c:	4a62      	ldr	r2, [pc, #392]	; (80050d8 <I2C_ITError+0x1f4>)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	0011      	movs	r1, r2
 8004f52:	0018      	movs	r0, r3
 8004f54:	f000 fb44 	bl	80055e0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	0018      	movs	r0, r3
 8004f5c:	f000 f8ed 	bl	800513a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2241      	movs	r2, #65	; 0x41
 8004f64:	5c9b      	ldrb	r3, [r3, r2]
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b60      	cmp	r3, #96	; 0x60
 8004f6a:	d01f      	beq.n	8004fac <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2241      	movs	r2, #65	; 0x41
 8004f70:	2120      	movs	r1, #32
 8004f72:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	2b20      	cmp	r3, #32
 8004f80:	d114      	bne.n	8004fac <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	2210      	movs	r2, #16
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	2b10      	cmp	r3, #16
 8004f8e:	d109      	bne.n	8004fa4 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2210      	movs	r2, #16
 8004f96:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f9c:	2204      	movs	r2, #4
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2220      	movs	r2, #32
 8004faa:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d03b      	beq.n	8005038 <I2C_ITError+0x154>
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	2b11      	cmp	r3, #17
 8004fc4:	d002      	beq.n	8004fcc <I2C_ITError+0xe8>
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	2b21      	cmp	r3, #33	; 0x21
 8004fca:	d135      	bne.n	8005038 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	2380      	movs	r3, #128	; 0x80
 8004fd4:	01db      	lsls	r3, r3, #7
 8004fd6:	401a      	ands	r2, r3
 8004fd8:	2380      	movs	r3, #128	; 0x80
 8004fda:	01db      	lsls	r3, r3, #7
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d107      	bne.n	8004ff0 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	493c      	ldr	r1, [pc, #240]	; (80050dc <I2C_ITError+0x1f8>)
 8004fec:	400a      	ands	r2, r1
 8004fee:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff4:	0018      	movs	r0, r3
 8004ff6:	f7fe fdc8 	bl	8003b8a <HAL_DMA_GetState>
 8004ffa:	0003      	movs	r3, r0
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d016      	beq.n	800502e <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005004:	4a36      	ldr	r2, [pc, #216]	; (80050e0 <I2C_ITError+0x1fc>)
 8005006:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2240      	movs	r2, #64	; 0x40
 800500c:	2100      	movs	r1, #0
 800500e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005014:	0018      	movs	r0, r3
 8005016:	f7fe fd71 	bl	8003afc <HAL_DMA_Abort_IT>
 800501a:	1e03      	subs	r3, r0, #0
 800501c:	d051      	beq.n	80050c2 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005022:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005028:	0018      	movs	r0, r3
 800502a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800502c:	e049      	b.n	80050c2 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	0018      	movs	r0, r3
 8005032:	f000 f859 	bl	80050e8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005036:	e044      	b.n	80050c2 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800503c:	2b00      	cmp	r3, #0
 800503e:	d03b      	beq.n	80050b8 <I2C_ITError+0x1d4>
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	2b12      	cmp	r3, #18
 8005044:	d002      	beq.n	800504c <I2C_ITError+0x168>
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	2b22      	cmp	r3, #34	; 0x22
 800504a:	d135      	bne.n	80050b8 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	2380      	movs	r3, #128	; 0x80
 8005054:	021b      	lsls	r3, r3, #8
 8005056:	401a      	ands	r2, r3
 8005058:	2380      	movs	r3, #128	; 0x80
 800505a:	021b      	lsls	r3, r3, #8
 800505c:	429a      	cmp	r2, r3
 800505e:	d107      	bne.n	8005070 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	491e      	ldr	r1, [pc, #120]	; (80050e4 <I2C_ITError+0x200>)
 800506c:	400a      	ands	r2, r1
 800506e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005074:	0018      	movs	r0, r3
 8005076:	f7fe fd88 	bl	8003b8a <HAL_DMA_GetState>
 800507a:	0003      	movs	r3, r0
 800507c:	2b01      	cmp	r3, #1
 800507e:	d016      	beq.n	80050ae <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005084:	4a16      	ldr	r2, [pc, #88]	; (80050e0 <I2C_ITError+0x1fc>)
 8005086:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2240      	movs	r2, #64	; 0x40
 800508c:	2100      	movs	r1, #0
 800508e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005094:	0018      	movs	r0, r3
 8005096:	f7fe fd31 	bl	8003afc <HAL_DMA_Abort_IT>
 800509a:	1e03      	subs	r3, r0, #0
 800509c:	d013      	beq.n	80050c6 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a8:	0018      	movs	r0, r3
 80050aa:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80050ac:	e00b      	b.n	80050c6 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	0018      	movs	r0, r3
 80050b2:	f000 f819 	bl	80050e8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80050b6:	e006      	b.n	80050c6 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	0018      	movs	r0, r3
 80050bc:	f000 f814 	bl	80050e8 <I2C_TreatErrorCallback>
  }
}
 80050c0:	e002      	b.n	80050c8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80050c2:	46c0      	nop			; (mov r8, r8)
 80050c4:	e000      	b.n	80050c8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80050c6:	46c0      	nop			; (mov r8, r8)
}
 80050c8:	46c0      	nop			; (mov r8, r8)
 80050ca:	46bd      	mov	sp, r7
 80050cc:	b004      	add	sp, #16
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	ffff0000 	.word	0xffff0000
 80050d4:	08004659 	.word	0x08004659
 80050d8:	00008003 	.word	0x00008003
 80050dc:	ffffbfff 	.word	0xffffbfff
 80050e0:	0800517f 	.word	0x0800517f
 80050e4:	ffff7fff 	.word	0xffff7fff

080050e8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2241      	movs	r2, #65	; 0x41
 80050f4:	5c9b      	ldrb	r3, [r3, r2]
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	2b60      	cmp	r3, #96	; 0x60
 80050fa:	d10f      	bne.n	800511c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2241      	movs	r2, #65	; 0x41
 8005100:	2120      	movs	r1, #32
 8005102:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2240      	movs	r2, #64	; 0x40
 800510e:	2100      	movs	r1, #0
 8005110:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	0018      	movs	r0, r3
 8005116:	f7ff fa96 	bl	8004646 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800511a:	e00a      	b.n	8005132 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2240      	movs	r2, #64	; 0x40
 8005126:	2100      	movs	r1, #0
 8005128:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	0018      	movs	r0, r3
 800512e:	f7ff fa82 	bl	8004636 <HAL_I2C_ErrorCallback>
}
 8005132:	46c0      	nop			; (mov r8, r8)
 8005134:	46bd      	mov	sp, r7
 8005136:	b002      	add	sp, #8
 8005138:	bd80      	pop	{r7, pc}

0800513a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800513a:	b580      	push	{r7, lr}
 800513c:	b082      	sub	sp, #8
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	2202      	movs	r2, #2
 800514a:	4013      	ands	r3, r2
 800514c:	2b02      	cmp	r3, #2
 800514e:	d103      	bne.n	8005158 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2200      	movs	r2, #0
 8005156:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	2201      	movs	r2, #1
 8005160:	4013      	ands	r3, r2
 8005162:	2b01      	cmp	r3, #1
 8005164:	d007      	beq.n	8005176 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	699a      	ldr	r2, [r3, #24]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2101      	movs	r1, #1
 8005172:	430a      	orrs	r2, r1
 8005174:	619a      	str	r2, [r3, #24]
  }
}
 8005176:	46c0      	nop			; (mov r8, r8)
 8005178:	46bd      	mov	sp, r7
 800517a:	b002      	add	sp, #8
 800517c:	bd80      	pop	{r7, pc}

0800517e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b084      	sub	sp, #16
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005190:	2b00      	cmp	r3, #0
 8005192:	d003      	beq.n	800519c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005198:	2200      	movs	r2, #0
 800519a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d003      	beq.n	80051ac <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a8:	2200      	movs	r2, #0
 80051aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	0018      	movs	r0, r3
 80051b0:	f7ff ff9a 	bl	80050e8 <I2C_TreatErrorCallback>
}
 80051b4:	46c0      	nop			; (mov r8, r8)
 80051b6:	46bd      	mov	sp, r7
 80051b8:	b004      	add	sp, #16
 80051ba:	bd80      	pop	{r7, pc}

080051bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	603b      	str	r3, [r7, #0]
 80051c8:	1dfb      	adds	r3, r7, #7
 80051ca:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051cc:	e030      	b.n	8005230 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	3301      	adds	r3, #1
 80051d2:	d02d      	beq.n	8005230 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051d4:	f7fe fb86 	bl	80038e4 <HAL_GetTick>
 80051d8:	0002      	movs	r2, r0
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	683a      	ldr	r2, [r7, #0]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d302      	bcc.n	80051ea <I2C_WaitOnFlagUntilTimeout+0x2e>
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d122      	bne.n	8005230 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	68ba      	ldr	r2, [r7, #8]
 80051f2:	4013      	ands	r3, r2
 80051f4:	68ba      	ldr	r2, [r7, #8]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	425a      	negs	r2, r3
 80051fa:	4153      	adcs	r3, r2
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	001a      	movs	r2, r3
 8005200:	1dfb      	adds	r3, r7, #7
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	429a      	cmp	r2, r3
 8005206:	d113      	bne.n	8005230 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800520c:	2220      	movs	r2, #32
 800520e:	431a      	orrs	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2241      	movs	r2, #65	; 0x41
 8005218:	2120      	movs	r1, #32
 800521a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2242      	movs	r2, #66	; 0x42
 8005220:	2100      	movs	r1, #0
 8005222:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2240      	movs	r2, #64	; 0x40
 8005228:	2100      	movs	r1, #0
 800522a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e00f      	b.n	8005250 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	4013      	ands	r3, r2
 800523a:	68ba      	ldr	r2, [r7, #8]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	425a      	negs	r2, r3
 8005240:	4153      	adcs	r3, r2
 8005242:	b2db      	uxtb	r3, r3
 8005244:	001a      	movs	r2, r3
 8005246:	1dfb      	adds	r3, r7, #7
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	429a      	cmp	r2, r3
 800524c:	d0bf      	beq.n	80051ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	0018      	movs	r0, r3
 8005252:	46bd      	mov	sp, r7
 8005254:	b004      	add	sp, #16
 8005256:	bd80      	pop	{r7, pc}

08005258 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005264:	e032      	b.n	80052cc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	68b9      	ldr	r1, [r7, #8]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	0018      	movs	r0, r3
 800526e:	f000 f87d 	bl	800536c <I2C_IsErrorOccurred>
 8005272:	1e03      	subs	r3, r0, #0
 8005274:	d001      	beq.n	800527a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e030      	b.n	80052dc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	3301      	adds	r3, #1
 800527e:	d025      	beq.n	80052cc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005280:	f7fe fb30 	bl	80038e4 <HAL_GetTick>
 8005284:	0002      	movs	r2, r0
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	429a      	cmp	r2, r3
 800528e:	d302      	bcc.n	8005296 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d11a      	bne.n	80052cc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	2202      	movs	r2, #2
 800529e:	4013      	ands	r3, r2
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d013      	beq.n	80052cc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a8:	2220      	movs	r2, #32
 80052aa:	431a      	orrs	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2241      	movs	r2, #65	; 0x41
 80052b4:	2120      	movs	r1, #32
 80052b6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2242      	movs	r2, #66	; 0x42
 80052bc:	2100      	movs	r1, #0
 80052be:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2240      	movs	r2, #64	; 0x40
 80052c4:	2100      	movs	r1, #0
 80052c6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e007      	b.n	80052dc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	2202      	movs	r2, #2
 80052d4:	4013      	ands	r3, r2
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d1c5      	bne.n	8005266 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	0018      	movs	r0, r3
 80052de:	46bd      	mov	sp, r7
 80052e0:	b004      	add	sp, #16
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052f0:	e02f      	b.n	8005352 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	68b9      	ldr	r1, [r7, #8]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	0018      	movs	r0, r3
 80052fa:	f000 f837 	bl	800536c <I2C_IsErrorOccurred>
 80052fe:	1e03      	subs	r3, r0, #0
 8005300:	d001      	beq.n	8005306 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e02d      	b.n	8005362 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005306:	f7fe faed 	bl	80038e4 <HAL_GetTick>
 800530a:	0002      	movs	r2, r0
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	429a      	cmp	r2, r3
 8005314:	d302      	bcc.n	800531c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d11a      	bne.n	8005352 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	2220      	movs	r2, #32
 8005324:	4013      	ands	r3, r2
 8005326:	2b20      	cmp	r3, #32
 8005328:	d013      	beq.n	8005352 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800532e:	2220      	movs	r2, #32
 8005330:	431a      	orrs	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2241      	movs	r2, #65	; 0x41
 800533a:	2120      	movs	r1, #32
 800533c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2242      	movs	r2, #66	; 0x42
 8005342:	2100      	movs	r1, #0
 8005344:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2240      	movs	r2, #64	; 0x40
 800534a:	2100      	movs	r1, #0
 800534c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e007      	b.n	8005362 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	2220      	movs	r2, #32
 800535a:	4013      	ands	r3, r2
 800535c:	2b20      	cmp	r3, #32
 800535e:	d1c8      	bne.n	80052f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	0018      	movs	r0, r3
 8005364:	46bd      	mov	sp, r7
 8005366:	b004      	add	sp, #16
 8005368:	bd80      	pop	{r7, pc}
	...

0800536c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800536c:	b590      	push	{r4, r7, lr}
 800536e:	b08b      	sub	sp, #44	; 0x2c
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005378:	2327      	movs	r3, #39	; 0x27
 800537a:	18fb      	adds	r3, r7, r3
 800537c:	2200      	movs	r2, #0
 800537e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005388:	2300      	movs	r3, #0
 800538a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	2210      	movs	r2, #16
 8005394:	4013      	ands	r3, r2
 8005396:	d100      	bne.n	800539a <I2C_IsErrorOccurred+0x2e>
 8005398:	e082      	b.n	80054a0 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2210      	movs	r2, #16
 80053a0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80053a2:	e060      	b.n	8005466 <I2C_IsErrorOccurred+0xfa>
 80053a4:	2427      	movs	r4, #39	; 0x27
 80053a6:	193b      	adds	r3, r7, r4
 80053a8:	193a      	adds	r2, r7, r4
 80053aa:	7812      	ldrb	r2, [r2, #0]
 80053ac:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	3301      	adds	r3, #1
 80053b2:	d058      	beq.n	8005466 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80053b4:	f7fe fa96 	bl	80038e4 <HAL_GetTick>
 80053b8:	0002      	movs	r2, r0
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d306      	bcc.n	80053d2 <I2C_IsErrorOccurred+0x66>
 80053c4:	193b      	adds	r3, r7, r4
 80053c6:	193a      	adds	r2, r7, r4
 80053c8:	7812      	ldrb	r2, [r2, #0]
 80053ca:	701a      	strb	r2, [r3, #0]
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d149      	bne.n	8005466 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	2380      	movs	r3, #128	; 0x80
 80053da:	01db      	lsls	r3, r3, #7
 80053dc:	4013      	ands	r3, r2
 80053de:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80053e0:	2013      	movs	r0, #19
 80053e2:	183b      	adds	r3, r7, r0
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	2142      	movs	r1, #66	; 0x42
 80053e8:	5c52      	ldrb	r2, [r2, r1]
 80053ea:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	699a      	ldr	r2, [r3, #24]
 80053f2:	2380      	movs	r3, #128	; 0x80
 80053f4:	021b      	lsls	r3, r3, #8
 80053f6:	401a      	ands	r2, r3
 80053f8:	2380      	movs	r3, #128	; 0x80
 80053fa:	021b      	lsls	r3, r3, #8
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d126      	bne.n	800544e <I2C_IsErrorOccurred+0xe2>
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	2380      	movs	r3, #128	; 0x80
 8005404:	01db      	lsls	r3, r3, #7
 8005406:	429a      	cmp	r2, r3
 8005408:	d021      	beq.n	800544e <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 800540a:	183b      	adds	r3, r7, r0
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	2b20      	cmp	r3, #32
 8005410:	d01d      	beq.n	800544e <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2180      	movs	r1, #128	; 0x80
 800541e:	01c9      	lsls	r1, r1, #7
 8005420:	430a      	orrs	r2, r1
 8005422:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005424:	f7fe fa5e 	bl	80038e4 <HAL_GetTick>
 8005428:	0003      	movs	r3, r0
 800542a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800542c:	e00f      	b.n	800544e <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800542e:	f7fe fa59 	bl	80038e4 <HAL_GetTick>
 8005432:	0002      	movs	r2, r0
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	2b19      	cmp	r3, #25
 800543a:	d908      	bls.n	800544e <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800543c:	6a3b      	ldr	r3, [r7, #32]
 800543e:	2220      	movs	r2, #32
 8005440:	4313      	orrs	r3, r2
 8005442:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005444:	2327      	movs	r3, #39	; 0x27
 8005446:	18fb      	adds	r3, r7, r3
 8005448:	2201      	movs	r2, #1
 800544a:	701a      	strb	r2, [r3, #0]

              break;
 800544c:	e00b      	b.n	8005466 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	2220      	movs	r2, #32
 8005456:	4013      	ands	r3, r2
 8005458:	2127      	movs	r1, #39	; 0x27
 800545a:	187a      	adds	r2, r7, r1
 800545c:	1879      	adds	r1, r7, r1
 800545e:	7809      	ldrb	r1, [r1, #0]
 8005460:	7011      	strb	r1, [r2, #0]
 8005462:	2b20      	cmp	r3, #32
 8005464:	d1e3      	bne.n	800542e <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	2220      	movs	r2, #32
 800546e:	4013      	ands	r3, r2
 8005470:	2b20      	cmp	r3, #32
 8005472:	d004      	beq.n	800547e <I2C_IsErrorOccurred+0x112>
 8005474:	2327      	movs	r3, #39	; 0x27
 8005476:	18fb      	adds	r3, r7, r3
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d092      	beq.n	80053a4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800547e:	2327      	movs	r3, #39	; 0x27
 8005480:	18fb      	adds	r3, r7, r3
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d103      	bne.n	8005490 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2220      	movs	r2, #32
 800548e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	2204      	movs	r2, #4
 8005494:	4313      	orrs	r3, r2
 8005496:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005498:	2327      	movs	r3, #39	; 0x27
 800549a:	18fb      	adds	r3, r7, r3
 800549c:	2201      	movs	r2, #1
 800549e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80054a8:	69ba      	ldr	r2, [r7, #24]
 80054aa:	2380      	movs	r3, #128	; 0x80
 80054ac:	005b      	lsls	r3, r3, #1
 80054ae:	4013      	ands	r3, r2
 80054b0:	d00c      	beq.n	80054cc <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80054b2:	6a3b      	ldr	r3, [r7, #32]
 80054b4:	2201      	movs	r2, #1
 80054b6:	4313      	orrs	r3, r2
 80054b8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2280      	movs	r2, #128	; 0x80
 80054c0:	0052      	lsls	r2, r2, #1
 80054c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80054c4:	2327      	movs	r3, #39	; 0x27
 80054c6:	18fb      	adds	r3, r7, r3
 80054c8:	2201      	movs	r2, #1
 80054ca:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80054cc:	69ba      	ldr	r2, [r7, #24]
 80054ce:	2380      	movs	r3, #128	; 0x80
 80054d0:	00db      	lsls	r3, r3, #3
 80054d2:	4013      	ands	r3, r2
 80054d4:	d00c      	beq.n	80054f0 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80054d6:	6a3b      	ldr	r3, [r7, #32]
 80054d8:	2208      	movs	r2, #8
 80054da:	4313      	orrs	r3, r2
 80054dc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2280      	movs	r2, #128	; 0x80
 80054e4:	00d2      	lsls	r2, r2, #3
 80054e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80054e8:	2327      	movs	r3, #39	; 0x27
 80054ea:	18fb      	adds	r3, r7, r3
 80054ec:	2201      	movs	r2, #1
 80054ee:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80054f0:	69ba      	ldr	r2, [r7, #24]
 80054f2:	2380      	movs	r3, #128	; 0x80
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	4013      	ands	r3, r2
 80054f8:	d00c      	beq.n	8005514 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80054fa:	6a3b      	ldr	r3, [r7, #32]
 80054fc:	2202      	movs	r2, #2
 80054fe:	4313      	orrs	r3, r2
 8005500:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2280      	movs	r2, #128	; 0x80
 8005508:	0092      	lsls	r2, r2, #2
 800550a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800550c:	2327      	movs	r3, #39	; 0x27
 800550e:	18fb      	adds	r3, r7, r3
 8005510:	2201      	movs	r2, #1
 8005512:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8005514:	2327      	movs	r3, #39	; 0x27
 8005516:	18fb      	adds	r3, r7, r3
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d01d      	beq.n	800555a <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	0018      	movs	r0, r3
 8005522:	f7ff fe0a 	bl	800513a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	490d      	ldr	r1, [pc, #52]	; (8005568 <I2C_IsErrorOccurred+0x1fc>)
 8005532:	400a      	ands	r2, r1
 8005534:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800553a:	6a3b      	ldr	r3, [r7, #32]
 800553c:	431a      	orrs	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2241      	movs	r2, #65	; 0x41
 8005546:	2120      	movs	r1, #32
 8005548:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2242      	movs	r2, #66	; 0x42
 800554e:	2100      	movs	r1, #0
 8005550:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2240      	movs	r2, #64	; 0x40
 8005556:	2100      	movs	r1, #0
 8005558:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800555a:	2327      	movs	r3, #39	; 0x27
 800555c:	18fb      	adds	r3, r7, r3
 800555e:	781b      	ldrb	r3, [r3, #0]
}
 8005560:	0018      	movs	r0, r3
 8005562:	46bd      	mov	sp, r7
 8005564:	b00b      	add	sp, #44	; 0x2c
 8005566:	bd90      	pop	{r4, r7, pc}
 8005568:	fe00e800 	.word	0xfe00e800

0800556c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800556c:	b590      	push	{r4, r7, lr}
 800556e:	b087      	sub	sp, #28
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	0008      	movs	r0, r1
 8005576:	0011      	movs	r1, r2
 8005578:	607b      	str	r3, [r7, #4]
 800557a:	240a      	movs	r4, #10
 800557c:	193b      	adds	r3, r7, r4
 800557e:	1c02      	adds	r2, r0, #0
 8005580:	801a      	strh	r2, [r3, #0]
 8005582:	2009      	movs	r0, #9
 8005584:	183b      	adds	r3, r7, r0
 8005586:	1c0a      	adds	r2, r1, #0
 8005588:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800558a:	193b      	adds	r3, r7, r4
 800558c:	881b      	ldrh	r3, [r3, #0]
 800558e:	059b      	lsls	r3, r3, #22
 8005590:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005592:	183b      	adds	r3, r7, r0
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	0419      	lsls	r1, r3, #16
 8005598:	23ff      	movs	r3, #255	; 0xff
 800559a:	041b      	lsls	r3, r3, #16
 800559c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800559e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a6:	4313      	orrs	r3, r2
 80055a8:	005b      	lsls	r3, r3, #1
 80055aa:	085b      	lsrs	r3, r3, #1
 80055ac:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055b6:	0d51      	lsrs	r1, r2, #21
 80055b8:	2280      	movs	r2, #128	; 0x80
 80055ba:	00d2      	lsls	r2, r2, #3
 80055bc:	400a      	ands	r2, r1
 80055be:	4907      	ldr	r1, [pc, #28]	; (80055dc <I2C_TransferConfig+0x70>)
 80055c0:	430a      	orrs	r2, r1
 80055c2:	43d2      	mvns	r2, r2
 80055c4:	401a      	ands	r2, r3
 80055c6:	0011      	movs	r1, r2
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	697a      	ldr	r2, [r7, #20]
 80055ce:	430a      	orrs	r2, r1
 80055d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80055d2:	46c0      	nop			; (mov r8, r8)
 80055d4:	46bd      	mov	sp, r7
 80055d6:	b007      	add	sp, #28
 80055d8:	bd90      	pop	{r4, r7, pc}
 80055da:	46c0      	nop			; (mov r8, r8)
 80055dc:	03ff63ff 	.word	0x03ff63ff

080055e0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	000a      	movs	r2, r1
 80055ea:	1cbb      	adds	r3, r7, #2
 80055ec:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80055f2:	1cbb      	adds	r3, r7, #2
 80055f4:	881b      	ldrh	r3, [r3, #0]
 80055f6:	2201      	movs	r2, #1
 80055f8:	4013      	ands	r3, r2
 80055fa:	d010      	beq.n	800561e <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2242      	movs	r2, #66	; 0x42
 8005600:	4313      	orrs	r3, r2
 8005602:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2241      	movs	r2, #65	; 0x41
 8005608:	5c9b      	ldrb	r3, [r3, r2]
 800560a:	b2db      	uxtb	r3, r3
 800560c:	001a      	movs	r2, r3
 800560e:	2328      	movs	r3, #40	; 0x28
 8005610:	4013      	ands	r3, r2
 8005612:	2b28      	cmp	r3, #40	; 0x28
 8005614:	d003      	beq.n	800561e <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	22b0      	movs	r2, #176	; 0xb0
 800561a:	4313      	orrs	r3, r2
 800561c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800561e:	1cbb      	adds	r3, r7, #2
 8005620:	881b      	ldrh	r3, [r3, #0]
 8005622:	2202      	movs	r2, #2
 8005624:	4013      	ands	r3, r2
 8005626:	d010      	beq.n	800564a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2244      	movs	r2, #68	; 0x44
 800562c:	4313      	orrs	r3, r2
 800562e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2241      	movs	r2, #65	; 0x41
 8005634:	5c9b      	ldrb	r3, [r3, r2]
 8005636:	b2db      	uxtb	r3, r3
 8005638:	001a      	movs	r2, r3
 800563a:	2328      	movs	r3, #40	; 0x28
 800563c:	4013      	ands	r3, r2
 800563e:	2b28      	cmp	r3, #40	; 0x28
 8005640:	d003      	beq.n	800564a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	22b0      	movs	r2, #176	; 0xb0
 8005646:	4313      	orrs	r3, r2
 8005648:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800564a:	1cbb      	adds	r3, r7, #2
 800564c:	2200      	movs	r2, #0
 800564e:	5e9b      	ldrsh	r3, [r3, r2]
 8005650:	2b00      	cmp	r3, #0
 8005652:	da03      	bge.n	800565c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	22b8      	movs	r2, #184	; 0xb8
 8005658:	4313      	orrs	r3, r2
 800565a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800565c:	1cbb      	adds	r3, r7, #2
 800565e:	881b      	ldrh	r3, [r3, #0]
 8005660:	2b10      	cmp	r3, #16
 8005662:	d103      	bne.n	800566c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2290      	movs	r2, #144	; 0x90
 8005668:	4313      	orrs	r3, r2
 800566a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800566c:	1cbb      	adds	r3, r7, #2
 800566e:	881b      	ldrh	r3, [r3, #0]
 8005670:	2b20      	cmp	r3, #32
 8005672:	d103      	bne.n	800567c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2220      	movs	r2, #32
 8005678:	4313      	orrs	r3, r2
 800567a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800567c:	1cbb      	adds	r3, r7, #2
 800567e:	881b      	ldrh	r3, [r3, #0]
 8005680:	2b40      	cmp	r3, #64	; 0x40
 8005682:	d103      	bne.n	800568c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2240      	movs	r2, #64	; 0x40
 8005688:	4313      	orrs	r3, r2
 800568a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	43d9      	mvns	r1, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	400a      	ands	r2, r1
 800569c:	601a      	str	r2, [r3, #0]
}
 800569e:	46c0      	nop			; (mov r8, r8)
 80056a0:	46bd      	mov	sp, r7
 80056a2:	b004      	add	sp, #16
 80056a4:	bd80      	pop	{r7, pc}
	...

080056a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2241      	movs	r2, #65	; 0x41
 80056b6:	5c9b      	ldrb	r3, [r3, r2]
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b20      	cmp	r3, #32
 80056bc:	d138      	bne.n	8005730 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2240      	movs	r2, #64	; 0x40
 80056c2:	5c9b      	ldrb	r3, [r3, r2]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d101      	bne.n	80056cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80056c8:	2302      	movs	r3, #2
 80056ca:	e032      	b.n	8005732 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2240      	movs	r2, #64	; 0x40
 80056d0:	2101      	movs	r1, #1
 80056d2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2241      	movs	r2, #65	; 0x41
 80056d8:	2124      	movs	r1, #36	; 0x24
 80056da:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2101      	movs	r1, #1
 80056e8:	438a      	bics	r2, r1
 80056ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4911      	ldr	r1, [pc, #68]	; (800573c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80056f8:	400a      	ands	r2, r1
 80056fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6819      	ldr	r1, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	430a      	orrs	r2, r1
 800570a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2101      	movs	r1, #1
 8005718:	430a      	orrs	r2, r1
 800571a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2241      	movs	r2, #65	; 0x41
 8005720:	2120      	movs	r1, #32
 8005722:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2240      	movs	r2, #64	; 0x40
 8005728:	2100      	movs	r1, #0
 800572a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800572c:	2300      	movs	r3, #0
 800572e:	e000      	b.n	8005732 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005730:	2302      	movs	r3, #2
  }
}
 8005732:	0018      	movs	r0, r3
 8005734:	46bd      	mov	sp, r7
 8005736:	b002      	add	sp, #8
 8005738:	bd80      	pop	{r7, pc}
 800573a:	46c0      	nop			; (mov r8, r8)
 800573c:	ffffefff 	.word	0xffffefff

08005740 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2241      	movs	r2, #65	; 0x41
 800574e:	5c9b      	ldrb	r3, [r3, r2]
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b20      	cmp	r3, #32
 8005754:	d139      	bne.n	80057ca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2240      	movs	r2, #64	; 0x40
 800575a:	5c9b      	ldrb	r3, [r3, r2]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d101      	bne.n	8005764 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005760:	2302      	movs	r3, #2
 8005762:	e033      	b.n	80057cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2240      	movs	r2, #64	; 0x40
 8005768:	2101      	movs	r1, #1
 800576a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2241      	movs	r2, #65	; 0x41
 8005770:	2124      	movs	r1, #36	; 0x24
 8005772:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2101      	movs	r1, #1
 8005780:	438a      	bics	r2, r1
 8005782:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	4a11      	ldr	r2, [pc, #68]	; (80057d4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005790:	4013      	ands	r3, r2
 8005792:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	021b      	lsls	r3, r3, #8
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	4313      	orrs	r3, r2
 800579c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2101      	movs	r1, #1
 80057b2:	430a      	orrs	r2, r1
 80057b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2241      	movs	r2, #65	; 0x41
 80057ba:	2120      	movs	r1, #32
 80057bc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2240      	movs	r2, #64	; 0x40
 80057c2:	2100      	movs	r1, #0
 80057c4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80057c6:	2300      	movs	r3, #0
 80057c8:	e000      	b.n	80057cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80057ca:	2302      	movs	r3, #2
  }
}
 80057cc:	0018      	movs	r0, r3
 80057ce:	46bd      	mov	sp, r7
 80057d0:	b004      	add	sp, #16
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	fffff0ff 	.word	0xfffff0ff

080057d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057d8:	b5b0      	push	{r4, r5, r7, lr}
 80057da:	b08a      	sub	sp, #40	; 0x28
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d102      	bne.n	80057ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	f000 fbbf 	bl	8005f6a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057ec:	4bc9      	ldr	r3, [pc, #804]	; (8005b14 <HAL_RCC_OscConfig+0x33c>)
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	220c      	movs	r2, #12
 80057f2:	4013      	ands	r3, r2
 80057f4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057f6:	4bc7      	ldr	r3, [pc, #796]	; (8005b14 <HAL_RCC_OscConfig+0x33c>)
 80057f8:	68da      	ldr	r2, [r3, #12]
 80057fa:	2380      	movs	r3, #128	; 0x80
 80057fc:	025b      	lsls	r3, r3, #9
 80057fe:	4013      	ands	r3, r2
 8005800:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2201      	movs	r2, #1
 8005808:	4013      	ands	r3, r2
 800580a:	d100      	bne.n	800580e <HAL_RCC_OscConfig+0x36>
 800580c:	e07e      	b.n	800590c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	2b08      	cmp	r3, #8
 8005812:	d007      	beq.n	8005824 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	2b0c      	cmp	r3, #12
 8005818:	d112      	bne.n	8005840 <HAL_RCC_OscConfig+0x68>
 800581a:	69ba      	ldr	r2, [r7, #24]
 800581c:	2380      	movs	r3, #128	; 0x80
 800581e:	025b      	lsls	r3, r3, #9
 8005820:	429a      	cmp	r2, r3
 8005822:	d10d      	bne.n	8005840 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005824:	4bbb      	ldr	r3, [pc, #748]	; (8005b14 <HAL_RCC_OscConfig+0x33c>)
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	2380      	movs	r3, #128	; 0x80
 800582a:	029b      	lsls	r3, r3, #10
 800582c:	4013      	ands	r3, r2
 800582e:	d100      	bne.n	8005832 <HAL_RCC_OscConfig+0x5a>
 8005830:	e06b      	b.n	800590a <HAL_RCC_OscConfig+0x132>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d167      	bne.n	800590a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	f000 fb95 	bl	8005f6a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685a      	ldr	r2, [r3, #4]
 8005844:	2380      	movs	r3, #128	; 0x80
 8005846:	025b      	lsls	r3, r3, #9
 8005848:	429a      	cmp	r2, r3
 800584a:	d107      	bne.n	800585c <HAL_RCC_OscConfig+0x84>
 800584c:	4bb1      	ldr	r3, [pc, #708]	; (8005b14 <HAL_RCC_OscConfig+0x33c>)
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	4bb0      	ldr	r3, [pc, #704]	; (8005b14 <HAL_RCC_OscConfig+0x33c>)
 8005852:	2180      	movs	r1, #128	; 0x80
 8005854:	0249      	lsls	r1, r1, #9
 8005856:	430a      	orrs	r2, r1
 8005858:	601a      	str	r2, [r3, #0]
 800585a:	e027      	b.n	80058ac <HAL_RCC_OscConfig+0xd4>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	23a0      	movs	r3, #160	; 0xa0
 8005862:	02db      	lsls	r3, r3, #11
 8005864:	429a      	cmp	r2, r3
 8005866:	d10e      	bne.n	8005886 <HAL_RCC_OscConfig+0xae>
 8005868:	4baa      	ldr	r3, [pc, #680]	; (8005b14 <HAL_RCC_OscConfig+0x33c>)
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	4ba9      	ldr	r3, [pc, #676]	; (8005b14 <HAL_RCC_OscConfig+0x33c>)
 800586e:	2180      	movs	r1, #128	; 0x80
 8005870:	02c9      	lsls	r1, r1, #11
 8005872:	430a      	orrs	r2, r1
 8005874:	601a      	str	r2, [r3, #0]
 8005876:	4ba7      	ldr	r3, [pc, #668]	; (8005b14 <HAL_RCC_OscConfig+0x33c>)
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	4ba6      	ldr	r3, [pc, #664]	; (8005b14 <HAL_RCC_OscConfig+0x33c>)
 800587c:	2180      	movs	r1, #128	; 0x80
 800587e:	0249      	lsls	r1, r1, #9
 8005880:	430a      	orrs	r2, r1
 8005882:	601a      	str	r2, [r3, #0]
 8005884:	e012      	b.n	80058ac <HAL_RCC_OscConfig+0xd4>
 8005886:	4ba3      	ldr	r3, [pc, #652]	; (8005b14 <HAL_RCC_OscConfig+0x33c>)
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	4ba2      	ldr	r3, [pc, #648]	; (8005b14 <HAL_RCC_OscConfig+0x33c>)
 800588c:	49a2      	ldr	r1, [pc, #648]	; (8005b18 <HAL_RCC_OscConfig+0x340>)
 800588e:	400a      	ands	r2, r1
 8005890:	601a      	str	r2, [r3, #0]
 8005892:	4ba0      	ldr	r3, [pc, #640]	; (8005b14 <HAL_RCC_OscConfig+0x33c>)
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	2380      	movs	r3, #128	; 0x80
 8005898:	025b      	lsls	r3, r3, #9
 800589a:	4013      	ands	r3, r2
 800589c:	60fb      	str	r3, [r7, #12]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	4b9c      	ldr	r3, [pc, #624]	; (8005b14 <HAL_RCC_OscConfig+0x33c>)
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	4b9b      	ldr	r3, [pc, #620]	; (8005b14 <HAL_RCC_OscConfig+0x33c>)
 80058a6:	499d      	ldr	r1, [pc, #628]	; (8005b1c <HAL_RCC_OscConfig+0x344>)
 80058a8:	400a      	ands	r2, r1
 80058aa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d015      	beq.n	80058e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058b4:	f7fe f816 	bl	80038e4 <HAL_GetTick>
 80058b8:	0003      	movs	r3, r0
 80058ba:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80058bc:	e009      	b.n	80058d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058be:	f7fe f811 	bl	80038e4 <HAL_GetTick>
 80058c2:	0002      	movs	r2, r0
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	2b64      	cmp	r3, #100	; 0x64
 80058ca:	d902      	bls.n	80058d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	f000 fb4c 	bl	8005f6a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80058d2:	4b90      	ldr	r3, [pc, #576]	; (8005b14 <HAL_RCC_OscConfig+0x33c>)
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	2380      	movs	r3, #128	; 0x80
 80058d8:	029b      	lsls	r3, r3, #10
 80058da:	4013      	ands	r3, r2
 80058dc:	d0ef      	beq.n	80058be <HAL_RCC_OscConfig+0xe6>
 80058de:	e015      	b.n	800590c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058e0:	f7fe f800 	bl	80038e4 <HAL_GetTick>
 80058e4:	0003      	movs	r3, r0
 80058e6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80058e8:	e008      	b.n	80058fc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058ea:	f7fd fffb 	bl	80038e4 <HAL_GetTick>
 80058ee:	0002      	movs	r2, r0
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	2b64      	cmp	r3, #100	; 0x64
 80058f6:	d901      	bls.n	80058fc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e336      	b.n	8005f6a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80058fc:	4b85      	ldr	r3, [pc, #532]	; (8005b14 <HAL_RCC_OscConfig+0x33c>)
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	2380      	movs	r3, #128	; 0x80
 8005902:	029b      	lsls	r3, r3, #10
 8005904:	4013      	ands	r3, r2
 8005906:	d1f0      	bne.n	80058ea <HAL_RCC_OscConfig+0x112>
 8005908:	e000      	b.n	800590c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800590a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2202      	movs	r2, #2
 8005912:	4013      	ands	r3, r2
 8005914:	d100      	bne.n	8005918 <HAL_RCC_OscConfig+0x140>
 8005916:	e099      	b.n	8005a4c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	2220      	movs	r2, #32
 8005922:	4013      	ands	r3, r2
 8005924:	d009      	beq.n	800593a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8005926:	4b7b      	ldr	r3, [pc, #492]	; (8005b14 <HAL_RCC_OscConfig+0x33c>)
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	4b7a      	ldr	r3, [pc, #488]	; (8005b14 <HAL_RCC_OscConfig+0x33c>)
 800592c:	2120      	movs	r1, #32
 800592e:	430a      	orrs	r2, r1
 8005930:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8005932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005934:	2220      	movs	r2, #32
 8005936:	4393      	bics	r3, r2
 8005938:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	2b04      	cmp	r3, #4
 800593e:	d005      	beq.n	800594c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	2b0c      	cmp	r3, #12
 8005944:	d13e      	bne.n	80059c4 <HAL_RCC_OscConfig+0x1ec>
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d13b      	bne.n	80059c4 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800594c:	4b71      	ldr	r3, [pc, #452]	; (8005b14 <HAL_RCC_OscConfig+0x33c>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2204      	movs	r2, #4
 8005952:	4013      	ands	r3, r2
 8005954:	d004      	beq.n	8005960 <HAL_RCC_OscConfig+0x188>
 8005956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005958:	2b00      	cmp	r3, #0
 800595a:	d101      	bne.n	8005960 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e304      	b.n	8005f6a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005960:	4b6c      	ldr	r3, [pc, #432]	; (8005b14 <HAL_RCC_OscConfig+0x33c>)
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	4a6e      	ldr	r2, [pc, #440]	; (8005b20 <HAL_RCC_OscConfig+0x348>)
 8005966:	4013      	ands	r3, r2
 8005968:	0019      	movs	r1, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	021a      	lsls	r2, r3, #8
 8005970:	4b68      	ldr	r3, [pc, #416]	; (8005b14 <HAL_RCC_OscConfig+0x33c>)
 8005972:	430a      	orrs	r2, r1
 8005974:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005976:	4b67      	ldr	r3, [pc, #412]	; (8005b14 <HAL_RCC_OscConfig+0x33c>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2209      	movs	r2, #9
 800597c:	4393      	bics	r3, r2
 800597e:	0019      	movs	r1, r3
 8005980:	4b64      	ldr	r3, [pc, #400]	; (8005b14 <HAL_RCC_OscConfig+0x33c>)
 8005982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005984:	430a      	orrs	r2, r1
 8005986:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005988:	f000 fc42 	bl	8006210 <HAL_RCC_GetSysClockFreq>
 800598c:	0001      	movs	r1, r0
 800598e:	4b61      	ldr	r3, [pc, #388]	; (8005b14 <HAL_RCC_OscConfig+0x33c>)
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	091b      	lsrs	r3, r3, #4
 8005994:	220f      	movs	r2, #15
 8005996:	4013      	ands	r3, r2
 8005998:	4a62      	ldr	r2, [pc, #392]	; (8005b24 <HAL_RCC_OscConfig+0x34c>)
 800599a:	5cd3      	ldrb	r3, [r2, r3]
 800599c:	000a      	movs	r2, r1
 800599e:	40da      	lsrs	r2, r3
 80059a0:	4b61      	ldr	r3, [pc, #388]	; (8005b28 <HAL_RCC_OscConfig+0x350>)
 80059a2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80059a4:	4b61      	ldr	r3, [pc, #388]	; (8005b2c <HAL_RCC_OscConfig+0x354>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2513      	movs	r5, #19
 80059aa:	197c      	adds	r4, r7, r5
 80059ac:	0018      	movs	r0, r3
 80059ae:	f7fd ff53 	bl	8003858 <HAL_InitTick>
 80059b2:	0003      	movs	r3, r0
 80059b4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80059b6:	197b      	adds	r3, r7, r5
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d046      	beq.n	8005a4c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80059be:	197b      	adds	r3, r7, r5
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	e2d2      	b.n	8005f6a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80059c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d027      	beq.n	8005a1a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80059ca:	4b52      	ldr	r3, [pc, #328]	; (8005b14 <HAL_RCC_OscConfig+0x33c>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2209      	movs	r2, #9
 80059d0:	4393      	bics	r3, r2
 80059d2:	0019      	movs	r1, r3
 80059d4:	4b4f      	ldr	r3, [pc, #316]	; (8005b14 <HAL_RCC_OscConfig+0x33c>)
 80059d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059d8:	430a      	orrs	r2, r1
 80059da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059dc:	f7fd ff82 	bl	80038e4 <HAL_GetTick>
 80059e0:	0003      	movs	r3, r0
 80059e2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059e4:	e008      	b.n	80059f8 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059e6:	f7fd ff7d 	bl	80038e4 <HAL_GetTick>
 80059ea:	0002      	movs	r2, r0
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d901      	bls.n	80059f8 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e2b8      	b.n	8005f6a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059f8:	4b46      	ldr	r3, [pc, #280]	; (8005b14 <HAL_RCC_OscConfig+0x33c>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2204      	movs	r2, #4
 80059fe:	4013      	ands	r3, r2
 8005a00:	d0f1      	beq.n	80059e6 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a02:	4b44      	ldr	r3, [pc, #272]	; (8005b14 <HAL_RCC_OscConfig+0x33c>)
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	4a46      	ldr	r2, [pc, #280]	; (8005b20 <HAL_RCC_OscConfig+0x348>)
 8005a08:	4013      	ands	r3, r2
 8005a0a:	0019      	movs	r1, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	021a      	lsls	r2, r3, #8
 8005a12:	4b40      	ldr	r3, [pc, #256]	; (8005b14 <HAL_RCC_OscConfig+0x33c>)
 8005a14:	430a      	orrs	r2, r1
 8005a16:	605a      	str	r2, [r3, #4]
 8005a18:	e018      	b.n	8005a4c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a1a:	4b3e      	ldr	r3, [pc, #248]	; (8005b14 <HAL_RCC_OscConfig+0x33c>)
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	4b3d      	ldr	r3, [pc, #244]	; (8005b14 <HAL_RCC_OscConfig+0x33c>)
 8005a20:	2101      	movs	r1, #1
 8005a22:	438a      	bics	r2, r1
 8005a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a26:	f7fd ff5d 	bl	80038e4 <HAL_GetTick>
 8005a2a:	0003      	movs	r3, r0
 8005a2c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005a2e:	e008      	b.n	8005a42 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a30:	f7fd ff58 	bl	80038e4 <HAL_GetTick>
 8005a34:	0002      	movs	r2, r0
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d901      	bls.n	8005a42 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e293      	b.n	8005f6a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005a42:	4b34      	ldr	r3, [pc, #208]	; (8005b14 <HAL_RCC_OscConfig+0x33c>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2204      	movs	r2, #4
 8005a48:	4013      	ands	r3, r2
 8005a4a:	d1f1      	bne.n	8005a30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2210      	movs	r2, #16
 8005a52:	4013      	ands	r3, r2
 8005a54:	d100      	bne.n	8005a58 <HAL_RCC_OscConfig+0x280>
 8005a56:	e0a2      	b.n	8005b9e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d140      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005a5e:	4b2d      	ldr	r3, [pc, #180]	; (8005b14 <HAL_RCC_OscConfig+0x33c>)
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	2380      	movs	r3, #128	; 0x80
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4013      	ands	r3, r2
 8005a68:	d005      	beq.n	8005a76 <HAL_RCC_OscConfig+0x29e>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	69db      	ldr	r3, [r3, #28]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d101      	bne.n	8005a76 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e279      	b.n	8005f6a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a76:	4b27      	ldr	r3, [pc, #156]	; (8005b14 <HAL_RCC_OscConfig+0x33c>)
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	4a2d      	ldr	r2, [pc, #180]	; (8005b30 <HAL_RCC_OscConfig+0x358>)
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	0019      	movs	r1, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a84:	4b23      	ldr	r3, [pc, #140]	; (8005b14 <HAL_RCC_OscConfig+0x33c>)
 8005a86:	430a      	orrs	r2, r1
 8005a88:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a8a:	4b22      	ldr	r3, [pc, #136]	; (8005b14 <HAL_RCC_OscConfig+0x33c>)
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	021b      	lsls	r3, r3, #8
 8005a90:	0a19      	lsrs	r1, r3, #8
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	061a      	lsls	r2, r3, #24
 8005a98:	4b1e      	ldr	r3, [pc, #120]	; (8005b14 <HAL_RCC_OscConfig+0x33c>)
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa2:	0b5b      	lsrs	r3, r3, #13
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	2280      	movs	r2, #128	; 0x80
 8005aa8:	0212      	lsls	r2, r2, #8
 8005aaa:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005aac:	4b19      	ldr	r3, [pc, #100]	; (8005b14 <HAL_RCC_OscConfig+0x33c>)
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	091b      	lsrs	r3, r3, #4
 8005ab2:	210f      	movs	r1, #15
 8005ab4:	400b      	ands	r3, r1
 8005ab6:	491b      	ldr	r1, [pc, #108]	; (8005b24 <HAL_RCC_OscConfig+0x34c>)
 8005ab8:	5ccb      	ldrb	r3, [r1, r3]
 8005aba:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005abc:	4b1a      	ldr	r3, [pc, #104]	; (8005b28 <HAL_RCC_OscConfig+0x350>)
 8005abe:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005ac0:	4b1a      	ldr	r3, [pc, #104]	; (8005b2c <HAL_RCC_OscConfig+0x354>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2513      	movs	r5, #19
 8005ac6:	197c      	adds	r4, r7, r5
 8005ac8:	0018      	movs	r0, r3
 8005aca:	f7fd fec5 	bl	8003858 <HAL_InitTick>
 8005ace:	0003      	movs	r3, r0
 8005ad0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8005ad2:	197b      	adds	r3, r7, r5
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d061      	beq.n	8005b9e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8005ada:	197b      	adds	r3, r7, r5
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	e244      	b.n	8005f6a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	69db      	ldr	r3, [r3, #28]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d040      	beq.n	8005b6a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005ae8:	4b0a      	ldr	r3, [pc, #40]	; (8005b14 <HAL_RCC_OscConfig+0x33c>)
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	4b09      	ldr	r3, [pc, #36]	; (8005b14 <HAL_RCC_OscConfig+0x33c>)
 8005aee:	2180      	movs	r1, #128	; 0x80
 8005af0:	0049      	lsls	r1, r1, #1
 8005af2:	430a      	orrs	r2, r1
 8005af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005af6:	f7fd fef5 	bl	80038e4 <HAL_GetTick>
 8005afa:	0003      	movs	r3, r0
 8005afc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005afe:	e019      	b.n	8005b34 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b00:	f7fd fef0 	bl	80038e4 <HAL_GetTick>
 8005b04:	0002      	movs	r2, r0
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d912      	bls.n	8005b34 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e22b      	b.n	8005f6a <HAL_RCC_OscConfig+0x792>
 8005b12:	46c0      	nop			; (mov r8, r8)
 8005b14:	40021000 	.word	0x40021000
 8005b18:	fffeffff 	.word	0xfffeffff
 8005b1c:	fffbffff 	.word	0xfffbffff
 8005b20:	ffffe0ff 	.word	0xffffe0ff
 8005b24:	0800a988 	.word	0x0800a988
 8005b28:	20000090 	.word	0x20000090
 8005b2c:	20000094 	.word	0x20000094
 8005b30:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005b34:	4bca      	ldr	r3, [pc, #808]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	2380      	movs	r3, #128	; 0x80
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	d0df      	beq.n	8005b00 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b40:	4bc7      	ldr	r3, [pc, #796]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	4ac7      	ldr	r2, [pc, #796]	; (8005e64 <HAL_RCC_OscConfig+0x68c>)
 8005b46:	4013      	ands	r3, r2
 8005b48:	0019      	movs	r1, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b4e:	4bc4      	ldr	r3, [pc, #784]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005b50:	430a      	orrs	r2, r1
 8005b52:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b54:	4bc2      	ldr	r3, [pc, #776]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	021b      	lsls	r3, r3, #8
 8005b5a:	0a19      	lsrs	r1, r3, #8
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
 8005b60:	061a      	lsls	r2, r3, #24
 8005b62:	4bbf      	ldr	r3, [pc, #764]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005b64:	430a      	orrs	r2, r1
 8005b66:	605a      	str	r2, [r3, #4]
 8005b68:	e019      	b.n	8005b9e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005b6a:	4bbd      	ldr	r3, [pc, #756]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	4bbc      	ldr	r3, [pc, #752]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005b70:	49bd      	ldr	r1, [pc, #756]	; (8005e68 <HAL_RCC_OscConfig+0x690>)
 8005b72:	400a      	ands	r2, r1
 8005b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b76:	f7fd feb5 	bl	80038e4 <HAL_GetTick>
 8005b7a:	0003      	movs	r3, r0
 8005b7c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005b7e:	e008      	b.n	8005b92 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b80:	f7fd feb0 	bl	80038e4 <HAL_GetTick>
 8005b84:	0002      	movs	r2, r0
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d901      	bls.n	8005b92 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e1eb      	b.n	8005f6a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005b92:	4bb3      	ldr	r3, [pc, #716]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	2380      	movs	r3, #128	; 0x80
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	d1f0      	bne.n	8005b80 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2208      	movs	r2, #8
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	d036      	beq.n	8005c16 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	695b      	ldr	r3, [r3, #20]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d019      	beq.n	8005be4 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bb0:	4bab      	ldr	r3, [pc, #684]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005bb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005bb4:	4baa      	ldr	r3, [pc, #680]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005bb6:	2101      	movs	r1, #1
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bbc:	f7fd fe92 	bl	80038e4 <HAL_GetTick>
 8005bc0:	0003      	movs	r3, r0
 8005bc2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005bc4:	e008      	b.n	8005bd8 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bc6:	f7fd fe8d 	bl	80038e4 <HAL_GetTick>
 8005bca:	0002      	movs	r2, r0
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d901      	bls.n	8005bd8 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e1c8      	b.n	8005f6a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005bd8:	4ba1      	ldr	r3, [pc, #644]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bdc:	2202      	movs	r2, #2
 8005bde:	4013      	ands	r3, r2
 8005be0:	d0f1      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x3ee>
 8005be2:	e018      	b.n	8005c16 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005be4:	4b9e      	ldr	r3, [pc, #632]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005be6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005be8:	4b9d      	ldr	r3, [pc, #628]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005bea:	2101      	movs	r1, #1
 8005bec:	438a      	bics	r2, r1
 8005bee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bf0:	f7fd fe78 	bl	80038e4 <HAL_GetTick>
 8005bf4:	0003      	movs	r3, r0
 8005bf6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005bf8:	e008      	b.n	8005c0c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bfa:	f7fd fe73 	bl	80038e4 <HAL_GetTick>
 8005bfe:	0002      	movs	r2, r0
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d901      	bls.n	8005c0c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e1ae      	b.n	8005f6a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005c0c:	4b94      	ldr	r3, [pc, #592]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c10:	2202      	movs	r2, #2
 8005c12:	4013      	ands	r3, r2
 8005c14:	d1f1      	bne.n	8005bfa <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2204      	movs	r2, #4
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	d100      	bne.n	8005c22 <HAL_RCC_OscConfig+0x44a>
 8005c20:	e0ae      	b.n	8005d80 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c22:	2023      	movs	r0, #35	; 0x23
 8005c24:	183b      	adds	r3, r7, r0
 8005c26:	2200      	movs	r2, #0
 8005c28:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c2a:	4b8d      	ldr	r3, [pc, #564]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005c2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c2e:	2380      	movs	r3, #128	; 0x80
 8005c30:	055b      	lsls	r3, r3, #21
 8005c32:	4013      	ands	r3, r2
 8005c34:	d109      	bne.n	8005c4a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c36:	4b8a      	ldr	r3, [pc, #552]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005c38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c3a:	4b89      	ldr	r3, [pc, #548]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005c3c:	2180      	movs	r1, #128	; 0x80
 8005c3e:	0549      	lsls	r1, r1, #21
 8005c40:	430a      	orrs	r2, r1
 8005c42:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005c44:	183b      	adds	r3, r7, r0
 8005c46:	2201      	movs	r2, #1
 8005c48:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c4a:	4b88      	ldr	r3, [pc, #544]	; (8005e6c <HAL_RCC_OscConfig+0x694>)
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	2380      	movs	r3, #128	; 0x80
 8005c50:	005b      	lsls	r3, r3, #1
 8005c52:	4013      	ands	r3, r2
 8005c54:	d11a      	bne.n	8005c8c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c56:	4b85      	ldr	r3, [pc, #532]	; (8005e6c <HAL_RCC_OscConfig+0x694>)
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	4b84      	ldr	r3, [pc, #528]	; (8005e6c <HAL_RCC_OscConfig+0x694>)
 8005c5c:	2180      	movs	r1, #128	; 0x80
 8005c5e:	0049      	lsls	r1, r1, #1
 8005c60:	430a      	orrs	r2, r1
 8005c62:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c64:	f7fd fe3e 	bl	80038e4 <HAL_GetTick>
 8005c68:	0003      	movs	r3, r0
 8005c6a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c6c:	e008      	b.n	8005c80 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c6e:	f7fd fe39 	bl	80038e4 <HAL_GetTick>
 8005c72:	0002      	movs	r2, r0
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	2b64      	cmp	r3, #100	; 0x64
 8005c7a:	d901      	bls.n	8005c80 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e174      	b.n	8005f6a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c80:	4b7a      	ldr	r3, [pc, #488]	; (8005e6c <HAL_RCC_OscConfig+0x694>)
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	2380      	movs	r3, #128	; 0x80
 8005c86:	005b      	lsls	r3, r3, #1
 8005c88:	4013      	ands	r3, r2
 8005c8a:	d0f0      	beq.n	8005c6e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689a      	ldr	r2, [r3, #8]
 8005c90:	2380      	movs	r3, #128	; 0x80
 8005c92:	005b      	lsls	r3, r3, #1
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d107      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x4d0>
 8005c98:	4b71      	ldr	r3, [pc, #452]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005c9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c9c:	4b70      	ldr	r3, [pc, #448]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005c9e:	2180      	movs	r1, #128	; 0x80
 8005ca0:	0049      	lsls	r1, r1, #1
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	651a      	str	r2, [r3, #80]	; 0x50
 8005ca6:	e031      	b.n	8005d0c <HAL_RCC_OscConfig+0x534>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d10c      	bne.n	8005cca <HAL_RCC_OscConfig+0x4f2>
 8005cb0:	4b6b      	ldr	r3, [pc, #428]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005cb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005cb4:	4b6a      	ldr	r3, [pc, #424]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005cb6:	496c      	ldr	r1, [pc, #432]	; (8005e68 <HAL_RCC_OscConfig+0x690>)
 8005cb8:	400a      	ands	r2, r1
 8005cba:	651a      	str	r2, [r3, #80]	; 0x50
 8005cbc:	4b68      	ldr	r3, [pc, #416]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005cbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005cc0:	4b67      	ldr	r3, [pc, #412]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005cc2:	496b      	ldr	r1, [pc, #428]	; (8005e70 <HAL_RCC_OscConfig+0x698>)
 8005cc4:	400a      	ands	r2, r1
 8005cc6:	651a      	str	r2, [r3, #80]	; 0x50
 8005cc8:	e020      	b.n	8005d0c <HAL_RCC_OscConfig+0x534>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	689a      	ldr	r2, [r3, #8]
 8005cce:	23a0      	movs	r3, #160	; 0xa0
 8005cd0:	00db      	lsls	r3, r3, #3
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d10e      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x51c>
 8005cd6:	4b62      	ldr	r3, [pc, #392]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005cd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005cda:	4b61      	ldr	r3, [pc, #388]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005cdc:	2180      	movs	r1, #128	; 0x80
 8005cde:	00c9      	lsls	r1, r1, #3
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	651a      	str	r2, [r3, #80]	; 0x50
 8005ce4:	4b5e      	ldr	r3, [pc, #376]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005ce6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ce8:	4b5d      	ldr	r3, [pc, #372]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005cea:	2180      	movs	r1, #128	; 0x80
 8005cec:	0049      	lsls	r1, r1, #1
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	651a      	str	r2, [r3, #80]	; 0x50
 8005cf2:	e00b      	b.n	8005d0c <HAL_RCC_OscConfig+0x534>
 8005cf4:	4b5a      	ldr	r3, [pc, #360]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005cf6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005cf8:	4b59      	ldr	r3, [pc, #356]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005cfa:	495b      	ldr	r1, [pc, #364]	; (8005e68 <HAL_RCC_OscConfig+0x690>)
 8005cfc:	400a      	ands	r2, r1
 8005cfe:	651a      	str	r2, [r3, #80]	; 0x50
 8005d00:	4b57      	ldr	r3, [pc, #348]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005d02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d04:	4b56      	ldr	r3, [pc, #344]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005d06:	495a      	ldr	r1, [pc, #360]	; (8005e70 <HAL_RCC_OscConfig+0x698>)
 8005d08:	400a      	ands	r2, r1
 8005d0a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d015      	beq.n	8005d40 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d14:	f7fd fde6 	bl	80038e4 <HAL_GetTick>
 8005d18:	0003      	movs	r3, r0
 8005d1a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d1c:	e009      	b.n	8005d32 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d1e:	f7fd fde1 	bl	80038e4 <HAL_GetTick>
 8005d22:	0002      	movs	r2, r0
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	4a52      	ldr	r2, [pc, #328]	; (8005e74 <HAL_RCC_OscConfig+0x69c>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d901      	bls.n	8005d32 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e11b      	b.n	8005f6a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d32:	4b4b      	ldr	r3, [pc, #300]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005d34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d36:	2380      	movs	r3, #128	; 0x80
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	d0ef      	beq.n	8005d1e <HAL_RCC_OscConfig+0x546>
 8005d3e:	e014      	b.n	8005d6a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d40:	f7fd fdd0 	bl	80038e4 <HAL_GetTick>
 8005d44:	0003      	movs	r3, r0
 8005d46:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d48:	e009      	b.n	8005d5e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d4a:	f7fd fdcb 	bl	80038e4 <HAL_GetTick>
 8005d4e:	0002      	movs	r2, r0
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	4a47      	ldr	r2, [pc, #284]	; (8005e74 <HAL_RCC_OscConfig+0x69c>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d901      	bls.n	8005d5e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e105      	b.n	8005f6a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d5e:	4b40      	ldr	r3, [pc, #256]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005d60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d62:	2380      	movs	r3, #128	; 0x80
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	4013      	ands	r3, r2
 8005d68:	d1ef      	bne.n	8005d4a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005d6a:	2323      	movs	r3, #35	; 0x23
 8005d6c:	18fb      	adds	r3, r7, r3
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d105      	bne.n	8005d80 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d74:	4b3a      	ldr	r3, [pc, #232]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005d76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d78:	4b39      	ldr	r3, [pc, #228]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005d7a:	493f      	ldr	r1, [pc, #252]	; (8005e78 <HAL_RCC_OscConfig+0x6a0>)
 8005d7c:	400a      	ands	r2, r1
 8005d7e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2220      	movs	r2, #32
 8005d86:	4013      	ands	r3, r2
 8005d88:	d049      	beq.n	8005e1e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d026      	beq.n	8005de0 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005d92:	4b33      	ldr	r3, [pc, #204]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005d94:	689a      	ldr	r2, [r3, #8]
 8005d96:	4b32      	ldr	r3, [pc, #200]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005d98:	2101      	movs	r1, #1
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	609a      	str	r2, [r3, #8]
 8005d9e:	4b30      	ldr	r3, [pc, #192]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005da0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005da2:	4b2f      	ldr	r3, [pc, #188]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005da4:	2101      	movs	r1, #1
 8005da6:	430a      	orrs	r2, r1
 8005da8:	635a      	str	r2, [r3, #52]	; 0x34
 8005daa:	4b34      	ldr	r3, [pc, #208]	; (8005e7c <HAL_RCC_OscConfig+0x6a4>)
 8005dac:	6a1a      	ldr	r2, [r3, #32]
 8005dae:	4b33      	ldr	r3, [pc, #204]	; (8005e7c <HAL_RCC_OscConfig+0x6a4>)
 8005db0:	2180      	movs	r1, #128	; 0x80
 8005db2:	0189      	lsls	r1, r1, #6
 8005db4:	430a      	orrs	r2, r1
 8005db6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005db8:	f7fd fd94 	bl	80038e4 <HAL_GetTick>
 8005dbc:	0003      	movs	r3, r0
 8005dbe:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005dc0:	e008      	b.n	8005dd4 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005dc2:	f7fd fd8f 	bl	80038e4 <HAL_GetTick>
 8005dc6:	0002      	movs	r2, r0
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d901      	bls.n	8005dd4 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e0ca      	b.n	8005f6a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005dd4:	4b22      	ldr	r3, [pc, #136]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	2202      	movs	r2, #2
 8005dda:	4013      	ands	r3, r2
 8005ddc:	d0f1      	beq.n	8005dc2 <HAL_RCC_OscConfig+0x5ea>
 8005dde:	e01e      	b.n	8005e1e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005de0:	4b1f      	ldr	r3, [pc, #124]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005de2:	689a      	ldr	r2, [r3, #8]
 8005de4:	4b1e      	ldr	r3, [pc, #120]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005de6:	2101      	movs	r1, #1
 8005de8:	438a      	bics	r2, r1
 8005dea:	609a      	str	r2, [r3, #8]
 8005dec:	4b23      	ldr	r3, [pc, #140]	; (8005e7c <HAL_RCC_OscConfig+0x6a4>)
 8005dee:	6a1a      	ldr	r2, [r3, #32]
 8005df0:	4b22      	ldr	r3, [pc, #136]	; (8005e7c <HAL_RCC_OscConfig+0x6a4>)
 8005df2:	4923      	ldr	r1, [pc, #140]	; (8005e80 <HAL_RCC_OscConfig+0x6a8>)
 8005df4:	400a      	ands	r2, r1
 8005df6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005df8:	f7fd fd74 	bl	80038e4 <HAL_GetTick>
 8005dfc:	0003      	movs	r3, r0
 8005dfe:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e00:	e008      	b.n	8005e14 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e02:	f7fd fd6f 	bl	80038e4 <HAL_GetTick>
 8005e06:	0002      	movs	r2, r0
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d901      	bls.n	8005e14 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	e0aa      	b.n	8005f6a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e14:	4b12      	ldr	r3, [pc, #72]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	2202      	movs	r2, #2
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	d1f1      	bne.n	8005e02 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d100      	bne.n	8005e28 <HAL_RCC_OscConfig+0x650>
 8005e26:	e09f      	b.n	8005f68 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	2b0c      	cmp	r3, #12
 8005e2c:	d100      	bne.n	8005e30 <HAL_RCC_OscConfig+0x658>
 8005e2e:	e078      	b.n	8005f22 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d159      	bne.n	8005eec <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e38:	4b09      	ldr	r3, [pc, #36]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	4b08      	ldr	r3, [pc, #32]	; (8005e60 <HAL_RCC_OscConfig+0x688>)
 8005e3e:	4911      	ldr	r1, [pc, #68]	; (8005e84 <HAL_RCC_OscConfig+0x6ac>)
 8005e40:	400a      	ands	r2, r1
 8005e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e44:	f7fd fd4e 	bl	80038e4 <HAL_GetTick>
 8005e48:	0003      	movs	r3, r0
 8005e4a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005e4c:	e01c      	b.n	8005e88 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e4e:	f7fd fd49 	bl	80038e4 <HAL_GetTick>
 8005e52:	0002      	movs	r2, r0
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d915      	bls.n	8005e88 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e084      	b.n	8005f6a <HAL_RCC_OscConfig+0x792>
 8005e60:	40021000 	.word	0x40021000
 8005e64:	ffff1fff 	.word	0xffff1fff
 8005e68:	fffffeff 	.word	0xfffffeff
 8005e6c:	40007000 	.word	0x40007000
 8005e70:	fffffbff 	.word	0xfffffbff
 8005e74:	00001388 	.word	0x00001388
 8005e78:	efffffff 	.word	0xefffffff
 8005e7c:	40010000 	.word	0x40010000
 8005e80:	ffffdfff 	.word	0xffffdfff
 8005e84:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005e88:	4b3a      	ldr	r3, [pc, #232]	; (8005f74 <HAL_RCC_OscConfig+0x79c>)
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	2380      	movs	r3, #128	; 0x80
 8005e8e:	049b      	lsls	r3, r3, #18
 8005e90:	4013      	ands	r3, r2
 8005e92:	d1dc      	bne.n	8005e4e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e94:	4b37      	ldr	r3, [pc, #220]	; (8005f74 <HAL_RCC_OscConfig+0x79c>)
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	4a37      	ldr	r2, [pc, #220]	; (8005f78 <HAL_RCC_OscConfig+0x7a0>)
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	0019      	movs	r1, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea6:	431a      	orrs	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eac:	431a      	orrs	r2, r3
 8005eae:	4b31      	ldr	r3, [pc, #196]	; (8005f74 <HAL_RCC_OscConfig+0x79c>)
 8005eb0:	430a      	orrs	r2, r1
 8005eb2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005eb4:	4b2f      	ldr	r3, [pc, #188]	; (8005f74 <HAL_RCC_OscConfig+0x79c>)
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	4b2e      	ldr	r3, [pc, #184]	; (8005f74 <HAL_RCC_OscConfig+0x79c>)
 8005eba:	2180      	movs	r1, #128	; 0x80
 8005ebc:	0449      	lsls	r1, r1, #17
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ec2:	f7fd fd0f 	bl	80038e4 <HAL_GetTick>
 8005ec6:	0003      	movs	r3, r0
 8005ec8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005eca:	e008      	b.n	8005ede <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ecc:	f7fd fd0a 	bl	80038e4 <HAL_GetTick>
 8005ed0:	0002      	movs	r2, r0
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d901      	bls.n	8005ede <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e045      	b.n	8005f6a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005ede:	4b25      	ldr	r3, [pc, #148]	; (8005f74 <HAL_RCC_OscConfig+0x79c>)
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	2380      	movs	r3, #128	; 0x80
 8005ee4:	049b      	lsls	r3, r3, #18
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	d0f0      	beq.n	8005ecc <HAL_RCC_OscConfig+0x6f4>
 8005eea:	e03d      	b.n	8005f68 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eec:	4b21      	ldr	r3, [pc, #132]	; (8005f74 <HAL_RCC_OscConfig+0x79c>)
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	4b20      	ldr	r3, [pc, #128]	; (8005f74 <HAL_RCC_OscConfig+0x79c>)
 8005ef2:	4922      	ldr	r1, [pc, #136]	; (8005f7c <HAL_RCC_OscConfig+0x7a4>)
 8005ef4:	400a      	ands	r2, r1
 8005ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ef8:	f7fd fcf4 	bl	80038e4 <HAL_GetTick>
 8005efc:	0003      	movs	r3, r0
 8005efe:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005f00:	e008      	b.n	8005f14 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f02:	f7fd fcef 	bl	80038e4 <HAL_GetTick>
 8005f06:	0002      	movs	r2, r0
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d901      	bls.n	8005f14 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8005f10:	2303      	movs	r3, #3
 8005f12:	e02a      	b.n	8005f6a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005f14:	4b17      	ldr	r3, [pc, #92]	; (8005f74 <HAL_RCC_OscConfig+0x79c>)
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	2380      	movs	r3, #128	; 0x80
 8005f1a:	049b      	lsls	r3, r3, #18
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	d1f0      	bne.n	8005f02 <HAL_RCC_OscConfig+0x72a>
 8005f20:	e022      	b.n	8005f68 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d101      	bne.n	8005f2e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e01d      	b.n	8005f6a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005f2e:	4b11      	ldr	r3, [pc, #68]	; (8005f74 <HAL_RCC_OscConfig+0x79c>)
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f34:	69ba      	ldr	r2, [r7, #24]
 8005f36:	2380      	movs	r3, #128	; 0x80
 8005f38:	025b      	lsls	r3, r3, #9
 8005f3a:	401a      	ands	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d10f      	bne.n	8005f64 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005f44:	69ba      	ldr	r2, [r7, #24]
 8005f46:	23f0      	movs	r3, #240	; 0xf0
 8005f48:	039b      	lsls	r3, r3, #14
 8005f4a:	401a      	ands	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d107      	bne.n	8005f64 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005f54:	69ba      	ldr	r2, [r7, #24]
 8005f56:	23c0      	movs	r3, #192	; 0xc0
 8005f58:	041b      	lsls	r3, r3, #16
 8005f5a:	401a      	ands	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d001      	beq.n	8005f68 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e000      	b.n	8005f6a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	0018      	movs	r0, r3
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	b00a      	add	sp, #40	; 0x28
 8005f70:	bdb0      	pop	{r4, r5, r7, pc}
 8005f72:	46c0      	nop			; (mov r8, r8)
 8005f74:	40021000 	.word	0x40021000
 8005f78:	ff02ffff 	.word	0xff02ffff
 8005f7c:	feffffff 	.word	0xfeffffff

08005f80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f80:	b5b0      	push	{r4, r5, r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d101      	bne.n	8005f94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e128      	b.n	80061e6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f94:	4b96      	ldr	r3, [pc, #600]	; (80061f0 <HAL_RCC_ClockConfig+0x270>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	683a      	ldr	r2, [r7, #0]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d91e      	bls.n	8005fe0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fa2:	4b93      	ldr	r3, [pc, #588]	; (80061f0 <HAL_RCC_ClockConfig+0x270>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	4393      	bics	r3, r2
 8005faa:	0019      	movs	r1, r3
 8005fac:	4b90      	ldr	r3, [pc, #576]	; (80061f0 <HAL_RCC_ClockConfig+0x270>)
 8005fae:	683a      	ldr	r2, [r7, #0]
 8005fb0:	430a      	orrs	r2, r1
 8005fb2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005fb4:	f7fd fc96 	bl	80038e4 <HAL_GetTick>
 8005fb8:	0003      	movs	r3, r0
 8005fba:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fbc:	e009      	b.n	8005fd2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fbe:	f7fd fc91 	bl	80038e4 <HAL_GetTick>
 8005fc2:	0002      	movs	r2, r0
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	4a8a      	ldr	r2, [pc, #552]	; (80061f4 <HAL_RCC_ClockConfig+0x274>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d901      	bls.n	8005fd2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e109      	b.n	80061e6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fd2:	4b87      	ldr	r3, [pc, #540]	; (80061f0 <HAL_RCC_ClockConfig+0x270>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	4013      	ands	r3, r2
 8005fda:	683a      	ldr	r2, [r7, #0]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d1ee      	bne.n	8005fbe <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2202      	movs	r2, #2
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	d009      	beq.n	8005ffe <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fea:	4b83      	ldr	r3, [pc, #524]	; (80061f8 <HAL_RCC_ClockConfig+0x278>)
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	22f0      	movs	r2, #240	; 0xf0
 8005ff0:	4393      	bics	r3, r2
 8005ff2:	0019      	movs	r1, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	689a      	ldr	r2, [r3, #8]
 8005ff8:	4b7f      	ldr	r3, [pc, #508]	; (80061f8 <HAL_RCC_ClockConfig+0x278>)
 8005ffa:	430a      	orrs	r2, r1
 8005ffc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2201      	movs	r2, #1
 8006004:	4013      	ands	r3, r2
 8006006:	d100      	bne.n	800600a <HAL_RCC_ClockConfig+0x8a>
 8006008:	e089      	b.n	800611e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	2b02      	cmp	r3, #2
 8006010:	d107      	bne.n	8006022 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006012:	4b79      	ldr	r3, [pc, #484]	; (80061f8 <HAL_RCC_ClockConfig+0x278>)
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	2380      	movs	r3, #128	; 0x80
 8006018:	029b      	lsls	r3, r3, #10
 800601a:	4013      	ands	r3, r2
 800601c:	d120      	bne.n	8006060 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e0e1      	b.n	80061e6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	2b03      	cmp	r3, #3
 8006028:	d107      	bne.n	800603a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800602a:	4b73      	ldr	r3, [pc, #460]	; (80061f8 <HAL_RCC_ClockConfig+0x278>)
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	2380      	movs	r3, #128	; 0x80
 8006030:	049b      	lsls	r3, r3, #18
 8006032:	4013      	ands	r3, r2
 8006034:	d114      	bne.n	8006060 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e0d5      	b.n	80061e6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d106      	bne.n	8006050 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006042:	4b6d      	ldr	r3, [pc, #436]	; (80061f8 <HAL_RCC_ClockConfig+0x278>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2204      	movs	r2, #4
 8006048:	4013      	ands	r3, r2
 800604a:	d109      	bne.n	8006060 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e0ca      	b.n	80061e6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006050:	4b69      	ldr	r3, [pc, #420]	; (80061f8 <HAL_RCC_ClockConfig+0x278>)
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	2380      	movs	r3, #128	; 0x80
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4013      	ands	r3, r2
 800605a:	d101      	bne.n	8006060 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	e0c2      	b.n	80061e6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006060:	4b65      	ldr	r3, [pc, #404]	; (80061f8 <HAL_RCC_ClockConfig+0x278>)
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	2203      	movs	r2, #3
 8006066:	4393      	bics	r3, r2
 8006068:	0019      	movs	r1, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685a      	ldr	r2, [r3, #4]
 800606e:	4b62      	ldr	r3, [pc, #392]	; (80061f8 <HAL_RCC_ClockConfig+0x278>)
 8006070:	430a      	orrs	r2, r1
 8006072:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006074:	f7fd fc36 	bl	80038e4 <HAL_GetTick>
 8006078:	0003      	movs	r3, r0
 800607a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	2b02      	cmp	r3, #2
 8006082:	d111      	bne.n	80060a8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006084:	e009      	b.n	800609a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006086:	f7fd fc2d 	bl	80038e4 <HAL_GetTick>
 800608a:	0002      	movs	r2, r0
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	4a58      	ldr	r2, [pc, #352]	; (80061f4 <HAL_RCC_ClockConfig+0x274>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d901      	bls.n	800609a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e0a5      	b.n	80061e6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800609a:	4b57      	ldr	r3, [pc, #348]	; (80061f8 <HAL_RCC_ClockConfig+0x278>)
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	220c      	movs	r2, #12
 80060a0:	4013      	ands	r3, r2
 80060a2:	2b08      	cmp	r3, #8
 80060a4:	d1ef      	bne.n	8006086 <HAL_RCC_ClockConfig+0x106>
 80060a6:	e03a      	b.n	800611e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	2b03      	cmp	r3, #3
 80060ae:	d111      	bne.n	80060d4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060b0:	e009      	b.n	80060c6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060b2:	f7fd fc17 	bl	80038e4 <HAL_GetTick>
 80060b6:	0002      	movs	r2, r0
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	4a4d      	ldr	r2, [pc, #308]	; (80061f4 <HAL_RCC_ClockConfig+0x274>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d901      	bls.n	80060c6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e08f      	b.n	80061e6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060c6:	4b4c      	ldr	r3, [pc, #304]	; (80061f8 <HAL_RCC_ClockConfig+0x278>)
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	220c      	movs	r2, #12
 80060cc:	4013      	ands	r3, r2
 80060ce:	2b0c      	cmp	r3, #12
 80060d0:	d1ef      	bne.n	80060b2 <HAL_RCC_ClockConfig+0x132>
 80060d2:	e024      	b.n	800611e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d11b      	bne.n	8006114 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80060dc:	e009      	b.n	80060f2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060de:	f7fd fc01 	bl	80038e4 <HAL_GetTick>
 80060e2:	0002      	movs	r2, r0
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	4a42      	ldr	r2, [pc, #264]	; (80061f4 <HAL_RCC_ClockConfig+0x274>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d901      	bls.n	80060f2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e079      	b.n	80061e6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80060f2:	4b41      	ldr	r3, [pc, #260]	; (80061f8 <HAL_RCC_ClockConfig+0x278>)
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	220c      	movs	r2, #12
 80060f8:	4013      	ands	r3, r2
 80060fa:	2b04      	cmp	r3, #4
 80060fc:	d1ef      	bne.n	80060de <HAL_RCC_ClockConfig+0x15e>
 80060fe:	e00e      	b.n	800611e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006100:	f7fd fbf0 	bl	80038e4 <HAL_GetTick>
 8006104:	0002      	movs	r2, r0
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	4a3a      	ldr	r2, [pc, #232]	; (80061f4 <HAL_RCC_ClockConfig+0x274>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d901      	bls.n	8006114 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e068      	b.n	80061e6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006114:	4b38      	ldr	r3, [pc, #224]	; (80061f8 <HAL_RCC_ClockConfig+0x278>)
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	220c      	movs	r2, #12
 800611a:	4013      	ands	r3, r2
 800611c:	d1f0      	bne.n	8006100 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800611e:	4b34      	ldr	r3, [pc, #208]	; (80061f0 <HAL_RCC_ClockConfig+0x270>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2201      	movs	r2, #1
 8006124:	4013      	ands	r3, r2
 8006126:	683a      	ldr	r2, [r7, #0]
 8006128:	429a      	cmp	r2, r3
 800612a:	d21e      	bcs.n	800616a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800612c:	4b30      	ldr	r3, [pc, #192]	; (80061f0 <HAL_RCC_ClockConfig+0x270>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2201      	movs	r2, #1
 8006132:	4393      	bics	r3, r2
 8006134:	0019      	movs	r1, r3
 8006136:	4b2e      	ldr	r3, [pc, #184]	; (80061f0 <HAL_RCC_ClockConfig+0x270>)
 8006138:	683a      	ldr	r2, [r7, #0]
 800613a:	430a      	orrs	r2, r1
 800613c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800613e:	f7fd fbd1 	bl	80038e4 <HAL_GetTick>
 8006142:	0003      	movs	r3, r0
 8006144:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006146:	e009      	b.n	800615c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006148:	f7fd fbcc 	bl	80038e4 <HAL_GetTick>
 800614c:	0002      	movs	r2, r0
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	4a28      	ldr	r2, [pc, #160]	; (80061f4 <HAL_RCC_ClockConfig+0x274>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d901      	bls.n	800615c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e044      	b.n	80061e6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800615c:	4b24      	ldr	r3, [pc, #144]	; (80061f0 <HAL_RCC_ClockConfig+0x270>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2201      	movs	r2, #1
 8006162:	4013      	ands	r3, r2
 8006164:	683a      	ldr	r2, [r7, #0]
 8006166:	429a      	cmp	r2, r3
 8006168:	d1ee      	bne.n	8006148 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2204      	movs	r2, #4
 8006170:	4013      	ands	r3, r2
 8006172:	d009      	beq.n	8006188 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006174:	4b20      	ldr	r3, [pc, #128]	; (80061f8 <HAL_RCC_ClockConfig+0x278>)
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	4a20      	ldr	r2, [pc, #128]	; (80061fc <HAL_RCC_ClockConfig+0x27c>)
 800617a:	4013      	ands	r3, r2
 800617c:	0019      	movs	r1, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	68da      	ldr	r2, [r3, #12]
 8006182:	4b1d      	ldr	r3, [pc, #116]	; (80061f8 <HAL_RCC_ClockConfig+0x278>)
 8006184:	430a      	orrs	r2, r1
 8006186:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2208      	movs	r2, #8
 800618e:	4013      	ands	r3, r2
 8006190:	d00a      	beq.n	80061a8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006192:	4b19      	ldr	r3, [pc, #100]	; (80061f8 <HAL_RCC_ClockConfig+0x278>)
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	4a1a      	ldr	r2, [pc, #104]	; (8006200 <HAL_RCC_ClockConfig+0x280>)
 8006198:	4013      	ands	r3, r2
 800619a:	0019      	movs	r1, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	00da      	lsls	r2, r3, #3
 80061a2:	4b15      	ldr	r3, [pc, #84]	; (80061f8 <HAL_RCC_ClockConfig+0x278>)
 80061a4:	430a      	orrs	r2, r1
 80061a6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80061a8:	f000 f832 	bl	8006210 <HAL_RCC_GetSysClockFreq>
 80061ac:	0001      	movs	r1, r0
 80061ae:	4b12      	ldr	r3, [pc, #72]	; (80061f8 <HAL_RCC_ClockConfig+0x278>)
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	091b      	lsrs	r3, r3, #4
 80061b4:	220f      	movs	r2, #15
 80061b6:	4013      	ands	r3, r2
 80061b8:	4a12      	ldr	r2, [pc, #72]	; (8006204 <HAL_RCC_ClockConfig+0x284>)
 80061ba:	5cd3      	ldrb	r3, [r2, r3]
 80061bc:	000a      	movs	r2, r1
 80061be:	40da      	lsrs	r2, r3
 80061c0:	4b11      	ldr	r3, [pc, #68]	; (8006208 <HAL_RCC_ClockConfig+0x288>)
 80061c2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80061c4:	4b11      	ldr	r3, [pc, #68]	; (800620c <HAL_RCC_ClockConfig+0x28c>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	250b      	movs	r5, #11
 80061ca:	197c      	adds	r4, r7, r5
 80061cc:	0018      	movs	r0, r3
 80061ce:	f7fd fb43 	bl	8003858 <HAL_InitTick>
 80061d2:	0003      	movs	r3, r0
 80061d4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80061d6:	197b      	adds	r3, r7, r5
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d002      	beq.n	80061e4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80061de:	197b      	adds	r3, r7, r5
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	e000      	b.n	80061e6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	0018      	movs	r0, r3
 80061e8:	46bd      	mov	sp, r7
 80061ea:	b004      	add	sp, #16
 80061ec:	bdb0      	pop	{r4, r5, r7, pc}
 80061ee:	46c0      	nop			; (mov r8, r8)
 80061f0:	40022000 	.word	0x40022000
 80061f4:	00001388 	.word	0x00001388
 80061f8:	40021000 	.word	0x40021000
 80061fc:	fffff8ff 	.word	0xfffff8ff
 8006200:	ffffc7ff 	.word	0xffffc7ff
 8006204:	0800a988 	.word	0x0800a988
 8006208:	20000090 	.word	0x20000090
 800620c:	20000094 	.word	0x20000094

08006210 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006210:	b5b0      	push	{r4, r5, r7, lr}
 8006212:	b08e      	sub	sp, #56	; 0x38
 8006214:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8006216:	4b4c      	ldr	r3, [pc, #304]	; (8006348 <HAL_RCC_GetSysClockFreq+0x138>)
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800621c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800621e:	230c      	movs	r3, #12
 8006220:	4013      	ands	r3, r2
 8006222:	2b0c      	cmp	r3, #12
 8006224:	d014      	beq.n	8006250 <HAL_RCC_GetSysClockFreq+0x40>
 8006226:	d900      	bls.n	800622a <HAL_RCC_GetSysClockFreq+0x1a>
 8006228:	e07b      	b.n	8006322 <HAL_RCC_GetSysClockFreq+0x112>
 800622a:	2b04      	cmp	r3, #4
 800622c:	d002      	beq.n	8006234 <HAL_RCC_GetSysClockFreq+0x24>
 800622e:	2b08      	cmp	r3, #8
 8006230:	d00b      	beq.n	800624a <HAL_RCC_GetSysClockFreq+0x3a>
 8006232:	e076      	b.n	8006322 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006234:	4b44      	ldr	r3, [pc, #272]	; (8006348 <HAL_RCC_GetSysClockFreq+0x138>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2210      	movs	r2, #16
 800623a:	4013      	ands	r3, r2
 800623c:	d002      	beq.n	8006244 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800623e:	4b43      	ldr	r3, [pc, #268]	; (800634c <HAL_RCC_GetSysClockFreq+0x13c>)
 8006240:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8006242:	e07c      	b.n	800633e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8006244:	4b42      	ldr	r3, [pc, #264]	; (8006350 <HAL_RCC_GetSysClockFreq+0x140>)
 8006246:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006248:	e079      	b.n	800633e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800624a:	4b42      	ldr	r3, [pc, #264]	; (8006354 <HAL_RCC_GetSysClockFreq+0x144>)
 800624c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800624e:	e076      	b.n	800633e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006252:	0c9a      	lsrs	r2, r3, #18
 8006254:	230f      	movs	r3, #15
 8006256:	401a      	ands	r2, r3
 8006258:	4b3f      	ldr	r3, [pc, #252]	; (8006358 <HAL_RCC_GetSysClockFreq+0x148>)
 800625a:	5c9b      	ldrb	r3, [r3, r2]
 800625c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800625e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006260:	0d9a      	lsrs	r2, r3, #22
 8006262:	2303      	movs	r3, #3
 8006264:	4013      	ands	r3, r2
 8006266:	3301      	adds	r3, #1
 8006268:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800626a:	4b37      	ldr	r3, [pc, #220]	; (8006348 <HAL_RCC_GetSysClockFreq+0x138>)
 800626c:	68da      	ldr	r2, [r3, #12]
 800626e:	2380      	movs	r3, #128	; 0x80
 8006270:	025b      	lsls	r3, r3, #9
 8006272:	4013      	ands	r3, r2
 8006274:	d01a      	beq.n	80062ac <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006278:	61bb      	str	r3, [r7, #24]
 800627a:	2300      	movs	r3, #0
 800627c:	61fb      	str	r3, [r7, #28]
 800627e:	4a35      	ldr	r2, [pc, #212]	; (8006354 <HAL_RCC_GetSysClockFreq+0x144>)
 8006280:	2300      	movs	r3, #0
 8006282:	69b8      	ldr	r0, [r7, #24]
 8006284:	69f9      	ldr	r1, [r7, #28]
 8006286:	f7fa f927 	bl	80004d8 <__aeabi_lmul>
 800628a:	0002      	movs	r2, r0
 800628c:	000b      	movs	r3, r1
 800628e:	0010      	movs	r0, r2
 8006290:	0019      	movs	r1, r3
 8006292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006294:	613b      	str	r3, [r7, #16]
 8006296:	2300      	movs	r3, #0
 8006298:	617b      	str	r3, [r7, #20]
 800629a:	693a      	ldr	r2, [r7, #16]
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	f7fa f8fb 	bl	8000498 <__aeabi_uldivmod>
 80062a2:	0002      	movs	r2, r0
 80062a4:	000b      	movs	r3, r1
 80062a6:	0013      	movs	r3, r2
 80062a8:	637b      	str	r3, [r7, #52]	; 0x34
 80062aa:	e037      	b.n	800631c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80062ac:	4b26      	ldr	r3, [pc, #152]	; (8006348 <HAL_RCC_GetSysClockFreq+0x138>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2210      	movs	r2, #16
 80062b2:	4013      	ands	r3, r2
 80062b4:	d01a      	beq.n	80062ec <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80062b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b8:	60bb      	str	r3, [r7, #8]
 80062ba:	2300      	movs	r3, #0
 80062bc:	60fb      	str	r3, [r7, #12]
 80062be:	4a23      	ldr	r2, [pc, #140]	; (800634c <HAL_RCC_GetSysClockFreq+0x13c>)
 80062c0:	2300      	movs	r3, #0
 80062c2:	68b8      	ldr	r0, [r7, #8]
 80062c4:	68f9      	ldr	r1, [r7, #12]
 80062c6:	f7fa f907 	bl	80004d8 <__aeabi_lmul>
 80062ca:	0002      	movs	r2, r0
 80062cc:	000b      	movs	r3, r1
 80062ce:	0010      	movs	r0, r2
 80062d0:	0019      	movs	r1, r3
 80062d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d4:	603b      	str	r3, [r7, #0]
 80062d6:	2300      	movs	r3, #0
 80062d8:	607b      	str	r3, [r7, #4]
 80062da:	683a      	ldr	r2, [r7, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f7fa f8db 	bl	8000498 <__aeabi_uldivmod>
 80062e2:	0002      	movs	r2, r0
 80062e4:	000b      	movs	r3, r1
 80062e6:	0013      	movs	r3, r2
 80062e8:	637b      	str	r3, [r7, #52]	; 0x34
 80062ea:	e017      	b.n	800631c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80062ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ee:	0018      	movs	r0, r3
 80062f0:	2300      	movs	r3, #0
 80062f2:	0019      	movs	r1, r3
 80062f4:	4a16      	ldr	r2, [pc, #88]	; (8006350 <HAL_RCC_GetSysClockFreq+0x140>)
 80062f6:	2300      	movs	r3, #0
 80062f8:	f7fa f8ee 	bl	80004d8 <__aeabi_lmul>
 80062fc:	0002      	movs	r2, r0
 80062fe:	000b      	movs	r3, r1
 8006300:	0010      	movs	r0, r2
 8006302:	0019      	movs	r1, r3
 8006304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006306:	001c      	movs	r4, r3
 8006308:	2300      	movs	r3, #0
 800630a:	001d      	movs	r5, r3
 800630c:	0022      	movs	r2, r4
 800630e:	002b      	movs	r3, r5
 8006310:	f7fa f8c2 	bl	8000498 <__aeabi_uldivmod>
 8006314:	0002      	movs	r2, r0
 8006316:	000b      	movs	r3, r1
 8006318:	0013      	movs	r3, r2
 800631a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800631c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800631e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006320:	e00d      	b.n	800633e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8006322:	4b09      	ldr	r3, [pc, #36]	; (8006348 <HAL_RCC_GetSysClockFreq+0x138>)
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	0b5b      	lsrs	r3, r3, #13
 8006328:	2207      	movs	r2, #7
 800632a:	4013      	ands	r3, r2
 800632c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800632e:	6a3b      	ldr	r3, [r7, #32]
 8006330:	3301      	adds	r3, #1
 8006332:	2280      	movs	r2, #128	; 0x80
 8006334:	0212      	lsls	r2, r2, #8
 8006336:	409a      	lsls	r2, r3
 8006338:	0013      	movs	r3, r2
 800633a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800633c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800633e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006340:	0018      	movs	r0, r3
 8006342:	46bd      	mov	sp, r7
 8006344:	b00e      	add	sp, #56	; 0x38
 8006346:	bdb0      	pop	{r4, r5, r7, pc}
 8006348:	40021000 	.word	0x40021000
 800634c:	003d0900 	.word	0x003d0900
 8006350:	00f42400 	.word	0x00f42400
 8006354:	007a1200 	.word	0x007a1200
 8006358:	0800a9a0 	.word	0x0800a9a0

0800635c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006360:	4b02      	ldr	r3, [pc, #8]	; (800636c <HAL_RCC_GetHCLKFreq+0x10>)
 8006362:	681b      	ldr	r3, [r3, #0]
}
 8006364:	0018      	movs	r0, r3
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	46c0      	nop			; (mov r8, r8)
 800636c:	20000090 	.word	0x20000090

08006370 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006374:	f7ff fff2 	bl	800635c <HAL_RCC_GetHCLKFreq>
 8006378:	0001      	movs	r1, r0
 800637a:	4b06      	ldr	r3, [pc, #24]	; (8006394 <HAL_RCC_GetPCLK1Freq+0x24>)
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	0a1b      	lsrs	r3, r3, #8
 8006380:	2207      	movs	r2, #7
 8006382:	4013      	ands	r3, r2
 8006384:	4a04      	ldr	r2, [pc, #16]	; (8006398 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006386:	5cd3      	ldrb	r3, [r2, r3]
 8006388:	40d9      	lsrs	r1, r3
 800638a:	000b      	movs	r3, r1
}
 800638c:	0018      	movs	r0, r3
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	46c0      	nop			; (mov r8, r8)
 8006394:	40021000 	.word	0x40021000
 8006398:	0800a998 	.word	0x0800a998

0800639c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80063a0:	f7ff ffdc 	bl	800635c <HAL_RCC_GetHCLKFreq>
 80063a4:	0001      	movs	r1, r0
 80063a6:	4b06      	ldr	r3, [pc, #24]	; (80063c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	0adb      	lsrs	r3, r3, #11
 80063ac:	2207      	movs	r2, #7
 80063ae:	4013      	ands	r3, r2
 80063b0:	4a04      	ldr	r2, [pc, #16]	; (80063c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80063b2:	5cd3      	ldrb	r3, [r2, r3]
 80063b4:	40d9      	lsrs	r1, r3
 80063b6:	000b      	movs	r3, r1
}
 80063b8:	0018      	movs	r0, r3
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	46c0      	nop			; (mov r8, r8)
 80063c0:	40021000 	.word	0x40021000
 80063c4:	0800a998 	.word	0x0800a998

080063c8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b086      	sub	sp, #24
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80063d0:	2317      	movs	r3, #23
 80063d2:	18fb      	adds	r3, r7, r3
 80063d4:	2200      	movs	r2, #0
 80063d6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2220      	movs	r2, #32
 80063de:	4013      	ands	r3, r2
 80063e0:	d106      	bne.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	2380      	movs	r3, #128	; 0x80
 80063e8:	011b      	lsls	r3, r3, #4
 80063ea:	4013      	ands	r3, r2
 80063ec:	d100      	bne.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80063ee:	e104      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063f0:	4bb9      	ldr	r3, [pc, #740]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80063f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063f4:	2380      	movs	r3, #128	; 0x80
 80063f6:	055b      	lsls	r3, r3, #21
 80063f8:	4013      	ands	r3, r2
 80063fa:	d10a      	bne.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063fc:	4bb6      	ldr	r3, [pc, #728]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80063fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006400:	4bb5      	ldr	r3, [pc, #724]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006402:	2180      	movs	r1, #128	; 0x80
 8006404:	0549      	lsls	r1, r1, #21
 8006406:	430a      	orrs	r2, r1
 8006408:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800640a:	2317      	movs	r3, #23
 800640c:	18fb      	adds	r3, r7, r3
 800640e:	2201      	movs	r2, #1
 8006410:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006412:	4bb2      	ldr	r3, [pc, #712]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	2380      	movs	r3, #128	; 0x80
 8006418:	005b      	lsls	r3, r3, #1
 800641a:	4013      	ands	r3, r2
 800641c:	d11a      	bne.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800641e:	4baf      	ldr	r3, [pc, #700]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	4bae      	ldr	r3, [pc, #696]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8006424:	2180      	movs	r1, #128	; 0x80
 8006426:	0049      	lsls	r1, r1, #1
 8006428:	430a      	orrs	r2, r1
 800642a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800642c:	f7fd fa5a 	bl	80038e4 <HAL_GetTick>
 8006430:	0003      	movs	r3, r0
 8006432:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006434:	e008      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006436:	f7fd fa55 	bl	80038e4 <HAL_GetTick>
 800643a:	0002      	movs	r2, r0
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	2b64      	cmp	r3, #100	; 0x64
 8006442:	d901      	bls.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e143      	b.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006448:	4ba4      	ldr	r3, [pc, #656]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	2380      	movs	r3, #128	; 0x80
 800644e:	005b      	lsls	r3, r3, #1
 8006450:	4013      	ands	r3, r2
 8006452:	d0f0      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8006454:	4ba0      	ldr	r3, [pc, #640]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	23c0      	movs	r3, #192	; 0xc0
 800645a:	039b      	lsls	r3, r3, #14
 800645c:	4013      	ands	r3, r2
 800645e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685a      	ldr	r2, [r3, #4]
 8006464:	23c0      	movs	r3, #192	; 0xc0
 8006466:	039b      	lsls	r3, r3, #14
 8006468:	4013      	ands	r3, r2
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	429a      	cmp	r2, r3
 800646e:	d107      	bne.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	689a      	ldr	r2, [r3, #8]
 8006474:	23c0      	movs	r3, #192	; 0xc0
 8006476:	039b      	lsls	r3, r3, #14
 8006478:	4013      	ands	r3, r2
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	429a      	cmp	r2, r3
 800647e:	d013      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685a      	ldr	r2, [r3, #4]
 8006484:	23c0      	movs	r3, #192	; 0xc0
 8006486:	029b      	lsls	r3, r3, #10
 8006488:	401a      	ands	r2, r3
 800648a:	23c0      	movs	r3, #192	; 0xc0
 800648c:	029b      	lsls	r3, r3, #10
 800648e:	429a      	cmp	r2, r3
 8006490:	d10a      	bne.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006492:	4b91      	ldr	r3, [pc, #580]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	2380      	movs	r3, #128	; 0x80
 8006498:	029b      	lsls	r3, r3, #10
 800649a:	401a      	ands	r2, r3
 800649c:	2380      	movs	r3, #128	; 0x80
 800649e:	029b      	lsls	r3, r3, #10
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d101      	bne.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e113      	b.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80064a8:	4b8b      	ldr	r3, [pc, #556]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80064aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80064ac:	23c0      	movs	r3, #192	; 0xc0
 80064ae:	029b      	lsls	r3, r3, #10
 80064b0:	4013      	ands	r3, r2
 80064b2:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d049      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x186>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685a      	ldr	r2, [r3, #4]
 80064be:	23c0      	movs	r3, #192	; 0xc0
 80064c0:	029b      	lsls	r3, r3, #10
 80064c2:	4013      	ands	r3, r2
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d004      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2220      	movs	r2, #32
 80064d0:	4013      	ands	r3, r2
 80064d2:	d10d      	bne.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	689a      	ldr	r2, [r3, #8]
 80064d8:	23c0      	movs	r3, #192	; 0xc0
 80064da:	029b      	lsls	r3, r3, #10
 80064dc:	4013      	ands	r3, r2
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d034      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	2380      	movs	r3, #128	; 0x80
 80064ea:	011b      	lsls	r3, r3, #4
 80064ec:	4013      	ands	r3, r2
 80064ee:	d02e      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80064f0:	4b79      	ldr	r3, [pc, #484]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80064f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064f4:	4a7a      	ldr	r2, [pc, #488]	; (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80064f6:	4013      	ands	r3, r2
 80064f8:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80064fa:	4b77      	ldr	r3, [pc, #476]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80064fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80064fe:	4b76      	ldr	r3, [pc, #472]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006500:	2180      	movs	r1, #128	; 0x80
 8006502:	0309      	lsls	r1, r1, #12
 8006504:	430a      	orrs	r2, r1
 8006506:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006508:	4b73      	ldr	r3, [pc, #460]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800650a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800650c:	4b72      	ldr	r3, [pc, #456]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800650e:	4975      	ldr	r1, [pc, #468]	; (80066e4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8006510:	400a      	ands	r2, r1
 8006512:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8006514:	4b70      	ldr	r3, [pc, #448]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	2380      	movs	r3, #128	; 0x80
 800651e:	005b      	lsls	r3, r3, #1
 8006520:	4013      	ands	r3, r2
 8006522:	d014      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006524:	f7fd f9de 	bl	80038e4 <HAL_GetTick>
 8006528:	0003      	movs	r3, r0
 800652a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800652c:	e009      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800652e:	f7fd f9d9 	bl	80038e4 <HAL_GetTick>
 8006532:	0002      	movs	r2, r0
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	4a6b      	ldr	r2, [pc, #428]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d901      	bls.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e0c6      	b.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006542:	4b65      	ldr	r3, [pc, #404]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006544:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006546:	2380      	movs	r3, #128	; 0x80
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4013      	ands	r3, r2
 800654c:	d0ef      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	2380      	movs	r3, #128	; 0x80
 8006554:	011b      	lsls	r3, r3, #4
 8006556:	4013      	ands	r3, r2
 8006558:	d01f      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	689a      	ldr	r2, [r3, #8]
 800655e:	23c0      	movs	r3, #192	; 0xc0
 8006560:	029b      	lsls	r3, r3, #10
 8006562:	401a      	ands	r2, r3
 8006564:	23c0      	movs	r3, #192	; 0xc0
 8006566:	029b      	lsls	r3, r3, #10
 8006568:	429a      	cmp	r2, r3
 800656a:	d10c      	bne.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800656c:	4b5a      	ldr	r3, [pc, #360]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a5e      	ldr	r2, [pc, #376]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8006572:	4013      	ands	r3, r2
 8006574:	0019      	movs	r1, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	689a      	ldr	r2, [r3, #8]
 800657a:	23c0      	movs	r3, #192	; 0xc0
 800657c:	039b      	lsls	r3, r3, #14
 800657e:	401a      	ands	r2, r3
 8006580:	4b55      	ldr	r3, [pc, #340]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006582:	430a      	orrs	r2, r1
 8006584:	601a      	str	r2, [r3, #0]
 8006586:	4b54      	ldr	r3, [pc, #336]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006588:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	689a      	ldr	r2, [r3, #8]
 800658e:	23c0      	movs	r3, #192	; 0xc0
 8006590:	029b      	lsls	r3, r3, #10
 8006592:	401a      	ands	r2, r3
 8006594:	4b50      	ldr	r3, [pc, #320]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006596:	430a      	orrs	r2, r1
 8006598:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2220      	movs	r2, #32
 80065a0:	4013      	ands	r3, r2
 80065a2:	d01f      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685a      	ldr	r2, [r3, #4]
 80065a8:	23c0      	movs	r3, #192	; 0xc0
 80065aa:	029b      	lsls	r3, r3, #10
 80065ac:	401a      	ands	r2, r3
 80065ae:	23c0      	movs	r3, #192	; 0xc0
 80065b0:	029b      	lsls	r3, r3, #10
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d10c      	bne.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80065b6:	4b48      	ldr	r3, [pc, #288]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a4c      	ldr	r2, [pc, #304]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80065bc:	4013      	ands	r3, r2
 80065be:	0019      	movs	r1, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685a      	ldr	r2, [r3, #4]
 80065c4:	23c0      	movs	r3, #192	; 0xc0
 80065c6:	039b      	lsls	r3, r3, #14
 80065c8:	401a      	ands	r2, r3
 80065ca:	4b43      	ldr	r3, [pc, #268]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80065cc:	430a      	orrs	r2, r1
 80065ce:	601a      	str	r2, [r3, #0]
 80065d0:	4b41      	ldr	r3, [pc, #260]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80065d2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	685a      	ldr	r2, [r3, #4]
 80065d8:	23c0      	movs	r3, #192	; 0xc0
 80065da:	029b      	lsls	r3, r3, #10
 80065dc:	401a      	ands	r2, r3
 80065de:	4b3e      	ldr	r3, [pc, #248]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80065e0:	430a      	orrs	r2, r1
 80065e2:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80065e4:	2317      	movs	r3, #23
 80065e6:	18fb      	adds	r3, r7, r3
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d105      	bne.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065ee:	4b3a      	ldr	r3, [pc, #232]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80065f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065f2:	4b39      	ldr	r3, [pc, #228]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80065f4:	493e      	ldr	r1, [pc, #248]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80065f6:	400a      	ands	r2, r1
 80065f8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2201      	movs	r2, #1
 8006600:	4013      	ands	r3, r2
 8006602:	d009      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006604:	4b34      	ldr	r3, [pc, #208]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006608:	2203      	movs	r2, #3
 800660a:	4393      	bics	r3, r2
 800660c:	0019      	movs	r1, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	68da      	ldr	r2, [r3, #12]
 8006612:	4b31      	ldr	r3, [pc, #196]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006614:	430a      	orrs	r2, r1
 8006616:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2202      	movs	r2, #2
 800661e:	4013      	ands	r3, r2
 8006620:	d009      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006622:	4b2d      	ldr	r3, [pc, #180]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006626:	220c      	movs	r2, #12
 8006628:	4393      	bics	r3, r2
 800662a:	0019      	movs	r1, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	691a      	ldr	r2, [r3, #16]
 8006630:	4b29      	ldr	r3, [pc, #164]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006632:	430a      	orrs	r2, r1
 8006634:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2204      	movs	r2, #4
 800663c:	4013      	ands	r3, r2
 800663e:	d009      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006640:	4b25      	ldr	r3, [pc, #148]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006644:	4a2b      	ldr	r2, [pc, #172]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8006646:	4013      	ands	r3, r2
 8006648:	0019      	movs	r1, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	695a      	ldr	r2, [r3, #20]
 800664e:	4b22      	ldr	r3, [pc, #136]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006650:	430a      	orrs	r2, r1
 8006652:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2208      	movs	r2, #8
 800665a:	4013      	ands	r3, r2
 800665c:	d009      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800665e:	4b1e      	ldr	r3, [pc, #120]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006662:	4a25      	ldr	r2, [pc, #148]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006664:	4013      	ands	r3, r2
 8006666:	0019      	movs	r1, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	699a      	ldr	r2, [r3, #24]
 800666c:	4b1a      	ldr	r3, [pc, #104]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800666e:	430a      	orrs	r2, r1
 8006670:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	2380      	movs	r3, #128	; 0x80
 8006678:	005b      	lsls	r3, r3, #1
 800667a:	4013      	ands	r3, r2
 800667c:	d009      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800667e:	4b16      	ldr	r3, [pc, #88]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006682:	4a17      	ldr	r2, [pc, #92]	; (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8006684:	4013      	ands	r3, r2
 8006686:	0019      	movs	r1, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	69da      	ldr	r2, [r3, #28]
 800668c:	4b12      	ldr	r3, [pc, #72]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800668e:	430a      	orrs	r2, r1
 8006690:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2240      	movs	r2, #64	; 0x40
 8006698:	4013      	ands	r3, r2
 800669a:	d009      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800669c:	4b0e      	ldr	r3, [pc, #56]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800669e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066a0:	4a16      	ldr	r2, [pc, #88]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80066a2:	4013      	ands	r3, r2
 80066a4:	0019      	movs	r1, r3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066aa:	4b0b      	ldr	r3, [pc, #44]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80066ac:	430a      	orrs	r2, r1
 80066ae:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2280      	movs	r2, #128	; 0x80
 80066b6:	4013      	ands	r3, r2
 80066b8:	d009      	beq.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80066ba:	4b07      	ldr	r3, [pc, #28]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80066bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066be:	4a10      	ldr	r2, [pc, #64]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80066c0:	4013      	ands	r3, r2
 80066c2:	0019      	movs	r1, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a1a      	ldr	r2, [r3, #32]
 80066c8:	4b03      	ldr	r3, [pc, #12]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80066ca:	430a      	orrs	r2, r1
 80066cc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	0018      	movs	r0, r3
 80066d2:	46bd      	mov	sp, r7
 80066d4:	b006      	add	sp, #24
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	40021000 	.word	0x40021000
 80066dc:	40007000 	.word	0x40007000
 80066e0:	fffcffff 	.word	0xfffcffff
 80066e4:	fff7ffff 	.word	0xfff7ffff
 80066e8:	00001388 	.word	0x00001388
 80066ec:	ffcfffff 	.word	0xffcfffff
 80066f0:	efffffff 	.word	0xefffffff
 80066f4:	fffff3ff 	.word	0xfffff3ff
 80066f8:	ffffcfff 	.word	0xffffcfff
 80066fc:	fbffffff 	.word	0xfbffffff
 8006700:	fff3ffff 	.word	0xfff3ffff

08006704 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d101      	bne.n	8006716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e044      	b.n	80067a0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800671a:	2b00      	cmp	r3, #0
 800671c:	d107      	bne.n	800672e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2278      	movs	r2, #120	; 0x78
 8006722:	2100      	movs	r1, #0
 8006724:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	0018      	movs	r0, r3
 800672a:	f7fc ff13 	bl	8003554 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2224      	movs	r2, #36	; 0x24
 8006732:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2101      	movs	r1, #1
 8006740:	438a      	bics	r2, r1
 8006742:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	0018      	movs	r0, r3
 8006748:	f000 f8d0 	bl	80068ec <UART_SetConfig>
 800674c:	0003      	movs	r3, r0
 800674e:	2b01      	cmp	r3, #1
 8006750:	d101      	bne.n	8006756 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e024      	b.n	80067a0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675a:	2b00      	cmp	r3, #0
 800675c:	d003      	beq.n	8006766 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	0018      	movs	r0, r3
 8006762:	f000 fb61 	bl	8006e28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	490d      	ldr	r1, [pc, #52]	; (80067a8 <HAL_UART_Init+0xa4>)
 8006772:	400a      	ands	r2, r1
 8006774:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	689a      	ldr	r2, [r3, #8]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	212a      	movs	r1, #42	; 0x2a
 8006782:	438a      	bics	r2, r1
 8006784:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2101      	movs	r1, #1
 8006792:	430a      	orrs	r2, r1
 8006794:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	0018      	movs	r0, r3
 800679a:	f000 fbf9 	bl	8006f90 <UART_CheckIdleState>
 800679e:	0003      	movs	r3, r0
}
 80067a0:	0018      	movs	r0, r3
 80067a2:	46bd      	mov	sp, r7
 80067a4:	b002      	add	sp, #8
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	ffffb7ff 	.word	0xffffb7ff

080067ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b08a      	sub	sp, #40	; 0x28
 80067b0:	af02      	add	r7, sp, #8
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	603b      	str	r3, [r7, #0]
 80067b8:	1dbb      	adds	r3, r7, #6
 80067ba:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067c0:	2b20      	cmp	r3, #32
 80067c2:	d000      	beq.n	80067c6 <HAL_UART_Transmit+0x1a>
 80067c4:	e08c      	b.n	80068e0 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d003      	beq.n	80067d4 <HAL_UART_Transmit+0x28>
 80067cc:	1dbb      	adds	r3, r7, #6
 80067ce:	881b      	ldrh	r3, [r3, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d101      	bne.n	80067d8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e084      	b.n	80068e2 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	689a      	ldr	r2, [r3, #8]
 80067dc:	2380      	movs	r3, #128	; 0x80
 80067de:	015b      	lsls	r3, r3, #5
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d109      	bne.n	80067f8 <HAL_UART_Transmit+0x4c>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d105      	bne.n	80067f8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	2201      	movs	r2, #1
 80067f0:	4013      	ands	r3, r2
 80067f2:	d001      	beq.n	80067f8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e074      	b.n	80068e2 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2284      	movs	r2, #132	; 0x84
 80067fc:	2100      	movs	r1, #0
 80067fe:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2221      	movs	r2, #33	; 0x21
 8006804:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006806:	f7fd f86d 	bl	80038e4 <HAL_GetTick>
 800680a:	0003      	movs	r3, r0
 800680c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	1dba      	adds	r2, r7, #6
 8006812:	2150      	movs	r1, #80	; 0x50
 8006814:	8812      	ldrh	r2, [r2, #0]
 8006816:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	1dba      	adds	r2, r7, #6
 800681c:	2152      	movs	r1, #82	; 0x52
 800681e:	8812      	ldrh	r2, [r2, #0]
 8006820:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	689a      	ldr	r2, [r3, #8]
 8006826:	2380      	movs	r3, #128	; 0x80
 8006828:	015b      	lsls	r3, r3, #5
 800682a:	429a      	cmp	r2, r3
 800682c:	d108      	bne.n	8006840 <HAL_UART_Transmit+0x94>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d104      	bne.n	8006840 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8006836:	2300      	movs	r3, #0
 8006838:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	61bb      	str	r3, [r7, #24]
 800683e:	e003      	b.n	8006848 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006844:	2300      	movs	r3, #0
 8006846:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006848:	e02f      	b.n	80068aa <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	0013      	movs	r3, r2
 8006854:	2200      	movs	r2, #0
 8006856:	2180      	movs	r1, #128	; 0x80
 8006858:	f000 fc42 	bl	80070e0 <UART_WaitOnFlagUntilTimeout>
 800685c:	1e03      	subs	r3, r0, #0
 800685e:	d004      	beq.n	800686a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2220      	movs	r2, #32
 8006864:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006866:	2303      	movs	r3, #3
 8006868:	e03b      	b.n	80068e2 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d10b      	bne.n	8006888 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	881b      	ldrh	r3, [r3, #0]
 8006874:	001a      	movs	r2, r3
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	05d2      	lsls	r2, r2, #23
 800687c:	0dd2      	lsrs	r2, r2, #23
 800687e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	3302      	adds	r3, #2
 8006884:	61bb      	str	r3, [r7, #24]
 8006886:	e007      	b.n	8006898 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	781a      	ldrb	r2, [r3, #0]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	3301      	adds	r3, #1
 8006896:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2252      	movs	r2, #82	; 0x52
 800689c:	5a9b      	ldrh	r3, [r3, r2]
 800689e:	b29b      	uxth	r3, r3
 80068a0:	3b01      	subs	r3, #1
 80068a2:	b299      	uxth	r1, r3
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2252      	movs	r2, #82	; 0x52
 80068a8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2252      	movs	r2, #82	; 0x52
 80068ae:	5a9b      	ldrh	r3, [r3, r2]
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1c9      	bne.n	800684a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068b6:	697a      	ldr	r2, [r7, #20]
 80068b8:	68f8      	ldr	r0, [r7, #12]
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	9300      	str	r3, [sp, #0]
 80068be:	0013      	movs	r3, r2
 80068c0:	2200      	movs	r2, #0
 80068c2:	2140      	movs	r1, #64	; 0x40
 80068c4:	f000 fc0c 	bl	80070e0 <UART_WaitOnFlagUntilTimeout>
 80068c8:	1e03      	subs	r3, r0, #0
 80068ca:	d004      	beq.n	80068d6 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2220      	movs	r2, #32
 80068d0:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e005      	b.n	80068e2 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2220      	movs	r2, #32
 80068da:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80068dc:	2300      	movs	r3, #0
 80068de:	e000      	b.n	80068e2 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80068e0:	2302      	movs	r3, #2
  }
}
 80068e2:	0018      	movs	r0, r3
 80068e4:	46bd      	mov	sp, r7
 80068e6:	b008      	add	sp, #32
 80068e8:	bd80      	pop	{r7, pc}
	...

080068ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068ec:	b5b0      	push	{r4, r5, r7, lr}
 80068ee:	b08e      	sub	sp, #56	; 0x38
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068f4:	231a      	movs	r3, #26
 80068f6:	2218      	movs	r2, #24
 80068f8:	189b      	adds	r3, r3, r2
 80068fa:	19db      	adds	r3, r3, r7
 80068fc:	2200      	movs	r2, #0
 80068fe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	689a      	ldr	r2, [r3, #8]
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	431a      	orrs	r2, r3
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	695b      	ldr	r3, [r3, #20]
 800690e:	431a      	orrs	r2, r3
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	69db      	ldr	r3, [r3, #28]
 8006914:	4313      	orrs	r3, r2
 8006916:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4ac3      	ldr	r2, [pc, #780]	; (8006c2c <UART_SetConfig+0x340>)
 8006920:	4013      	ands	r3, r2
 8006922:	0019      	movs	r1, r3
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800692a:	430a      	orrs	r2, r1
 800692c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	4abe      	ldr	r2, [pc, #760]	; (8006c30 <UART_SetConfig+0x344>)
 8006936:	4013      	ands	r3, r2
 8006938:	0019      	movs	r1, r3
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	68da      	ldr	r2, [r3, #12]
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	430a      	orrs	r2, r1
 8006944:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4ab8      	ldr	r2, [pc, #736]	; (8006c34 <UART_SetConfig+0x348>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d004      	beq.n	8006960 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	6a1b      	ldr	r3, [r3, #32]
 800695a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800695c:	4313      	orrs	r3, r2
 800695e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	4ab4      	ldr	r2, [pc, #720]	; (8006c38 <UART_SetConfig+0x34c>)
 8006968:	4013      	ands	r3, r2
 800696a:	0019      	movs	r1, r3
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006972:	430a      	orrs	r2, r1
 8006974:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4ab0      	ldr	r2, [pc, #704]	; (8006c3c <UART_SetConfig+0x350>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d131      	bne.n	80069e4 <UART_SetConfig+0xf8>
 8006980:	4baf      	ldr	r3, [pc, #700]	; (8006c40 <UART_SetConfig+0x354>)
 8006982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006984:	2203      	movs	r2, #3
 8006986:	4013      	ands	r3, r2
 8006988:	2b03      	cmp	r3, #3
 800698a:	d01d      	beq.n	80069c8 <UART_SetConfig+0xdc>
 800698c:	d823      	bhi.n	80069d6 <UART_SetConfig+0xea>
 800698e:	2b02      	cmp	r3, #2
 8006990:	d00c      	beq.n	80069ac <UART_SetConfig+0xc0>
 8006992:	d820      	bhi.n	80069d6 <UART_SetConfig+0xea>
 8006994:	2b00      	cmp	r3, #0
 8006996:	d002      	beq.n	800699e <UART_SetConfig+0xb2>
 8006998:	2b01      	cmp	r3, #1
 800699a:	d00e      	beq.n	80069ba <UART_SetConfig+0xce>
 800699c:	e01b      	b.n	80069d6 <UART_SetConfig+0xea>
 800699e:	231b      	movs	r3, #27
 80069a0:	2218      	movs	r2, #24
 80069a2:	189b      	adds	r3, r3, r2
 80069a4:	19db      	adds	r3, r3, r7
 80069a6:	2201      	movs	r2, #1
 80069a8:	701a      	strb	r2, [r3, #0]
 80069aa:	e0b4      	b.n	8006b16 <UART_SetConfig+0x22a>
 80069ac:	231b      	movs	r3, #27
 80069ae:	2218      	movs	r2, #24
 80069b0:	189b      	adds	r3, r3, r2
 80069b2:	19db      	adds	r3, r3, r7
 80069b4:	2202      	movs	r2, #2
 80069b6:	701a      	strb	r2, [r3, #0]
 80069b8:	e0ad      	b.n	8006b16 <UART_SetConfig+0x22a>
 80069ba:	231b      	movs	r3, #27
 80069bc:	2218      	movs	r2, #24
 80069be:	189b      	adds	r3, r3, r2
 80069c0:	19db      	adds	r3, r3, r7
 80069c2:	2204      	movs	r2, #4
 80069c4:	701a      	strb	r2, [r3, #0]
 80069c6:	e0a6      	b.n	8006b16 <UART_SetConfig+0x22a>
 80069c8:	231b      	movs	r3, #27
 80069ca:	2218      	movs	r2, #24
 80069cc:	189b      	adds	r3, r3, r2
 80069ce:	19db      	adds	r3, r3, r7
 80069d0:	2208      	movs	r2, #8
 80069d2:	701a      	strb	r2, [r3, #0]
 80069d4:	e09f      	b.n	8006b16 <UART_SetConfig+0x22a>
 80069d6:	231b      	movs	r3, #27
 80069d8:	2218      	movs	r2, #24
 80069da:	189b      	adds	r3, r3, r2
 80069dc:	19db      	adds	r3, r3, r7
 80069de:	2210      	movs	r2, #16
 80069e0:	701a      	strb	r2, [r3, #0]
 80069e2:	e098      	b.n	8006b16 <UART_SetConfig+0x22a>
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a96      	ldr	r2, [pc, #600]	; (8006c44 <UART_SetConfig+0x358>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d131      	bne.n	8006a52 <UART_SetConfig+0x166>
 80069ee:	4b94      	ldr	r3, [pc, #592]	; (8006c40 <UART_SetConfig+0x354>)
 80069f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069f2:	220c      	movs	r2, #12
 80069f4:	4013      	ands	r3, r2
 80069f6:	2b0c      	cmp	r3, #12
 80069f8:	d01d      	beq.n	8006a36 <UART_SetConfig+0x14a>
 80069fa:	d823      	bhi.n	8006a44 <UART_SetConfig+0x158>
 80069fc:	2b08      	cmp	r3, #8
 80069fe:	d00c      	beq.n	8006a1a <UART_SetConfig+0x12e>
 8006a00:	d820      	bhi.n	8006a44 <UART_SetConfig+0x158>
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d002      	beq.n	8006a0c <UART_SetConfig+0x120>
 8006a06:	2b04      	cmp	r3, #4
 8006a08:	d00e      	beq.n	8006a28 <UART_SetConfig+0x13c>
 8006a0a:	e01b      	b.n	8006a44 <UART_SetConfig+0x158>
 8006a0c:	231b      	movs	r3, #27
 8006a0e:	2218      	movs	r2, #24
 8006a10:	189b      	adds	r3, r3, r2
 8006a12:	19db      	adds	r3, r3, r7
 8006a14:	2200      	movs	r2, #0
 8006a16:	701a      	strb	r2, [r3, #0]
 8006a18:	e07d      	b.n	8006b16 <UART_SetConfig+0x22a>
 8006a1a:	231b      	movs	r3, #27
 8006a1c:	2218      	movs	r2, #24
 8006a1e:	189b      	adds	r3, r3, r2
 8006a20:	19db      	adds	r3, r3, r7
 8006a22:	2202      	movs	r2, #2
 8006a24:	701a      	strb	r2, [r3, #0]
 8006a26:	e076      	b.n	8006b16 <UART_SetConfig+0x22a>
 8006a28:	231b      	movs	r3, #27
 8006a2a:	2218      	movs	r2, #24
 8006a2c:	189b      	adds	r3, r3, r2
 8006a2e:	19db      	adds	r3, r3, r7
 8006a30:	2204      	movs	r2, #4
 8006a32:	701a      	strb	r2, [r3, #0]
 8006a34:	e06f      	b.n	8006b16 <UART_SetConfig+0x22a>
 8006a36:	231b      	movs	r3, #27
 8006a38:	2218      	movs	r2, #24
 8006a3a:	189b      	adds	r3, r3, r2
 8006a3c:	19db      	adds	r3, r3, r7
 8006a3e:	2208      	movs	r2, #8
 8006a40:	701a      	strb	r2, [r3, #0]
 8006a42:	e068      	b.n	8006b16 <UART_SetConfig+0x22a>
 8006a44:	231b      	movs	r3, #27
 8006a46:	2218      	movs	r2, #24
 8006a48:	189b      	adds	r3, r3, r2
 8006a4a:	19db      	adds	r3, r3, r7
 8006a4c:	2210      	movs	r2, #16
 8006a4e:	701a      	strb	r2, [r3, #0]
 8006a50:	e061      	b.n	8006b16 <UART_SetConfig+0x22a>
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a7c      	ldr	r2, [pc, #496]	; (8006c48 <UART_SetConfig+0x35c>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d106      	bne.n	8006a6a <UART_SetConfig+0x17e>
 8006a5c:	231b      	movs	r3, #27
 8006a5e:	2218      	movs	r2, #24
 8006a60:	189b      	adds	r3, r3, r2
 8006a62:	19db      	adds	r3, r3, r7
 8006a64:	2200      	movs	r2, #0
 8006a66:	701a      	strb	r2, [r3, #0]
 8006a68:	e055      	b.n	8006b16 <UART_SetConfig+0x22a>
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a77      	ldr	r2, [pc, #476]	; (8006c4c <UART_SetConfig+0x360>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d106      	bne.n	8006a82 <UART_SetConfig+0x196>
 8006a74:	231b      	movs	r3, #27
 8006a76:	2218      	movs	r2, #24
 8006a78:	189b      	adds	r3, r3, r2
 8006a7a:	19db      	adds	r3, r3, r7
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	701a      	strb	r2, [r3, #0]
 8006a80:	e049      	b.n	8006b16 <UART_SetConfig+0x22a>
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a6b      	ldr	r2, [pc, #428]	; (8006c34 <UART_SetConfig+0x348>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d13e      	bne.n	8006b0a <UART_SetConfig+0x21e>
 8006a8c:	4b6c      	ldr	r3, [pc, #432]	; (8006c40 <UART_SetConfig+0x354>)
 8006a8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a90:	23c0      	movs	r3, #192	; 0xc0
 8006a92:	011b      	lsls	r3, r3, #4
 8006a94:	4013      	ands	r3, r2
 8006a96:	22c0      	movs	r2, #192	; 0xc0
 8006a98:	0112      	lsls	r2, r2, #4
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d027      	beq.n	8006aee <UART_SetConfig+0x202>
 8006a9e:	22c0      	movs	r2, #192	; 0xc0
 8006aa0:	0112      	lsls	r2, r2, #4
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d82a      	bhi.n	8006afc <UART_SetConfig+0x210>
 8006aa6:	2280      	movs	r2, #128	; 0x80
 8006aa8:	0112      	lsls	r2, r2, #4
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d011      	beq.n	8006ad2 <UART_SetConfig+0x1e6>
 8006aae:	2280      	movs	r2, #128	; 0x80
 8006ab0:	0112      	lsls	r2, r2, #4
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d822      	bhi.n	8006afc <UART_SetConfig+0x210>
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d004      	beq.n	8006ac4 <UART_SetConfig+0x1d8>
 8006aba:	2280      	movs	r2, #128	; 0x80
 8006abc:	00d2      	lsls	r2, r2, #3
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d00e      	beq.n	8006ae0 <UART_SetConfig+0x1f4>
 8006ac2:	e01b      	b.n	8006afc <UART_SetConfig+0x210>
 8006ac4:	231b      	movs	r3, #27
 8006ac6:	2218      	movs	r2, #24
 8006ac8:	189b      	adds	r3, r3, r2
 8006aca:	19db      	adds	r3, r3, r7
 8006acc:	2200      	movs	r2, #0
 8006ace:	701a      	strb	r2, [r3, #0]
 8006ad0:	e021      	b.n	8006b16 <UART_SetConfig+0x22a>
 8006ad2:	231b      	movs	r3, #27
 8006ad4:	2218      	movs	r2, #24
 8006ad6:	189b      	adds	r3, r3, r2
 8006ad8:	19db      	adds	r3, r3, r7
 8006ada:	2202      	movs	r2, #2
 8006adc:	701a      	strb	r2, [r3, #0]
 8006ade:	e01a      	b.n	8006b16 <UART_SetConfig+0x22a>
 8006ae0:	231b      	movs	r3, #27
 8006ae2:	2218      	movs	r2, #24
 8006ae4:	189b      	adds	r3, r3, r2
 8006ae6:	19db      	adds	r3, r3, r7
 8006ae8:	2204      	movs	r2, #4
 8006aea:	701a      	strb	r2, [r3, #0]
 8006aec:	e013      	b.n	8006b16 <UART_SetConfig+0x22a>
 8006aee:	231b      	movs	r3, #27
 8006af0:	2218      	movs	r2, #24
 8006af2:	189b      	adds	r3, r3, r2
 8006af4:	19db      	adds	r3, r3, r7
 8006af6:	2208      	movs	r2, #8
 8006af8:	701a      	strb	r2, [r3, #0]
 8006afa:	e00c      	b.n	8006b16 <UART_SetConfig+0x22a>
 8006afc:	231b      	movs	r3, #27
 8006afe:	2218      	movs	r2, #24
 8006b00:	189b      	adds	r3, r3, r2
 8006b02:	19db      	adds	r3, r3, r7
 8006b04:	2210      	movs	r2, #16
 8006b06:	701a      	strb	r2, [r3, #0]
 8006b08:	e005      	b.n	8006b16 <UART_SetConfig+0x22a>
 8006b0a:	231b      	movs	r3, #27
 8006b0c:	2218      	movs	r2, #24
 8006b0e:	189b      	adds	r3, r3, r2
 8006b10:	19db      	adds	r3, r3, r7
 8006b12:	2210      	movs	r2, #16
 8006b14:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a46      	ldr	r2, [pc, #280]	; (8006c34 <UART_SetConfig+0x348>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d000      	beq.n	8006b22 <UART_SetConfig+0x236>
 8006b20:	e09a      	b.n	8006c58 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b22:	231b      	movs	r3, #27
 8006b24:	2218      	movs	r2, #24
 8006b26:	189b      	adds	r3, r3, r2
 8006b28:	19db      	adds	r3, r3, r7
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	2b08      	cmp	r3, #8
 8006b2e:	d01d      	beq.n	8006b6c <UART_SetConfig+0x280>
 8006b30:	dc20      	bgt.n	8006b74 <UART_SetConfig+0x288>
 8006b32:	2b04      	cmp	r3, #4
 8006b34:	d015      	beq.n	8006b62 <UART_SetConfig+0x276>
 8006b36:	dc1d      	bgt.n	8006b74 <UART_SetConfig+0x288>
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d002      	beq.n	8006b42 <UART_SetConfig+0x256>
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	d005      	beq.n	8006b4c <UART_SetConfig+0x260>
 8006b40:	e018      	b.n	8006b74 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b42:	f7ff fc15 	bl	8006370 <HAL_RCC_GetPCLK1Freq>
 8006b46:	0003      	movs	r3, r0
 8006b48:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b4a:	e01c      	b.n	8006b86 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b4c:	4b3c      	ldr	r3, [pc, #240]	; (8006c40 <UART_SetConfig+0x354>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2210      	movs	r2, #16
 8006b52:	4013      	ands	r3, r2
 8006b54:	d002      	beq.n	8006b5c <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006b56:	4b3e      	ldr	r3, [pc, #248]	; (8006c50 <UART_SetConfig+0x364>)
 8006b58:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b5a:	e014      	b.n	8006b86 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8006b5c:	4b3d      	ldr	r3, [pc, #244]	; (8006c54 <UART_SetConfig+0x368>)
 8006b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b60:	e011      	b.n	8006b86 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b62:	f7ff fb55 	bl	8006210 <HAL_RCC_GetSysClockFreq>
 8006b66:	0003      	movs	r3, r0
 8006b68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b6a:	e00c      	b.n	8006b86 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b6c:	2380      	movs	r3, #128	; 0x80
 8006b6e:	021b      	lsls	r3, r3, #8
 8006b70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b72:	e008      	b.n	8006b86 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8006b74:	2300      	movs	r3, #0
 8006b76:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006b78:	231a      	movs	r3, #26
 8006b7a:	2218      	movs	r2, #24
 8006b7c:	189b      	adds	r3, r3, r2
 8006b7e:	19db      	adds	r3, r3, r7
 8006b80:	2201      	movs	r2, #1
 8006b82:	701a      	strb	r2, [r3, #0]
        break;
 8006b84:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d100      	bne.n	8006b8e <UART_SetConfig+0x2a2>
 8006b8c:	e133      	b.n	8006df6 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	685a      	ldr	r2, [r3, #4]
 8006b92:	0013      	movs	r3, r2
 8006b94:	005b      	lsls	r3, r3, #1
 8006b96:	189b      	adds	r3, r3, r2
 8006b98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d305      	bcc.n	8006baa <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d906      	bls.n	8006bb8 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8006baa:	231a      	movs	r3, #26
 8006bac:	2218      	movs	r2, #24
 8006bae:	189b      	adds	r3, r3, r2
 8006bb0:	19db      	adds	r3, r3, r7
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	701a      	strb	r2, [r3, #0]
 8006bb6:	e11e      	b.n	8006df6 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bba:	613b      	str	r3, [r7, #16]
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	617b      	str	r3, [r7, #20]
 8006bc0:	6939      	ldr	r1, [r7, #16]
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	000b      	movs	r3, r1
 8006bc6:	0e1b      	lsrs	r3, r3, #24
 8006bc8:	0010      	movs	r0, r2
 8006bca:	0205      	lsls	r5, r0, #8
 8006bcc:	431d      	orrs	r5, r3
 8006bce:	000b      	movs	r3, r1
 8006bd0:	021c      	lsls	r4, r3, #8
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	085b      	lsrs	r3, r3, #1
 8006bd8:	60bb      	str	r3, [r7, #8]
 8006bda:	2300      	movs	r3, #0
 8006bdc:	60fb      	str	r3, [r7, #12]
 8006bde:	68b8      	ldr	r0, [r7, #8]
 8006be0:	68f9      	ldr	r1, [r7, #12]
 8006be2:	1900      	adds	r0, r0, r4
 8006be4:	4169      	adcs	r1, r5
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	603b      	str	r3, [r7, #0]
 8006bec:	2300      	movs	r3, #0
 8006bee:	607b      	str	r3, [r7, #4]
 8006bf0:	683a      	ldr	r2, [r7, #0]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f7f9 fc50 	bl	8000498 <__aeabi_uldivmod>
 8006bf8:	0002      	movs	r2, r0
 8006bfa:	000b      	movs	r3, r1
 8006bfc:	0013      	movs	r3, r2
 8006bfe:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c02:	23c0      	movs	r3, #192	; 0xc0
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d309      	bcc.n	8006c1e <UART_SetConfig+0x332>
 8006c0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c0c:	2380      	movs	r3, #128	; 0x80
 8006c0e:	035b      	lsls	r3, r3, #13
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d204      	bcs.n	8006c1e <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c1a:	60da      	str	r2, [r3, #12]
 8006c1c:	e0eb      	b.n	8006df6 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8006c1e:	231a      	movs	r3, #26
 8006c20:	2218      	movs	r2, #24
 8006c22:	189b      	adds	r3, r3, r2
 8006c24:	19db      	adds	r3, r3, r7
 8006c26:	2201      	movs	r2, #1
 8006c28:	701a      	strb	r2, [r3, #0]
 8006c2a:	e0e4      	b.n	8006df6 <UART_SetConfig+0x50a>
 8006c2c:	efff69f3 	.word	0xefff69f3
 8006c30:	ffffcfff 	.word	0xffffcfff
 8006c34:	40004800 	.word	0x40004800
 8006c38:	fffff4ff 	.word	0xfffff4ff
 8006c3c:	40013800 	.word	0x40013800
 8006c40:	40021000 	.word	0x40021000
 8006c44:	40004400 	.word	0x40004400
 8006c48:	40004c00 	.word	0x40004c00
 8006c4c:	40005000 	.word	0x40005000
 8006c50:	003d0900 	.word	0x003d0900
 8006c54:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	69da      	ldr	r2, [r3, #28]
 8006c5c:	2380      	movs	r3, #128	; 0x80
 8006c5e:	021b      	lsls	r3, r3, #8
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d000      	beq.n	8006c66 <UART_SetConfig+0x37a>
 8006c64:	e070      	b.n	8006d48 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8006c66:	231b      	movs	r3, #27
 8006c68:	2218      	movs	r2, #24
 8006c6a:	189b      	adds	r3, r3, r2
 8006c6c:	19db      	adds	r3, r3, r7
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	2b08      	cmp	r3, #8
 8006c72:	d822      	bhi.n	8006cba <UART_SetConfig+0x3ce>
 8006c74:	009a      	lsls	r2, r3, #2
 8006c76:	4b67      	ldr	r3, [pc, #412]	; (8006e14 <UART_SetConfig+0x528>)
 8006c78:	18d3      	adds	r3, r2, r3
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c7e:	f7ff fb77 	bl	8006370 <HAL_RCC_GetPCLK1Freq>
 8006c82:	0003      	movs	r3, r0
 8006c84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c86:	e021      	b.n	8006ccc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c88:	f7ff fb88 	bl	800639c <HAL_RCC_GetPCLK2Freq>
 8006c8c:	0003      	movs	r3, r0
 8006c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c90:	e01c      	b.n	8006ccc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c92:	4b61      	ldr	r3, [pc, #388]	; (8006e18 <UART_SetConfig+0x52c>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2210      	movs	r2, #16
 8006c98:	4013      	ands	r3, r2
 8006c9a:	d002      	beq.n	8006ca2 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006c9c:	4b5f      	ldr	r3, [pc, #380]	; (8006e1c <UART_SetConfig+0x530>)
 8006c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006ca0:	e014      	b.n	8006ccc <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8006ca2:	4b5f      	ldr	r3, [pc, #380]	; (8006e20 <UART_SetConfig+0x534>)
 8006ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006ca6:	e011      	b.n	8006ccc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ca8:	f7ff fab2 	bl	8006210 <HAL_RCC_GetSysClockFreq>
 8006cac:	0003      	movs	r3, r0
 8006cae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006cb0:	e00c      	b.n	8006ccc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cb2:	2380      	movs	r3, #128	; 0x80
 8006cb4:	021b      	lsls	r3, r3, #8
 8006cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006cb8:	e008      	b.n	8006ccc <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006cbe:	231a      	movs	r3, #26
 8006cc0:	2218      	movs	r2, #24
 8006cc2:	189b      	adds	r3, r3, r2
 8006cc4:	19db      	adds	r3, r3, r7
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	701a      	strb	r2, [r3, #0]
        break;
 8006cca:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d100      	bne.n	8006cd4 <UART_SetConfig+0x3e8>
 8006cd2:	e090      	b.n	8006df6 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd6:	005a      	lsls	r2, r3, #1
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	085b      	lsrs	r3, r3, #1
 8006cde:	18d2      	adds	r2, r2, r3
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	0019      	movs	r1, r3
 8006ce6:	0010      	movs	r0, r2
 8006ce8:	f7f9 fa22 	bl	8000130 <__udivsi3>
 8006cec:	0003      	movs	r3, r0
 8006cee:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf2:	2b0f      	cmp	r3, #15
 8006cf4:	d921      	bls.n	8006d3a <UART_SetConfig+0x44e>
 8006cf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cf8:	2380      	movs	r3, #128	; 0x80
 8006cfa:	025b      	lsls	r3, r3, #9
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d21c      	bcs.n	8006d3a <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d02:	b29a      	uxth	r2, r3
 8006d04:	200e      	movs	r0, #14
 8006d06:	2418      	movs	r4, #24
 8006d08:	1903      	adds	r3, r0, r4
 8006d0a:	19db      	adds	r3, r3, r7
 8006d0c:	210f      	movs	r1, #15
 8006d0e:	438a      	bics	r2, r1
 8006d10:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d14:	085b      	lsrs	r3, r3, #1
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	2207      	movs	r2, #7
 8006d1a:	4013      	ands	r3, r2
 8006d1c:	b299      	uxth	r1, r3
 8006d1e:	1903      	adds	r3, r0, r4
 8006d20:	19db      	adds	r3, r3, r7
 8006d22:	1902      	adds	r2, r0, r4
 8006d24:	19d2      	adds	r2, r2, r7
 8006d26:	8812      	ldrh	r2, [r2, #0]
 8006d28:	430a      	orrs	r2, r1
 8006d2a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	1902      	adds	r2, r0, r4
 8006d32:	19d2      	adds	r2, r2, r7
 8006d34:	8812      	ldrh	r2, [r2, #0]
 8006d36:	60da      	str	r2, [r3, #12]
 8006d38:	e05d      	b.n	8006df6 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8006d3a:	231a      	movs	r3, #26
 8006d3c:	2218      	movs	r2, #24
 8006d3e:	189b      	adds	r3, r3, r2
 8006d40:	19db      	adds	r3, r3, r7
 8006d42:	2201      	movs	r2, #1
 8006d44:	701a      	strb	r2, [r3, #0]
 8006d46:	e056      	b.n	8006df6 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d48:	231b      	movs	r3, #27
 8006d4a:	2218      	movs	r2, #24
 8006d4c:	189b      	adds	r3, r3, r2
 8006d4e:	19db      	adds	r3, r3, r7
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	2b08      	cmp	r3, #8
 8006d54:	d822      	bhi.n	8006d9c <UART_SetConfig+0x4b0>
 8006d56:	009a      	lsls	r2, r3, #2
 8006d58:	4b32      	ldr	r3, [pc, #200]	; (8006e24 <UART_SetConfig+0x538>)
 8006d5a:	18d3      	adds	r3, r2, r3
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d60:	f7ff fb06 	bl	8006370 <HAL_RCC_GetPCLK1Freq>
 8006d64:	0003      	movs	r3, r0
 8006d66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d68:	e021      	b.n	8006dae <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d6a:	f7ff fb17 	bl	800639c <HAL_RCC_GetPCLK2Freq>
 8006d6e:	0003      	movs	r3, r0
 8006d70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d72:	e01c      	b.n	8006dae <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d74:	4b28      	ldr	r3, [pc, #160]	; (8006e18 <UART_SetConfig+0x52c>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2210      	movs	r2, #16
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	d002      	beq.n	8006d84 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006d7e:	4b27      	ldr	r3, [pc, #156]	; (8006e1c <UART_SetConfig+0x530>)
 8006d80:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d82:	e014      	b.n	8006dae <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8006d84:	4b26      	ldr	r3, [pc, #152]	; (8006e20 <UART_SetConfig+0x534>)
 8006d86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d88:	e011      	b.n	8006dae <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d8a:	f7ff fa41 	bl	8006210 <HAL_RCC_GetSysClockFreq>
 8006d8e:	0003      	movs	r3, r0
 8006d90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d92:	e00c      	b.n	8006dae <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d94:	2380      	movs	r3, #128	; 0x80
 8006d96:	021b      	lsls	r3, r3, #8
 8006d98:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d9a:	e008      	b.n	8006dae <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006da0:	231a      	movs	r3, #26
 8006da2:	2218      	movs	r2, #24
 8006da4:	189b      	adds	r3, r3, r2
 8006da6:	19db      	adds	r3, r3, r7
 8006da8:	2201      	movs	r2, #1
 8006daa:	701a      	strb	r2, [r3, #0]
        break;
 8006dac:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d020      	beq.n	8006df6 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	085a      	lsrs	r2, r3, #1
 8006dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dbc:	18d2      	adds	r2, r2, r3
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	0019      	movs	r1, r3
 8006dc4:	0010      	movs	r0, r2
 8006dc6:	f7f9 f9b3 	bl	8000130 <__udivsi3>
 8006dca:	0003      	movs	r3, r0
 8006dcc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd0:	2b0f      	cmp	r3, #15
 8006dd2:	d90a      	bls.n	8006dea <UART_SetConfig+0x4fe>
 8006dd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dd6:	2380      	movs	r3, #128	; 0x80
 8006dd8:	025b      	lsls	r3, r3, #9
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d205      	bcs.n	8006dea <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	60da      	str	r2, [r3, #12]
 8006de8:	e005      	b.n	8006df6 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8006dea:	231a      	movs	r3, #26
 8006dec:	2218      	movs	r2, #24
 8006dee:	189b      	adds	r3, r3, r2
 8006df0:	19db      	adds	r3, r3, r7
 8006df2:	2201      	movs	r2, #1
 8006df4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006e02:	231a      	movs	r3, #26
 8006e04:	2218      	movs	r2, #24
 8006e06:	189b      	adds	r3, r3, r2
 8006e08:	19db      	adds	r3, r3, r7
 8006e0a:	781b      	ldrb	r3, [r3, #0]
}
 8006e0c:	0018      	movs	r0, r3
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	b00e      	add	sp, #56	; 0x38
 8006e12:	bdb0      	pop	{r4, r5, r7, pc}
 8006e14:	0800a9ac 	.word	0x0800a9ac
 8006e18:	40021000 	.word	0x40021000
 8006e1c:	003d0900 	.word	0x003d0900
 8006e20:	00f42400 	.word	0x00f42400
 8006e24:	0800a9d0 	.word	0x0800a9d0

08006e28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e34:	2201      	movs	r2, #1
 8006e36:	4013      	ands	r3, r2
 8006e38:	d00b      	beq.n	8006e52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	4a4a      	ldr	r2, [pc, #296]	; (8006f6c <UART_AdvFeatureConfig+0x144>)
 8006e42:	4013      	ands	r3, r2
 8006e44:	0019      	movs	r1, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	430a      	orrs	r2, r1
 8006e50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e56:	2202      	movs	r2, #2
 8006e58:	4013      	ands	r3, r2
 8006e5a:	d00b      	beq.n	8006e74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	4a43      	ldr	r2, [pc, #268]	; (8006f70 <UART_AdvFeatureConfig+0x148>)
 8006e64:	4013      	ands	r3, r2
 8006e66:	0019      	movs	r1, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	430a      	orrs	r2, r1
 8006e72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e78:	2204      	movs	r2, #4
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	d00b      	beq.n	8006e96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	4a3b      	ldr	r2, [pc, #236]	; (8006f74 <UART_AdvFeatureConfig+0x14c>)
 8006e86:	4013      	ands	r3, r2
 8006e88:	0019      	movs	r1, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	430a      	orrs	r2, r1
 8006e94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9a:	2208      	movs	r2, #8
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	d00b      	beq.n	8006eb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	4a34      	ldr	r2, [pc, #208]	; (8006f78 <UART_AdvFeatureConfig+0x150>)
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	0019      	movs	r1, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	430a      	orrs	r2, r1
 8006eb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebc:	2210      	movs	r2, #16
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	d00b      	beq.n	8006eda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	4a2c      	ldr	r2, [pc, #176]	; (8006f7c <UART_AdvFeatureConfig+0x154>)
 8006eca:	4013      	ands	r3, r2
 8006ecc:	0019      	movs	r1, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	430a      	orrs	r2, r1
 8006ed8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ede:	2220      	movs	r2, #32
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	d00b      	beq.n	8006efc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	4a25      	ldr	r2, [pc, #148]	; (8006f80 <UART_AdvFeatureConfig+0x158>)
 8006eec:	4013      	ands	r3, r2
 8006eee:	0019      	movs	r1, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	430a      	orrs	r2, r1
 8006efa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f00:	2240      	movs	r2, #64	; 0x40
 8006f02:	4013      	ands	r3, r2
 8006f04:	d01d      	beq.n	8006f42 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	4a1d      	ldr	r2, [pc, #116]	; (8006f84 <UART_AdvFeatureConfig+0x15c>)
 8006f0e:	4013      	ands	r3, r2
 8006f10:	0019      	movs	r1, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	430a      	orrs	r2, r1
 8006f1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f22:	2380      	movs	r3, #128	; 0x80
 8006f24:	035b      	lsls	r3, r3, #13
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d10b      	bne.n	8006f42 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	4a15      	ldr	r2, [pc, #84]	; (8006f88 <UART_AdvFeatureConfig+0x160>)
 8006f32:	4013      	ands	r3, r2
 8006f34:	0019      	movs	r1, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	430a      	orrs	r2, r1
 8006f40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f46:	2280      	movs	r2, #128	; 0x80
 8006f48:	4013      	ands	r3, r2
 8006f4a:	d00b      	beq.n	8006f64 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	4a0e      	ldr	r2, [pc, #56]	; (8006f8c <UART_AdvFeatureConfig+0x164>)
 8006f54:	4013      	ands	r3, r2
 8006f56:	0019      	movs	r1, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	430a      	orrs	r2, r1
 8006f62:	605a      	str	r2, [r3, #4]
  }
}
 8006f64:	46c0      	nop			; (mov r8, r8)
 8006f66:	46bd      	mov	sp, r7
 8006f68:	b002      	add	sp, #8
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	fffdffff 	.word	0xfffdffff
 8006f70:	fffeffff 	.word	0xfffeffff
 8006f74:	fffbffff 	.word	0xfffbffff
 8006f78:	ffff7fff 	.word	0xffff7fff
 8006f7c:	ffffefff 	.word	0xffffefff
 8006f80:	ffffdfff 	.word	0xffffdfff
 8006f84:	ffefffff 	.word	0xffefffff
 8006f88:	ff9fffff 	.word	0xff9fffff
 8006f8c:	fff7ffff 	.word	0xfff7ffff

08006f90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b092      	sub	sp, #72	; 0x48
 8006f94:	af02      	add	r7, sp, #8
 8006f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2284      	movs	r2, #132	; 0x84
 8006f9c:	2100      	movs	r1, #0
 8006f9e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006fa0:	f7fc fca0 	bl	80038e4 <HAL_GetTick>
 8006fa4:	0003      	movs	r3, r0
 8006fa6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2208      	movs	r2, #8
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	2b08      	cmp	r3, #8
 8006fb4:	d12c      	bne.n	8007010 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fb8:	2280      	movs	r2, #128	; 0x80
 8006fba:	0391      	lsls	r1, r2, #14
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	4a46      	ldr	r2, [pc, #280]	; (80070d8 <UART_CheckIdleState+0x148>)
 8006fc0:	9200      	str	r2, [sp, #0]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f000 f88c 	bl	80070e0 <UART_WaitOnFlagUntilTimeout>
 8006fc8:	1e03      	subs	r3, r0, #0
 8006fca:	d021      	beq.n	8007010 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fcc:	f3ef 8310 	mrs	r3, PRIMASK
 8006fd0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006fd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fdc:	f383 8810 	msr	PRIMASK, r3
}
 8006fe0:	46c0      	nop			; (mov r8, r8)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2180      	movs	r1, #128	; 0x80
 8006fee:	438a      	bics	r2, r1
 8006ff0:	601a      	str	r2, [r3, #0]
 8006ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff8:	f383 8810 	msr	PRIMASK, r3
}
 8006ffc:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2220      	movs	r2, #32
 8007002:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2278      	movs	r2, #120	; 0x78
 8007008:	2100      	movs	r1, #0
 800700a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800700c:	2303      	movs	r3, #3
 800700e:	e05f      	b.n	80070d0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2204      	movs	r2, #4
 8007018:	4013      	ands	r3, r2
 800701a:	2b04      	cmp	r3, #4
 800701c:	d146      	bne.n	80070ac <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800701e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007020:	2280      	movs	r2, #128	; 0x80
 8007022:	03d1      	lsls	r1, r2, #15
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	4a2c      	ldr	r2, [pc, #176]	; (80070d8 <UART_CheckIdleState+0x148>)
 8007028:	9200      	str	r2, [sp, #0]
 800702a:	2200      	movs	r2, #0
 800702c:	f000 f858 	bl	80070e0 <UART_WaitOnFlagUntilTimeout>
 8007030:	1e03      	subs	r3, r0, #0
 8007032:	d03b      	beq.n	80070ac <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007034:	f3ef 8310 	mrs	r3, PRIMASK
 8007038:	60fb      	str	r3, [r7, #12]
  return(result);
 800703a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800703c:	637b      	str	r3, [r7, #52]	; 0x34
 800703e:	2301      	movs	r3, #1
 8007040:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	f383 8810 	msr	PRIMASK, r3
}
 8007048:	46c0      	nop			; (mov r8, r8)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4921      	ldr	r1, [pc, #132]	; (80070dc <UART_CheckIdleState+0x14c>)
 8007056:	400a      	ands	r2, r1
 8007058:	601a      	str	r2, [r3, #0]
 800705a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800705c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	f383 8810 	msr	PRIMASK, r3
}
 8007064:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007066:	f3ef 8310 	mrs	r3, PRIMASK
 800706a:	61bb      	str	r3, [r7, #24]
  return(result);
 800706c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800706e:	633b      	str	r3, [r7, #48]	; 0x30
 8007070:	2301      	movs	r3, #1
 8007072:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	f383 8810 	msr	PRIMASK, r3
}
 800707a:	46c0      	nop			; (mov r8, r8)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	689a      	ldr	r2, [r3, #8]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2101      	movs	r1, #1
 8007088:	438a      	bics	r2, r1
 800708a:	609a      	str	r2, [r3, #8]
 800708c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007090:	6a3b      	ldr	r3, [r7, #32]
 8007092:	f383 8810 	msr	PRIMASK, r3
}
 8007096:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2280      	movs	r2, #128	; 0x80
 800709c:	2120      	movs	r1, #32
 800709e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2278      	movs	r2, #120	; 0x78
 80070a4:	2100      	movs	r1, #0
 80070a6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070a8:	2303      	movs	r3, #3
 80070aa:	e011      	b.n	80070d0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2220      	movs	r2, #32
 80070b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2280      	movs	r2, #128	; 0x80
 80070b6:	2120      	movs	r1, #32
 80070b8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2278      	movs	r2, #120	; 0x78
 80070ca:	2100      	movs	r1, #0
 80070cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	0018      	movs	r0, r3
 80070d2:	46bd      	mov	sp, r7
 80070d4:	b010      	add	sp, #64	; 0x40
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	01ffffff 	.word	0x01ffffff
 80070dc:	fffffedf 	.word	0xfffffedf

080070e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	603b      	str	r3, [r7, #0]
 80070ec:	1dfb      	adds	r3, r7, #7
 80070ee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070f0:	e04b      	b.n	800718a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	3301      	adds	r3, #1
 80070f6:	d048      	beq.n	800718a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070f8:	f7fc fbf4 	bl	80038e4 <HAL_GetTick>
 80070fc:	0002      	movs	r2, r0
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	69ba      	ldr	r2, [r7, #24]
 8007104:	429a      	cmp	r2, r3
 8007106:	d302      	bcc.n	800710e <UART_WaitOnFlagUntilTimeout+0x2e>
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d101      	bne.n	8007112 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800710e:	2303      	movs	r3, #3
 8007110:	e04b      	b.n	80071aa <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2204      	movs	r2, #4
 800711a:	4013      	ands	r3, r2
 800711c:	d035      	beq.n	800718a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	69db      	ldr	r3, [r3, #28]
 8007124:	2208      	movs	r2, #8
 8007126:	4013      	ands	r3, r2
 8007128:	2b08      	cmp	r3, #8
 800712a:	d111      	bne.n	8007150 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2208      	movs	r2, #8
 8007132:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	0018      	movs	r0, r3
 8007138:	f000 f83c 	bl	80071b4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2284      	movs	r2, #132	; 0x84
 8007140:	2108      	movs	r1, #8
 8007142:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2278      	movs	r2, #120	; 0x78
 8007148:	2100      	movs	r1, #0
 800714a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	e02c      	b.n	80071aa <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	69da      	ldr	r2, [r3, #28]
 8007156:	2380      	movs	r3, #128	; 0x80
 8007158:	011b      	lsls	r3, r3, #4
 800715a:	401a      	ands	r2, r3
 800715c:	2380      	movs	r3, #128	; 0x80
 800715e:	011b      	lsls	r3, r3, #4
 8007160:	429a      	cmp	r2, r3
 8007162:	d112      	bne.n	800718a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2280      	movs	r2, #128	; 0x80
 800716a:	0112      	lsls	r2, r2, #4
 800716c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	0018      	movs	r0, r3
 8007172:	f000 f81f 	bl	80071b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2284      	movs	r2, #132	; 0x84
 800717a:	2120      	movs	r1, #32
 800717c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2278      	movs	r2, #120	; 0x78
 8007182:	2100      	movs	r1, #0
 8007184:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007186:	2303      	movs	r3, #3
 8007188:	e00f      	b.n	80071aa <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	69db      	ldr	r3, [r3, #28]
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	4013      	ands	r3, r2
 8007194:	68ba      	ldr	r2, [r7, #8]
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	425a      	negs	r2, r3
 800719a:	4153      	adcs	r3, r2
 800719c:	b2db      	uxtb	r3, r3
 800719e:	001a      	movs	r2, r3
 80071a0:	1dfb      	adds	r3, r7, #7
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d0a4      	beq.n	80070f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	0018      	movs	r0, r3
 80071ac:	46bd      	mov	sp, r7
 80071ae:	b004      	add	sp, #16
 80071b0:	bd80      	pop	{r7, pc}
	...

080071b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b08e      	sub	sp, #56	; 0x38
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071bc:	f3ef 8310 	mrs	r3, PRIMASK
 80071c0:	617b      	str	r3, [r7, #20]
  return(result);
 80071c2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071c4:	637b      	str	r3, [r7, #52]	; 0x34
 80071c6:	2301      	movs	r3, #1
 80071c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	f383 8810 	msr	PRIMASK, r3
}
 80071d0:	46c0      	nop			; (mov r8, r8)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4926      	ldr	r1, [pc, #152]	; (8007278 <UART_EndRxTransfer+0xc4>)
 80071de:	400a      	ands	r2, r1
 80071e0:	601a      	str	r2, [r3, #0]
 80071e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	f383 8810 	msr	PRIMASK, r3
}
 80071ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071ee:	f3ef 8310 	mrs	r3, PRIMASK
 80071f2:	623b      	str	r3, [r7, #32]
  return(result);
 80071f4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071f6:	633b      	str	r3, [r7, #48]	; 0x30
 80071f8:	2301      	movs	r3, #1
 80071fa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fe:	f383 8810 	msr	PRIMASK, r3
}
 8007202:	46c0      	nop			; (mov r8, r8)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	689a      	ldr	r2, [r3, #8]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2101      	movs	r1, #1
 8007210:	438a      	bics	r2, r1
 8007212:	609a      	str	r2, [r3, #8]
 8007214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007216:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721a:	f383 8810 	msr	PRIMASK, r3
}
 800721e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007224:	2b01      	cmp	r3, #1
 8007226:	d118      	bne.n	800725a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007228:	f3ef 8310 	mrs	r3, PRIMASK
 800722c:	60bb      	str	r3, [r7, #8]
  return(result);
 800722e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007230:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007232:	2301      	movs	r3, #1
 8007234:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f383 8810 	msr	PRIMASK, r3
}
 800723c:	46c0      	nop			; (mov r8, r8)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2110      	movs	r1, #16
 800724a:	438a      	bics	r2, r1
 800724c:	601a      	str	r2, [r3, #0]
 800724e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007250:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	f383 8810 	msr	PRIMASK, r3
}
 8007258:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2280      	movs	r2, #128	; 0x80
 800725e:	2120      	movs	r1, #32
 8007260:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800726e:	46c0      	nop			; (mov r8, r8)
 8007270:	46bd      	mov	sp, r7
 8007272:	b00e      	add	sp, #56	; 0x38
 8007274:	bd80      	pop	{r7, pc}
 8007276:	46c0      	nop			; (mov r8, r8)
 8007278:	fffffedf 	.word	0xfffffedf

0800727c <__cvt>:
 800727c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800727e:	001e      	movs	r6, r3
 8007280:	2300      	movs	r3, #0
 8007282:	0014      	movs	r4, r2
 8007284:	b08b      	sub	sp, #44	; 0x2c
 8007286:	429e      	cmp	r6, r3
 8007288:	da04      	bge.n	8007294 <__cvt+0x18>
 800728a:	2180      	movs	r1, #128	; 0x80
 800728c:	0609      	lsls	r1, r1, #24
 800728e:	1873      	adds	r3, r6, r1
 8007290:	001e      	movs	r6, r3
 8007292:	232d      	movs	r3, #45	; 0x2d
 8007294:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007296:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007298:	7013      	strb	r3, [r2, #0]
 800729a:	2320      	movs	r3, #32
 800729c:	2203      	movs	r2, #3
 800729e:	439f      	bics	r7, r3
 80072a0:	2f46      	cmp	r7, #70	; 0x46
 80072a2:	d007      	beq.n	80072b4 <__cvt+0x38>
 80072a4:	003b      	movs	r3, r7
 80072a6:	3b45      	subs	r3, #69	; 0x45
 80072a8:	4259      	negs	r1, r3
 80072aa:	414b      	adcs	r3, r1
 80072ac:	9910      	ldr	r1, [sp, #64]	; 0x40
 80072ae:	3a01      	subs	r2, #1
 80072b0:	18cb      	adds	r3, r1, r3
 80072b2:	9310      	str	r3, [sp, #64]	; 0x40
 80072b4:	ab09      	add	r3, sp, #36	; 0x24
 80072b6:	9304      	str	r3, [sp, #16]
 80072b8:	ab08      	add	r3, sp, #32
 80072ba:	9303      	str	r3, [sp, #12]
 80072bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80072be:	9200      	str	r2, [sp, #0]
 80072c0:	9302      	str	r3, [sp, #8]
 80072c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80072c4:	0022      	movs	r2, r4
 80072c6:	9301      	str	r3, [sp, #4]
 80072c8:	0033      	movs	r3, r6
 80072ca:	f000 fea7 	bl	800801c <_dtoa_r>
 80072ce:	0005      	movs	r5, r0
 80072d0:	2f47      	cmp	r7, #71	; 0x47
 80072d2:	d102      	bne.n	80072da <__cvt+0x5e>
 80072d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80072d6:	07db      	lsls	r3, r3, #31
 80072d8:	d528      	bpl.n	800732c <__cvt+0xb0>
 80072da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80072dc:	18eb      	adds	r3, r5, r3
 80072de:	9307      	str	r3, [sp, #28]
 80072e0:	2f46      	cmp	r7, #70	; 0x46
 80072e2:	d114      	bne.n	800730e <__cvt+0x92>
 80072e4:	782b      	ldrb	r3, [r5, #0]
 80072e6:	2b30      	cmp	r3, #48	; 0x30
 80072e8:	d10c      	bne.n	8007304 <__cvt+0x88>
 80072ea:	2200      	movs	r2, #0
 80072ec:	2300      	movs	r3, #0
 80072ee:	0020      	movs	r0, r4
 80072f0:	0031      	movs	r1, r6
 80072f2:	f7f9 f8a3 	bl	800043c <__aeabi_dcmpeq>
 80072f6:	2800      	cmp	r0, #0
 80072f8:	d104      	bne.n	8007304 <__cvt+0x88>
 80072fa:	2301      	movs	r3, #1
 80072fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80072fe:	1a9b      	subs	r3, r3, r2
 8007300:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007302:	6013      	str	r3, [r2, #0]
 8007304:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007306:	9a07      	ldr	r2, [sp, #28]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	18d3      	adds	r3, r2, r3
 800730c:	9307      	str	r3, [sp, #28]
 800730e:	2200      	movs	r2, #0
 8007310:	2300      	movs	r3, #0
 8007312:	0020      	movs	r0, r4
 8007314:	0031      	movs	r1, r6
 8007316:	f7f9 f891 	bl	800043c <__aeabi_dcmpeq>
 800731a:	2800      	cmp	r0, #0
 800731c:	d001      	beq.n	8007322 <__cvt+0xa6>
 800731e:	9b07      	ldr	r3, [sp, #28]
 8007320:	9309      	str	r3, [sp, #36]	; 0x24
 8007322:	2230      	movs	r2, #48	; 0x30
 8007324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007326:	9907      	ldr	r1, [sp, #28]
 8007328:	428b      	cmp	r3, r1
 800732a:	d306      	bcc.n	800733a <__cvt+0xbe>
 800732c:	0028      	movs	r0, r5
 800732e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007330:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007332:	1b5b      	subs	r3, r3, r5
 8007334:	6013      	str	r3, [r2, #0]
 8007336:	b00b      	add	sp, #44	; 0x2c
 8007338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800733a:	1c59      	adds	r1, r3, #1
 800733c:	9109      	str	r1, [sp, #36]	; 0x24
 800733e:	701a      	strb	r2, [r3, #0]
 8007340:	e7f0      	b.n	8007324 <__cvt+0xa8>

08007342 <__exponent>:
 8007342:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007344:	1c83      	adds	r3, r0, #2
 8007346:	b087      	sub	sp, #28
 8007348:	9303      	str	r3, [sp, #12]
 800734a:	0005      	movs	r5, r0
 800734c:	000c      	movs	r4, r1
 800734e:	232b      	movs	r3, #43	; 0x2b
 8007350:	7002      	strb	r2, [r0, #0]
 8007352:	2900      	cmp	r1, #0
 8007354:	da01      	bge.n	800735a <__exponent+0x18>
 8007356:	424c      	negs	r4, r1
 8007358:	3302      	adds	r3, #2
 800735a:	706b      	strb	r3, [r5, #1]
 800735c:	2c09      	cmp	r4, #9
 800735e:	dd2f      	ble.n	80073c0 <__exponent+0x7e>
 8007360:	270a      	movs	r7, #10
 8007362:	ab04      	add	r3, sp, #16
 8007364:	1dde      	adds	r6, r3, #7
 8007366:	0020      	movs	r0, r4
 8007368:	0039      	movs	r1, r7
 800736a:	9601      	str	r6, [sp, #4]
 800736c:	f7f9 f850 	bl	8000410 <__aeabi_idivmod>
 8007370:	3e01      	subs	r6, #1
 8007372:	3130      	adds	r1, #48	; 0x30
 8007374:	0020      	movs	r0, r4
 8007376:	7031      	strb	r1, [r6, #0]
 8007378:	0039      	movs	r1, r7
 800737a:	9402      	str	r4, [sp, #8]
 800737c:	f7f8 ff62 	bl	8000244 <__divsi3>
 8007380:	9b02      	ldr	r3, [sp, #8]
 8007382:	0004      	movs	r4, r0
 8007384:	2b63      	cmp	r3, #99	; 0x63
 8007386:	dcee      	bgt.n	8007366 <__exponent+0x24>
 8007388:	9b01      	ldr	r3, [sp, #4]
 800738a:	3430      	adds	r4, #48	; 0x30
 800738c:	1e9a      	subs	r2, r3, #2
 800738e:	0013      	movs	r3, r2
 8007390:	9903      	ldr	r1, [sp, #12]
 8007392:	7014      	strb	r4, [r2, #0]
 8007394:	a804      	add	r0, sp, #16
 8007396:	3007      	adds	r0, #7
 8007398:	4298      	cmp	r0, r3
 800739a:	d80c      	bhi.n	80073b6 <__exponent+0x74>
 800739c:	2300      	movs	r3, #0
 800739e:	4282      	cmp	r2, r0
 80073a0:	d804      	bhi.n	80073ac <__exponent+0x6a>
 80073a2:	aa04      	add	r2, sp, #16
 80073a4:	3309      	adds	r3, #9
 80073a6:	189b      	adds	r3, r3, r2
 80073a8:	9a01      	ldr	r2, [sp, #4]
 80073aa:	1a9b      	subs	r3, r3, r2
 80073ac:	9a03      	ldr	r2, [sp, #12]
 80073ae:	18d3      	adds	r3, r2, r3
 80073b0:	1b58      	subs	r0, r3, r5
 80073b2:	b007      	add	sp, #28
 80073b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073b6:	7818      	ldrb	r0, [r3, #0]
 80073b8:	3301      	adds	r3, #1
 80073ba:	7008      	strb	r0, [r1, #0]
 80073bc:	3101      	adds	r1, #1
 80073be:	e7e9      	b.n	8007394 <__exponent+0x52>
 80073c0:	2330      	movs	r3, #48	; 0x30
 80073c2:	3430      	adds	r4, #48	; 0x30
 80073c4:	70ab      	strb	r3, [r5, #2]
 80073c6:	70ec      	strb	r4, [r5, #3]
 80073c8:	1d2b      	adds	r3, r5, #4
 80073ca:	e7f1      	b.n	80073b0 <__exponent+0x6e>

080073cc <_printf_float>:
 80073cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073ce:	b095      	sub	sp, #84	; 0x54
 80073d0:	000c      	movs	r4, r1
 80073d2:	9208      	str	r2, [sp, #32]
 80073d4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80073d6:	9309      	str	r3, [sp, #36]	; 0x24
 80073d8:	0007      	movs	r7, r0
 80073da:	f000 fd05 	bl	8007de8 <_localeconv_r>
 80073de:	6803      	ldr	r3, [r0, #0]
 80073e0:	0018      	movs	r0, r3
 80073e2:	930c      	str	r3, [sp, #48]	; 0x30
 80073e4:	f7fb faf0 	bl	80029c8 <strlen>
 80073e8:	2300      	movs	r3, #0
 80073ea:	9312      	str	r3, [sp, #72]	; 0x48
 80073ec:	7e23      	ldrb	r3, [r4, #24]
 80073ee:	2207      	movs	r2, #7
 80073f0:	930a      	str	r3, [sp, #40]	; 0x28
 80073f2:	6823      	ldr	r3, [r4, #0]
 80073f4:	900d      	str	r0, [sp, #52]	; 0x34
 80073f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80073f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80073fa:	682b      	ldr	r3, [r5, #0]
 80073fc:	05c9      	lsls	r1, r1, #23
 80073fe:	d547      	bpl.n	8007490 <_printf_float+0xc4>
 8007400:	189b      	adds	r3, r3, r2
 8007402:	4393      	bics	r3, r2
 8007404:	001a      	movs	r2, r3
 8007406:	3208      	adds	r2, #8
 8007408:	602a      	str	r2, [r5, #0]
 800740a:	681e      	ldr	r6, [r3, #0]
 800740c:	685d      	ldr	r5, [r3, #4]
 800740e:	0032      	movs	r2, r6
 8007410:	002b      	movs	r3, r5
 8007412:	64a2      	str	r2, [r4, #72]	; 0x48
 8007414:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007416:	2201      	movs	r2, #1
 8007418:	006b      	lsls	r3, r5, #1
 800741a:	085b      	lsrs	r3, r3, #1
 800741c:	930e      	str	r3, [sp, #56]	; 0x38
 800741e:	0030      	movs	r0, r6
 8007420:	4bab      	ldr	r3, [pc, #684]	; (80076d0 <_printf_float+0x304>)
 8007422:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007424:	4252      	negs	r2, r2
 8007426:	f7fb f9fb 	bl	8002820 <__aeabi_dcmpun>
 800742a:	2800      	cmp	r0, #0
 800742c:	d132      	bne.n	8007494 <_printf_float+0xc8>
 800742e:	2201      	movs	r2, #1
 8007430:	0030      	movs	r0, r6
 8007432:	4ba7      	ldr	r3, [pc, #668]	; (80076d0 <_printf_float+0x304>)
 8007434:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007436:	4252      	negs	r2, r2
 8007438:	f7f9 f810 	bl	800045c <__aeabi_dcmple>
 800743c:	2800      	cmp	r0, #0
 800743e:	d129      	bne.n	8007494 <_printf_float+0xc8>
 8007440:	2200      	movs	r2, #0
 8007442:	2300      	movs	r3, #0
 8007444:	0030      	movs	r0, r6
 8007446:	0029      	movs	r1, r5
 8007448:	f7f8 fffe 	bl	8000448 <__aeabi_dcmplt>
 800744c:	2800      	cmp	r0, #0
 800744e:	d003      	beq.n	8007458 <_printf_float+0x8c>
 8007450:	0023      	movs	r3, r4
 8007452:	222d      	movs	r2, #45	; 0x2d
 8007454:	3343      	adds	r3, #67	; 0x43
 8007456:	701a      	strb	r2, [r3, #0]
 8007458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800745a:	4d9e      	ldr	r5, [pc, #632]	; (80076d4 <_printf_float+0x308>)
 800745c:	2b47      	cmp	r3, #71	; 0x47
 800745e:	d900      	bls.n	8007462 <_printf_float+0x96>
 8007460:	4d9d      	ldr	r5, [pc, #628]	; (80076d8 <_printf_float+0x30c>)
 8007462:	2303      	movs	r3, #3
 8007464:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007466:	6123      	str	r3, [r4, #16]
 8007468:	3301      	adds	r3, #1
 800746a:	439a      	bics	r2, r3
 800746c:	2300      	movs	r3, #0
 800746e:	6022      	str	r2, [r4, #0]
 8007470:	930b      	str	r3, [sp, #44]	; 0x2c
 8007472:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007474:	0021      	movs	r1, r4
 8007476:	9300      	str	r3, [sp, #0]
 8007478:	0038      	movs	r0, r7
 800747a:	9b08      	ldr	r3, [sp, #32]
 800747c:	aa13      	add	r2, sp, #76	; 0x4c
 800747e:	f000 f9fb 	bl	8007878 <_printf_common>
 8007482:	3001      	adds	r0, #1
 8007484:	d000      	beq.n	8007488 <_printf_float+0xbc>
 8007486:	e0a3      	b.n	80075d0 <_printf_float+0x204>
 8007488:	2001      	movs	r0, #1
 800748a:	4240      	negs	r0, r0
 800748c:	b015      	add	sp, #84	; 0x54
 800748e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007490:	3307      	adds	r3, #7
 8007492:	e7b6      	b.n	8007402 <_printf_float+0x36>
 8007494:	0032      	movs	r2, r6
 8007496:	002b      	movs	r3, r5
 8007498:	0030      	movs	r0, r6
 800749a:	0029      	movs	r1, r5
 800749c:	f7fb f9c0 	bl	8002820 <__aeabi_dcmpun>
 80074a0:	2800      	cmp	r0, #0
 80074a2:	d00b      	beq.n	80074bc <_printf_float+0xf0>
 80074a4:	2d00      	cmp	r5, #0
 80074a6:	da03      	bge.n	80074b0 <_printf_float+0xe4>
 80074a8:	0023      	movs	r3, r4
 80074aa:	222d      	movs	r2, #45	; 0x2d
 80074ac:	3343      	adds	r3, #67	; 0x43
 80074ae:	701a      	strb	r2, [r3, #0]
 80074b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074b2:	4d8a      	ldr	r5, [pc, #552]	; (80076dc <_printf_float+0x310>)
 80074b4:	2b47      	cmp	r3, #71	; 0x47
 80074b6:	d9d4      	bls.n	8007462 <_printf_float+0x96>
 80074b8:	4d89      	ldr	r5, [pc, #548]	; (80076e0 <_printf_float+0x314>)
 80074ba:	e7d2      	b.n	8007462 <_printf_float+0x96>
 80074bc:	2220      	movs	r2, #32
 80074be:	990a      	ldr	r1, [sp, #40]	; 0x28
 80074c0:	6863      	ldr	r3, [r4, #4]
 80074c2:	4391      	bics	r1, r2
 80074c4:	910e      	str	r1, [sp, #56]	; 0x38
 80074c6:	1c5a      	adds	r2, r3, #1
 80074c8:	d14a      	bne.n	8007560 <_printf_float+0x194>
 80074ca:	3307      	adds	r3, #7
 80074cc:	6063      	str	r3, [r4, #4]
 80074ce:	2380      	movs	r3, #128	; 0x80
 80074d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80074d2:	00db      	lsls	r3, r3, #3
 80074d4:	4313      	orrs	r3, r2
 80074d6:	2200      	movs	r2, #0
 80074d8:	9206      	str	r2, [sp, #24]
 80074da:	aa12      	add	r2, sp, #72	; 0x48
 80074dc:	9205      	str	r2, [sp, #20]
 80074de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074e0:	6023      	str	r3, [r4, #0]
 80074e2:	9204      	str	r2, [sp, #16]
 80074e4:	aa11      	add	r2, sp, #68	; 0x44
 80074e6:	9203      	str	r2, [sp, #12]
 80074e8:	2223      	movs	r2, #35	; 0x23
 80074ea:	a908      	add	r1, sp, #32
 80074ec:	9301      	str	r3, [sp, #4]
 80074ee:	6863      	ldr	r3, [r4, #4]
 80074f0:	1852      	adds	r2, r2, r1
 80074f2:	9202      	str	r2, [sp, #8]
 80074f4:	9300      	str	r3, [sp, #0]
 80074f6:	0032      	movs	r2, r6
 80074f8:	002b      	movs	r3, r5
 80074fa:	0038      	movs	r0, r7
 80074fc:	f7ff febe 	bl	800727c <__cvt>
 8007500:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007502:	0005      	movs	r5, r0
 8007504:	2b47      	cmp	r3, #71	; 0x47
 8007506:	d109      	bne.n	800751c <_printf_float+0x150>
 8007508:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800750a:	1cda      	adds	r2, r3, #3
 800750c:	db02      	blt.n	8007514 <_printf_float+0x148>
 800750e:	6862      	ldr	r2, [r4, #4]
 8007510:	4293      	cmp	r3, r2
 8007512:	dd49      	ble.n	80075a8 <_printf_float+0x1dc>
 8007514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007516:	3b02      	subs	r3, #2
 8007518:	b2db      	uxtb	r3, r3
 800751a:	930a      	str	r3, [sp, #40]	; 0x28
 800751c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800751e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007520:	2b65      	cmp	r3, #101	; 0x65
 8007522:	d824      	bhi.n	800756e <_printf_float+0x1a2>
 8007524:	0020      	movs	r0, r4
 8007526:	001a      	movs	r2, r3
 8007528:	3901      	subs	r1, #1
 800752a:	3050      	adds	r0, #80	; 0x50
 800752c:	9111      	str	r1, [sp, #68]	; 0x44
 800752e:	f7ff ff08 	bl	8007342 <__exponent>
 8007532:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007534:	900b      	str	r0, [sp, #44]	; 0x2c
 8007536:	1813      	adds	r3, r2, r0
 8007538:	6123      	str	r3, [r4, #16]
 800753a:	2a01      	cmp	r2, #1
 800753c:	dc02      	bgt.n	8007544 <_printf_float+0x178>
 800753e:	6822      	ldr	r2, [r4, #0]
 8007540:	07d2      	lsls	r2, r2, #31
 8007542:	d501      	bpl.n	8007548 <_printf_float+0x17c>
 8007544:	3301      	adds	r3, #1
 8007546:	6123      	str	r3, [r4, #16]
 8007548:	2323      	movs	r3, #35	; 0x23
 800754a:	aa08      	add	r2, sp, #32
 800754c:	189b      	adds	r3, r3, r2
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d100      	bne.n	8007556 <_printf_float+0x18a>
 8007554:	e78d      	b.n	8007472 <_printf_float+0xa6>
 8007556:	0023      	movs	r3, r4
 8007558:	222d      	movs	r2, #45	; 0x2d
 800755a:	3343      	adds	r3, #67	; 0x43
 800755c:	701a      	strb	r2, [r3, #0]
 800755e:	e788      	b.n	8007472 <_printf_float+0xa6>
 8007560:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007562:	2a47      	cmp	r2, #71	; 0x47
 8007564:	d1b3      	bne.n	80074ce <_printf_float+0x102>
 8007566:	2b00      	cmp	r3, #0
 8007568:	d1b1      	bne.n	80074ce <_printf_float+0x102>
 800756a:	3301      	adds	r3, #1
 800756c:	e7ae      	b.n	80074cc <_printf_float+0x100>
 800756e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007570:	2b66      	cmp	r3, #102	; 0x66
 8007572:	d11b      	bne.n	80075ac <_printf_float+0x1e0>
 8007574:	6863      	ldr	r3, [r4, #4]
 8007576:	2900      	cmp	r1, #0
 8007578:	dd09      	ble.n	800758e <_printf_float+0x1c2>
 800757a:	6121      	str	r1, [r4, #16]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d102      	bne.n	8007586 <_printf_float+0x1ba>
 8007580:	6822      	ldr	r2, [r4, #0]
 8007582:	07d2      	lsls	r2, r2, #31
 8007584:	d50b      	bpl.n	800759e <_printf_float+0x1d2>
 8007586:	3301      	adds	r3, #1
 8007588:	185b      	adds	r3, r3, r1
 800758a:	6123      	str	r3, [r4, #16]
 800758c:	e007      	b.n	800759e <_printf_float+0x1d2>
 800758e:	2b00      	cmp	r3, #0
 8007590:	d103      	bne.n	800759a <_printf_float+0x1ce>
 8007592:	2201      	movs	r2, #1
 8007594:	6821      	ldr	r1, [r4, #0]
 8007596:	4211      	tst	r1, r2
 8007598:	d000      	beq.n	800759c <_printf_float+0x1d0>
 800759a:	1c9a      	adds	r2, r3, #2
 800759c:	6122      	str	r2, [r4, #16]
 800759e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075a0:	65a3      	str	r3, [r4, #88]	; 0x58
 80075a2:	2300      	movs	r3, #0
 80075a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80075a6:	e7cf      	b.n	8007548 <_printf_float+0x17c>
 80075a8:	2367      	movs	r3, #103	; 0x67
 80075aa:	930a      	str	r3, [sp, #40]	; 0x28
 80075ac:	9911      	ldr	r1, [sp, #68]	; 0x44
 80075ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80075b0:	4299      	cmp	r1, r3
 80075b2:	db06      	blt.n	80075c2 <_printf_float+0x1f6>
 80075b4:	6823      	ldr	r3, [r4, #0]
 80075b6:	6121      	str	r1, [r4, #16]
 80075b8:	07db      	lsls	r3, r3, #31
 80075ba:	d5f0      	bpl.n	800759e <_printf_float+0x1d2>
 80075bc:	3101      	adds	r1, #1
 80075be:	6121      	str	r1, [r4, #16]
 80075c0:	e7ed      	b.n	800759e <_printf_float+0x1d2>
 80075c2:	2201      	movs	r2, #1
 80075c4:	2900      	cmp	r1, #0
 80075c6:	dc01      	bgt.n	80075cc <_printf_float+0x200>
 80075c8:	1892      	adds	r2, r2, r2
 80075ca:	1a52      	subs	r2, r2, r1
 80075cc:	189b      	adds	r3, r3, r2
 80075ce:	e7dc      	b.n	800758a <_printf_float+0x1be>
 80075d0:	6822      	ldr	r2, [r4, #0]
 80075d2:	0553      	lsls	r3, r2, #21
 80075d4:	d408      	bmi.n	80075e8 <_printf_float+0x21c>
 80075d6:	6923      	ldr	r3, [r4, #16]
 80075d8:	002a      	movs	r2, r5
 80075da:	0038      	movs	r0, r7
 80075dc:	9908      	ldr	r1, [sp, #32]
 80075de:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80075e0:	47a8      	blx	r5
 80075e2:	3001      	adds	r0, #1
 80075e4:	d12a      	bne.n	800763c <_printf_float+0x270>
 80075e6:	e74f      	b.n	8007488 <_printf_float+0xbc>
 80075e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075ea:	2b65      	cmp	r3, #101	; 0x65
 80075ec:	d800      	bhi.n	80075f0 <_printf_float+0x224>
 80075ee:	e0ec      	b.n	80077ca <_printf_float+0x3fe>
 80075f0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80075f2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80075f4:	2200      	movs	r2, #0
 80075f6:	2300      	movs	r3, #0
 80075f8:	f7f8 ff20 	bl	800043c <__aeabi_dcmpeq>
 80075fc:	2800      	cmp	r0, #0
 80075fe:	d034      	beq.n	800766a <_printf_float+0x29e>
 8007600:	2301      	movs	r3, #1
 8007602:	0038      	movs	r0, r7
 8007604:	4a37      	ldr	r2, [pc, #220]	; (80076e4 <_printf_float+0x318>)
 8007606:	9908      	ldr	r1, [sp, #32]
 8007608:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800760a:	47a8      	blx	r5
 800760c:	3001      	adds	r0, #1
 800760e:	d100      	bne.n	8007612 <_printf_float+0x246>
 8007610:	e73a      	b.n	8007488 <_printf_float+0xbc>
 8007612:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007614:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007616:	429a      	cmp	r2, r3
 8007618:	db02      	blt.n	8007620 <_printf_float+0x254>
 800761a:	6823      	ldr	r3, [r4, #0]
 800761c:	07db      	lsls	r3, r3, #31
 800761e:	d50d      	bpl.n	800763c <_printf_float+0x270>
 8007620:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007622:	0038      	movs	r0, r7
 8007624:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007626:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007628:	9908      	ldr	r1, [sp, #32]
 800762a:	47a8      	blx	r5
 800762c:	2500      	movs	r5, #0
 800762e:	3001      	adds	r0, #1
 8007630:	d100      	bne.n	8007634 <_printf_float+0x268>
 8007632:	e729      	b.n	8007488 <_printf_float+0xbc>
 8007634:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007636:	3b01      	subs	r3, #1
 8007638:	42ab      	cmp	r3, r5
 800763a:	dc0a      	bgt.n	8007652 <_printf_float+0x286>
 800763c:	6823      	ldr	r3, [r4, #0]
 800763e:	079b      	lsls	r3, r3, #30
 8007640:	d500      	bpl.n	8007644 <_printf_float+0x278>
 8007642:	e116      	b.n	8007872 <_printf_float+0x4a6>
 8007644:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007646:	68e0      	ldr	r0, [r4, #12]
 8007648:	4298      	cmp	r0, r3
 800764a:	db00      	blt.n	800764e <_printf_float+0x282>
 800764c:	e71e      	b.n	800748c <_printf_float+0xc0>
 800764e:	0018      	movs	r0, r3
 8007650:	e71c      	b.n	800748c <_printf_float+0xc0>
 8007652:	0022      	movs	r2, r4
 8007654:	2301      	movs	r3, #1
 8007656:	0038      	movs	r0, r7
 8007658:	9908      	ldr	r1, [sp, #32]
 800765a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800765c:	321a      	adds	r2, #26
 800765e:	47b0      	blx	r6
 8007660:	3001      	adds	r0, #1
 8007662:	d100      	bne.n	8007666 <_printf_float+0x29a>
 8007664:	e710      	b.n	8007488 <_printf_float+0xbc>
 8007666:	3501      	adds	r5, #1
 8007668:	e7e4      	b.n	8007634 <_printf_float+0x268>
 800766a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800766c:	2b00      	cmp	r3, #0
 800766e:	dc3b      	bgt.n	80076e8 <_printf_float+0x31c>
 8007670:	2301      	movs	r3, #1
 8007672:	0038      	movs	r0, r7
 8007674:	4a1b      	ldr	r2, [pc, #108]	; (80076e4 <_printf_float+0x318>)
 8007676:	9908      	ldr	r1, [sp, #32]
 8007678:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800767a:	47b0      	blx	r6
 800767c:	3001      	adds	r0, #1
 800767e:	d100      	bne.n	8007682 <_printf_float+0x2b6>
 8007680:	e702      	b.n	8007488 <_printf_float+0xbc>
 8007682:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007684:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007686:	4313      	orrs	r3, r2
 8007688:	d102      	bne.n	8007690 <_printf_float+0x2c4>
 800768a:	6823      	ldr	r3, [r4, #0]
 800768c:	07db      	lsls	r3, r3, #31
 800768e:	d5d5      	bpl.n	800763c <_printf_float+0x270>
 8007690:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007692:	0038      	movs	r0, r7
 8007694:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007696:	9908      	ldr	r1, [sp, #32]
 8007698:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800769a:	47b0      	blx	r6
 800769c:	2300      	movs	r3, #0
 800769e:	3001      	adds	r0, #1
 80076a0:	d100      	bne.n	80076a4 <_printf_float+0x2d8>
 80076a2:	e6f1      	b.n	8007488 <_printf_float+0xbc>
 80076a4:	930a      	str	r3, [sp, #40]	; 0x28
 80076a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80076a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076aa:	425b      	negs	r3, r3
 80076ac:	4293      	cmp	r3, r2
 80076ae:	dc01      	bgt.n	80076b4 <_printf_float+0x2e8>
 80076b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80076b2:	e791      	b.n	80075d8 <_printf_float+0x20c>
 80076b4:	0022      	movs	r2, r4
 80076b6:	2301      	movs	r3, #1
 80076b8:	0038      	movs	r0, r7
 80076ba:	9908      	ldr	r1, [sp, #32]
 80076bc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80076be:	321a      	adds	r2, #26
 80076c0:	47b0      	blx	r6
 80076c2:	3001      	adds	r0, #1
 80076c4:	d100      	bne.n	80076c8 <_printf_float+0x2fc>
 80076c6:	e6df      	b.n	8007488 <_printf_float+0xbc>
 80076c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076ca:	3301      	adds	r3, #1
 80076cc:	e7ea      	b.n	80076a4 <_printf_float+0x2d8>
 80076ce:	46c0      	nop			; (mov r8, r8)
 80076d0:	7fefffff 	.word	0x7fefffff
 80076d4:	0800a9f4 	.word	0x0800a9f4
 80076d8:	0800a9f8 	.word	0x0800a9f8
 80076dc:	0800a9fc 	.word	0x0800a9fc
 80076e0:	0800aa00 	.word	0x0800aa00
 80076e4:	0800aa04 	.word	0x0800aa04
 80076e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80076ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80076ec:	920a      	str	r2, [sp, #40]	; 0x28
 80076ee:	429a      	cmp	r2, r3
 80076f0:	dd00      	ble.n	80076f4 <_printf_float+0x328>
 80076f2:	930a      	str	r3, [sp, #40]	; 0x28
 80076f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	dc3d      	bgt.n	8007776 <_printf_float+0x3aa>
 80076fa:	2300      	movs	r3, #0
 80076fc:	930e      	str	r3, [sp, #56]	; 0x38
 80076fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007700:	43db      	mvns	r3, r3
 8007702:	17db      	asrs	r3, r3, #31
 8007704:	930f      	str	r3, [sp, #60]	; 0x3c
 8007706:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007708:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800770a:	930b      	str	r3, [sp, #44]	; 0x2c
 800770c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800770e:	4013      	ands	r3, r2
 8007710:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007716:	4293      	cmp	r3, r2
 8007718:	dc36      	bgt.n	8007788 <_printf_float+0x3bc>
 800771a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800771c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800771e:	429a      	cmp	r2, r3
 8007720:	db40      	blt.n	80077a4 <_printf_float+0x3d8>
 8007722:	6823      	ldr	r3, [r4, #0]
 8007724:	07db      	lsls	r3, r3, #31
 8007726:	d43d      	bmi.n	80077a4 <_printf_float+0x3d8>
 8007728:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800772a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800772c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800772e:	1af3      	subs	r3, r6, r3
 8007730:	1ab6      	subs	r6, r6, r2
 8007732:	429e      	cmp	r6, r3
 8007734:	dd00      	ble.n	8007738 <_printf_float+0x36c>
 8007736:	001e      	movs	r6, r3
 8007738:	2e00      	cmp	r6, #0
 800773a:	dc3c      	bgt.n	80077b6 <_printf_float+0x3ea>
 800773c:	2300      	movs	r3, #0
 800773e:	930a      	str	r3, [sp, #40]	; 0x28
 8007740:	43f3      	mvns	r3, r6
 8007742:	17db      	asrs	r3, r3, #31
 8007744:	930b      	str	r3, [sp, #44]	; 0x2c
 8007746:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007748:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800774a:	1a9b      	subs	r3, r3, r2
 800774c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800774e:	4032      	ands	r2, r6
 8007750:	1a9b      	subs	r3, r3, r2
 8007752:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007754:	4293      	cmp	r3, r2
 8007756:	dc00      	bgt.n	800775a <_printf_float+0x38e>
 8007758:	e770      	b.n	800763c <_printf_float+0x270>
 800775a:	0022      	movs	r2, r4
 800775c:	2301      	movs	r3, #1
 800775e:	0038      	movs	r0, r7
 8007760:	9908      	ldr	r1, [sp, #32]
 8007762:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007764:	321a      	adds	r2, #26
 8007766:	47a8      	blx	r5
 8007768:	3001      	adds	r0, #1
 800776a:	d100      	bne.n	800776e <_printf_float+0x3a2>
 800776c:	e68c      	b.n	8007488 <_printf_float+0xbc>
 800776e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007770:	3301      	adds	r3, #1
 8007772:	930a      	str	r3, [sp, #40]	; 0x28
 8007774:	e7e7      	b.n	8007746 <_printf_float+0x37a>
 8007776:	002a      	movs	r2, r5
 8007778:	0038      	movs	r0, r7
 800777a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800777c:	9908      	ldr	r1, [sp, #32]
 800777e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007780:	47b0      	blx	r6
 8007782:	3001      	adds	r0, #1
 8007784:	d1b9      	bne.n	80076fa <_printf_float+0x32e>
 8007786:	e67f      	b.n	8007488 <_printf_float+0xbc>
 8007788:	0022      	movs	r2, r4
 800778a:	2301      	movs	r3, #1
 800778c:	0038      	movs	r0, r7
 800778e:	9908      	ldr	r1, [sp, #32]
 8007790:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007792:	321a      	adds	r2, #26
 8007794:	47b0      	blx	r6
 8007796:	3001      	adds	r0, #1
 8007798:	d100      	bne.n	800779c <_printf_float+0x3d0>
 800779a:	e675      	b.n	8007488 <_printf_float+0xbc>
 800779c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800779e:	3301      	adds	r3, #1
 80077a0:	930e      	str	r3, [sp, #56]	; 0x38
 80077a2:	e7b0      	b.n	8007706 <_printf_float+0x33a>
 80077a4:	0038      	movs	r0, r7
 80077a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077aa:	9908      	ldr	r1, [sp, #32]
 80077ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80077ae:	47b0      	blx	r6
 80077b0:	3001      	adds	r0, #1
 80077b2:	d1b9      	bne.n	8007728 <_printf_float+0x35c>
 80077b4:	e668      	b.n	8007488 <_printf_float+0xbc>
 80077b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077b8:	0038      	movs	r0, r7
 80077ba:	18ea      	adds	r2, r5, r3
 80077bc:	9908      	ldr	r1, [sp, #32]
 80077be:	0033      	movs	r3, r6
 80077c0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80077c2:	47a8      	blx	r5
 80077c4:	3001      	adds	r0, #1
 80077c6:	d1b9      	bne.n	800773c <_printf_float+0x370>
 80077c8:	e65e      	b.n	8007488 <_printf_float+0xbc>
 80077ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	dc02      	bgt.n	80077d6 <_printf_float+0x40a>
 80077d0:	2301      	movs	r3, #1
 80077d2:	421a      	tst	r2, r3
 80077d4:	d03a      	beq.n	800784c <_printf_float+0x480>
 80077d6:	2301      	movs	r3, #1
 80077d8:	002a      	movs	r2, r5
 80077da:	0038      	movs	r0, r7
 80077dc:	9908      	ldr	r1, [sp, #32]
 80077de:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80077e0:	47b0      	blx	r6
 80077e2:	3001      	adds	r0, #1
 80077e4:	d100      	bne.n	80077e8 <_printf_float+0x41c>
 80077e6:	e64f      	b.n	8007488 <_printf_float+0xbc>
 80077e8:	0038      	movs	r0, r7
 80077ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077ee:	9908      	ldr	r1, [sp, #32]
 80077f0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80077f2:	47b0      	blx	r6
 80077f4:	3001      	adds	r0, #1
 80077f6:	d100      	bne.n	80077fa <_printf_float+0x42e>
 80077f8:	e646      	b.n	8007488 <_printf_float+0xbc>
 80077fa:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80077fc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80077fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007800:	2200      	movs	r2, #0
 8007802:	001e      	movs	r6, r3
 8007804:	2300      	movs	r3, #0
 8007806:	f7f8 fe19 	bl	800043c <__aeabi_dcmpeq>
 800780a:	2800      	cmp	r0, #0
 800780c:	d11c      	bne.n	8007848 <_printf_float+0x47c>
 800780e:	0033      	movs	r3, r6
 8007810:	1c6a      	adds	r2, r5, #1
 8007812:	3b01      	subs	r3, #1
 8007814:	0038      	movs	r0, r7
 8007816:	9908      	ldr	r1, [sp, #32]
 8007818:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800781a:	47a8      	blx	r5
 800781c:	3001      	adds	r0, #1
 800781e:	d10f      	bne.n	8007840 <_printf_float+0x474>
 8007820:	e632      	b.n	8007488 <_printf_float+0xbc>
 8007822:	0022      	movs	r2, r4
 8007824:	2301      	movs	r3, #1
 8007826:	0038      	movs	r0, r7
 8007828:	9908      	ldr	r1, [sp, #32]
 800782a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800782c:	321a      	adds	r2, #26
 800782e:	47b0      	blx	r6
 8007830:	3001      	adds	r0, #1
 8007832:	d100      	bne.n	8007836 <_printf_float+0x46a>
 8007834:	e628      	b.n	8007488 <_printf_float+0xbc>
 8007836:	3501      	adds	r5, #1
 8007838:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800783a:	3b01      	subs	r3, #1
 800783c:	42ab      	cmp	r3, r5
 800783e:	dcf0      	bgt.n	8007822 <_printf_float+0x456>
 8007840:	0022      	movs	r2, r4
 8007842:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007844:	3250      	adds	r2, #80	; 0x50
 8007846:	e6c8      	b.n	80075da <_printf_float+0x20e>
 8007848:	2500      	movs	r5, #0
 800784a:	e7f5      	b.n	8007838 <_printf_float+0x46c>
 800784c:	002a      	movs	r2, r5
 800784e:	e7e1      	b.n	8007814 <_printf_float+0x448>
 8007850:	0022      	movs	r2, r4
 8007852:	2301      	movs	r3, #1
 8007854:	0038      	movs	r0, r7
 8007856:	9908      	ldr	r1, [sp, #32]
 8007858:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800785a:	3219      	adds	r2, #25
 800785c:	47b0      	blx	r6
 800785e:	3001      	adds	r0, #1
 8007860:	d100      	bne.n	8007864 <_printf_float+0x498>
 8007862:	e611      	b.n	8007488 <_printf_float+0xbc>
 8007864:	3501      	adds	r5, #1
 8007866:	68e3      	ldr	r3, [r4, #12]
 8007868:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800786a:	1a9b      	subs	r3, r3, r2
 800786c:	42ab      	cmp	r3, r5
 800786e:	dcef      	bgt.n	8007850 <_printf_float+0x484>
 8007870:	e6e8      	b.n	8007644 <_printf_float+0x278>
 8007872:	2500      	movs	r5, #0
 8007874:	e7f7      	b.n	8007866 <_printf_float+0x49a>
 8007876:	46c0      	nop			; (mov r8, r8)

08007878 <_printf_common>:
 8007878:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800787a:	0016      	movs	r6, r2
 800787c:	9301      	str	r3, [sp, #4]
 800787e:	688a      	ldr	r2, [r1, #8]
 8007880:	690b      	ldr	r3, [r1, #16]
 8007882:	000c      	movs	r4, r1
 8007884:	9000      	str	r0, [sp, #0]
 8007886:	4293      	cmp	r3, r2
 8007888:	da00      	bge.n	800788c <_printf_common+0x14>
 800788a:	0013      	movs	r3, r2
 800788c:	0022      	movs	r2, r4
 800788e:	6033      	str	r3, [r6, #0]
 8007890:	3243      	adds	r2, #67	; 0x43
 8007892:	7812      	ldrb	r2, [r2, #0]
 8007894:	2a00      	cmp	r2, #0
 8007896:	d001      	beq.n	800789c <_printf_common+0x24>
 8007898:	3301      	adds	r3, #1
 800789a:	6033      	str	r3, [r6, #0]
 800789c:	6823      	ldr	r3, [r4, #0]
 800789e:	069b      	lsls	r3, r3, #26
 80078a0:	d502      	bpl.n	80078a8 <_printf_common+0x30>
 80078a2:	6833      	ldr	r3, [r6, #0]
 80078a4:	3302      	adds	r3, #2
 80078a6:	6033      	str	r3, [r6, #0]
 80078a8:	6822      	ldr	r2, [r4, #0]
 80078aa:	2306      	movs	r3, #6
 80078ac:	0015      	movs	r5, r2
 80078ae:	401d      	ands	r5, r3
 80078b0:	421a      	tst	r2, r3
 80078b2:	d027      	beq.n	8007904 <_printf_common+0x8c>
 80078b4:	0023      	movs	r3, r4
 80078b6:	3343      	adds	r3, #67	; 0x43
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	1e5a      	subs	r2, r3, #1
 80078bc:	4193      	sbcs	r3, r2
 80078be:	6822      	ldr	r2, [r4, #0]
 80078c0:	0692      	lsls	r2, r2, #26
 80078c2:	d430      	bmi.n	8007926 <_printf_common+0xae>
 80078c4:	0022      	movs	r2, r4
 80078c6:	9901      	ldr	r1, [sp, #4]
 80078c8:	9800      	ldr	r0, [sp, #0]
 80078ca:	9d08      	ldr	r5, [sp, #32]
 80078cc:	3243      	adds	r2, #67	; 0x43
 80078ce:	47a8      	blx	r5
 80078d0:	3001      	adds	r0, #1
 80078d2:	d025      	beq.n	8007920 <_printf_common+0xa8>
 80078d4:	2206      	movs	r2, #6
 80078d6:	6823      	ldr	r3, [r4, #0]
 80078d8:	2500      	movs	r5, #0
 80078da:	4013      	ands	r3, r2
 80078dc:	2b04      	cmp	r3, #4
 80078de:	d105      	bne.n	80078ec <_printf_common+0x74>
 80078e0:	6833      	ldr	r3, [r6, #0]
 80078e2:	68e5      	ldr	r5, [r4, #12]
 80078e4:	1aed      	subs	r5, r5, r3
 80078e6:	43eb      	mvns	r3, r5
 80078e8:	17db      	asrs	r3, r3, #31
 80078ea:	401d      	ands	r5, r3
 80078ec:	68a3      	ldr	r3, [r4, #8]
 80078ee:	6922      	ldr	r2, [r4, #16]
 80078f0:	4293      	cmp	r3, r2
 80078f2:	dd01      	ble.n	80078f8 <_printf_common+0x80>
 80078f4:	1a9b      	subs	r3, r3, r2
 80078f6:	18ed      	adds	r5, r5, r3
 80078f8:	2600      	movs	r6, #0
 80078fa:	42b5      	cmp	r5, r6
 80078fc:	d120      	bne.n	8007940 <_printf_common+0xc8>
 80078fe:	2000      	movs	r0, #0
 8007900:	e010      	b.n	8007924 <_printf_common+0xac>
 8007902:	3501      	adds	r5, #1
 8007904:	68e3      	ldr	r3, [r4, #12]
 8007906:	6832      	ldr	r2, [r6, #0]
 8007908:	1a9b      	subs	r3, r3, r2
 800790a:	42ab      	cmp	r3, r5
 800790c:	ddd2      	ble.n	80078b4 <_printf_common+0x3c>
 800790e:	0022      	movs	r2, r4
 8007910:	2301      	movs	r3, #1
 8007912:	9901      	ldr	r1, [sp, #4]
 8007914:	9800      	ldr	r0, [sp, #0]
 8007916:	9f08      	ldr	r7, [sp, #32]
 8007918:	3219      	adds	r2, #25
 800791a:	47b8      	blx	r7
 800791c:	3001      	adds	r0, #1
 800791e:	d1f0      	bne.n	8007902 <_printf_common+0x8a>
 8007920:	2001      	movs	r0, #1
 8007922:	4240      	negs	r0, r0
 8007924:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007926:	2030      	movs	r0, #48	; 0x30
 8007928:	18e1      	adds	r1, r4, r3
 800792a:	3143      	adds	r1, #67	; 0x43
 800792c:	7008      	strb	r0, [r1, #0]
 800792e:	0021      	movs	r1, r4
 8007930:	1c5a      	adds	r2, r3, #1
 8007932:	3145      	adds	r1, #69	; 0x45
 8007934:	7809      	ldrb	r1, [r1, #0]
 8007936:	18a2      	adds	r2, r4, r2
 8007938:	3243      	adds	r2, #67	; 0x43
 800793a:	3302      	adds	r3, #2
 800793c:	7011      	strb	r1, [r2, #0]
 800793e:	e7c1      	b.n	80078c4 <_printf_common+0x4c>
 8007940:	0022      	movs	r2, r4
 8007942:	2301      	movs	r3, #1
 8007944:	9901      	ldr	r1, [sp, #4]
 8007946:	9800      	ldr	r0, [sp, #0]
 8007948:	9f08      	ldr	r7, [sp, #32]
 800794a:	321a      	adds	r2, #26
 800794c:	47b8      	blx	r7
 800794e:	3001      	adds	r0, #1
 8007950:	d0e6      	beq.n	8007920 <_printf_common+0xa8>
 8007952:	3601      	adds	r6, #1
 8007954:	e7d1      	b.n	80078fa <_printf_common+0x82>
	...

08007958 <_printf_i>:
 8007958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800795a:	b08b      	sub	sp, #44	; 0x2c
 800795c:	9206      	str	r2, [sp, #24]
 800795e:	000a      	movs	r2, r1
 8007960:	3243      	adds	r2, #67	; 0x43
 8007962:	9307      	str	r3, [sp, #28]
 8007964:	9005      	str	r0, [sp, #20]
 8007966:	9204      	str	r2, [sp, #16]
 8007968:	7e0a      	ldrb	r2, [r1, #24]
 800796a:	000c      	movs	r4, r1
 800796c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800796e:	2a78      	cmp	r2, #120	; 0x78
 8007970:	d809      	bhi.n	8007986 <_printf_i+0x2e>
 8007972:	2a62      	cmp	r2, #98	; 0x62
 8007974:	d80b      	bhi.n	800798e <_printf_i+0x36>
 8007976:	2a00      	cmp	r2, #0
 8007978:	d100      	bne.n	800797c <_printf_i+0x24>
 800797a:	e0be      	b.n	8007afa <_printf_i+0x1a2>
 800797c:	497c      	ldr	r1, [pc, #496]	; (8007b70 <_printf_i+0x218>)
 800797e:	9103      	str	r1, [sp, #12]
 8007980:	2a58      	cmp	r2, #88	; 0x58
 8007982:	d100      	bne.n	8007986 <_printf_i+0x2e>
 8007984:	e093      	b.n	8007aae <_printf_i+0x156>
 8007986:	0026      	movs	r6, r4
 8007988:	3642      	adds	r6, #66	; 0x42
 800798a:	7032      	strb	r2, [r6, #0]
 800798c:	e022      	b.n	80079d4 <_printf_i+0x7c>
 800798e:	0010      	movs	r0, r2
 8007990:	3863      	subs	r0, #99	; 0x63
 8007992:	2815      	cmp	r0, #21
 8007994:	d8f7      	bhi.n	8007986 <_printf_i+0x2e>
 8007996:	f7f8 fbc1 	bl	800011c <__gnu_thumb1_case_shi>
 800799a:	0016      	.short	0x0016
 800799c:	fff6001f 	.word	0xfff6001f
 80079a0:	fff6fff6 	.word	0xfff6fff6
 80079a4:	001ffff6 	.word	0x001ffff6
 80079a8:	fff6fff6 	.word	0xfff6fff6
 80079ac:	fff6fff6 	.word	0xfff6fff6
 80079b0:	003600a3 	.word	0x003600a3
 80079b4:	fff60083 	.word	0xfff60083
 80079b8:	00b4fff6 	.word	0x00b4fff6
 80079bc:	0036fff6 	.word	0x0036fff6
 80079c0:	fff6fff6 	.word	0xfff6fff6
 80079c4:	0087      	.short	0x0087
 80079c6:	0026      	movs	r6, r4
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	3642      	adds	r6, #66	; 0x42
 80079cc:	1d11      	adds	r1, r2, #4
 80079ce:	6019      	str	r1, [r3, #0]
 80079d0:	6813      	ldr	r3, [r2, #0]
 80079d2:	7033      	strb	r3, [r6, #0]
 80079d4:	2301      	movs	r3, #1
 80079d6:	e0a2      	b.n	8007b1e <_printf_i+0x1c6>
 80079d8:	6818      	ldr	r0, [r3, #0]
 80079da:	6809      	ldr	r1, [r1, #0]
 80079dc:	1d02      	adds	r2, r0, #4
 80079de:	060d      	lsls	r5, r1, #24
 80079e0:	d50b      	bpl.n	80079fa <_printf_i+0xa2>
 80079e2:	6805      	ldr	r5, [r0, #0]
 80079e4:	601a      	str	r2, [r3, #0]
 80079e6:	2d00      	cmp	r5, #0
 80079e8:	da03      	bge.n	80079f2 <_printf_i+0x9a>
 80079ea:	232d      	movs	r3, #45	; 0x2d
 80079ec:	9a04      	ldr	r2, [sp, #16]
 80079ee:	426d      	negs	r5, r5
 80079f0:	7013      	strb	r3, [r2, #0]
 80079f2:	4b5f      	ldr	r3, [pc, #380]	; (8007b70 <_printf_i+0x218>)
 80079f4:	270a      	movs	r7, #10
 80079f6:	9303      	str	r3, [sp, #12]
 80079f8:	e01b      	b.n	8007a32 <_printf_i+0xda>
 80079fa:	6805      	ldr	r5, [r0, #0]
 80079fc:	601a      	str	r2, [r3, #0]
 80079fe:	0649      	lsls	r1, r1, #25
 8007a00:	d5f1      	bpl.n	80079e6 <_printf_i+0x8e>
 8007a02:	b22d      	sxth	r5, r5
 8007a04:	e7ef      	b.n	80079e6 <_printf_i+0x8e>
 8007a06:	680d      	ldr	r5, [r1, #0]
 8007a08:	6819      	ldr	r1, [r3, #0]
 8007a0a:	1d08      	adds	r0, r1, #4
 8007a0c:	6018      	str	r0, [r3, #0]
 8007a0e:	062e      	lsls	r6, r5, #24
 8007a10:	d501      	bpl.n	8007a16 <_printf_i+0xbe>
 8007a12:	680d      	ldr	r5, [r1, #0]
 8007a14:	e003      	b.n	8007a1e <_printf_i+0xc6>
 8007a16:	066d      	lsls	r5, r5, #25
 8007a18:	d5fb      	bpl.n	8007a12 <_printf_i+0xba>
 8007a1a:	680d      	ldr	r5, [r1, #0]
 8007a1c:	b2ad      	uxth	r5, r5
 8007a1e:	4b54      	ldr	r3, [pc, #336]	; (8007b70 <_printf_i+0x218>)
 8007a20:	2708      	movs	r7, #8
 8007a22:	9303      	str	r3, [sp, #12]
 8007a24:	2a6f      	cmp	r2, #111	; 0x6f
 8007a26:	d000      	beq.n	8007a2a <_printf_i+0xd2>
 8007a28:	3702      	adds	r7, #2
 8007a2a:	0023      	movs	r3, r4
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	3343      	adds	r3, #67	; 0x43
 8007a30:	701a      	strb	r2, [r3, #0]
 8007a32:	6863      	ldr	r3, [r4, #4]
 8007a34:	60a3      	str	r3, [r4, #8]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	db03      	blt.n	8007a42 <_printf_i+0xea>
 8007a3a:	2104      	movs	r1, #4
 8007a3c:	6822      	ldr	r2, [r4, #0]
 8007a3e:	438a      	bics	r2, r1
 8007a40:	6022      	str	r2, [r4, #0]
 8007a42:	2d00      	cmp	r5, #0
 8007a44:	d102      	bne.n	8007a4c <_printf_i+0xf4>
 8007a46:	9e04      	ldr	r6, [sp, #16]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00c      	beq.n	8007a66 <_printf_i+0x10e>
 8007a4c:	9e04      	ldr	r6, [sp, #16]
 8007a4e:	0028      	movs	r0, r5
 8007a50:	0039      	movs	r1, r7
 8007a52:	f7f8 fbf3 	bl	800023c <__aeabi_uidivmod>
 8007a56:	9b03      	ldr	r3, [sp, #12]
 8007a58:	3e01      	subs	r6, #1
 8007a5a:	5c5b      	ldrb	r3, [r3, r1]
 8007a5c:	7033      	strb	r3, [r6, #0]
 8007a5e:	002b      	movs	r3, r5
 8007a60:	0005      	movs	r5, r0
 8007a62:	429f      	cmp	r7, r3
 8007a64:	d9f3      	bls.n	8007a4e <_printf_i+0xf6>
 8007a66:	2f08      	cmp	r7, #8
 8007a68:	d109      	bne.n	8007a7e <_printf_i+0x126>
 8007a6a:	6823      	ldr	r3, [r4, #0]
 8007a6c:	07db      	lsls	r3, r3, #31
 8007a6e:	d506      	bpl.n	8007a7e <_printf_i+0x126>
 8007a70:	6862      	ldr	r2, [r4, #4]
 8007a72:	6923      	ldr	r3, [r4, #16]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	dc02      	bgt.n	8007a7e <_printf_i+0x126>
 8007a78:	2330      	movs	r3, #48	; 0x30
 8007a7a:	3e01      	subs	r6, #1
 8007a7c:	7033      	strb	r3, [r6, #0]
 8007a7e:	9b04      	ldr	r3, [sp, #16]
 8007a80:	1b9b      	subs	r3, r3, r6
 8007a82:	6123      	str	r3, [r4, #16]
 8007a84:	9b07      	ldr	r3, [sp, #28]
 8007a86:	0021      	movs	r1, r4
 8007a88:	9300      	str	r3, [sp, #0]
 8007a8a:	9805      	ldr	r0, [sp, #20]
 8007a8c:	9b06      	ldr	r3, [sp, #24]
 8007a8e:	aa09      	add	r2, sp, #36	; 0x24
 8007a90:	f7ff fef2 	bl	8007878 <_printf_common>
 8007a94:	3001      	adds	r0, #1
 8007a96:	d147      	bne.n	8007b28 <_printf_i+0x1d0>
 8007a98:	2001      	movs	r0, #1
 8007a9a:	4240      	negs	r0, r0
 8007a9c:	b00b      	add	sp, #44	; 0x2c
 8007a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007aa0:	2220      	movs	r2, #32
 8007aa2:	6809      	ldr	r1, [r1, #0]
 8007aa4:	430a      	orrs	r2, r1
 8007aa6:	6022      	str	r2, [r4, #0]
 8007aa8:	2278      	movs	r2, #120	; 0x78
 8007aaa:	4932      	ldr	r1, [pc, #200]	; (8007b74 <_printf_i+0x21c>)
 8007aac:	9103      	str	r1, [sp, #12]
 8007aae:	0021      	movs	r1, r4
 8007ab0:	3145      	adds	r1, #69	; 0x45
 8007ab2:	700a      	strb	r2, [r1, #0]
 8007ab4:	6819      	ldr	r1, [r3, #0]
 8007ab6:	6822      	ldr	r2, [r4, #0]
 8007ab8:	c920      	ldmia	r1!, {r5}
 8007aba:	0610      	lsls	r0, r2, #24
 8007abc:	d402      	bmi.n	8007ac4 <_printf_i+0x16c>
 8007abe:	0650      	lsls	r0, r2, #25
 8007ac0:	d500      	bpl.n	8007ac4 <_printf_i+0x16c>
 8007ac2:	b2ad      	uxth	r5, r5
 8007ac4:	6019      	str	r1, [r3, #0]
 8007ac6:	07d3      	lsls	r3, r2, #31
 8007ac8:	d502      	bpl.n	8007ad0 <_printf_i+0x178>
 8007aca:	2320      	movs	r3, #32
 8007acc:	4313      	orrs	r3, r2
 8007ace:	6023      	str	r3, [r4, #0]
 8007ad0:	2710      	movs	r7, #16
 8007ad2:	2d00      	cmp	r5, #0
 8007ad4:	d1a9      	bne.n	8007a2a <_printf_i+0xd2>
 8007ad6:	2220      	movs	r2, #32
 8007ad8:	6823      	ldr	r3, [r4, #0]
 8007ada:	4393      	bics	r3, r2
 8007adc:	6023      	str	r3, [r4, #0]
 8007ade:	e7a4      	b.n	8007a2a <_printf_i+0xd2>
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	680d      	ldr	r5, [r1, #0]
 8007ae4:	1d10      	adds	r0, r2, #4
 8007ae6:	6949      	ldr	r1, [r1, #20]
 8007ae8:	6018      	str	r0, [r3, #0]
 8007aea:	6813      	ldr	r3, [r2, #0]
 8007aec:	062e      	lsls	r6, r5, #24
 8007aee:	d501      	bpl.n	8007af4 <_printf_i+0x19c>
 8007af0:	6019      	str	r1, [r3, #0]
 8007af2:	e002      	b.n	8007afa <_printf_i+0x1a2>
 8007af4:	066d      	lsls	r5, r5, #25
 8007af6:	d5fb      	bpl.n	8007af0 <_printf_i+0x198>
 8007af8:	8019      	strh	r1, [r3, #0]
 8007afa:	2300      	movs	r3, #0
 8007afc:	9e04      	ldr	r6, [sp, #16]
 8007afe:	6123      	str	r3, [r4, #16]
 8007b00:	e7c0      	b.n	8007a84 <_printf_i+0x12c>
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	1d11      	adds	r1, r2, #4
 8007b06:	6019      	str	r1, [r3, #0]
 8007b08:	6816      	ldr	r6, [r2, #0]
 8007b0a:	2100      	movs	r1, #0
 8007b0c:	0030      	movs	r0, r6
 8007b0e:	6862      	ldr	r2, [r4, #4]
 8007b10:	f000 f9e9 	bl	8007ee6 <memchr>
 8007b14:	2800      	cmp	r0, #0
 8007b16:	d001      	beq.n	8007b1c <_printf_i+0x1c4>
 8007b18:	1b80      	subs	r0, r0, r6
 8007b1a:	6060      	str	r0, [r4, #4]
 8007b1c:	6863      	ldr	r3, [r4, #4]
 8007b1e:	6123      	str	r3, [r4, #16]
 8007b20:	2300      	movs	r3, #0
 8007b22:	9a04      	ldr	r2, [sp, #16]
 8007b24:	7013      	strb	r3, [r2, #0]
 8007b26:	e7ad      	b.n	8007a84 <_printf_i+0x12c>
 8007b28:	0032      	movs	r2, r6
 8007b2a:	6923      	ldr	r3, [r4, #16]
 8007b2c:	9906      	ldr	r1, [sp, #24]
 8007b2e:	9805      	ldr	r0, [sp, #20]
 8007b30:	9d07      	ldr	r5, [sp, #28]
 8007b32:	47a8      	blx	r5
 8007b34:	3001      	adds	r0, #1
 8007b36:	d0af      	beq.n	8007a98 <_printf_i+0x140>
 8007b38:	6823      	ldr	r3, [r4, #0]
 8007b3a:	079b      	lsls	r3, r3, #30
 8007b3c:	d415      	bmi.n	8007b6a <_printf_i+0x212>
 8007b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b40:	68e0      	ldr	r0, [r4, #12]
 8007b42:	4298      	cmp	r0, r3
 8007b44:	daaa      	bge.n	8007a9c <_printf_i+0x144>
 8007b46:	0018      	movs	r0, r3
 8007b48:	e7a8      	b.n	8007a9c <_printf_i+0x144>
 8007b4a:	0022      	movs	r2, r4
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	9906      	ldr	r1, [sp, #24]
 8007b50:	9805      	ldr	r0, [sp, #20]
 8007b52:	9e07      	ldr	r6, [sp, #28]
 8007b54:	3219      	adds	r2, #25
 8007b56:	47b0      	blx	r6
 8007b58:	3001      	adds	r0, #1
 8007b5a:	d09d      	beq.n	8007a98 <_printf_i+0x140>
 8007b5c:	3501      	adds	r5, #1
 8007b5e:	68e3      	ldr	r3, [r4, #12]
 8007b60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b62:	1a9b      	subs	r3, r3, r2
 8007b64:	42ab      	cmp	r3, r5
 8007b66:	dcf0      	bgt.n	8007b4a <_printf_i+0x1f2>
 8007b68:	e7e9      	b.n	8007b3e <_printf_i+0x1e6>
 8007b6a:	2500      	movs	r5, #0
 8007b6c:	e7f7      	b.n	8007b5e <_printf_i+0x206>
 8007b6e:	46c0      	nop			; (mov r8, r8)
 8007b70:	0800aa06 	.word	0x0800aa06
 8007b74:	0800aa17 	.word	0x0800aa17

08007b78 <std>:
 8007b78:	2300      	movs	r3, #0
 8007b7a:	b510      	push	{r4, lr}
 8007b7c:	0004      	movs	r4, r0
 8007b7e:	6003      	str	r3, [r0, #0]
 8007b80:	6043      	str	r3, [r0, #4]
 8007b82:	6083      	str	r3, [r0, #8]
 8007b84:	8181      	strh	r1, [r0, #12]
 8007b86:	6643      	str	r3, [r0, #100]	; 0x64
 8007b88:	81c2      	strh	r2, [r0, #14]
 8007b8a:	6103      	str	r3, [r0, #16]
 8007b8c:	6143      	str	r3, [r0, #20]
 8007b8e:	6183      	str	r3, [r0, #24]
 8007b90:	0019      	movs	r1, r3
 8007b92:	2208      	movs	r2, #8
 8007b94:	305c      	adds	r0, #92	; 0x5c
 8007b96:	f000 f91f 	bl	8007dd8 <memset>
 8007b9a:	4b0b      	ldr	r3, [pc, #44]	; (8007bc8 <std+0x50>)
 8007b9c:	6224      	str	r4, [r4, #32]
 8007b9e:	6263      	str	r3, [r4, #36]	; 0x24
 8007ba0:	4b0a      	ldr	r3, [pc, #40]	; (8007bcc <std+0x54>)
 8007ba2:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ba4:	4b0a      	ldr	r3, [pc, #40]	; (8007bd0 <std+0x58>)
 8007ba6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ba8:	4b0a      	ldr	r3, [pc, #40]	; (8007bd4 <std+0x5c>)
 8007baa:	6323      	str	r3, [r4, #48]	; 0x30
 8007bac:	4b0a      	ldr	r3, [pc, #40]	; (8007bd8 <std+0x60>)
 8007bae:	429c      	cmp	r4, r3
 8007bb0:	d005      	beq.n	8007bbe <std+0x46>
 8007bb2:	4b0a      	ldr	r3, [pc, #40]	; (8007bdc <std+0x64>)
 8007bb4:	429c      	cmp	r4, r3
 8007bb6:	d002      	beq.n	8007bbe <std+0x46>
 8007bb8:	4b09      	ldr	r3, [pc, #36]	; (8007be0 <std+0x68>)
 8007bba:	429c      	cmp	r4, r3
 8007bbc:	d103      	bne.n	8007bc6 <std+0x4e>
 8007bbe:	0020      	movs	r0, r4
 8007bc0:	3058      	adds	r0, #88	; 0x58
 8007bc2:	f000 f98d 	bl	8007ee0 <__retarget_lock_init_recursive>
 8007bc6:	bd10      	pop	{r4, pc}
 8007bc8:	08007d41 	.word	0x08007d41
 8007bcc:	08007d69 	.word	0x08007d69
 8007bd0:	08007da1 	.word	0x08007da1
 8007bd4:	08007dcd 	.word	0x08007dcd
 8007bd8:	200003d4 	.word	0x200003d4
 8007bdc:	2000043c 	.word	0x2000043c
 8007be0:	200004a4 	.word	0x200004a4

08007be4 <stdio_exit_handler>:
 8007be4:	b510      	push	{r4, lr}
 8007be6:	4a03      	ldr	r2, [pc, #12]	; (8007bf4 <stdio_exit_handler+0x10>)
 8007be8:	4903      	ldr	r1, [pc, #12]	; (8007bf8 <stdio_exit_handler+0x14>)
 8007bea:	4804      	ldr	r0, [pc, #16]	; (8007bfc <stdio_exit_handler+0x18>)
 8007bec:	f000 f86c 	bl	8007cc8 <_fwalk_sglue>
 8007bf0:	bd10      	pop	{r4, pc}
 8007bf2:	46c0      	nop			; (mov r8, r8)
 8007bf4:	2000009c 	.word	0x2000009c
 8007bf8:	08009955 	.word	0x08009955
 8007bfc:	200000a8 	.word	0x200000a8

08007c00 <cleanup_stdio>:
 8007c00:	6841      	ldr	r1, [r0, #4]
 8007c02:	4b0b      	ldr	r3, [pc, #44]	; (8007c30 <cleanup_stdio+0x30>)
 8007c04:	b510      	push	{r4, lr}
 8007c06:	0004      	movs	r4, r0
 8007c08:	4299      	cmp	r1, r3
 8007c0a:	d001      	beq.n	8007c10 <cleanup_stdio+0x10>
 8007c0c:	f001 fea2 	bl	8009954 <_fflush_r>
 8007c10:	68a1      	ldr	r1, [r4, #8]
 8007c12:	4b08      	ldr	r3, [pc, #32]	; (8007c34 <cleanup_stdio+0x34>)
 8007c14:	4299      	cmp	r1, r3
 8007c16:	d002      	beq.n	8007c1e <cleanup_stdio+0x1e>
 8007c18:	0020      	movs	r0, r4
 8007c1a:	f001 fe9b 	bl	8009954 <_fflush_r>
 8007c1e:	68e1      	ldr	r1, [r4, #12]
 8007c20:	4b05      	ldr	r3, [pc, #20]	; (8007c38 <cleanup_stdio+0x38>)
 8007c22:	4299      	cmp	r1, r3
 8007c24:	d002      	beq.n	8007c2c <cleanup_stdio+0x2c>
 8007c26:	0020      	movs	r0, r4
 8007c28:	f001 fe94 	bl	8009954 <_fflush_r>
 8007c2c:	bd10      	pop	{r4, pc}
 8007c2e:	46c0      	nop			; (mov r8, r8)
 8007c30:	200003d4 	.word	0x200003d4
 8007c34:	2000043c 	.word	0x2000043c
 8007c38:	200004a4 	.word	0x200004a4

08007c3c <global_stdio_init.part.0>:
 8007c3c:	b510      	push	{r4, lr}
 8007c3e:	4b09      	ldr	r3, [pc, #36]	; (8007c64 <global_stdio_init.part.0+0x28>)
 8007c40:	4a09      	ldr	r2, [pc, #36]	; (8007c68 <global_stdio_init.part.0+0x2c>)
 8007c42:	2104      	movs	r1, #4
 8007c44:	601a      	str	r2, [r3, #0]
 8007c46:	4809      	ldr	r0, [pc, #36]	; (8007c6c <global_stdio_init.part.0+0x30>)
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f7ff ff95 	bl	8007b78 <std>
 8007c4e:	2201      	movs	r2, #1
 8007c50:	2109      	movs	r1, #9
 8007c52:	4807      	ldr	r0, [pc, #28]	; (8007c70 <global_stdio_init.part.0+0x34>)
 8007c54:	f7ff ff90 	bl	8007b78 <std>
 8007c58:	2202      	movs	r2, #2
 8007c5a:	2112      	movs	r1, #18
 8007c5c:	4805      	ldr	r0, [pc, #20]	; (8007c74 <global_stdio_init.part.0+0x38>)
 8007c5e:	f7ff ff8b 	bl	8007b78 <std>
 8007c62:	bd10      	pop	{r4, pc}
 8007c64:	2000050c 	.word	0x2000050c
 8007c68:	08007be5 	.word	0x08007be5
 8007c6c:	200003d4 	.word	0x200003d4
 8007c70:	2000043c 	.word	0x2000043c
 8007c74:	200004a4 	.word	0x200004a4

08007c78 <__sfp_lock_acquire>:
 8007c78:	b510      	push	{r4, lr}
 8007c7a:	4802      	ldr	r0, [pc, #8]	; (8007c84 <__sfp_lock_acquire+0xc>)
 8007c7c:	f000 f931 	bl	8007ee2 <__retarget_lock_acquire_recursive>
 8007c80:	bd10      	pop	{r4, pc}
 8007c82:	46c0      	nop			; (mov r8, r8)
 8007c84:	20000515 	.word	0x20000515

08007c88 <__sfp_lock_release>:
 8007c88:	b510      	push	{r4, lr}
 8007c8a:	4802      	ldr	r0, [pc, #8]	; (8007c94 <__sfp_lock_release+0xc>)
 8007c8c:	f000 f92a 	bl	8007ee4 <__retarget_lock_release_recursive>
 8007c90:	bd10      	pop	{r4, pc}
 8007c92:	46c0      	nop			; (mov r8, r8)
 8007c94:	20000515 	.word	0x20000515

08007c98 <__sinit>:
 8007c98:	b510      	push	{r4, lr}
 8007c9a:	0004      	movs	r4, r0
 8007c9c:	f7ff ffec 	bl	8007c78 <__sfp_lock_acquire>
 8007ca0:	6a23      	ldr	r3, [r4, #32]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d002      	beq.n	8007cac <__sinit+0x14>
 8007ca6:	f7ff ffef 	bl	8007c88 <__sfp_lock_release>
 8007caa:	bd10      	pop	{r4, pc}
 8007cac:	4b04      	ldr	r3, [pc, #16]	; (8007cc0 <__sinit+0x28>)
 8007cae:	6223      	str	r3, [r4, #32]
 8007cb0:	4b04      	ldr	r3, [pc, #16]	; (8007cc4 <__sinit+0x2c>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d1f6      	bne.n	8007ca6 <__sinit+0xe>
 8007cb8:	f7ff ffc0 	bl	8007c3c <global_stdio_init.part.0>
 8007cbc:	e7f3      	b.n	8007ca6 <__sinit+0xe>
 8007cbe:	46c0      	nop			; (mov r8, r8)
 8007cc0:	08007c01 	.word	0x08007c01
 8007cc4:	2000050c 	.word	0x2000050c

08007cc8 <_fwalk_sglue>:
 8007cc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cca:	0014      	movs	r4, r2
 8007ccc:	2600      	movs	r6, #0
 8007cce:	9000      	str	r0, [sp, #0]
 8007cd0:	9101      	str	r1, [sp, #4]
 8007cd2:	68a5      	ldr	r5, [r4, #8]
 8007cd4:	6867      	ldr	r7, [r4, #4]
 8007cd6:	3f01      	subs	r7, #1
 8007cd8:	d504      	bpl.n	8007ce4 <_fwalk_sglue+0x1c>
 8007cda:	6824      	ldr	r4, [r4, #0]
 8007cdc:	2c00      	cmp	r4, #0
 8007cde:	d1f8      	bne.n	8007cd2 <_fwalk_sglue+0xa>
 8007ce0:	0030      	movs	r0, r6
 8007ce2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007ce4:	89ab      	ldrh	r3, [r5, #12]
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d908      	bls.n	8007cfc <_fwalk_sglue+0x34>
 8007cea:	220e      	movs	r2, #14
 8007cec:	5eab      	ldrsh	r3, [r5, r2]
 8007cee:	3301      	adds	r3, #1
 8007cf0:	d004      	beq.n	8007cfc <_fwalk_sglue+0x34>
 8007cf2:	0029      	movs	r1, r5
 8007cf4:	9800      	ldr	r0, [sp, #0]
 8007cf6:	9b01      	ldr	r3, [sp, #4]
 8007cf8:	4798      	blx	r3
 8007cfa:	4306      	orrs	r6, r0
 8007cfc:	3568      	adds	r5, #104	; 0x68
 8007cfe:	e7ea      	b.n	8007cd6 <_fwalk_sglue+0xe>

08007d00 <siprintf>:
 8007d00:	b40e      	push	{r1, r2, r3}
 8007d02:	b500      	push	{lr}
 8007d04:	490b      	ldr	r1, [pc, #44]	; (8007d34 <siprintf+0x34>)
 8007d06:	b09c      	sub	sp, #112	; 0x70
 8007d08:	ab1d      	add	r3, sp, #116	; 0x74
 8007d0a:	9002      	str	r0, [sp, #8]
 8007d0c:	9006      	str	r0, [sp, #24]
 8007d0e:	9107      	str	r1, [sp, #28]
 8007d10:	9104      	str	r1, [sp, #16]
 8007d12:	4809      	ldr	r0, [pc, #36]	; (8007d38 <siprintf+0x38>)
 8007d14:	4909      	ldr	r1, [pc, #36]	; (8007d3c <siprintf+0x3c>)
 8007d16:	cb04      	ldmia	r3!, {r2}
 8007d18:	9105      	str	r1, [sp, #20]
 8007d1a:	6800      	ldr	r0, [r0, #0]
 8007d1c:	a902      	add	r1, sp, #8
 8007d1e:	9301      	str	r3, [sp, #4]
 8007d20:	f001 fc8e 	bl	8009640 <_svfiprintf_r>
 8007d24:	2200      	movs	r2, #0
 8007d26:	9b02      	ldr	r3, [sp, #8]
 8007d28:	701a      	strb	r2, [r3, #0]
 8007d2a:	b01c      	add	sp, #112	; 0x70
 8007d2c:	bc08      	pop	{r3}
 8007d2e:	b003      	add	sp, #12
 8007d30:	4718      	bx	r3
 8007d32:	46c0      	nop			; (mov r8, r8)
 8007d34:	7fffffff 	.word	0x7fffffff
 8007d38:	200000f4 	.word	0x200000f4
 8007d3c:	ffff0208 	.word	0xffff0208

08007d40 <__sread>:
 8007d40:	b570      	push	{r4, r5, r6, lr}
 8007d42:	000c      	movs	r4, r1
 8007d44:	250e      	movs	r5, #14
 8007d46:	5f49      	ldrsh	r1, [r1, r5]
 8007d48:	f000 f878 	bl	8007e3c <_read_r>
 8007d4c:	2800      	cmp	r0, #0
 8007d4e:	db03      	blt.n	8007d58 <__sread+0x18>
 8007d50:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007d52:	181b      	adds	r3, r3, r0
 8007d54:	6563      	str	r3, [r4, #84]	; 0x54
 8007d56:	bd70      	pop	{r4, r5, r6, pc}
 8007d58:	89a3      	ldrh	r3, [r4, #12]
 8007d5a:	4a02      	ldr	r2, [pc, #8]	; (8007d64 <__sread+0x24>)
 8007d5c:	4013      	ands	r3, r2
 8007d5e:	81a3      	strh	r3, [r4, #12]
 8007d60:	e7f9      	b.n	8007d56 <__sread+0x16>
 8007d62:	46c0      	nop			; (mov r8, r8)
 8007d64:	ffffefff 	.word	0xffffefff

08007d68 <__swrite>:
 8007d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d6a:	001f      	movs	r7, r3
 8007d6c:	898b      	ldrh	r3, [r1, #12]
 8007d6e:	0005      	movs	r5, r0
 8007d70:	000c      	movs	r4, r1
 8007d72:	0016      	movs	r6, r2
 8007d74:	05db      	lsls	r3, r3, #23
 8007d76:	d505      	bpl.n	8007d84 <__swrite+0x1c>
 8007d78:	230e      	movs	r3, #14
 8007d7a:	5ec9      	ldrsh	r1, [r1, r3]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	2302      	movs	r3, #2
 8007d80:	f000 f848 	bl	8007e14 <_lseek_r>
 8007d84:	89a3      	ldrh	r3, [r4, #12]
 8007d86:	4a05      	ldr	r2, [pc, #20]	; (8007d9c <__swrite+0x34>)
 8007d88:	0028      	movs	r0, r5
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	81a3      	strh	r3, [r4, #12]
 8007d8e:	0032      	movs	r2, r6
 8007d90:	230e      	movs	r3, #14
 8007d92:	5ee1      	ldrsh	r1, [r4, r3]
 8007d94:	003b      	movs	r3, r7
 8007d96:	f000 f865 	bl	8007e64 <_write_r>
 8007d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d9c:	ffffefff 	.word	0xffffefff

08007da0 <__sseek>:
 8007da0:	b570      	push	{r4, r5, r6, lr}
 8007da2:	000c      	movs	r4, r1
 8007da4:	250e      	movs	r5, #14
 8007da6:	5f49      	ldrsh	r1, [r1, r5]
 8007da8:	f000 f834 	bl	8007e14 <_lseek_r>
 8007dac:	89a3      	ldrh	r3, [r4, #12]
 8007dae:	1c42      	adds	r2, r0, #1
 8007db0:	d103      	bne.n	8007dba <__sseek+0x1a>
 8007db2:	4a05      	ldr	r2, [pc, #20]	; (8007dc8 <__sseek+0x28>)
 8007db4:	4013      	ands	r3, r2
 8007db6:	81a3      	strh	r3, [r4, #12]
 8007db8:	bd70      	pop	{r4, r5, r6, pc}
 8007dba:	2280      	movs	r2, #128	; 0x80
 8007dbc:	0152      	lsls	r2, r2, #5
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	81a3      	strh	r3, [r4, #12]
 8007dc2:	6560      	str	r0, [r4, #84]	; 0x54
 8007dc4:	e7f8      	b.n	8007db8 <__sseek+0x18>
 8007dc6:	46c0      	nop			; (mov r8, r8)
 8007dc8:	ffffefff 	.word	0xffffefff

08007dcc <__sclose>:
 8007dcc:	b510      	push	{r4, lr}
 8007dce:	230e      	movs	r3, #14
 8007dd0:	5ec9      	ldrsh	r1, [r1, r3]
 8007dd2:	f000 f80d 	bl	8007df0 <_close_r>
 8007dd6:	bd10      	pop	{r4, pc}

08007dd8 <memset>:
 8007dd8:	0003      	movs	r3, r0
 8007dda:	1882      	adds	r2, r0, r2
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d100      	bne.n	8007de2 <memset+0xa>
 8007de0:	4770      	bx	lr
 8007de2:	7019      	strb	r1, [r3, #0]
 8007de4:	3301      	adds	r3, #1
 8007de6:	e7f9      	b.n	8007ddc <memset+0x4>

08007de8 <_localeconv_r>:
 8007de8:	4800      	ldr	r0, [pc, #0]	; (8007dec <_localeconv_r+0x4>)
 8007dea:	4770      	bx	lr
 8007dec:	200001e8 	.word	0x200001e8

08007df0 <_close_r>:
 8007df0:	2300      	movs	r3, #0
 8007df2:	b570      	push	{r4, r5, r6, lr}
 8007df4:	4d06      	ldr	r5, [pc, #24]	; (8007e10 <_close_r+0x20>)
 8007df6:	0004      	movs	r4, r0
 8007df8:	0008      	movs	r0, r1
 8007dfa:	602b      	str	r3, [r5, #0]
 8007dfc:	f7fb fc79 	bl	80036f2 <_close>
 8007e00:	1c43      	adds	r3, r0, #1
 8007e02:	d103      	bne.n	8007e0c <_close_r+0x1c>
 8007e04:	682b      	ldr	r3, [r5, #0]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d000      	beq.n	8007e0c <_close_r+0x1c>
 8007e0a:	6023      	str	r3, [r4, #0]
 8007e0c:	bd70      	pop	{r4, r5, r6, pc}
 8007e0e:	46c0      	nop			; (mov r8, r8)
 8007e10:	20000510 	.word	0x20000510

08007e14 <_lseek_r>:
 8007e14:	b570      	push	{r4, r5, r6, lr}
 8007e16:	0004      	movs	r4, r0
 8007e18:	0008      	movs	r0, r1
 8007e1a:	0011      	movs	r1, r2
 8007e1c:	001a      	movs	r2, r3
 8007e1e:	2300      	movs	r3, #0
 8007e20:	4d05      	ldr	r5, [pc, #20]	; (8007e38 <_lseek_r+0x24>)
 8007e22:	602b      	str	r3, [r5, #0]
 8007e24:	f7fb fc86 	bl	8003734 <_lseek>
 8007e28:	1c43      	adds	r3, r0, #1
 8007e2a:	d103      	bne.n	8007e34 <_lseek_r+0x20>
 8007e2c:	682b      	ldr	r3, [r5, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d000      	beq.n	8007e34 <_lseek_r+0x20>
 8007e32:	6023      	str	r3, [r4, #0]
 8007e34:	bd70      	pop	{r4, r5, r6, pc}
 8007e36:	46c0      	nop			; (mov r8, r8)
 8007e38:	20000510 	.word	0x20000510

08007e3c <_read_r>:
 8007e3c:	b570      	push	{r4, r5, r6, lr}
 8007e3e:	0004      	movs	r4, r0
 8007e40:	0008      	movs	r0, r1
 8007e42:	0011      	movs	r1, r2
 8007e44:	001a      	movs	r2, r3
 8007e46:	2300      	movs	r3, #0
 8007e48:	4d05      	ldr	r5, [pc, #20]	; (8007e60 <_read_r+0x24>)
 8007e4a:	602b      	str	r3, [r5, #0]
 8007e4c:	f7fb fc18 	bl	8003680 <_read>
 8007e50:	1c43      	adds	r3, r0, #1
 8007e52:	d103      	bne.n	8007e5c <_read_r+0x20>
 8007e54:	682b      	ldr	r3, [r5, #0]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d000      	beq.n	8007e5c <_read_r+0x20>
 8007e5a:	6023      	str	r3, [r4, #0]
 8007e5c:	bd70      	pop	{r4, r5, r6, pc}
 8007e5e:	46c0      	nop			; (mov r8, r8)
 8007e60:	20000510 	.word	0x20000510

08007e64 <_write_r>:
 8007e64:	b570      	push	{r4, r5, r6, lr}
 8007e66:	0004      	movs	r4, r0
 8007e68:	0008      	movs	r0, r1
 8007e6a:	0011      	movs	r1, r2
 8007e6c:	001a      	movs	r2, r3
 8007e6e:	2300      	movs	r3, #0
 8007e70:	4d05      	ldr	r5, [pc, #20]	; (8007e88 <_write_r+0x24>)
 8007e72:	602b      	str	r3, [r5, #0]
 8007e74:	f7fb fc21 	bl	80036ba <_write>
 8007e78:	1c43      	adds	r3, r0, #1
 8007e7a:	d103      	bne.n	8007e84 <_write_r+0x20>
 8007e7c:	682b      	ldr	r3, [r5, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d000      	beq.n	8007e84 <_write_r+0x20>
 8007e82:	6023      	str	r3, [r4, #0]
 8007e84:	bd70      	pop	{r4, r5, r6, pc}
 8007e86:	46c0      	nop			; (mov r8, r8)
 8007e88:	20000510 	.word	0x20000510

08007e8c <__errno>:
 8007e8c:	4b01      	ldr	r3, [pc, #4]	; (8007e94 <__errno+0x8>)
 8007e8e:	6818      	ldr	r0, [r3, #0]
 8007e90:	4770      	bx	lr
 8007e92:	46c0      	nop			; (mov r8, r8)
 8007e94:	200000f4 	.word	0x200000f4

08007e98 <__libc_init_array>:
 8007e98:	b570      	push	{r4, r5, r6, lr}
 8007e9a:	2600      	movs	r6, #0
 8007e9c:	4c0c      	ldr	r4, [pc, #48]	; (8007ed0 <__libc_init_array+0x38>)
 8007e9e:	4d0d      	ldr	r5, [pc, #52]	; (8007ed4 <__libc_init_array+0x3c>)
 8007ea0:	1b64      	subs	r4, r4, r5
 8007ea2:	10a4      	asrs	r4, r4, #2
 8007ea4:	42a6      	cmp	r6, r4
 8007ea6:	d109      	bne.n	8007ebc <__libc_init_array+0x24>
 8007ea8:	2600      	movs	r6, #0
 8007eaa:	f002 fc67 	bl	800a77c <_init>
 8007eae:	4c0a      	ldr	r4, [pc, #40]	; (8007ed8 <__libc_init_array+0x40>)
 8007eb0:	4d0a      	ldr	r5, [pc, #40]	; (8007edc <__libc_init_array+0x44>)
 8007eb2:	1b64      	subs	r4, r4, r5
 8007eb4:	10a4      	asrs	r4, r4, #2
 8007eb6:	42a6      	cmp	r6, r4
 8007eb8:	d105      	bne.n	8007ec6 <__libc_init_array+0x2e>
 8007eba:	bd70      	pop	{r4, r5, r6, pc}
 8007ebc:	00b3      	lsls	r3, r6, #2
 8007ebe:	58eb      	ldr	r3, [r5, r3]
 8007ec0:	4798      	blx	r3
 8007ec2:	3601      	adds	r6, #1
 8007ec4:	e7ee      	b.n	8007ea4 <__libc_init_array+0xc>
 8007ec6:	00b3      	lsls	r3, r6, #2
 8007ec8:	58eb      	ldr	r3, [r5, r3]
 8007eca:	4798      	blx	r3
 8007ecc:	3601      	adds	r6, #1
 8007ece:	e7f2      	b.n	8007eb6 <__libc_init_array+0x1e>
 8007ed0:	0800ade0 	.word	0x0800ade0
 8007ed4:	0800ade0 	.word	0x0800ade0
 8007ed8:	0800ade4 	.word	0x0800ade4
 8007edc:	0800ade0 	.word	0x0800ade0

08007ee0 <__retarget_lock_init_recursive>:
 8007ee0:	4770      	bx	lr

08007ee2 <__retarget_lock_acquire_recursive>:
 8007ee2:	4770      	bx	lr

08007ee4 <__retarget_lock_release_recursive>:
 8007ee4:	4770      	bx	lr

08007ee6 <memchr>:
 8007ee6:	b2c9      	uxtb	r1, r1
 8007ee8:	1882      	adds	r2, r0, r2
 8007eea:	4290      	cmp	r0, r2
 8007eec:	d101      	bne.n	8007ef2 <memchr+0xc>
 8007eee:	2000      	movs	r0, #0
 8007ef0:	4770      	bx	lr
 8007ef2:	7803      	ldrb	r3, [r0, #0]
 8007ef4:	428b      	cmp	r3, r1
 8007ef6:	d0fb      	beq.n	8007ef0 <memchr+0xa>
 8007ef8:	3001      	adds	r0, #1
 8007efa:	e7f6      	b.n	8007eea <memchr+0x4>

08007efc <quorem>:
 8007efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007efe:	6902      	ldr	r2, [r0, #16]
 8007f00:	690b      	ldr	r3, [r1, #16]
 8007f02:	b089      	sub	sp, #36	; 0x24
 8007f04:	0007      	movs	r7, r0
 8007f06:	9104      	str	r1, [sp, #16]
 8007f08:	2000      	movs	r0, #0
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	db69      	blt.n	8007fe2 <quorem+0xe6>
 8007f0e:	3b01      	subs	r3, #1
 8007f10:	009c      	lsls	r4, r3, #2
 8007f12:	9301      	str	r3, [sp, #4]
 8007f14:	000b      	movs	r3, r1
 8007f16:	3314      	adds	r3, #20
 8007f18:	9306      	str	r3, [sp, #24]
 8007f1a:	191b      	adds	r3, r3, r4
 8007f1c:	9305      	str	r3, [sp, #20]
 8007f1e:	003b      	movs	r3, r7
 8007f20:	3314      	adds	r3, #20
 8007f22:	9303      	str	r3, [sp, #12]
 8007f24:	191c      	adds	r4, r3, r4
 8007f26:	9b05      	ldr	r3, [sp, #20]
 8007f28:	6826      	ldr	r6, [r4, #0]
 8007f2a:	681d      	ldr	r5, [r3, #0]
 8007f2c:	0030      	movs	r0, r6
 8007f2e:	3501      	adds	r5, #1
 8007f30:	0029      	movs	r1, r5
 8007f32:	f7f8 f8fd 	bl	8000130 <__udivsi3>
 8007f36:	9002      	str	r0, [sp, #8]
 8007f38:	42ae      	cmp	r6, r5
 8007f3a:	d329      	bcc.n	8007f90 <quorem+0x94>
 8007f3c:	9b06      	ldr	r3, [sp, #24]
 8007f3e:	2600      	movs	r6, #0
 8007f40:	469c      	mov	ip, r3
 8007f42:	9d03      	ldr	r5, [sp, #12]
 8007f44:	9606      	str	r6, [sp, #24]
 8007f46:	4662      	mov	r2, ip
 8007f48:	ca08      	ldmia	r2!, {r3}
 8007f4a:	6828      	ldr	r0, [r5, #0]
 8007f4c:	4694      	mov	ip, r2
 8007f4e:	9a02      	ldr	r2, [sp, #8]
 8007f50:	b299      	uxth	r1, r3
 8007f52:	4351      	muls	r1, r2
 8007f54:	0c1b      	lsrs	r3, r3, #16
 8007f56:	4353      	muls	r3, r2
 8007f58:	1989      	adds	r1, r1, r6
 8007f5a:	0c0a      	lsrs	r2, r1, #16
 8007f5c:	189b      	adds	r3, r3, r2
 8007f5e:	9307      	str	r3, [sp, #28]
 8007f60:	0c1e      	lsrs	r6, r3, #16
 8007f62:	9b06      	ldr	r3, [sp, #24]
 8007f64:	b282      	uxth	r2, r0
 8007f66:	18d2      	adds	r2, r2, r3
 8007f68:	466b      	mov	r3, sp
 8007f6a:	b289      	uxth	r1, r1
 8007f6c:	8b9b      	ldrh	r3, [r3, #28]
 8007f6e:	1a52      	subs	r2, r2, r1
 8007f70:	0c01      	lsrs	r1, r0, #16
 8007f72:	1ac9      	subs	r1, r1, r3
 8007f74:	1413      	asrs	r3, r2, #16
 8007f76:	18cb      	adds	r3, r1, r3
 8007f78:	1419      	asrs	r1, r3, #16
 8007f7a:	b292      	uxth	r2, r2
 8007f7c:	041b      	lsls	r3, r3, #16
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	c508      	stmia	r5!, {r3}
 8007f82:	9b05      	ldr	r3, [sp, #20]
 8007f84:	9106      	str	r1, [sp, #24]
 8007f86:	4563      	cmp	r3, ip
 8007f88:	d2dd      	bcs.n	8007f46 <quorem+0x4a>
 8007f8a:	6823      	ldr	r3, [r4, #0]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d030      	beq.n	8007ff2 <quorem+0xf6>
 8007f90:	0038      	movs	r0, r7
 8007f92:	9904      	ldr	r1, [sp, #16]
 8007f94:	f001 f9de 	bl	8009354 <__mcmp>
 8007f98:	2800      	cmp	r0, #0
 8007f9a:	db21      	blt.n	8007fe0 <quorem+0xe4>
 8007f9c:	0038      	movs	r0, r7
 8007f9e:	2600      	movs	r6, #0
 8007fa0:	9b02      	ldr	r3, [sp, #8]
 8007fa2:	9c04      	ldr	r4, [sp, #16]
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	9302      	str	r3, [sp, #8]
 8007fa8:	3014      	adds	r0, #20
 8007faa:	3414      	adds	r4, #20
 8007fac:	6803      	ldr	r3, [r0, #0]
 8007fae:	cc02      	ldmia	r4!, {r1}
 8007fb0:	b29d      	uxth	r5, r3
 8007fb2:	19ad      	adds	r5, r5, r6
 8007fb4:	b28a      	uxth	r2, r1
 8007fb6:	1aaa      	subs	r2, r5, r2
 8007fb8:	0c09      	lsrs	r1, r1, #16
 8007fba:	0c1b      	lsrs	r3, r3, #16
 8007fbc:	1a5b      	subs	r3, r3, r1
 8007fbe:	1411      	asrs	r1, r2, #16
 8007fc0:	185b      	adds	r3, r3, r1
 8007fc2:	141e      	asrs	r6, r3, #16
 8007fc4:	b292      	uxth	r2, r2
 8007fc6:	041b      	lsls	r3, r3, #16
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	c008      	stmia	r0!, {r3}
 8007fcc:	9b05      	ldr	r3, [sp, #20]
 8007fce:	42a3      	cmp	r3, r4
 8007fd0:	d2ec      	bcs.n	8007fac <quorem+0xb0>
 8007fd2:	9b01      	ldr	r3, [sp, #4]
 8007fd4:	9a03      	ldr	r2, [sp, #12]
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	18d3      	adds	r3, r2, r3
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	2a00      	cmp	r2, #0
 8007fde:	d015      	beq.n	800800c <quorem+0x110>
 8007fe0:	9802      	ldr	r0, [sp, #8]
 8007fe2:	b009      	add	sp, #36	; 0x24
 8007fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fe6:	6823      	ldr	r3, [r4, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d106      	bne.n	8007ffa <quorem+0xfe>
 8007fec:	9b01      	ldr	r3, [sp, #4]
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	9301      	str	r3, [sp, #4]
 8007ff2:	9b03      	ldr	r3, [sp, #12]
 8007ff4:	3c04      	subs	r4, #4
 8007ff6:	42a3      	cmp	r3, r4
 8007ff8:	d3f5      	bcc.n	8007fe6 <quorem+0xea>
 8007ffa:	9b01      	ldr	r3, [sp, #4]
 8007ffc:	613b      	str	r3, [r7, #16]
 8007ffe:	e7c7      	b.n	8007f90 <quorem+0x94>
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	2a00      	cmp	r2, #0
 8008004:	d106      	bne.n	8008014 <quorem+0x118>
 8008006:	9a01      	ldr	r2, [sp, #4]
 8008008:	3a01      	subs	r2, #1
 800800a:	9201      	str	r2, [sp, #4]
 800800c:	9a03      	ldr	r2, [sp, #12]
 800800e:	3b04      	subs	r3, #4
 8008010:	429a      	cmp	r2, r3
 8008012:	d3f5      	bcc.n	8008000 <quorem+0x104>
 8008014:	9b01      	ldr	r3, [sp, #4]
 8008016:	613b      	str	r3, [r7, #16]
 8008018:	e7e2      	b.n	8007fe0 <quorem+0xe4>
	...

0800801c <_dtoa_r>:
 800801c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800801e:	0014      	movs	r4, r2
 8008020:	001d      	movs	r5, r3
 8008022:	69c6      	ldr	r6, [r0, #28]
 8008024:	b09d      	sub	sp, #116	; 0x74
 8008026:	9408      	str	r4, [sp, #32]
 8008028:	9509      	str	r5, [sp, #36]	; 0x24
 800802a:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800802c:	9004      	str	r0, [sp, #16]
 800802e:	2e00      	cmp	r6, #0
 8008030:	d10f      	bne.n	8008052 <_dtoa_r+0x36>
 8008032:	2010      	movs	r0, #16
 8008034:	f000 fe4a 	bl	8008ccc <malloc>
 8008038:	9b04      	ldr	r3, [sp, #16]
 800803a:	1e02      	subs	r2, r0, #0
 800803c:	61d8      	str	r0, [r3, #28]
 800803e:	d104      	bne.n	800804a <_dtoa_r+0x2e>
 8008040:	21ef      	movs	r1, #239	; 0xef
 8008042:	4bc6      	ldr	r3, [pc, #792]	; (800835c <_dtoa_r+0x340>)
 8008044:	48c6      	ldr	r0, [pc, #792]	; (8008360 <_dtoa_r+0x344>)
 8008046:	f001 fcdf 	bl	8009a08 <__assert_func>
 800804a:	6046      	str	r6, [r0, #4]
 800804c:	6086      	str	r6, [r0, #8]
 800804e:	6006      	str	r6, [r0, #0]
 8008050:	60c6      	str	r6, [r0, #12]
 8008052:	9b04      	ldr	r3, [sp, #16]
 8008054:	69db      	ldr	r3, [r3, #28]
 8008056:	6819      	ldr	r1, [r3, #0]
 8008058:	2900      	cmp	r1, #0
 800805a:	d00b      	beq.n	8008074 <_dtoa_r+0x58>
 800805c:	685a      	ldr	r2, [r3, #4]
 800805e:	2301      	movs	r3, #1
 8008060:	4093      	lsls	r3, r2
 8008062:	604a      	str	r2, [r1, #4]
 8008064:	608b      	str	r3, [r1, #8]
 8008066:	9804      	ldr	r0, [sp, #16]
 8008068:	f000 ff32 	bl	8008ed0 <_Bfree>
 800806c:	2200      	movs	r2, #0
 800806e:	9b04      	ldr	r3, [sp, #16]
 8008070:	69db      	ldr	r3, [r3, #28]
 8008072:	601a      	str	r2, [r3, #0]
 8008074:	2d00      	cmp	r5, #0
 8008076:	da1e      	bge.n	80080b6 <_dtoa_r+0x9a>
 8008078:	2301      	movs	r3, #1
 800807a:	603b      	str	r3, [r7, #0]
 800807c:	006b      	lsls	r3, r5, #1
 800807e:	085b      	lsrs	r3, r3, #1
 8008080:	9309      	str	r3, [sp, #36]	; 0x24
 8008082:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008084:	4bb7      	ldr	r3, [pc, #732]	; (8008364 <_dtoa_r+0x348>)
 8008086:	4ab7      	ldr	r2, [pc, #732]	; (8008364 <_dtoa_r+0x348>)
 8008088:	403b      	ands	r3, r7
 800808a:	4293      	cmp	r3, r2
 800808c:	d116      	bne.n	80080bc <_dtoa_r+0xa0>
 800808e:	4bb6      	ldr	r3, [pc, #728]	; (8008368 <_dtoa_r+0x34c>)
 8008090:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008092:	6013      	str	r3, [r2, #0]
 8008094:	033b      	lsls	r3, r7, #12
 8008096:	0b1b      	lsrs	r3, r3, #12
 8008098:	4323      	orrs	r3, r4
 800809a:	d101      	bne.n	80080a0 <_dtoa_r+0x84>
 800809c:	f000 fdb5 	bl	8008c0a <_dtoa_r+0xbee>
 80080a0:	4bb2      	ldr	r3, [pc, #712]	; (800836c <_dtoa_r+0x350>)
 80080a2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80080a4:	9306      	str	r3, [sp, #24]
 80080a6:	2a00      	cmp	r2, #0
 80080a8:	d002      	beq.n	80080b0 <_dtoa_r+0x94>
 80080aa:	4bb1      	ldr	r3, [pc, #708]	; (8008370 <_dtoa_r+0x354>)
 80080ac:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80080ae:	6013      	str	r3, [r2, #0]
 80080b0:	9806      	ldr	r0, [sp, #24]
 80080b2:	b01d      	add	sp, #116	; 0x74
 80080b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080b6:	2300      	movs	r3, #0
 80080b8:	603b      	str	r3, [r7, #0]
 80080ba:	e7e2      	b.n	8008082 <_dtoa_r+0x66>
 80080bc:	9a08      	ldr	r2, [sp, #32]
 80080be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080c0:	9210      	str	r2, [sp, #64]	; 0x40
 80080c2:	9311      	str	r3, [sp, #68]	; 0x44
 80080c4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80080c6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80080c8:	2200      	movs	r2, #0
 80080ca:	2300      	movs	r3, #0
 80080cc:	f7f8 f9b6 	bl	800043c <__aeabi_dcmpeq>
 80080d0:	1e06      	subs	r6, r0, #0
 80080d2:	d009      	beq.n	80080e8 <_dtoa_r+0xcc>
 80080d4:	2301      	movs	r3, #1
 80080d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80080d8:	6013      	str	r3, [r2, #0]
 80080da:	4ba6      	ldr	r3, [pc, #664]	; (8008374 <_dtoa_r+0x358>)
 80080dc:	9306      	str	r3, [sp, #24]
 80080de:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d0e5      	beq.n	80080b0 <_dtoa_r+0x94>
 80080e4:	4ba4      	ldr	r3, [pc, #656]	; (8008378 <_dtoa_r+0x35c>)
 80080e6:	e7e1      	b.n	80080ac <_dtoa_r+0x90>
 80080e8:	ab1a      	add	r3, sp, #104	; 0x68
 80080ea:	9301      	str	r3, [sp, #4]
 80080ec:	ab1b      	add	r3, sp, #108	; 0x6c
 80080ee:	9300      	str	r3, [sp, #0]
 80080f0:	9804      	ldr	r0, [sp, #16]
 80080f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80080f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080f6:	f001 f9e1 	bl	80094bc <__d2b>
 80080fa:	007a      	lsls	r2, r7, #1
 80080fc:	9005      	str	r0, [sp, #20]
 80080fe:	0d52      	lsrs	r2, r2, #21
 8008100:	d100      	bne.n	8008104 <_dtoa_r+0xe8>
 8008102:	e07b      	b.n	80081fc <_dtoa_r+0x1e0>
 8008104:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008106:	9617      	str	r6, [sp, #92]	; 0x5c
 8008108:	0319      	lsls	r1, r3, #12
 800810a:	4b9c      	ldr	r3, [pc, #624]	; (800837c <_dtoa_r+0x360>)
 800810c:	0b09      	lsrs	r1, r1, #12
 800810e:	430b      	orrs	r3, r1
 8008110:	499b      	ldr	r1, [pc, #620]	; (8008380 <_dtoa_r+0x364>)
 8008112:	1857      	adds	r7, r2, r1
 8008114:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008116:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008118:	0019      	movs	r1, r3
 800811a:	2200      	movs	r2, #0
 800811c:	4b99      	ldr	r3, [pc, #612]	; (8008384 <_dtoa_r+0x368>)
 800811e:	f7f9 fffd 	bl	800211c <__aeabi_dsub>
 8008122:	4a99      	ldr	r2, [pc, #612]	; (8008388 <_dtoa_r+0x36c>)
 8008124:	4b99      	ldr	r3, [pc, #612]	; (800838c <_dtoa_r+0x370>)
 8008126:	f7f9 fd37 	bl	8001b98 <__aeabi_dmul>
 800812a:	4a99      	ldr	r2, [pc, #612]	; (8008390 <_dtoa_r+0x374>)
 800812c:	4b99      	ldr	r3, [pc, #612]	; (8008394 <_dtoa_r+0x378>)
 800812e:	f7f8 fdd9 	bl	8000ce4 <__aeabi_dadd>
 8008132:	0004      	movs	r4, r0
 8008134:	0038      	movs	r0, r7
 8008136:	000d      	movs	r5, r1
 8008138:	f7fa fbc6 	bl	80028c8 <__aeabi_i2d>
 800813c:	4a96      	ldr	r2, [pc, #600]	; (8008398 <_dtoa_r+0x37c>)
 800813e:	4b97      	ldr	r3, [pc, #604]	; (800839c <_dtoa_r+0x380>)
 8008140:	f7f9 fd2a 	bl	8001b98 <__aeabi_dmul>
 8008144:	0002      	movs	r2, r0
 8008146:	000b      	movs	r3, r1
 8008148:	0020      	movs	r0, r4
 800814a:	0029      	movs	r1, r5
 800814c:	f7f8 fdca 	bl	8000ce4 <__aeabi_dadd>
 8008150:	0004      	movs	r4, r0
 8008152:	000d      	movs	r5, r1
 8008154:	f7fa fb82 	bl	800285c <__aeabi_d2iz>
 8008158:	2200      	movs	r2, #0
 800815a:	9003      	str	r0, [sp, #12]
 800815c:	2300      	movs	r3, #0
 800815e:	0020      	movs	r0, r4
 8008160:	0029      	movs	r1, r5
 8008162:	f7f8 f971 	bl	8000448 <__aeabi_dcmplt>
 8008166:	2800      	cmp	r0, #0
 8008168:	d00b      	beq.n	8008182 <_dtoa_r+0x166>
 800816a:	9803      	ldr	r0, [sp, #12]
 800816c:	f7fa fbac 	bl	80028c8 <__aeabi_i2d>
 8008170:	002b      	movs	r3, r5
 8008172:	0022      	movs	r2, r4
 8008174:	f7f8 f962 	bl	800043c <__aeabi_dcmpeq>
 8008178:	4243      	negs	r3, r0
 800817a:	4158      	adcs	r0, r3
 800817c:	9b03      	ldr	r3, [sp, #12]
 800817e:	1a1b      	subs	r3, r3, r0
 8008180:	9303      	str	r3, [sp, #12]
 8008182:	2301      	movs	r3, #1
 8008184:	9316      	str	r3, [sp, #88]	; 0x58
 8008186:	9b03      	ldr	r3, [sp, #12]
 8008188:	2b16      	cmp	r3, #22
 800818a:	d810      	bhi.n	80081ae <_dtoa_r+0x192>
 800818c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800818e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008190:	9a03      	ldr	r2, [sp, #12]
 8008192:	4b83      	ldr	r3, [pc, #524]	; (80083a0 <_dtoa_r+0x384>)
 8008194:	00d2      	lsls	r2, r2, #3
 8008196:	189b      	adds	r3, r3, r2
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	f7f8 f954 	bl	8000448 <__aeabi_dcmplt>
 80081a0:	2800      	cmp	r0, #0
 80081a2:	d047      	beq.n	8008234 <_dtoa_r+0x218>
 80081a4:	9b03      	ldr	r3, [sp, #12]
 80081a6:	3b01      	subs	r3, #1
 80081a8:	9303      	str	r3, [sp, #12]
 80081aa:	2300      	movs	r3, #0
 80081ac:	9316      	str	r3, [sp, #88]	; 0x58
 80081ae:	2200      	movs	r2, #0
 80081b0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80081b2:	920a      	str	r2, [sp, #40]	; 0x28
 80081b4:	1bdb      	subs	r3, r3, r7
 80081b6:	1e5a      	subs	r2, r3, #1
 80081b8:	d53e      	bpl.n	8008238 <_dtoa_r+0x21c>
 80081ba:	2201      	movs	r2, #1
 80081bc:	1ad3      	subs	r3, r2, r3
 80081be:	930a      	str	r3, [sp, #40]	; 0x28
 80081c0:	2300      	movs	r3, #0
 80081c2:	930c      	str	r3, [sp, #48]	; 0x30
 80081c4:	9b03      	ldr	r3, [sp, #12]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	db38      	blt.n	800823c <_dtoa_r+0x220>
 80081ca:	9a03      	ldr	r2, [sp, #12]
 80081cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081ce:	4694      	mov	ip, r2
 80081d0:	4463      	add	r3, ip
 80081d2:	930c      	str	r3, [sp, #48]	; 0x30
 80081d4:	2300      	movs	r3, #0
 80081d6:	9213      	str	r2, [sp, #76]	; 0x4c
 80081d8:	930d      	str	r3, [sp, #52]	; 0x34
 80081da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80081dc:	2401      	movs	r4, #1
 80081de:	2b09      	cmp	r3, #9
 80081e0:	d867      	bhi.n	80082b2 <_dtoa_r+0x296>
 80081e2:	2b05      	cmp	r3, #5
 80081e4:	dd02      	ble.n	80081ec <_dtoa_r+0x1d0>
 80081e6:	2400      	movs	r4, #0
 80081e8:	3b04      	subs	r3, #4
 80081ea:	9322      	str	r3, [sp, #136]	; 0x88
 80081ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80081ee:	1e98      	subs	r0, r3, #2
 80081f0:	2803      	cmp	r0, #3
 80081f2:	d867      	bhi.n	80082c4 <_dtoa_r+0x2a8>
 80081f4:	f7f7 ff88 	bl	8000108 <__gnu_thumb1_case_uqi>
 80081f8:	5b383a2b 	.word	0x5b383a2b
 80081fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80081fe:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8008200:	18f6      	adds	r6, r6, r3
 8008202:	4b68      	ldr	r3, [pc, #416]	; (80083a4 <_dtoa_r+0x388>)
 8008204:	18f2      	adds	r2, r6, r3
 8008206:	2a20      	cmp	r2, #32
 8008208:	dd0f      	ble.n	800822a <_dtoa_r+0x20e>
 800820a:	2340      	movs	r3, #64	; 0x40
 800820c:	1a9b      	subs	r3, r3, r2
 800820e:	409f      	lsls	r7, r3
 8008210:	4b65      	ldr	r3, [pc, #404]	; (80083a8 <_dtoa_r+0x38c>)
 8008212:	0038      	movs	r0, r7
 8008214:	18f3      	adds	r3, r6, r3
 8008216:	40dc      	lsrs	r4, r3
 8008218:	4320      	orrs	r0, r4
 800821a:	f7fa fb85 	bl	8002928 <__aeabi_ui2d>
 800821e:	2201      	movs	r2, #1
 8008220:	4b62      	ldr	r3, [pc, #392]	; (80083ac <_dtoa_r+0x390>)
 8008222:	1e77      	subs	r7, r6, #1
 8008224:	18cb      	adds	r3, r1, r3
 8008226:	9217      	str	r2, [sp, #92]	; 0x5c
 8008228:	e776      	b.n	8008118 <_dtoa_r+0xfc>
 800822a:	2320      	movs	r3, #32
 800822c:	0020      	movs	r0, r4
 800822e:	1a9b      	subs	r3, r3, r2
 8008230:	4098      	lsls	r0, r3
 8008232:	e7f2      	b.n	800821a <_dtoa_r+0x1fe>
 8008234:	9016      	str	r0, [sp, #88]	; 0x58
 8008236:	e7ba      	b.n	80081ae <_dtoa_r+0x192>
 8008238:	920c      	str	r2, [sp, #48]	; 0x30
 800823a:	e7c3      	b.n	80081c4 <_dtoa_r+0x1a8>
 800823c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800823e:	9a03      	ldr	r2, [sp, #12]
 8008240:	1a9b      	subs	r3, r3, r2
 8008242:	930a      	str	r3, [sp, #40]	; 0x28
 8008244:	4253      	negs	r3, r2
 8008246:	930d      	str	r3, [sp, #52]	; 0x34
 8008248:	2300      	movs	r3, #0
 800824a:	9313      	str	r3, [sp, #76]	; 0x4c
 800824c:	e7c5      	b.n	80081da <_dtoa_r+0x1be>
 800824e:	2300      	movs	r3, #0
 8008250:	930f      	str	r3, [sp, #60]	; 0x3c
 8008252:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008254:	930b      	str	r3, [sp, #44]	; 0x2c
 8008256:	9307      	str	r3, [sp, #28]
 8008258:	2b00      	cmp	r3, #0
 800825a:	dc13      	bgt.n	8008284 <_dtoa_r+0x268>
 800825c:	2301      	movs	r3, #1
 800825e:	001a      	movs	r2, r3
 8008260:	930b      	str	r3, [sp, #44]	; 0x2c
 8008262:	9307      	str	r3, [sp, #28]
 8008264:	9223      	str	r2, [sp, #140]	; 0x8c
 8008266:	e00d      	b.n	8008284 <_dtoa_r+0x268>
 8008268:	2301      	movs	r3, #1
 800826a:	e7f1      	b.n	8008250 <_dtoa_r+0x234>
 800826c:	2300      	movs	r3, #0
 800826e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008270:	930f      	str	r3, [sp, #60]	; 0x3c
 8008272:	4694      	mov	ip, r2
 8008274:	9b03      	ldr	r3, [sp, #12]
 8008276:	4463      	add	r3, ip
 8008278:	930b      	str	r3, [sp, #44]	; 0x2c
 800827a:	3301      	adds	r3, #1
 800827c:	9307      	str	r3, [sp, #28]
 800827e:	2b00      	cmp	r3, #0
 8008280:	dc00      	bgt.n	8008284 <_dtoa_r+0x268>
 8008282:	2301      	movs	r3, #1
 8008284:	9a04      	ldr	r2, [sp, #16]
 8008286:	2100      	movs	r1, #0
 8008288:	69d0      	ldr	r0, [r2, #28]
 800828a:	2204      	movs	r2, #4
 800828c:	0015      	movs	r5, r2
 800828e:	3514      	adds	r5, #20
 8008290:	429d      	cmp	r5, r3
 8008292:	d91b      	bls.n	80082cc <_dtoa_r+0x2b0>
 8008294:	6041      	str	r1, [r0, #4]
 8008296:	9804      	ldr	r0, [sp, #16]
 8008298:	f000 fdd6 	bl	8008e48 <_Balloc>
 800829c:	9006      	str	r0, [sp, #24]
 800829e:	2800      	cmp	r0, #0
 80082a0:	d117      	bne.n	80082d2 <_dtoa_r+0x2b6>
 80082a2:	21b0      	movs	r1, #176	; 0xb0
 80082a4:	4b42      	ldr	r3, [pc, #264]	; (80083b0 <_dtoa_r+0x394>)
 80082a6:	482e      	ldr	r0, [pc, #184]	; (8008360 <_dtoa_r+0x344>)
 80082a8:	9a06      	ldr	r2, [sp, #24]
 80082aa:	31ff      	adds	r1, #255	; 0xff
 80082ac:	e6cb      	b.n	8008046 <_dtoa_r+0x2a>
 80082ae:	2301      	movs	r3, #1
 80082b0:	e7dd      	b.n	800826e <_dtoa_r+0x252>
 80082b2:	2300      	movs	r3, #0
 80082b4:	940f      	str	r4, [sp, #60]	; 0x3c
 80082b6:	9322      	str	r3, [sp, #136]	; 0x88
 80082b8:	3b01      	subs	r3, #1
 80082ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80082bc:	9307      	str	r3, [sp, #28]
 80082be:	2200      	movs	r2, #0
 80082c0:	3313      	adds	r3, #19
 80082c2:	e7cf      	b.n	8008264 <_dtoa_r+0x248>
 80082c4:	2301      	movs	r3, #1
 80082c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80082c8:	3b02      	subs	r3, #2
 80082ca:	e7f6      	b.n	80082ba <_dtoa_r+0x29e>
 80082cc:	3101      	adds	r1, #1
 80082ce:	0052      	lsls	r2, r2, #1
 80082d0:	e7dc      	b.n	800828c <_dtoa_r+0x270>
 80082d2:	9b04      	ldr	r3, [sp, #16]
 80082d4:	9a06      	ldr	r2, [sp, #24]
 80082d6:	69db      	ldr	r3, [r3, #28]
 80082d8:	601a      	str	r2, [r3, #0]
 80082da:	9b07      	ldr	r3, [sp, #28]
 80082dc:	2b0e      	cmp	r3, #14
 80082de:	d900      	bls.n	80082e2 <_dtoa_r+0x2c6>
 80082e0:	e0e5      	b.n	80084ae <_dtoa_r+0x492>
 80082e2:	2c00      	cmp	r4, #0
 80082e4:	d100      	bne.n	80082e8 <_dtoa_r+0x2cc>
 80082e6:	e0e2      	b.n	80084ae <_dtoa_r+0x492>
 80082e8:	9b03      	ldr	r3, [sp, #12]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	dd64      	ble.n	80083b8 <_dtoa_r+0x39c>
 80082ee:	210f      	movs	r1, #15
 80082f0:	9a03      	ldr	r2, [sp, #12]
 80082f2:	4b2b      	ldr	r3, [pc, #172]	; (80083a0 <_dtoa_r+0x384>)
 80082f4:	400a      	ands	r2, r1
 80082f6:	00d2      	lsls	r2, r2, #3
 80082f8:	189b      	adds	r3, r3, r2
 80082fa:	681e      	ldr	r6, [r3, #0]
 80082fc:	685f      	ldr	r7, [r3, #4]
 80082fe:	9b03      	ldr	r3, [sp, #12]
 8008300:	2402      	movs	r4, #2
 8008302:	111d      	asrs	r5, r3, #4
 8008304:	05db      	lsls	r3, r3, #23
 8008306:	d50a      	bpl.n	800831e <_dtoa_r+0x302>
 8008308:	4b2a      	ldr	r3, [pc, #168]	; (80083b4 <_dtoa_r+0x398>)
 800830a:	400d      	ands	r5, r1
 800830c:	6a1a      	ldr	r2, [r3, #32]
 800830e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008310:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008312:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008314:	f7f9 f846 	bl	80013a4 <__aeabi_ddiv>
 8008318:	9008      	str	r0, [sp, #32]
 800831a:	9109      	str	r1, [sp, #36]	; 0x24
 800831c:	3401      	adds	r4, #1
 800831e:	4b25      	ldr	r3, [pc, #148]	; (80083b4 <_dtoa_r+0x398>)
 8008320:	930e      	str	r3, [sp, #56]	; 0x38
 8008322:	2d00      	cmp	r5, #0
 8008324:	d108      	bne.n	8008338 <_dtoa_r+0x31c>
 8008326:	9808      	ldr	r0, [sp, #32]
 8008328:	9909      	ldr	r1, [sp, #36]	; 0x24
 800832a:	0032      	movs	r2, r6
 800832c:	003b      	movs	r3, r7
 800832e:	f7f9 f839 	bl	80013a4 <__aeabi_ddiv>
 8008332:	9008      	str	r0, [sp, #32]
 8008334:	9109      	str	r1, [sp, #36]	; 0x24
 8008336:	e05a      	b.n	80083ee <_dtoa_r+0x3d2>
 8008338:	2301      	movs	r3, #1
 800833a:	421d      	tst	r5, r3
 800833c:	d009      	beq.n	8008352 <_dtoa_r+0x336>
 800833e:	18e4      	adds	r4, r4, r3
 8008340:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008342:	0030      	movs	r0, r6
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	0039      	movs	r1, r7
 800834a:	f7f9 fc25 	bl	8001b98 <__aeabi_dmul>
 800834e:	0006      	movs	r6, r0
 8008350:	000f      	movs	r7, r1
 8008352:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008354:	106d      	asrs	r5, r5, #1
 8008356:	3308      	adds	r3, #8
 8008358:	e7e2      	b.n	8008320 <_dtoa_r+0x304>
 800835a:	46c0      	nop			; (mov r8, r8)
 800835c:	0800aa35 	.word	0x0800aa35
 8008360:	0800aa4c 	.word	0x0800aa4c
 8008364:	7ff00000 	.word	0x7ff00000
 8008368:	0000270f 	.word	0x0000270f
 800836c:	0800aa31 	.word	0x0800aa31
 8008370:	0800aa34 	.word	0x0800aa34
 8008374:	0800aa04 	.word	0x0800aa04
 8008378:	0800aa05 	.word	0x0800aa05
 800837c:	3ff00000 	.word	0x3ff00000
 8008380:	fffffc01 	.word	0xfffffc01
 8008384:	3ff80000 	.word	0x3ff80000
 8008388:	636f4361 	.word	0x636f4361
 800838c:	3fd287a7 	.word	0x3fd287a7
 8008390:	8b60c8b3 	.word	0x8b60c8b3
 8008394:	3fc68a28 	.word	0x3fc68a28
 8008398:	509f79fb 	.word	0x509f79fb
 800839c:	3fd34413 	.word	0x3fd34413
 80083a0:	0800ab38 	.word	0x0800ab38
 80083a4:	00000432 	.word	0x00000432
 80083a8:	00000412 	.word	0x00000412
 80083ac:	fe100000 	.word	0xfe100000
 80083b0:	0800aaa4 	.word	0x0800aaa4
 80083b4:	0800ab10 	.word	0x0800ab10
 80083b8:	9b03      	ldr	r3, [sp, #12]
 80083ba:	2402      	movs	r4, #2
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d016      	beq.n	80083ee <_dtoa_r+0x3d2>
 80083c0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80083c2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80083c4:	220f      	movs	r2, #15
 80083c6:	425d      	negs	r5, r3
 80083c8:	402a      	ands	r2, r5
 80083ca:	4bdd      	ldr	r3, [pc, #884]	; (8008740 <_dtoa_r+0x724>)
 80083cc:	00d2      	lsls	r2, r2, #3
 80083ce:	189b      	adds	r3, r3, r2
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	f7f9 fbe0 	bl	8001b98 <__aeabi_dmul>
 80083d8:	2701      	movs	r7, #1
 80083da:	2300      	movs	r3, #0
 80083dc:	9008      	str	r0, [sp, #32]
 80083de:	9109      	str	r1, [sp, #36]	; 0x24
 80083e0:	4ed8      	ldr	r6, [pc, #864]	; (8008744 <_dtoa_r+0x728>)
 80083e2:	112d      	asrs	r5, r5, #4
 80083e4:	2d00      	cmp	r5, #0
 80083e6:	d000      	beq.n	80083ea <_dtoa_r+0x3ce>
 80083e8:	e091      	b.n	800850e <_dtoa_r+0x4f2>
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d1a1      	bne.n	8008332 <_dtoa_r+0x316>
 80083ee:	9e08      	ldr	r6, [sp, #32]
 80083f0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80083f2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d100      	bne.n	80083fa <_dtoa_r+0x3de>
 80083f8:	e094      	b.n	8008524 <_dtoa_r+0x508>
 80083fa:	2200      	movs	r2, #0
 80083fc:	0030      	movs	r0, r6
 80083fe:	0039      	movs	r1, r7
 8008400:	4bd1      	ldr	r3, [pc, #836]	; (8008748 <_dtoa_r+0x72c>)
 8008402:	f7f8 f821 	bl	8000448 <__aeabi_dcmplt>
 8008406:	2800      	cmp	r0, #0
 8008408:	d100      	bne.n	800840c <_dtoa_r+0x3f0>
 800840a:	e08b      	b.n	8008524 <_dtoa_r+0x508>
 800840c:	9b07      	ldr	r3, [sp, #28]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d100      	bne.n	8008414 <_dtoa_r+0x3f8>
 8008412:	e087      	b.n	8008524 <_dtoa_r+0x508>
 8008414:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008416:	2b00      	cmp	r3, #0
 8008418:	dd45      	ble.n	80084a6 <_dtoa_r+0x48a>
 800841a:	9b03      	ldr	r3, [sp, #12]
 800841c:	2200      	movs	r2, #0
 800841e:	3b01      	subs	r3, #1
 8008420:	930e      	str	r3, [sp, #56]	; 0x38
 8008422:	0030      	movs	r0, r6
 8008424:	4bc9      	ldr	r3, [pc, #804]	; (800874c <_dtoa_r+0x730>)
 8008426:	0039      	movs	r1, r7
 8008428:	f7f9 fbb6 	bl	8001b98 <__aeabi_dmul>
 800842c:	9008      	str	r0, [sp, #32]
 800842e:	9109      	str	r1, [sp, #36]	; 0x24
 8008430:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008432:	3401      	adds	r4, #1
 8008434:	0020      	movs	r0, r4
 8008436:	9e08      	ldr	r6, [sp, #32]
 8008438:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800843a:	9312      	str	r3, [sp, #72]	; 0x48
 800843c:	f7fa fa44 	bl	80028c8 <__aeabi_i2d>
 8008440:	0032      	movs	r2, r6
 8008442:	003b      	movs	r3, r7
 8008444:	f7f9 fba8 	bl	8001b98 <__aeabi_dmul>
 8008448:	2200      	movs	r2, #0
 800844a:	4bc1      	ldr	r3, [pc, #772]	; (8008750 <_dtoa_r+0x734>)
 800844c:	f7f8 fc4a 	bl	8000ce4 <__aeabi_dadd>
 8008450:	4ac0      	ldr	r2, [pc, #768]	; (8008754 <_dtoa_r+0x738>)
 8008452:	9014      	str	r0, [sp, #80]	; 0x50
 8008454:	9115      	str	r1, [sp, #84]	; 0x54
 8008456:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008458:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800845a:	4694      	mov	ip, r2
 800845c:	9308      	str	r3, [sp, #32]
 800845e:	9409      	str	r4, [sp, #36]	; 0x24
 8008460:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008462:	4463      	add	r3, ip
 8008464:	9318      	str	r3, [sp, #96]	; 0x60
 8008466:	9309      	str	r3, [sp, #36]	; 0x24
 8008468:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800846a:	2b00      	cmp	r3, #0
 800846c:	d15e      	bne.n	800852c <_dtoa_r+0x510>
 800846e:	2200      	movs	r2, #0
 8008470:	4bb9      	ldr	r3, [pc, #740]	; (8008758 <_dtoa_r+0x73c>)
 8008472:	0030      	movs	r0, r6
 8008474:	0039      	movs	r1, r7
 8008476:	f7f9 fe51 	bl	800211c <__aeabi_dsub>
 800847a:	9a08      	ldr	r2, [sp, #32]
 800847c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800847e:	0004      	movs	r4, r0
 8008480:	000d      	movs	r5, r1
 8008482:	f7f7 fff5 	bl	8000470 <__aeabi_dcmpgt>
 8008486:	2800      	cmp	r0, #0
 8008488:	d000      	beq.n	800848c <_dtoa_r+0x470>
 800848a:	e2b3      	b.n	80089f4 <_dtoa_r+0x9d8>
 800848c:	48b3      	ldr	r0, [pc, #716]	; (800875c <_dtoa_r+0x740>)
 800848e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8008490:	4684      	mov	ip, r0
 8008492:	4461      	add	r1, ip
 8008494:	000b      	movs	r3, r1
 8008496:	0020      	movs	r0, r4
 8008498:	0029      	movs	r1, r5
 800849a:	9a08      	ldr	r2, [sp, #32]
 800849c:	f7f7 ffd4 	bl	8000448 <__aeabi_dcmplt>
 80084a0:	2800      	cmp	r0, #0
 80084a2:	d000      	beq.n	80084a6 <_dtoa_r+0x48a>
 80084a4:	e2a3      	b.n	80089ee <_dtoa_r+0x9d2>
 80084a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084a8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80084aa:	9308      	str	r3, [sp, #32]
 80084ac:	9409      	str	r4, [sp, #36]	; 0x24
 80084ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	da00      	bge.n	80084b6 <_dtoa_r+0x49a>
 80084b4:	e179      	b.n	80087aa <_dtoa_r+0x78e>
 80084b6:	9a03      	ldr	r2, [sp, #12]
 80084b8:	2a0e      	cmp	r2, #14
 80084ba:	dd00      	ble.n	80084be <_dtoa_r+0x4a2>
 80084bc:	e175      	b.n	80087aa <_dtoa_r+0x78e>
 80084be:	4ba0      	ldr	r3, [pc, #640]	; (8008740 <_dtoa_r+0x724>)
 80084c0:	00d2      	lsls	r2, r2, #3
 80084c2:	189b      	adds	r3, r3, r2
 80084c4:	681e      	ldr	r6, [r3, #0]
 80084c6:	685f      	ldr	r7, [r3, #4]
 80084c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	db00      	blt.n	80084d0 <_dtoa_r+0x4b4>
 80084ce:	e0e5      	b.n	800869c <_dtoa_r+0x680>
 80084d0:	9b07      	ldr	r3, [sp, #28]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	dd00      	ble.n	80084d8 <_dtoa_r+0x4bc>
 80084d6:	e0e1      	b.n	800869c <_dtoa_r+0x680>
 80084d8:	d000      	beq.n	80084dc <_dtoa_r+0x4c0>
 80084da:	e288      	b.n	80089ee <_dtoa_r+0x9d2>
 80084dc:	2200      	movs	r2, #0
 80084de:	0030      	movs	r0, r6
 80084e0:	0039      	movs	r1, r7
 80084e2:	4b9d      	ldr	r3, [pc, #628]	; (8008758 <_dtoa_r+0x73c>)
 80084e4:	f7f9 fb58 	bl	8001b98 <__aeabi_dmul>
 80084e8:	9a08      	ldr	r2, [sp, #32]
 80084ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084ec:	f7f7 ffca 	bl	8000484 <__aeabi_dcmpge>
 80084f0:	9e07      	ldr	r6, [sp, #28]
 80084f2:	0037      	movs	r7, r6
 80084f4:	2800      	cmp	r0, #0
 80084f6:	d000      	beq.n	80084fa <_dtoa_r+0x4de>
 80084f8:	e25f      	b.n	80089ba <_dtoa_r+0x99e>
 80084fa:	9b06      	ldr	r3, [sp, #24]
 80084fc:	9a06      	ldr	r2, [sp, #24]
 80084fe:	3301      	adds	r3, #1
 8008500:	9308      	str	r3, [sp, #32]
 8008502:	2331      	movs	r3, #49	; 0x31
 8008504:	7013      	strb	r3, [r2, #0]
 8008506:	9b03      	ldr	r3, [sp, #12]
 8008508:	3301      	adds	r3, #1
 800850a:	9303      	str	r3, [sp, #12]
 800850c:	e25a      	b.n	80089c4 <_dtoa_r+0x9a8>
 800850e:	423d      	tst	r5, r7
 8008510:	d005      	beq.n	800851e <_dtoa_r+0x502>
 8008512:	6832      	ldr	r2, [r6, #0]
 8008514:	6873      	ldr	r3, [r6, #4]
 8008516:	f7f9 fb3f 	bl	8001b98 <__aeabi_dmul>
 800851a:	003b      	movs	r3, r7
 800851c:	3401      	adds	r4, #1
 800851e:	106d      	asrs	r5, r5, #1
 8008520:	3608      	adds	r6, #8
 8008522:	e75f      	b.n	80083e4 <_dtoa_r+0x3c8>
 8008524:	9b03      	ldr	r3, [sp, #12]
 8008526:	930e      	str	r3, [sp, #56]	; 0x38
 8008528:	9b07      	ldr	r3, [sp, #28]
 800852a:	e783      	b.n	8008434 <_dtoa_r+0x418>
 800852c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800852e:	4b84      	ldr	r3, [pc, #528]	; (8008740 <_dtoa_r+0x724>)
 8008530:	3a01      	subs	r2, #1
 8008532:	00d2      	lsls	r2, r2, #3
 8008534:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008536:	189b      	adds	r3, r3, r2
 8008538:	9c08      	ldr	r4, [sp, #32]
 800853a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	2900      	cmp	r1, #0
 8008542:	d051      	beq.n	80085e8 <_dtoa_r+0x5cc>
 8008544:	2000      	movs	r0, #0
 8008546:	4986      	ldr	r1, [pc, #536]	; (8008760 <_dtoa_r+0x744>)
 8008548:	f7f8 ff2c 	bl	80013a4 <__aeabi_ddiv>
 800854c:	0022      	movs	r2, r4
 800854e:	002b      	movs	r3, r5
 8008550:	f7f9 fde4 	bl	800211c <__aeabi_dsub>
 8008554:	9a06      	ldr	r2, [sp, #24]
 8008556:	0004      	movs	r4, r0
 8008558:	4694      	mov	ip, r2
 800855a:	000d      	movs	r5, r1
 800855c:	9b06      	ldr	r3, [sp, #24]
 800855e:	9314      	str	r3, [sp, #80]	; 0x50
 8008560:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008562:	4463      	add	r3, ip
 8008564:	9318      	str	r3, [sp, #96]	; 0x60
 8008566:	0039      	movs	r1, r7
 8008568:	0030      	movs	r0, r6
 800856a:	f7fa f977 	bl	800285c <__aeabi_d2iz>
 800856e:	9012      	str	r0, [sp, #72]	; 0x48
 8008570:	f7fa f9aa 	bl	80028c8 <__aeabi_i2d>
 8008574:	0002      	movs	r2, r0
 8008576:	000b      	movs	r3, r1
 8008578:	0030      	movs	r0, r6
 800857a:	0039      	movs	r1, r7
 800857c:	f7f9 fdce 	bl	800211c <__aeabi_dsub>
 8008580:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008582:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008584:	3301      	adds	r3, #1
 8008586:	9308      	str	r3, [sp, #32]
 8008588:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800858a:	0006      	movs	r6, r0
 800858c:	3330      	adds	r3, #48	; 0x30
 800858e:	7013      	strb	r3, [r2, #0]
 8008590:	0022      	movs	r2, r4
 8008592:	002b      	movs	r3, r5
 8008594:	000f      	movs	r7, r1
 8008596:	f7f7 ff57 	bl	8000448 <__aeabi_dcmplt>
 800859a:	2800      	cmp	r0, #0
 800859c:	d174      	bne.n	8008688 <_dtoa_r+0x66c>
 800859e:	0032      	movs	r2, r6
 80085a0:	003b      	movs	r3, r7
 80085a2:	2000      	movs	r0, #0
 80085a4:	4968      	ldr	r1, [pc, #416]	; (8008748 <_dtoa_r+0x72c>)
 80085a6:	f7f9 fdb9 	bl	800211c <__aeabi_dsub>
 80085aa:	0022      	movs	r2, r4
 80085ac:	002b      	movs	r3, r5
 80085ae:	f7f7 ff4b 	bl	8000448 <__aeabi_dcmplt>
 80085b2:	2800      	cmp	r0, #0
 80085b4:	d000      	beq.n	80085b8 <_dtoa_r+0x59c>
 80085b6:	e0d7      	b.n	8008768 <_dtoa_r+0x74c>
 80085b8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80085ba:	9a08      	ldr	r2, [sp, #32]
 80085bc:	4293      	cmp	r3, r2
 80085be:	d100      	bne.n	80085c2 <_dtoa_r+0x5a6>
 80085c0:	e771      	b.n	80084a6 <_dtoa_r+0x48a>
 80085c2:	2200      	movs	r2, #0
 80085c4:	0020      	movs	r0, r4
 80085c6:	0029      	movs	r1, r5
 80085c8:	4b60      	ldr	r3, [pc, #384]	; (800874c <_dtoa_r+0x730>)
 80085ca:	f7f9 fae5 	bl	8001b98 <__aeabi_dmul>
 80085ce:	4b5f      	ldr	r3, [pc, #380]	; (800874c <_dtoa_r+0x730>)
 80085d0:	0004      	movs	r4, r0
 80085d2:	000d      	movs	r5, r1
 80085d4:	0030      	movs	r0, r6
 80085d6:	0039      	movs	r1, r7
 80085d8:	2200      	movs	r2, #0
 80085da:	f7f9 fadd 	bl	8001b98 <__aeabi_dmul>
 80085de:	9b08      	ldr	r3, [sp, #32]
 80085e0:	0006      	movs	r6, r0
 80085e2:	000f      	movs	r7, r1
 80085e4:	9314      	str	r3, [sp, #80]	; 0x50
 80085e6:	e7be      	b.n	8008566 <_dtoa_r+0x54a>
 80085e8:	0020      	movs	r0, r4
 80085ea:	0029      	movs	r1, r5
 80085ec:	f7f9 fad4 	bl	8001b98 <__aeabi_dmul>
 80085f0:	9a06      	ldr	r2, [sp, #24]
 80085f2:	9b06      	ldr	r3, [sp, #24]
 80085f4:	4694      	mov	ip, r2
 80085f6:	9308      	str	r3, [sp, #32]
 80085f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80085fa:	9014      	str	r0, [sp, #80]	; 0x50
 80085fc:	9115      	str	r1, [sp, #84]	; 0x54
 80085fe:	4463      	add	r3, ip
 8008600:	9319      	str	r3, [sp, #100]	; 0x64
 8008602:	0030      	movs	r0, r6
 8008604:	0039      	movs	r1, r7
 8008606:	f7fa f929 	bl	800285c <__aeabi_d2iz>
 800860a:	9018      	str	r0, [sp, #96]	; 0x60
 800860c:	f7fa f95c 	bl	80028c8 <__aeabi_i2d>
 8008610:	0002      	movs	r2, r0
 8008612:	000b      	movs	r3, r1
 8008614:	0030      	movs	r0, r6
 8008616:	0039      	movs	r1, r7
 8008618:	f7f9 fd80 	bl	800211c <__aeabi_dsub>
 800861c:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800861e:	9b08      	ldr	r3, [sp, #32]
 8008620:	3630      	adds	r6, #48	; 0x30
 8008622:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008624:	701e      	strb	r6, [r3, #0]
 8008626:	3301      	adds	r3, #1
 8008628:	0004      	movs	r4, r0
 800862a:	000d      	movs	r5, r1
 800862c:	9308      	str	r3, [sp, #32]
 800862e:	4293      	cmp	r3, r2
 8008630:	d12d      	bne.n	800868e <_dtoa_r+0x672>
 8008632:	9814      	ldr	r0, [sp, #80]	; 0x50
 8008634:	9915      	ldr	r1, [sp, #84]	; 0x54
 8008636:	9a06      	ldr	r2, [sp, #24]
 8008638:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800863a:	4694      	mov	ip, r2
 800863c:	4463      	add	r3, ip
 800863e:	2200      	movs	r2, #0
 8008640:	9308      	str	r3, [sp, #32]
 8008642:	4b47      	ldr	r3, [pc, #284]	; (8008760 <_dtoa_r+0x744>)
 8008644:	f7f8 fb4e 	bl	8000ce4 <__aeabi_dadd>
 8008648:	0002      	movs	r2, r0
 800864a:	000b      	movs	r3, r1
 800864c:	0020      	movs	r0, r4
 800864e:	0029      	movs	r1, r5
 8008650:	f7f7 ff0e 	bl	8000470 <__aeabi_dcmpgt>
 8008654:	2800      	cmp	r0, #0
 8008656:	d000      	beq.n	800865a <_dtoa_r+0x63e>
 8008658:	e086      	b.n	8008768 <_dtoa_r+0x74c>
 800865a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800865c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800865e:	2000      	movs	r0, #0
 8008660:	493f      	ldr	r1, [pc, #252]	; (8008760 <_dtoa_r+0x744>)
 8008662:	f7f9 fd5b 	bl	800211c <__aeabi_dsub>
 8008666:	0002      	movs	r2, r0
 8008668:	000b      	movs	r3, r1
 800866a:	0020      	movs	r0, r4
 800866c:	0029      	movs	r1, r5
 800866e:	f7f7 feeb 	bl	8000448 <__aeabi_dcmplt>
 8008672:	2800      	cmp	r0, #0
 8008674:	d100      	bne.n	8008678 <_dtoa_r+0x65c>
 8008676:	e716      	b.n	80084a6 <_dtoa_r+0x48a>
 8008678:	9b08      	ldr	r3, [sp, #32]
 800867a:	001a      	movs	r2, r3
 800867c:	3a01      	subs	r2, #1
 800867e:	9208      	str	r2, [sp, #32]
 8008680:	7812      	ldrb	r2, [r2, #0]
 8008682:	2a30      	cmp	r2, #48	; 0x30
 8008684:	d0f8      	beq.n	8008678 <_dtoa_r+0x65c>
 8008686:	9308      	str	r3, [sp, #32]
 8008688:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800868a:	9303      	str	r3, [sp, #12]
 800868c:	e046      	b.n	800871c <_dtoa_r+0x700>
 800868e:	2200      	movs	r2, #0
 8008690:	4b2e      	ldr	r3, [pc, #184]	; (800874c <_dtoa_r+0x730>)
 8008692:	f7f9 fa81 	bl	8001b98 <__aeabi_dmul>
 8008696:	0006      	movs	r6, r0
 8008698:	000f      	movs	r7, r1
 800869a:	e7b2      	b.n	8008602 <_dtoa_r+0x5e6>
 800869c:	9b06      	ldr	r3, [sp, #24]
 800869e:	9a06      	ldr	r2, [sp, #24]
 80086a0:	930a      	str	r3, [sp, #40]	; 0x28
 80086a2:	9b07      	ldr	r3, [sp, #28]
 80086a4:	9c08      	ldr	r4, [sp, #32]
 80086a6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80086a8:	3b01      	subs	r3, #1
 80086aa:	189b      	adds	r3, r3, r2
 80086ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80086ae:	0032      	movs	r2, r6
 80086b0:	003b      	movs	r3, r7
 80086b2:	0020      	movs	r0, r4
 80086b4:	0029      	movs	r1, r5
 80086b6:	f7f8 fe75 	bl	80013a4 <__aeabi_ddiv>
 80086ba:	f7fa f8cf 	bl	800285c <__aeabi_d2iz>
 80086be:	9007      	str	r0, [sp, #28]
 80086c0:	f7fa f902 	bl	80028c8 <__aeabi_i2d>
 80086c4:	0032      	movs	r2, r6
 80086c6:	003b      	movs	r3, r7
 80086c8:	f7f9 fa66 	bl	8001b98 <__aeabi_dmul>
 80086cc:	0002      	movs	r2, r0
 80086ce:	000b      	movs	r3, r1
 80086d0:	0020      	movs	r0, r4
 80086d2:	0029      	movs	r1, r5
 80086d4:	f7f9 fd22 	bl	800211c <__aeabi_dsub>
 80086d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086da:	001a      	movs	r2, r3
 80086dc:	3201      	adds	r2, #1
 80086de:	920a      	str	r2, [sp, #40]	; 0x28
 80086e0:	9208      	str	r2, [sp, #32]
 80086e2:	9a07      	ldr	r2, [sp, #28]
 80086e4:	3230      	adds	r2, #48	; 0x30
 80086e6:	701a      	strb	r2, [r3, #0]
 80086e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d14f      	bne.n	800878e <_dtoa_r+0x772>
 80086ee:	0002      	movs	r2, r0
 80086f0:	000b      	movs	r3, r1
 80086f2:	f7f8 faf7 	bl	8000ce4 <__aeabi_dadd>
 80086f6:	0032      	movs	r2, r6
 80086f8:	003b      	movs	r3, r7
 80086fa:	0004      	movs	r4, r0
 80086fc:	000d      	movs	r5, r1
 80086fe:	f7f7 feb7 	bl	8000470 <__aeabi_dcmpgt>
 8008702:	2800      	cmp	r0, #0
 8008704:	d12e      	bne.n	8008764 <_dtoa_r+0x748>
 8008706:	0032      	movs	r2, r6
 8008708:	003b      	movs	r3, r7
 800870a:	0020      	movs	r0, r4
 800870c:	0029      	movs	r1, r5
 800870e:	f7f7 fe95 	bl	800043c <__aeabi_dcmpeq>
 8008712:	2800      	cmp	r0, #0
 8008714:	d002      	beq.n	800871c <_dtoa_r+0x700>
 8008716:	9b07      	ldr	r3, [sp, #28]
 8008718:	07de      	lsls	r6, r3, #31
 800871a:	d423      	bmi.n	8008764 <_dtoa_r+0x748>
 800871c:	9905      	ldr	r1, [sp, #20]
 800871e:	9804      	ldr	r0, [sp, #16]
 8008720:	f000 fbd6 	bl	8008ed0 <_Bfree>
 8008724:	2300      	movs	r3, #0
 8008726:	9a08      	ldr	r2, [sp, #32]
 8008728:	7013      	strb	r3, [r2, #0]
 800872a:	9b03      	ldr	r3, [sp, #12]
 800872c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800872e:	3301      	adds	r3, #1
 8008730:	6013      	str	r3, [r2, #0]
 8008732:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008734:	2b00      	cmp	r3, #0
 8008736:	d100      	bne.n	800873a <_dtoa_r+0x71e>
 8008738:	e4ba      	b.n	80080b0 <_dtoa_r+0x94>
 800873a:	9a08      	ldr	r2, [sp, #32]
 800873c:	601a      	str	r2, [r3, #0]
 800873e:	e4b7      	b.n	80080b0 <_dtoa_r+0x94>
 8008740:	0800ab38 	.word	0x0800ab38
 8008744:	0800ab10 	.word	0x0800ab10
 8008748:	3ff00000 	.word	0x3ff00000
 800874c:	40240000 	.word	0x40240000
 8008750:	401c0000 	.word	0x401c0000
 8008754:	fcc00000 	.word	0xfcc00000
 8008758:	40140000 	.word	0x40140000
 800875c:	7cc00000 	.word	0x7cc00000
 8008760:	3fe00000 	.word	0x3fe00000
 8008764:	9b03      	ldr	r3, [sp, #12]
 8008766:	930e      	str	r3, [sp, #56]	; 0x38
 8008768:	9b08      	ldr	r3, [sp, #32]
 800876a:	9308      	str	r3, [sp, #32]
 800876c:	3b01      	subs	r3, #1
 800876e:	781a      	ldrb	r2, [r3, #0]
 8008770:	2a39      	cmp	r2, #57	; 0x39
 8008772:	d108      	bne.n	8008786 <_dtoa_r+0x76a>
 8008774:	9a06      	ldr	r2, [sp, #24]
 8008776:	429a      	cmp	r2, r3
 8008778:	d1f7      	bne.n	800876a <_dtoa_r+0x74e>
 800877a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800877c:	9906      	ldr	r1, [sp, #24]
 800877e:	3201      	adds	r2, #1
 8008780:	920e      	str	r2, [sp, #56]	; 0x38
 8008782:	2230      	movs	r2, #48	; 0x30
 8008784:	700a      	strb	r2, [r1, #0]
 8008786:	781a      	ldrb	r2, [r3, #0]
 8008788:	3201      	adds	r2, #1
 800878a:	701a      	strb	r2, [r3, #0]
 800878c:	e77c      	b.n	8008688 <_dtoa_r+0x66c>
 800878e:	2200      	movs	r2, #0
 8008790:	4ba9      	ldr	r3, [pc, #676]	; (8008a38 <_dtoa_r+0xa1c>)
 8008792:	f7f9 fa01 	bl	8001b98 <__aeabi_dmul>
 8008796:	2200      	movs	r2, #0
 8008798:	2300      	movs	r3, #0
 800879a:	0004      	movs	r4, r0
 800879c:	000d      	movs	r5, r1
 800879e:	f7f7 fe4d 	bl	800043c <__aeabi_dcmpeq>
 80087a2:	2800      	cmp	r0, #0
 80087a4:	d100      	bne.n	80087a8 <_dtoa_r+0x78c>
 80087a6:	e782      	b.n	80086ae <_dtoa_r+0x692>
 80087a8:	e7b8      	b.n	800871c <_dtoa_r+0x700>
 80087aa:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80087ac:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80087ae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80087b0:	2f00      	cmp	r7, #0
 80087b2:	d012      	beq.n	80087da <_dtoa_r+0x7be>
 80087b4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80087b6:	2a01      	cmp	r2, #1
 80087b8:	dc6e      	bgt.n	8008898 <_dtoa_r+0x87c>
 80087ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80087bc:	2a00      	cmp	r2, #0
 80087be:	d065      	beq.n	800888c <_dtoa_r+0x870>
 80087c0:	4a9e      	ldr	r2, [pc, #632]	; (8008a3c <_dtoa_r+0xa20>)
 80087c2:	189b      	adds	r3, r3, r2
 80087c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087c6:	2101      	movs	r1, #1
 80087c8:	18d2      	adds	r2, r2, r3
 80087ca:	920a      	str	r2, [sp, #40]	; 0x28
 80087cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087ce:	9804      	ldr	r0, [sp, #16]
 80087d0:	18d3      	adds	r3, r2, r3
 80087d2:	930c      	str	r3, [sp, #48]	; 0x30
 80087d4:	f000 fc2c 	bl	8009030 <__i2b>
 80087d8:	0007      	movs	r7, r0
 80087da:	2c00      	cmp	r4, #0
 80087dc:	d00e      	beq.n	80087fc <_dtoa_r+0x7e0>
 80087de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	dd0b      	ble.n	80087fc <_dtoa_r+0x7e0>
 80087e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087e6:	0023      	movs	r3, r4
 80087e8:	4294      	cmp	r4, r2
 80087ea:	dd00      	ble.n	80087ee <_dtoa_r+0x7d2>
 80087ec:	0013      	movs	r3, r2
 80087ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087f0:	1ae4      	subs	r4, r4, r3
 80087f2:	1ad2      	subs	r2, r2, r3
 80087f4:	920a      	str	r2, [sp, #40]	; 0x28
 80087f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	930c      	str	r3, [sp, #48]	; 0x30
 80087fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d01e      	beq.n	8008840 <_dtoa_r+0x824>
 8008802:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008804:	2b00      	cmp	r3, #0
 8008806:	d05c      	beq.n	80088c2 <_dtoa_r+0x8a6>
 8008808:	2d00      	cmp	r5, #0
 800880a:	dd10      	ble.n	800882e <_dtoa_r+0x812>
 800880c:	0039      	movs	r1, r7
 800880e:	002a      	movs	r2, r5
 8008810:	9804      	ldr	r0, [sp, #16]
 8008812:	f000 fcd5 	bl	80091c0 <__pow5mult>
 8008816:	9a05      	ldr	r2, [sp, #20]
 8008818:	0001      	movs	r1, r0
 800881a:	0007      	movs	r7, r0
 800881c:	9804      	ldr	r0, [sp, #16]
 800881e:	f000 fc1f 	bl	8009060 <__multiply>
 8008822:	0006      	movs	r6, r0
 8008824:	9905      	ldr	r1, [sp, #20]
 8008826:	9804      	ldr	r0, [sp, #16]
 8008828:	f000 fb52 	bl	8008ed0 <_Bfree>
 800882c:	9605      	str	r6, [sp, #20]
 800882e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008830:	1b5a      	subs	r2, r3, r5
 8008832:	42ab      	cmp	r3, r5
 8008834:	d004      	beq.n	8008840 <_dtoa_r+0x824>
 8008836:	9905      	ldr	r1, [sp, #20]
 8008838:	9804      	ldr	r0, [sp, #16]
 800883a:	f000 fcc1 	bl	80091c0 <__pow5mult>
 800883e:	9005      	str	r0, [sp, #20]
 8008840:	2101      	movs	r1, #1
 8008842:	9804      	ldr	r0, [sp, #16]
 8008844:	f000 fbf4 	bl	8009030 <__i2b>
 8008848:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800884a:	0006      	movs	r6, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	dd3a      	ble.n	80088c6 <_dtoa_r+0x8aa>
 8008850:	001a      	movs	r2, r3
 8008852:	0001      	movs	r1, r0
 8008854:	9804      	ldr	r0, [sp, #16]
 8008856:	f000 fcb3 	bl	80091c0 <__pow5mult>
 800885a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800885c:	0006      	movs	r6, r0
 800885e:	2500      	movs	r5, #0
 8008860:	2b01      	cmp	r3, #1
 8008862:	dc38      	bgt.n	80088d6 <_dtoa_r+0x8ba>
 8008864:	2500      	movs	r5, #0
 8008866:	9b08      	ldr	r3, [sp, #32]
 8008868:	42ab      	cmp	r3, r5
 800886a:	d130      	bne.n	80088ce <_dtoa_r+0x8b2>
 800886c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800886e:	031b      	lsls	r3, r3, #12
 8008870:	42ab      	cmp	r3, r5
 8008872:	d12c      	bne.n	80088ce <_dtoa_r+0x8b2>
 8008874:	4b72      	ldr	r3, [pc, #456]	; (8008a40 <_dtoa_r+0xa24>)
 8008876:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008878:	4213      	tst	r3, r2
 800887a:	d028      	beq.n	80088ce <_dtoa_r+0x8b2>
 800887c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800887e:	3501      	adds	r5, #1
 8008880:	3301      	adds	r3, #1
 8008882:	930a      	str	r3, [sp, #40]	; 0x28
 8008884:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008886:	3301      	adds	r3, #1
 8008888:	930c      	str	r3, [sp, #48]	; 0x30
 800888a:	e020      	b.n	80088ce <_dtoa_r+0x8b2>
 800888c:	2336      	movs	r3, #54	; 0x36
 800888e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008890:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008892:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008894:	1a9b      	subs	r3, r3, r2
 8008896:	e795      	b.n	80087c4 <_dtoa_r+0x7a8>
 8008898:	9b07      	ldr	r3, [sp, #28]
 800889a:	1e5d      	subs	r5, r3, #1
 800889c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800889e:	42ab      	cmp	r3, r5
 80088a0:	db07      	blt.n	80088b2 <_dtoa_r+0x896>
 80088a2:	1b5d      	subs	r5, r3, r5
 80088a4:	9b07      	ldr	r3, [sp, #28]
 80088a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	da8b      	bge.n	80087c4 <_dtoa_r+0x7a8>
 80088ac:	1ae4      	subs	r4, r4, r3
 80088ae:	2300      	movs	r3, #0
 80088b0:	e788      	b.n	80087c4 <_dtoa_r+0x7a8>
 80088b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80088b6:	1aeb      	subs	r3, r5, r3
 80088b8:	18d3      	adds	r3, r2, r3
 80088ba:	950d      	str	r5, [sp, #52]	; 0x34
 80088bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80088be:	2500      	movs	r5, #0
 80088c0:	e7f0      	b.n	80088a4 <_dtoa_r+0x888>
 80088c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80088c4:	e7b7      	b.n	8008836 <_dtoa_r+0x81a>
 80088c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80088c8:	2500      	movs	r5, #0
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	ddca      	ble.n	8008864 <_dtoa_r+0x848>
 80088ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80088d0:	2001      	movs	r0, #1
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d008      	beq.n	80088e8 <_dtoa_r+0x8cc>
 80088d6:	6933      	ldr	r3, [r6, #16]
 80088d8:	3303      	adds	r3, #3
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	18f3      	adds	r3, r6, r3
 80088de:	6858      	ldr	r0, [r3, #4]
 80088e0:	f000 fb5e 	bl	8008fa0 <__hi0bits>
 80088e4:	2320      	movs	r3, #32
 80088e6:	1a18      	subs	r0, r3, r0
 80088e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088ea:	1818      	adds	r0, r3, r0
 80088ec:	0002      	movs	r2, r0
 80088ee:	231f      	movs	r3, #31
 80088f0:	401a      	ands	r2, r3
 80088f2:	4218      	tst	r0, r3
 80088f4:	d047      	beq.n	8008986 <_dtoa_r+0x96a>
 80088f6:	3301      	adds	r3, #1
 80088f8:	1a9b      	subs	r3, r3, r2
 80088fa:	2b04      	cmp	r3, #4
 80088fc:	dd3f      	ble.n	800897e <_dtoa_r+0x962>
 80088fe:	231c      	movs	r3, #28
 8008900:	1a9b      	subs	r3, r3, r2
 8008902:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008904:	18e4      	adds	r4, r4, r3
 8008906:	18d2      	adds	r2, r2, r3
 8008908:	920a      	str	r2, [sp, #40]	; 0x28
 800890a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800890c:	18d3      	adds	r3, r2, r3
 800890e:	930c      	str	r3, [sp, #48]	; 0x30
 8008910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008912:	2b00      	cmp	r3, #0
 8008914:	dd05      	ble.n	8008922 <_dtoa_r+0x906>
 8008916:	001a      	movs	r2, r3
 8008918:	9905      	ldr	r1, [sp, #20]
 800891a:	9804      	ldr	r0, [sp, #16]
 800891c:	f000 fcac 	bl	8009278 <__lshift>
 8008920:	9005      	str	r0, [sp, #20]
 8008922:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008924:	2b00      	cmp	r3, #0
 8008926:	dd05      	ble.n	8008934 <_dtoa_r+0x918>
 8008928:	0031      	movs	r1, r6
 800892a:	001a      	movs	r2, r3
 800892c:	9804      	ldr	r0, [sp, #16]
 800892e:	f000 fca3 	bl	8009278 <__lshift>
 8008932:	0006      	movs	r6, r0
 8008934:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008936:	2b00      	cmp	r3, #0
 8008938:	d027      	beq.n	800898a <_dtoa_r+0x96e>
 800893a:	0031      	movs	r1, r6
 800893c:	9805      	ldr	r0, [sp, #20]
 800893e:	f000 fd09 	bl	8009354 <__mcmp>
 8008942:	2800      	cmp	r0, #0
 8008944:	da21      	bge.n	800898a <_dtoa_r+0x96e>
 8008946:	9b03      	ldr	r3, [sp, #12]
 8008948:	220a      	movs	r2, #10
 800894a:	3b01      	subs	r3, #1
 800894c:	9303      	str	r3, [sp, #12]
 800894e:	9905      	ldr	r1, [sp, #20]
 8008950:	2300      	movs	r3, #0
 8008952:	9804      	ldr	r0, [sp, #16]
 8008954:	f000 fae0 	bl	8008f18 <__multadd>
 8008958:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800895a:	9005      	str	r0, [sp, #20]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d100      	bne.n	8008962 <_dtoa_r+0x946>
 8008960:	e15d      	b.n	8008c1e <_dtoa_r+0xc02>
 8008962:	2300      	movs	r3, #0
 8008964:	0039      	movs	r1, r7
 8008966:	220a      	movs	r2, #10
 8008968:	9804      	ldr	r0, [sp, #16]
 800896a:	f000 fad5 	bl	8008f18 <__multadd>
 800896e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008970:	0007      	movs	r7, r0
 8008972:	2b00      	cmp	r3, #0
 8008974:	dc49      	bgt.n	8008a0a <_dtoa_r+0x9ee>
 8008976:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008978:	2b02      	cmp	r3, #2
 800897a:	dc0e      	bgt.n	800899a <_dtoa_r+0x97e>
 800897c:	e045      	b.n	8008a0a <_dtoa_r+0x9ee>
 800897e:	2b04      	cmp	r3, #4
 8008980:	d0c6      	beq.n	8008910 <_dtoa_r+0x8f4>
 8008982:	331c      	adds	r3, #28
 8008984:	e7bd      	b.n	8008902 <_dtoa_r+0x8e6>
 8008986:	0013      	movs	r3, r2
 8008988:	e7fb      	b.n	8008982 <_dtoa_r+0x966>
 800898a:	9b07      	ldr	r3, [sp, #28]
 800898c:	2b00      	cmp	r3, #0
 800898e:	dc36      	bgt.n	80089fe <_dtoa_r+0x9e2>
 8008990:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008992:	2b02      	cmp	r3, #2
 8008994:	dd33      	ble.n	80089fe <_dtoa_r+0x9e2>
 8008996:	9b07      	ldr	r3, [sp, #28]
 8008998:	930b      	str	r3, [sp, #44]	; 0x2c
 800899a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800899c:	2b00      	cmp	r3, #0
 800899e:	d10c      	bne.n	80089ba <_dtoa_r+0x99e>
 80089a0:	0031      	movs	r1, r6
 80089a2:	2205      	movs	r2, #5
 80089a4:	9804      	ldr	r0, [sp, #16]
 80089a6:	f000 fab7 	bl	8008f18 <__multadd>
 80089aa:	0006      	movs	r6, r0
 80089ac:	0001      	movs	r1, r0
 80089ae:	9805      	ldr	r0, [sp, #20]
 80089b0:	f000 fcd0 	bl	8009354 <__mcmp>
 80089b4:	2800      	cmp	r0, #0
 80089b6:	dd00      	ble.n	80089ba <_dtoa_r+0x99e>
 80089b8:	e59f      	b.n	80084fa <_dtoa_r+0x4de>
 80089ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80089bc:	43db      	mvns	r3, r3
 80089be:	9303      	str	r3, [sp, #12]
 80089c0:	9b06      	ldr	r3, [sp, #24]
 80089c2:	9308      	str	r3, [sp, #32]
 80089c4:	2500      	movs	r5, #0
 80089c6:	0031      	movs	r1, r6
 80089c8:	9804      	ldr	r0, [sp, #16]
 80089ca:	f000 fa81 	bl	8008ed0 <_Bfree>
 80089ce:	2f00      	cmp	r7, #0
 80089d0:	d100      	bne.n	80089d4 <_dtoa_r+0x9b8>
 80089d2:	e6a3      	b.n	800871c <_dtoa_r+0x700>
 80089d4:	2d00      	cmp	r5, #0
 80089d6:	d005      	beq.n	80089e4 <_dtoa_r+0x9c8>
 80089d8:	42bd      	cmp	r5, r7
 80089da:	d003      	beq.n	80089e4 <_dtoa_r+0x9c8>
 80089dc:	0029      	movs	r1, r5
 80089de:	9804      	ldr	r0, [sp, #16]
 80089e0:	f000 fa76 	bl	8008ed0 <_Bfree>
 80089e4:	0039      	movs	r1, r7
 80089e6:	9804      	ldr	r0, [sp, #16]
 80089e8:	f000 fa72 	bl	8008ed0 <_Bfree>
 80089ec:	e696      	b.n	800871c <_dtoa_r+0x700>
 80089ee:	2600      	movs	r6, #0
 80089f0:	0037      	movs	r7, r6
 80089f2:	e7e2      	b.n	80089ba <_dtoa_r+0x99e>
 80089f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089f6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80089f8:	9303      	str	r3, [sp, #12]
 80089fa:	0037      	movs	r7, r6
 80089fc:	e57d      	b.n	80084fa <_dtoa_r+0x4de>
 80089fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d100      	bne.n	8008a06 <_dtoa_r+0x9ea>
 8008a04:	e0c3      	b.n	8008b8e <_dtoa_r+0xb72>
 8008a06:	9b07      	ldr	r3, [sp, #28]
 8008a08:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a0a:	2c00      	cmp	r4, #0
 8008a0c:	dd05      	ble.n	8008a1a <_dtoa_r+0x9fe>
 8008a0e:	0039      	movs	r1, r7
 8008a10:	0022      	movs	r2, r4
 8008a12:	9804      	ldr	r0, [sp, #16]
 8008a14:	f000 fc30 	bl	8009278 <__lshift>
 8008a18:	0007      	movs	r7, r0
 8008a1a:	0038      	movs	r0, r7
 8008a1c:	2d00      	cmp	r5, #0
 8008a1e:	d024      	beq.n	8008a6a <_dtoa_r+0xa4e>
 8008a20:	6879      	ldr	r1, [r7, #4]
 8008a22:	9804      	ldr	r0, [sp, #16]
 8008a24:	f000 fa10 	bl	8008e48 <_Balloc>
 8008a28:	1e04      	subs	r4, r0, #0
 8008a2a:	d111      	bne.n	8008a50 <_dtoa_r+0xa34>
 8008a2c:	0022      	movs	r2, r4
 8008a2e:	4b05      	ldr	r3, [pc, #20]	; (8008a44 <_dtoa_r+0xa28>)
 8008a30:	4805      	ldr	r0, [pc, #20]	; (8008a48 <_dtoa_r+0xa2c>)
 8008a32:	4906      	ldr	r1, [pc, #24]	; (8008a4c <_dtoa_r+0xa30>)
 8008a34:	f7ff fb07 	bl	8008046 <_dtoa_r+0x2a>
 8008a38:	40240000 	.word	0x40240000
 8008a3c:	00000433 	.word	0x00000433
 8008a40:	7ff00000 	.word	0x7ff00000
 8008a44:	0800aaa4 	.word	0x0800aaa4
 8008a48:	0800aa4c 	.word	0x0800aa4c
 8008a4c:	000002ef 	.word	0x000002ef
 8008a50:	0039      	movs	r1, r7
 8008a52:	693a      	ldr	r2, [r7, #16]
 8008a54:	310c      	adds	r1, #12
 8008a56:	3202      	adds	r2, #2
 8008a58:	0092      	lsls	r2, r2, #2
 8008a5a:	300c      	adds	r0, #12
 8008a5c:	f000 ffca 	bl	80099f4 <memcpy>
 8008a60:	2201      	movs	r2, #1
 8008a62:	0021      	movs	r1, r4
 8008a64:	9804      	ldr	r0, [sp, #16]
 8008a66:	f000 fc07 	bl	8009278 <__lshift>
 8008a6a:	9b06      	ldr	r3, [sp, #24]
 8008a6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008a6e:	9307      	str	r3, [sp, #28]
 8008a70:	3b01      	subs	r3, #1
 8008a72:	189b      	adds	r3, r3, r2
 8008a74:	2201      	movs	r2, #1
 8008a76:	003d      	movs	r5, r7
 8008a78:	0007      	movs	r7, r0
 8008a7a:	930e      	str	r3, [sp, #56]	; 0x38
 8008a7c:	9b08      	ldr	r3, [sp, #32]
 8008a7e:	4013      	ands	r3, r2
 8008a80:	930d      	str	r3, [sp, #52]	; 0x34
 8008a82:	0031      	movs	r1, r6
 8008a84:	9805      	ldr	r0, [sp, #20]
 8008a86:	f7ff fa39 	bl	8007efc <quorem>
 8008a8a:	0029      	movs	r1, r5
 8008a8c:	0004      	movs	r4, r0
 8008a8e:	900b      	str	r0, [sp, #44]	; 0x2c
 8008a90:	9805      	ldr	r0, [sp, #20]
 8008a92:	f000 fc5f 	bl	8009354 <__mcmp>
 8008a96:	003a      	movs	r2, r7
 8008a98:	900c      	str	r0, [sp, #48]	; 0x30
 8008a9a:	0031      	movs	r1, r6
 8008a9c:	9804      	ldr	r0, [sp, #16]
 8008a9e:	f000 fc75 	bl	800938c <__mdiff>
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	68c3      	ldr	r3, [r0, #12]
 8008aa6:	3430      	adds	r4, #48	; 0x30
 8008aa8:	9008      	str	r0, [sp, #32]
 8008aaa:	920a      	str	r2, [sp, #40]	; 0x28
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d104      	bne.n	8008aba <_dtoa_r+0xa9e>
 8008ab0:	0001      	movs	r1, r0
 8008ab2:	9805      	ldr	r0, [sp, #20]
 8008ab4:	f000 fc4e 	bl	8009354 <__mcmp>
 8008ab8:	900a      	str	r0, [sp, #40]	; 0x28
 8008aba:	9908      	ldr	r1, [sp, #32]
 8008abc:	9804      	ldr	r0, [sp, #16]
 8008abe:	f000 fa07 	bl	8008ed0 <_Bfree>
 8008ac2:	9b07      	ldr	r3, [sp, #28]
 8008ac4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	9308      	str	r3, [sp, #32]
 8008aca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008acc:	4313      	orrs	r3, r2
 8008ace:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	d109      	bne.n	8008ae8 <_dtoa_r+0xacc>
 8008ad4:	2c39      	cmp	r4, #57	; 0x39
 8008ad6:	d022      	beq.n	8008b1e <_dtoa_r+0xb02>
 8008ad8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	dd01      	ble.n	8008ae2 <_dtoa_r+0xac6>
 8008ade:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008ae0:	3431      	adds	r4, #49	; 0x31
 8008ae2:	9b07      	ldr	r3, [sp, #28]
 8008ae4:	701c      	strb	r4, [r3, #0]
 8008ae6:	e76e      	b.n	80089c6 <_dtoa_r+0x9aa>
 8008ae8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	db04      	blt.n	8008af8 <_dtoa_r+0xadc>
 8008aee:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008af0:	4313      	orrs	r3, r2
 8008af2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008af4:	4313      	orrs	r3, r2
 8008af6:	d11e      	bne.n	8008b36 <_dtoa_r+0xb1a>
 8008af8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	ddf1      	ble.n	8008ae2 <_dtoa_r+0xac6>
 8008afe:	9905      	ldr	r1, [sp, #20]
 8008b00:	2201      	movs	r2, #1
 8008b02:	9804      	ldr	r0, [sp, #16]
 8008b04:	f000 fbb8 	bl	8009278 <__lshift>
 8008b08:	0031      	movs	r1, r6
 8008b0a:	9005      	str	r0, [sp, #20]
 8008b0c:	f000 fc22 	bl	8009354 <__mcmp>
 8008b10:	2800      	cmp	r0, #0
 8008b12:	dc02      	bgt.n	8008b1a <_dtoa_r+0xafe>
 8008b14:	d1e5      	bne.n	8008ae2 <_dtoa_r+0xac6>
 8008b16:	07e3      	lsls	r3, r4, #31
 8008b18:	d5e3      	bpl.n	8008ae2 <_dtoa_r+0xac6>
 8008b1a:	2c39      	cmp	r4, #57	; 0x39
 8008b1c:	d1df      	bne.n	8008ade <_dtoa_r+0xac2>
 8008b1e:	2339      	movs	r3, #57	; 0x39
 8008b20:	9a07      	ldr	r2, [sp, #28]
 8008b22:	7013      	strb	r3, [r2, #0]
 8008b24:	9b08      	ldr	r3, [sp, #32]
 8008b26:	9308      	str	r3, [sp, #32]
 8008b28:	3b01      	subs	r3, #1
 8008b2a:	781a      	ldrb	r2, [r3, #0]
 8008b2c:	2a39      	cmp	r2, #57	; 0x39
 8008b2e:	d063      	beq.n	8008bf8 <_dtoa_r+0xbdc>
 8008b30:	3201      	adds	r2, #1
 8008b32:	701a      	strb	r2, [r3, #0]
 8008b34:	e747      	b.n	80089c6 <_dtoa_r+0x9aa>
 8008b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	dd03      	ble.n	8008b44 <_dtoa_r+0xb28>
 8008b3c:	2c39      	cmp	r4, #57	; 0x39
 8008b3e:	d0ee      	beq.n	8008b1e <_dtoa_r+0xb02>
 8008b40:	3401      	adds	r4, #1
 8008b42:	e7ce      	b.n	8008ae2 <_dtoa_r+0xac6>
 8008b44:	9b07      	ldr	r3, [sp, #28]
 8008b46:	9a07      	ldr	r2, [sp, #28]
 8008b48:	701c      	strb	r4, [r3, #0]
 8008b4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d03e      	beq.n	8008bce <_dtoa_r+0xbb2>
 8008b50:	2300      	movs	r3, #0
 8008b52:	220a      	movs	r2, #10
 8008b54:	9905      	ldr	r1, [sp, #20]
 8008b56:	9804      	ldr	r0, [sp, #16]
 8008b58:	f000 f9de 	bl	8008f18 <__multadd>
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	9005      	str	r0, [sp, #20]
 8008b60:	220a      	movs	r2, #10
 8008b62:	0029      	movs	r1, r5
 8008b64:	9804      	ldr	r0, [sp, #16]
 8008b66:	42bd      	cmp	r5, r7
 8008b68:	d106      	bne.n	8008b78 <_dtoa_r+0xb5c>
 8008b6a:	f000 f9d5 	bl	8008f18 <__multadd>
 8008b6e:	0005      	movs	r5, r0
 8008b70:	0007      	movs	r7, r0
 8008b72:	9b08      	ldr	r3, [sp, #32]
 8008b74:	9307      	str	r3, [sp, #28]
 8008b76:	e784      	b.n	8008a82 <_dtoa_r+0xa66>
 8008b78:	f000 f9ce 	bl	8008f18 <__multadd>
 8008b7c:	0039      	movs	r1, r7
 8008b7e:	0005      	movs	r5, r0
 8008b80:	2300      	movs	r3, #0
 8008b82:	220a      	movs	r2, #10
 8008b84:	9804      	ldr	r0, [sp, #16]
 8008b86:	f000 f9c7 	bl	8008f18 <__multadd>
 8008b8a:	0007      	movs	r7, r0
 8008b8c:	e7f1      	b.n	8008b72 <_dtoa_r+0xb56>
 8008b8e:	9b07      	ldr	r3, [sp, #28]
 8008b90:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b92:	2500      	movs	r5, #0
 8008b94:	0031      	movs	r1, r6
 8008b96:	9805      	ldr	r0, [sp, #20]
 8008b98:	f7ff f9b0 	bl	8007efc <quorem>
 8008b9c:	9b06      	ldr	r3, [sp, #24]
 8008b9e:	3030      	adds	r0, #48	; 0x30
 8008ba0:	5558      	strb	r0, [r3, r5]
 8008ba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ba4:	3501      	adds	r5, #1
 8008ba6:	0004      	movs	r4, r0
 8008ba8:	42ab      	cmp	r3, r5
 8008baa:	dd07      	ble.n	8008bbc <_dtoa_r+0xba0>
 8008bac:	2300      	movs	r3, #0
 8008bae:	220a      	movs	r2, #10
 8008bb0:	9905      	ldr	r1, [sp, #20]
 8008bb2:	9804      	ldr	r0, [sp, #16]
 8008bb4:	f000 f9b0 	bl	8008f18 <__multadd>
 8008bb8:	9005      	str	r0, [sp, #20]
 8008bba:	e7eb      	b.n	8008b94 <_dtoa_r+0xb78>
 8008bbc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	2a00      	cmp	r2, #0
 8008bc2:	dd00      	ble.n	8008bc6 <_dtoa_r+0xbaa>
 8008bc4:	0013      	movs	r3, r2
 8008bc6:	2500      	movs	r5, #0
 8008bc8:	9a06      	ldr	r2, [sp, #24]
 8008bca:	18d3      	adds	r3, r2, r3
 8008bcc:	9308      	str	r3, [sp, #32]
 8008bce:	9905      	ldr	r1, [sp, #20]
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	9804      	ldr	r0, [sp, #16]
 8008bd4:	f000 fb50 	bl	8009278 <__lshift>
 8008bd8:	0031      	movs	r1, r6
 8008bda:	9005      	str	r0, [sp, #20]
 8008bdc:	f000 fbba 	bl	8009354 <__mcmp>
 8008be0:	2800      	cmp	r0, #0
 8008be2:	dc9f      	bgt.n	8008b24 <_dtoa_r+0xb08>
 8008be4:	d101      	bne.n	8008bea <_dtoa_r+0xbce>
 8008be6:	07e4      	lsls	r4, r4, #31
 8008be8:	d49c      	bmi.n	8008b24 <_dtoa_r+0xb08>
 8008bea:	9b08      	ldr	r3, [sp, #32]
 8008bec:	9308      	str	r3, [sp, #32]
 8008bee:	3b01      	subs	r3, #1
 8008bf0:	781a      	ldrb	r2, [r3, #0]
 8008bf2:	2a30      	cmp	r2, #48	; 0x30
 8008bf4:	d0fa      	beq.n	8008bec <_dtoa_r+0xbd0>
 8008bf6:	e6e6      	b.n	80089c6 <_dtoa_r+0x9aa>
 8008bf8:	9a06      	ldr	r2, [sp, #24]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d193      	bne.n	8008b26 <_dtoa_r+0xb0a>
 8008bfe:	9b03      	ldr	r3, [sp, #12]
 8008c00:	3301      	adds	r3, #1
 8008c02:	9303      	str	r3, [sp, #12]
 8008c04:	2331      	movs	r3, #49	; 0x31
 8008c06:	7013      	strb	r3, [r2, #0]
 8008c08:	e6dd      	b.n	80089c6 <_dtoa_r+0x9aa>
 8008c0a:	4b09      	ldr	r3, [pc, #36]	; (8008c30 <_dtoa_r+0xc14>)
 8008c0c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008c0e:	9306      	str	r3, [sp, #24]
 8008c10:	4b08      	ldr	r3, [pc, #32]	; (8008c34 <_dtoa_r+0xc18>)
 8008c12:	2a00      	cmp	r2, #0
 8008c14:	d001      	beq.n	8008c1a <_dtoa_r+0xbfe>
 8008c16:	f7ff fa49 	bl	80080ac <_dtoa_r+0x90>
 8008c1a:	f7ff fa49 	bl	80080b0 <_dtoa_r+0x94>
 8008c1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	dcb6      	bgt.n	8008b92 <_dtoa_r+0xb76>
 8008c24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c26:	2b02      	cmp	r3, #2
 8008c28:	dd00      	ble.n	8008c2c <_dtoa_r+0xc10>
 8008c2a:	e6b6      	b.n	800899a <_dtoa_r+0x97e>
 8008c2c:	e7b1      	b.n	8008b92 <_dtoa_r+0xb76>
 8008c2e:	46c0      	nop			; (mov r8, r8)
 8008c30:	0800aa28 	.word	0x0800aa28
 8008c34:	0800aa30 	.word	0x0800aa30

08008c38 <_free_r>:
 8008c38:	b570      	push	{r4, r5, r6, lr}
 8008c3a:	0005      	movs	r5, r0
 8008c3c:	2900      	cmp	r1, #0
 8008c3e:	d010      	beq.n	8008c62 <_free_r+0x2a>
 8008c40:	1f0c      	subs	r4, r1, #4
 8008c42:	6823      	ldr	r3, [r4, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	da00      	bge.n	8008c4a <_free_r+0x12>
 8008c48:	18e4      	adds	r4, r4, r3
 8008c4a:	0028      	movs	r0, r5
 8008c4c:	f000 f8ec 	bl	8008e28 <__malloc_lock>
 8008c50:	4a1d      	ldr	r2, [pc, #116]	; (8008cc8 <_free_r+0x90>)
 8008c52:	6813      	ldr	r3, [r2, #0]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d105      	bne.n	8008c64 <_free_r+0x2c>
 8008c58:	6063      	str	r3, [r4, #4]
 8008c5a:	6014      	str	r4, [r2, #0]
 8008c5c:	0028      	movs	r0, r5
 8008c5e:	f000 f8eb 	bl	8008e38 <__malloc_unlock>
 8008c62:	bd70      	pop	{r4, r5, r6, pc}
 8008c64:	42a3      	cmp	r3, r4
 8008c66:	d908      	bls.n	8008c7a <_free_r+0x42>
 8008c68:	6820      	ldr	r0, [r4, #0]
 8008c6a:	1821      	adds	r1, r4, r0
 8008c6c:	428b      	cmp	r3, r1
 8008c6e:	d1f3      	bne.n	8008c58 <_free_r+0x20>
 8008c70:	6819      	ldr	r1, [r3, #0]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	1809      	adds	r1, r1, r0
 8008c76:	6021      	str	r1, [r4, #0]
 8008c78:	e7ee      	b.n	8008c58 <_free_r+0x20>
 8008c7a:	001a      	movs	r2, r3
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d001      	beq.n	8008c86 <_free_r+0x4e>
 8008c82:	42a3      	cmp	r3, r4
 8008c84:	d9f9      	bls.n	8008c7a <_free_r+0x42>
 8008c86:	6811      	ldr	r1, [r2, #0]
 8008c88:	1850      	adds	r0, r2, r1
 8008c8a:	42a0      	cmp	r0, r4
 8008c8c:	d10b      	bne.n	8008ca6 <_free_r+0x6e>
 8008c8e:	6820      	ldr	r0, [r4, #0]
 8008c90:	1809      	adds	r1, r1, r0
 8008c92:	1850      	adds	r0, r2, r1
 8008c94:	6011      	str	r1, [r2, #0]
 8008c96:	4283      	cmp	r3, r0
 8008c98:	d1e0      	bne.n	8008c5c <_free_r+0x24>
 8008c9a:	6818      	ldr	r0, [r3, #0]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	1841      	adds	r1, r0, r1
 8008ca0:	6011      	str	r1, [r2, #0]
 8008ca2:	6053      	str	r3, [r2, #4]
 8008ca4:	e7da      	b.n	8008c5c <_free_r+0x24>
 8008ca6:	42a0      	cmp	r0, r4
 8008ca8:	d902      	bls.n	8008cb0 <_free_r+0x78>
 8008caa:	230c      	movs	r3, #12
 8008cac:	602b      	str	r3, [r5, #0]
 8008cae:	e7d5      	b.n	8008c5c <_free_r+0x24>
 8008cb0:	6820      	ldr	r0, [r4, #0]
 8008cb2:	1821      	adds	r1, r4, r0
 8008cb4:	428b      	cmp	r3, r1
 8008cb6:	d103      	bne.n	8008cc0 <_free_r+0x88>
 8008cb8:	6819      	ldr	r1, [r3, #0]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	1809      	adds	r1, r1, r0
 8008cbe:	6021      	str	r1, [r4, #0]
 8008cc0:	6063      	str	r3, [r4, #4]
 8008cc2:	6054      	str	r4, [r2, #4]
 8008cc4:	e7ca      	b.n	8008c5c <_free_r+0x24>
 8008cc6:	46c0      	nop			; (mov r8, r8)
 8008cc8:	20000518 	.word	0x20000518

08008ccc <malloc>:
 8008ccc:	b510      	push	{r4, lr}
 8008cce:	4b03      	ldr	r3, [pc, #12]	; (8008cdc <malloc+0x10>)
 8008cd0:	0001      	movs	r1, r0
 8008cd2:	6818      	ldr	r0, [r3, #0]
 8008cd4:	f000 f826 	bl	8008d24 <_malloc_r>
 8008cd8:	bd10      	pop	{r4, pc}
 8008cda:	46c0      	nop			; (mov r8, r8)
 8008cdc:	200000f4 	.word	0x200000f4

08008ce0 <sbrk_aligned>:
 8008ce0:	b570      	push	{r4, r5, r6, lr}
 8008ce2:	4e0f      	ldr	r6, [pc, #60]	; (8008d20 <sbrk_aligned+0x40>)
 8008ce4:	000d      	movs	r5, r1
 8008ce6:	6831      	ldr	r1, [r6, #0]
 8008ce8:	0004      	movs	r4, r0
 8008cea:	2900      	cmp	r1, #0
 8008cec:	d102      	bne.n	8008cf4 <sbrk_aligned+0x14>
 8008cee:	f000 fe6f 	bl	80099d0 <_sbrk_r>
 8008cf2:	6030      	str	r0, [r6, #0]
 8008cf4:	0029      	movs	r1, r5
 8008cf6:	0020      	movs	r0, r4
 8008cf8:	f000 fe6a 	bl	80099d0 <_sbrk_r>
 8008cfc:	1c43      	adds	r3, r0, #1
 8008cfe:	d00a      	beq.n	8008d16 <sbrk_aligned+0x36>
 8008d00:	2303      	movs	r3, #3
 8008d02:	1cc5      	adds	r5, r0, #3
 8008d04:	439d      	bics	r5, r3
 8008d06:	42a8      	cmp	r0, r5
 8008d08:	d007      	beq.n	8008d1a <sbrk_aligned+0x3a>
 8008d0a:	1a29      	subs	r1, r5, r0
 8008d0c:	0020      	movs	r0, r4
 8008d0e:	f000 fe5f 	bl	80099d0 <_sbrk_r>
 8008d12:	3001      	adds	r0, #1
 8008d14:	d101      	bne.n	8008d1a <sbrk_aligned+0x3a>
 8008d16:	2501      	movs	r5, #1
 8008d18:	426d      	negs	r5, r5
 8008d1a:	0028      	movs	r0, r5
 8008d1c:	bd70      	pop	{r4, r5, r6, pc}
 8008d1e:	46c0      	nop			; (mov r8, r8)
 8008d20:	2000051c 	.word	0x2000051c

08008d24 <_malloc_r>:
 8008d24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d26:	2203      	movs	r2, #3
 8008d28:	1ccb      	adds	r3, r1, #3
 8008d2a:	4393      	bics	r3, r2
 8008d2c:	3308      	adds	r3, #8
 8008d2e:	0006      	movs	r6, r0
 8008d30:	001f      	movs	r7, r3
 8008d32:	2b0c      	cmp	r3, #12
 8008d34:	d238      	bcs.n	8008da8 <_malloc_r+0x84>
 8008d36:	270c      	movs	r7, #12
 8008d38:	42b9      	cmp	r1, r7
 8008d3a:	d837      	bhi.n	8008dac <_malloc_r+0x88>
 8008d3c:	0030      	movs	r0, r6
 8008d3e:	f000 f873 	bl	8008e28 <__malloc_lock>
 8008d42:	4b38      	ldr	r3, [pc, #224]	; (8008e24 <_malloc_r+0x100>)
 8008d44:	9300      	str	r3, [sp, #0]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	001c      	movs	r4, r3
 8008d4a:	2c00      	cmp	r4, #0
 8008d4c:	d133      	bne.n	8008db6 <_malloc_r+0x92>
 8008d4e:	0039      	movs	r1, r7
 8008d50:	0030      	movs	r0, r6
 8008d52:	f7ff ffc5 	bl	8008ce0 <sbrk_aligned>
 8008d56:	0004      	movs	r4, r0
 8008d58:	1c43      	adds	r3, r0, #1
 8008d5a:	d15e      	bne.n	8008e1a <_malloc_r+0xf6>
 8008d5c:	9b00      	ldr	r3, [sp, #0]
 8008d5e:	681c      	ldr	r4, [r3, #0]
 8008d60:	0025      	movs	r5, r4
 8008d62:	2d00      	cmp	r5, #0
 8008d64:	d14e      	bne.n	8008e04 <_malloc_r+0xe0>
 8008d66:	2c00      	cmp	r4, #0
 8008d68:	d051      	beq.n	8008e0e <_malloc_r+0xea>
 8008d6a:	6823      	ldr	r3, [r4, #0]
 8008d6c:	0029      	movs	r1, r5
 8008d6e:	18e3      	adds	r3, r4, r3
 8008d70:	0030      	movs	r0, r6
 8008d72:	9301      	str	r3, [sp, #4]
 8008d74:	f000 fe2c 	bl	80099d0 <_sbrk_r>
 8008d78:	9b01      	ldr	r3, [sp, #4]
 8008d7a:	4283      	cmp	r3, r0
 8008d7c:	d147      	bne.n	8008e0e <_malloc_r+0xea>
 8008d7e:	6823      	ldr	r3, [r4, #0]
 8008d80:	0030      	movs	r0, r6
 8008d82:	1aff      	subs	r7, r7, r3
 8008d84:	0039      	movs	r1, r7
 8008d86:	f7ff ffab 	bl	8008ce0 <sbrk_aligned>
 8008d8a:	3001      	adds	r0, #1
 8008d8c:	d03f      	beq.n	8008e0e <_malloc_r+0xea>
 8008d8e:	6823      	ldr	r3, [r4, #0]
 8008d90:	19db      	adds	r3, r3, r7
 8008d92:	6023      	str	r3, [r4, #0]
 8008d94:	9b00      	ldr	r3, [sp, #0]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d040      	beq.n	8008e1e <_malloc_r+0xfa>
 8008d9c:	685a      	ldr	r2, [r3, #4]
 8008d9e:	42a2      	cmp	r2, r4
 8008da0:	d133      	bne.n	8008e0a <_malloc_r+0xe6>
 8008da2:	2200      	movs	r2, #0
 8008da4:	605a      	str	r2, [r3, #4]
 8008da6:	e014      	b.n	8008dd2 <_malloc_r+0xae>
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	dac5      	bge.n	8008d38 <_malloc_r+0x14>
 8008dac:	230c      	movs	r3, #12
 8008dae:	2500      	movs	r5, #0
 8008db0:	6033      	str	r3, [r6, #0]
 8008db2:	0028      	movs	r0, r5
 8008db4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008db6:	6821      	ldr	r1, [r4, #0]
 8008db8:	1bc9      	subs	r1, r1, r7
 8008dba:	d420      	bmi.n	8008dfe <_malloc_r+0xda>
 8008dbc:	290b      	cmp	r1, #11
 8008dbe:	d918      	bls.n	8008df2 <_malloc_r+0xce>
 8008dc0:	19e2      	adds	r2, r4, r7
 8008dc2:	6027      	str	r7, [r4, #0]
 8008dc4:	42a3      	cmp	r3, r4
 8008dc6:	d112      	bne.n	8008dee <_malloc_r+0xca>
 8008dc8:	9b00      	ldr	r3, [sp, #0]
 8008dca:	601a      	str	r2, [r3, #0]
 8008dcc:	6863      	ldr	r3, [r4, #4]
 8008dce:	6011      	str	r1, [r2, #0]
 8008dd0:	6053      	str	r3, [r2, #4]
 8008dd2:	0030      	movs	r0, r6
 8008dd4:	0025      	movs	r5, r4
 8008dd6:	f000 f82f 	bl	8008e38 <__malloc_unlock>
 8008dda:	2207      	movs	r2, #7
 8008ddc:	350b      	adds	r5, #11
 8008dde:	1d23      	adds	r3, r4, #4
 8008de0:	4395      	bics	r5, r2
 8008de2:	1aea      	subs	r2, r5, r3
 8008de4:	429d      	cmp	r5, r3
 8008de6:	d0e4      	beq.n	8008db2 <_malloc_r+0x8e>
 8008de8:	1b5b      	subs	r3, r3, r5
 8008dea:	50a3      	str	r3, [r4, r2]
 8008dec:	e7e1      	b.n	8008db2 <_malloc_r+0x8e>
 8008dee:	605a      	str	r2, [r3, #4]
 8008df0:	e7ec      	b.n	8008dcc <_malloc_r+0xa8>
 8008df2:	6862      	ldr	r2, [r4, #4]
 8008df4:	42a3      	cmp	r3, r4
 8008df6:	d1d5      	bne.n	8008da4 <_malloc_r+0x80>
 8008df8:	9b00      	ldr	r3, [sp, #0]
 8008dfa:	601a      	str	r2, [r3, #0]
 8008dfc:	e7e9      	b.n	8008dd2 <_malloc_r+0xae>
 8008dfe:	0023      	movs	r3, r4
 8008e00:	6864      	ldr	r4, [r4, #4]
 8008e02:	e7a2      	b.n	8008d4a <_malloc_r+0x26>
 8008e04:	002c      	movs	r4, r5
 8008e06:	686d      	ldr	r5, [r5, #4]
 8008e08:	e7ab      	b.n	8008d62 <_malloc_r+0x3e>
 8008e0a:	0013      	movs	r3, r2
 8008e0c:	e7c4      	b.n	8008d98 <_malloc_r+0x74>
 8008e0e:	230c      	movs	r3, #12
 8008e10:	0030      	movs	r0, r6
 8008e12:	6033      	str	r3, [r6, #0]
 8008e14:	f000 f810 	bl	8008e38 <__malloc_unlock>
 8008e18:	e7cb      	b.n	8008db2 <_malloc_r+0x8e>
 8008e1a:	6027      	str	r7, [r4, #0]
 8008e1c:	e7d9      	b.n	8008dd2 <_malloc_r+0xae>
 8008e1e:	605b      	str	r3, [r3, #4]
 8008e20:	deff      	udf	#255	; 0xff
 8008e22:	46c0      	nop			; (mov r8, r8)
 8008e24:	20000518 	.word	0x20000518

08008e28 <__malloc_lock>:
 8008e28:	b510      	push	{r4, lr}
 8008e2a:	4802      	ldr	r0, [pc, #8]	; (8008e34 <__malloc_lock+0xc>)
 8008e2c:	f7ff f859 	bl	8007ee2 <__retarget_lock_acquire_recursive>
 8008e30:	bd10      	pop	{r4, pc}
 8008e32:	46c0      	nop			; (mov r8, r8)
 8008e34:	20000514 	.word	0x20000514

08008e38 <__malloc_unlock>:
 8008e38:	b510      	push	{r4, lr}
 8008e3a:	4802      	ldr	r0, [pc, #8]	; (8008e44 <__malloc_unlock+0xc>)
 8008e3c:	f7ff f852 	bl	8007ee4 <__retarget_lock_release_recursive>
 8008e40:	bd10      	pop	{r4, pc}
 8008e42:	46c0      	nop			; (mov r8, r8)
 8008e44:	20000514 	.word	0x20000514

08008e48 <_Balloc>:
 8008e48:	b570      	push	{r4, r5, r6, lr}
 8008e4a:	69c5      	ldr	r5, [r0, #28]
 8008e4c:	0006      	movs	r6, r0
 8008e4e:	000c      	movs	r4, r1
 8008e50:	2d00      	cmp	r5, #0
 8008e52:	d10e      	bne.n	8008e72 <_Balloc+0x2a>
 8008e54:	2010      	movs	r0, #16
 8008e56:	f7ff ff39 	bl	8008ccc <malloc>
 8008e5a:	1e02      	subs	r2, r0, #0
 8008e5c:	61f0      	str	r0, [r6, #28]
 8008e5e:	d104      	bne.n	8008e6a <_Balloc+0x22>
 8008e60:	216b      	movs	r1, #107	; 0x6b
 8008e62:	4b19      	ldr	r3, [pc, #100]	; (8008ec8 <_Balloc+0x80>)
 8008e64:	4819      	ldr	r0, [pc, #100]	; (8008ecc <_Balloc+0x84>)
 8008e66:	f000 fdcf 	bl	8009a08 <__assert_func>
 8008e6a:	6045      	str	r5, [r0, #4]
 8008e6c:	6085      	str	r5, [r0, #8]
 8008e6e:	6005      	str	r5, [r0, #0]
 8008e70:	60c5      	str	r5, [r0, #12]
 8008e72:	69f5      	ldr	r5, [r6, #28]
 8008e74:	68eb      	ldr	r3, [r5, #12]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d013      	beq.n	8008ea2 <_Balloc+0x5a>
 8008e7a:	69f3      	ldr	r3, [r6, #28]
 8008e7c:	00a2      	lsls	r2, r4, #2
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	189b      	adds	r3, r3, r2
 8008e82:	6818      	ldr	r0, [r3, #0]
 8008e84:	2800      	cmp	r0, #0
 8008e86:	d118      	bne.n	8008eba <_Balloc+0x72>
 8008e88:	2101      	movs	r1, #1
 8008e8a:	000d      	movs	r5, r1
 8008e8c:	40a5      	lsls	r5, r4
 8008e8e:	1d6a      	adds	r2, r5, #5
 8008e90:	0030      	movs	r0, r6
 8008e92:	0092      	lsls	r2, r2, #2
 8008e94:	f000 fdd6 	bl	8009a44 <_calloc_r>
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	d00c      	beq.n	8008eb6 <_Balloc+0x6e>
 8008e9c:	6044      	str	r4, [r0, #4]
 8008e9e:	6085      	str	r5, [r0, #8]
 8008ea0:	e00d      	b.n	8008ebe <_Balloc+0x76>
 8008ea2:	2221      	movs	r2, #33	; 0x21
 8008ea4:	2104      	movs	r1, #4
 8008ea6:	0030      	movs	r0, r6
 8008ea8:	f000 fdcc 	bl	8009a44 <_calloc_r>
 8008eac:	69f3      	ldr	r3, [r6, #28]
 8008eae:	60e8      	str	r0, [r5, #12]
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d1e1      	bne.n	8008e7a <_Balloc+0x32>
 8008eb6:	2000      	movs	r0, #0
 8008eb8:	bd70      	pop	{r4, r5, r6, pc}
 8008eba:	6802      	ldr	r2, [r0, #0]
 8008ebc:	601a      	str	r2, [r3, #0]
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	6103      	str	r3, [r0, #16]
 8008ec2:	60c3      	str	r3, [r0, #12]
 8008ec4:	e7f8      	b.n	8008eb8 <_Balloc+0x70>
 8008ec6:	46c0      	nop			; (mov r8, r8)
 8008ec8:	0800aa35 	.word	0x0800aa35
 8008ecc:	0800aab5 	.word	0x0800aab5

08008ed0 <_Bfree>:
 8008ed0:	b570      	push	{r4, r5, r6, lr}
 8008ed2:	69c6      	ldr	r6, [r0, #28]
 8008ed4:	0005      	movs	r5, r0
 8008ed6:	000c      	movs	r4, r1
 8008ed8:	2e00      	cmp	r6, #0
 8008eda:	d10e      	bne.n	8008efa <_Bfree+0x2a>
 8008edc:	2010      	movs	r0, #16
 8008ede:	f7ff fef5 	bl	8008ccc <malloc>
 8008ee2:	1e02      	subs	r2, r0, #0
 8008ee4:	61e8      	str	r0, [r5, #28]
 8008ee6:	d104      	bne.n	8008ef2 <_Bfree+0x22>
 8008ee8:	218f      	movs	r1, #143	; 0x8f
 8008eea:	4b09      	ldr	r3, [pc, #36]	; (8008f10 <_Bfree+0x40>)
 8008eec:	4809      	ldr	r0, [pc, #36]	; (8008f14 <_Bfree+0x44>)
 8008eee:	f000 fd8b 	bl	8009a08 <__assert_func>
 8008ef2:	6046      	str	r6, [r0, #4]
 8008ef4:	6086      	str	r6, [r0, #8]
 8008ef6:	6006      	str	r6, [r0, #0]
 8008ef8:	60c6      	str	r6, [r0, #12]
 8008efa:	2c00      	cmp	r4, #0
 8008efc:	d007      	beq.n	8008f0e <_Bfree+0x3e>
 8008efe:	69eb      	ldr	r3, [r5, #28]
 8008f00:	6862      	ldr	r2, [r4, #4]
 8008f02:	68db      	ldr	r3, [r3, #12]
 8008f04:	0092      	lsls	r2, r2, #2
 8008f06:	189b      	adds	r3, r3, r2
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	6022      	str	r2, [r4, #0]
 8008f0c:	601c      	str	r4, [r3, #0]
 8008f0e:	bd70      	pop	{r4, r5, r6, pc}
 8008f10:	0800aa35 	.word	0x0800aa35
 8008f14:	0800aab5 	.word	0x0800aab5

08008f18 <__multadd>:
 8008f18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f1a:	000e      	movs	r6, r1
 8008f1c:	9001      	str	r0, [sp, #4]
 8008f1e:	000c      	movs	r4, r1
 8008f20:	001d      	movs	r5, r3
 8008f22:	2000      	movs	r0, #0
 8008f24:	690f      	ldr	r7, [r1, #16]
 8008f26:	3614      	adds	r6, #20
 8008f28:	6833      	ldr	r3, [r6, #0]
 8008f2a:	3001      	adds	r0, #1
 8008f2c:	b299      	uxth	r1, r3
 8008f2e:	4351      	muls	r1, r2
 8008f30:	0c1b      	lsrs	r3, r3, #16
 8008f32:	4353      	muls	r3, r2
 8008f34:	1949      	adds	r1, r1, r5
 8008f36:	0c0d      	lsrs	r5, r1, #16
 8008f38:	195b      	adds	r3, r3, r5
 8008f3a:	0c1d      	lsrs	r5, r3, #16
 8008f3c:	b289      	uxth	r1, r1
 8008f3e:	041b      	lsls	r3, r3, #16
 8008f40:	185b      	adds	r3, r3, r1
 8008f42:	c608      	stmia	r6!, {r3}
 8008f44:	4287      	cmp	r7, r0
 8008f46:	dcef      	bgt.n	8008f28 <__multadd+0x10>
 8008f48:	2d00      	cmp	r5, #0
 8008f4a:	d022      	beq.n	8008f92 <__multadd+0x7a>
 8008f4c:	68a3      	ldr	r3, [r4, #8]
 8008f4e:	42bb      	cmp	r3, r7
 8008f50:	dc19      	bgt.n	8008f86 <__multadd+0x6e>
 8008f52:	6861      	ldr	r1, [r4, #4]
 8008f54:	9801      	ldr	r0, [sp, #4]
 8008f56:	3101      	adds	r1, #1
 8008f58:	f7ff ff76 	bl	8008e48 <_Balloc>
 8008f5c:	1e06      	subs	r6, r0, #0
 8008f5e:	d105      	bne.n	8008f6c <__multadd+0x54>
 8008f60:	0032      	movs	r2, r6
 8008f62:	21ba      	movs	r1, #186	; 0xba
 8008f64:	4b0c      	ldr	r3, [pc, #48]	; (8008f98 <__multadd+0x80>)
 8008f66:	480d      	ldr	r0, [pc, #52]	; (8008f9c <__multadd+0x84>)
 8008f68:	f000 fd4e 	bl	8009a08 <__assert_func>
 8008f6c:	0021      	movs	r1, r4
 8008f6e:	6922      	ldr	r2, [r4, #16]
 8008f70:	310c      	adds	r1, #12
 8008f72:	3202      	adds	r2, #2
 8008f74:	0092      	lsls	r2, r2, #2
 8008f76:	300c      	adds	r0, #12
 8008f78:	f000 fd3c 	bl	80099f4 <memcpy>
 8008f7c:	0021      	movs	r1, r4
 8008f7e:	9801      	ldr	r0, [sp, #4]
 8008f80:	f7ff ffa6 	bl	8008ed0 <_Bfree>
 8008f84:	0034      	movs	r4, r6
 8008f86:	1d3b      	adds	r3, r7, #4
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	18e3      	adds	r3, r4, r3
 8008f8c:	605d      	str	r5, [r3, #4]
 8008f8e:	1c7b      	adds	r3, r7, #1
 8008f90:	6123      	str	r3, [r4, #16]
 8008f92:	0020      	movs	r0, r4
 8008f94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008f96:	46c0      	nop			; (mov r8, r8)
 8008f98:	0800aaa4 	.word	0x0800aaa4
 8008f9c:	0800aab5 	.word	0x0800aab5

08008fa0 <__hi0bits>:
 8008fa0:	0003      	movs	r3, r0
 8008fa2:	0c02      	lsrs	r2, r0, #16
 8008fa4:	2000      	movs	r0, #0
 8008fa6:	4282      	cmp	r2, r0
 8008fa8:	d101      	bne.n	8008fae <__hi0bits+0xe>
 8008faa:	041b      	lsls	r3, r3, #16
 8008fac:	3010      	adds	r0, #16
 8008fae:	0e1a      	lsrs	r2, r3, #24
 8008fb0:	d101      	bne.n	8008fb6 <__hi0bits+0x16>
 8008fb2:	3008      	adds	r0, #8
 8008fb4:	021b      	lsls	r3, r3, #8
 8008fb6:	0f1a      	lsrs	r2, r3, #28
 8008fb8:	d101      	bne.n	8008fbe <__hi0bits+0x1e>
 8008fba:	3004      	adds	r0, #4
 8008fbc:	011b      	lsls	r3, r3, #4
 8008fbe:	0f9a      	lsrs	r2, r3, #30
 8008fc0:	d101      	bne.n	8008fc6 <__hi0bits+0x26>
 8008fc2:	3002      	adds	r0, #2
 8008fc4:	009b      	lsls	r3, r3, #2
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	db03      	blt.n	8008fd2 <__hi0bits+0x32>
 8008fca:	3001      	adds	r0, #1
 8008fcc:	005b      	lsls	r3, r3, #1
 8008fce:	d400      	bmi.n	8008fd2 <__hi0bits+0x32>
 8008fd0:	2020      	movs	r0, #32
 8008fd2:	4770      	bx	lr

08008fd4 <__lo0bits>:
 8008fd4:	6803      	ldr	r3, [r0, #0]
 8008fd6:	0001      	movs	r1, r0
 8008fd8:	2207      	movs	r2, #7
 8008fda:	0018      	movs	r0, r3
 8008fdc:	4010      	ands	r0, r2
 8008fde:	4213      	tst	r3, r2
 8008fe0:	d00d      	beq.n	8008ffe <__lo0bits+0x2a>
 8008fe2:	3a06      	subs	r2, #6
 8008fe4:	2000      	movs	r0, #0
 8008fe6:	4213      	tst	r3, r2
 8008fe8:	d105      	bne.n	8008ff6 <__lo0bits+0x22>
 8008fea:	3002      	adds	r0, #2
 8008fec:	4203      	tst	r3, r0
 8008fee:	d003      	beq.n	8008ff8 <__lo0bits+0x24>
 8008ff0:	40d3      	lsrs	r3, r2
 8008ff2:	0010      	movs	r0, r2
 8008ff4:	600b      	str	r3, [r1, #0]
 8008ff6:	4770      	bx	lr
 8008ff8:	089b      	lsrs	r3, r3, #2
 8008ffa:	600b      	str	r3, [r1, #0]
 8008ffc:	e7fb      	b.n	8008ff6 <__lo0bits+0x22>
 8008ffe:	b29a      	uxth	r2, r3
 8009000:	2a00      	cmp	r2, #0
 8009002:	d101      	bne.n	8009008 <__lo0bits+0x34>
 8009004:	2010      	movs	r0, #16
 8009006:	0c1b      	lsrs	r3, r3, #16
 8009008:	b2da      	uxtb	r2, r3
 800900a:	2a00      	cmp	r2, #0
 800900c:	d101      	bne.n	8009012 <__lo0bits+0x3e>
 800900e:	3008      	adds	r0, #8
 8009010:	0a1b      	lsrs	r3, r3, #8
 8009012:	071a      	lsls	r2, r3, #28
 8009014:	d101      	bne.n	800901a <__lo0bits+0x46>
 8009016:	3004      	adds	r0, #4
 8009018:	091b      	lsrs	r3, r3, #4
 800901a:	079a      	lsls	r2, r3, #30
 800901c:	d101      	bne.n	8009022 <__lo0bits+0x4e>
 800901e:	3002      	adds	r0, #2
 8009020:	089b      	lsrs	r3, r3, #2
 8009022:	07da      	lsls	r2, r3, #31
 8009024:	d4e9      	bmi.n	8008ffa <__lo0bits+0x26>
 8009026:	3001      	adds	r0, #1
 8009028:	085b      	lsrs	r3, r3, #1
 800902a:	d1e6      	bne.n	8008ffa <__lo0bits+0x26>
 800902c:	2020      	movs	r0, #32
 800902e:	e7e2      	b.n	8008ff6 <__lo0bits+0x22>

08009030 <__i2b>:
 8009030:	b510      	push	{r4, lr}
 8009032:	000c      	movs	r4, r1
 8009034:	2101      	movs	r1, #1
 8009036:	f7ff ff07 	bl	8008e48 <_Balloc>
 800903a:	2800      	cmp	r0, #0
 800903c:	d107      	bne.n	800904e <__i2b+0x1e>
 800903e:	2146      	movs	r1, #70	; 0x46
 8009040:	4c05      	ldr	r4, [pc, #20]	; (8009058 <__i2b+0x28>)
 8009042:	0002      	movs	r2, r0
 8009044:	4b05      	ldr	r3, [pc, #20]	; (800905c <__i2b+0x2c>)
 8009046:	0020      	movs	r0, r4
 8009048:	31ff      	adds	r1, #255	; 0xff
 800904a:	f000 fcdd 	bl	8009a08 <__assert_func>
 800904e:	2301      	movs	r3, #1
 8009050:	6144      	str	r4, [r0, #20]
 8009052:	6103      	str	r3, [r0, #16]
 8009054:	bd10      	pop	{r4, pc}
 8009056:	46c0      	nop			; (mov r8, r8)
 8009058:	0800aab5 	.word	0x0800aab5
 800905c:	0800aaa4 	.word	0x0800aaa4

08009060 <__multiply>:
 8009060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009062:	0015      	movs	r5, r2
 8009064:	690a      	ldr	r2, [r1, #16]
 8009066:	692b      	ldr	r3, [r5, #16]
 8009068:	000c      	movs	r4, r1
 800906a:	b08b      	sub	sp, #44	; 0x2c
 800906c:	429a      	cmp	r2, r3
 800906e:	da01      	bge.n	8009074 <__multiply+0x14>
 8009070:	002c      	movs	r4, r5
 8009072:	000d      	movs	r5, r1
 8009074:	6927      	ldr	r7, [r4, #16]
 8009076:	692e      	ldr	r6, [r5, #16]
 8009078:	6861      	ldr	r1, [r4, #4]
 800907a:	19bb      	adds	r3, r7, r6
 800907c:	9303      	str	r3, [sp, #12]
 800907e:	68a3      	ldr	r3, [r4, #8]
 8009080:	19ba      	adds	r2, r7, r6
 8009082:	4293      	cmp	r3, r2
 8009084:	da00      	bge.n	8009088 <__multiply+0x28>
 8009086:	3101      	adds	r1, #1
 8009088:	f7ff fede 	bl	8008e48 <_Balloc>
 800908c:	9002      	str	r0, [sp, #8]
 800908e:	2800      	cmp	r0, #0
 8009090:	d106      	bne.n	80090a0 <__multiply+0x40>
 8009092:	21b1      	movs	r1, #177	; 0xb1
 8009094:	4b48      	ldr	r3, [pc, #288]	; (80091b8 <__multiply+0x158>)
 8009096:	4849      	ldr	r0, [pc, #292]	; (80091bc <__multiply+0x15c>)
 8009098:	9a02      	ldr	r2, [sp, #8]
 800909a:	0049      	lsls	r1, r1, #1
 800909c:	f000 fcb4 	bl	8009a08 <__assert_func>
 80090a0:	9b02      	ldr	r3, [sp, #8]
 80090a2:	2200      	movs	r2, #0
 80090a4:	3314      	adds	r3, #20
 80090a6:	469c      	mov	ip, r3
 80090a8:	19bb      	adds	r3, r7, r6
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	4463      	add	r3, ip
 80090ae:	9304      	str	r3, [sp, #16]
 80090b0:	4663      	mov	r3, ip
 80090b2:	9904      	ldr	r1, [sp, #16]
 80090b4:	428b      	cmp	r3, r1
 80090b6:	d32a      	bcc.n	800910e <__multiply+0xae>
 80090b8:	0023      	movs	r3, r4
 80090ba:	00bf      	lsls	r7, r7, #2
 80090bc:	3314      	adds	r3, #20
 80090be:	3514      	adds	r5, #20
 80090c0:	9308      	str	r3, [sp, #32]
 80090c2:	00b6      	lsls	r6, r6, #2
 80090c4:	19db      	adds	r3, r3, r7
 80090c6:	9305      	str	r3, [sp, #20]
 80090c8:	19ab      	adds	r3, r5, r6
 80090ca:	9309      	str	r3, [sp, #36]	; 0x24
 80090cc:	2304      	movs	r3, #4
 80090ce:	9306      	str	r3, [sp, #24]
 80090d0:	0023      	movs	r3, r4
 80090d2:	9a05      	ldr	r2, [sp, #20]
 80090d4:	3315      	adds	r3, #21
 80090d6:	9501      	str	r5, [sp, #4]
 80090d8:	429a      	cmp	r2, r3
 80090da:	d305      	bcc.n	80090e8 <__multiply+0x88>
 80090dc:	1b13      	subs	r3, r2, r4
 80090de:	3b15      	subs	r3, #21
 80090e0:	089b      	lsrs	r3, r3, #2
 80090e2:	3301      	adds	r3, #1
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	9306      	str	r3, [sp, #24]
 80090e8:	9b01      	ldr	r3, [sp, #4]
 80090ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d310      	bcc.n	8009112 <__multiply+0xb2>
 80090f0:	9b03      	ldr	r3, [sp, #12]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	dd05      	ble.n	8009102 <__multiply+0xa2>
 80090f6:	9b04      	ldr	r3, [sp, #16]
 80090f8:	3b04      	subs	r3, #4
 80090fa:	9304      	str	r3, [sp, #16]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d056      	beq.n	80091b0 <__multiply+0x150>
 8009102:	9b02      	ldr	r3, [sp, #8]
 8009104:	9a03      	ldr	r2, [sp, #12]
 8009106:	0018      	movs	r0, r3
 8009108:	611a      	str	r2, [r3, #16]
 800910a:	b00b      	add	sp, #44	; 0x2c
 800910c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800910e:	c304      	stmia	r3!, {r2}
 8009110:	e7cf      	b.n	80090b2 <__multiply+0x52>
 8009112:	9b01      	ldr	r3, [sp, #4]
 8009114:	6818      	ldr	r0, [r3, #0]
 8009116:	b280      	uxth	r0, r0
 8009118:	2800      	cmp	r0, #0
 800911a:	d01e      	beq.n	800915a <__multiply+0xfa>
 800911c:	4667      	mov	r7, ip
 800911e:	2500      	movs	r5, #0
 8009120:	9e08      	ldr	r6, [sp, #32]
 8009122:	ce02      	ldmia	r6!, {r1}
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	9307      	str	r3, [sp, #28]
 8009128:	b28b      	uxth	r3, r1
 800912a:	4343      	muls	r3, r0
 800912c:	001a      	movs	r2, r3
 800912e:	466b      	mov	r3, sp
 8009130:	8b9b      	ldrh	r3, [r3, #28]
 8009132:	18d3      	adds	r3, r2, r3
 8009134:	195b      	adds	r3, r3, r5
 8009136:	0c0d      	lsrs	r5, r1, #16
 8009138:	4345      	muls	r5, r0
 800913a:	9a07      	ldr	r2, [sp, #28]
 800913c:	0c11      	lsrs	r1, r2, #16
 800913e:	1869      	adds	r1, r5, r1
 8009140:	0c1a      	lsrs	r2, r3, #16
 8009142:	188a      	adds	r2, r1, r2
 8009144:	b29b      	uxth	r3, r3
 8009146:	0c15      	lsrs	r5, r2, #16
 8009148:	0412      	lsls	r2, r2, #16
 800914a:	431a      	orrs	r2, r3
 800914c:	9b05      	ldr	r3, [sp, #20]
 800914e:	c704      	stmia	r7!, {r2}
 8009150:	42b3      	cmp	r3, r6
 8009152:	d8e6      	bhi.n	8009122 <__multiply+0xc2>
 8009154:	4663      	mov	r3, ip
 8009156:	9a06      	ldr	r2, [sp, #24]
 8009158:	509d      	str	r5, [r3, r2]
 800915a:	9b01      	ldr	r3, [sp, #4]
 800915c:	6818      	ldr	r0, [r3, #0]
 800915e:	0c00      	lsrs	r0, r0, #16
 8009160:	d020      	beq.n	80091a4 <__multiply+0x144>
 8009162:	4663      	mov	r3, ip
 8009164:	0025      	movs	r5, r4
 8009166:	4661      	mov	r1, ip
 8009168:	2700      	movs	r7, #0
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	3514      	adds	r5, #20
 800916e:	682a      	ldr	r2, [r5, #0]
 8009170:	680e      	ldr	r6, [r1, #0]
 8009172:	b292      	uxth	r2, r2
 8009174:	4342      	muls	r2, r0
 8009176:	0c36      	lsrs	r6, r6, #16
 8009178:	1992      	adds	r2, r2, r6
 800917a:	19d2      	adds	r2, r2, r7
 800917c:	0416      	lsls	r6, r2, #16
 800917e:	b29b      	uxth	r3, r3
 8009180:	431e      	orrs	r6, r3
 8009182:	600e      	str	r6, [r1, #0]
 8009184:	cd40      	ldmia	r5!, {r6}
 8009186:	684b      	ldr	r3, [r1, #4]
 8009188:	0c36      	lsrs	r6, r6, #16
 800918a:	4346      	muls	r6, r0
 800918c:	b29b      	uxth	r3, r3
 800918e:	0c12      	lsrs	r2, r2, #16
 8009190:	18f3      	adds	r3, r6, r3
 8009192:	189b      	adds	r3, r3, r2
 8009194:	9a05      	ldr	r2, [sp, #20]
 8009196:	0c1f      	lsrs	r7, r3, #16
 8009198:	3104      	adds	r1, #4
 800919a:	42aa      	cmp	r2, r5
 800919c:	d8e7      	bhi.n	800916e <__multiply+0x10e>
 800919e:	4662      	mov	r2, ip
 80091a0:	9906      	ldr	r1, [sp, #24]
 80091a2:	5053      	str	r3, [r2, r1]
 80091a4:	9b01      	ldr	r3, [sp, #4]
 80091a6:	3304      	adds	r3, #4
 80091a8:	9301      	str	r3, [sp, #4]
 80091aa:	2304      	movs	r3, #4
 80091ac:	449c      	add	ip, r3
 80091ae:	e79b      	b.n	80090e8 <__multiply+0x88>
 80091b0:	9b03      	ldr	r3, [sp, #12]
 80091b2:	3b01      	subs	r3, #1
 80091b4:	9303      	str	r3, [sp, #12]
 80091b6:	e79b      	b.n	80090f0 <__multiply+0x90>
 80091b8:	0800aaa4 	.word	0x0800aaa4
 80091bc:	0800aab5 	.word	0x0800aab5

080091c0 <__pow5mult>:
 80091c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091c2:	2303      	movs	r3, #3
 80091c4:	0015      	movs	r5, r2
 80091c6:	0007      	movs	r7, r0
 80091c8:	000e      	movs	r6, r1
 80091ca:	401a      	ands	r2, r3
 80091cc:	421d      	tst	r5, r3
 80091ce:	d008      	beq.n	80091e2 <__pow5mult+0x22>
 80091d0:	4925      	ldr	r1, [pc, #148]	; (8009268 <__pow5mult+0xa8>)
 80091d2:	3a01      	subs	r2, #1
 80091d4:	0092      	lsls	r2, r2, #2
 80091d6:	5852      	ldr	r2, [r2, r1]
 80091d8:	2300      	movs	r3, #0
 80091da:	0031      	movs	r1, r6
 80091dc:	f7ff fe9c 	bl	8008f18 <__multadd>
 80091e0:	0006      	movs	r6, r0
 80091e2:	10ad      	asrs	r5, r5, #2
 80091e4:	d03d      	beq.n	8009262 <__pow5mult+0xa2>
 80091e6:	69fc      	ldr	r4, [r7, #28]
 80091e8:	2c00      	cmp	r4, #0
 80091ea:	d10f      	bne.n	800920c <__pow5mult+0x4c>
 80091ec:	2010      	movs	r0, #16
 80091ee:	f7ff fd6d 	bl	8008ccc <malloc>
 80091f2:	1e02      	subs	r2, r0, #0
 80091f4:	61f8      	str	r0, [r7, #28]
 80091f6:	d105      	bne.n	8009204 <__pow5mult+0x44>
 80091f8:	21b4      	movs	r1, #180	; 0xb4
 80091fa:	4b1c      	ldr	r3, [pc, #112]	; (800926c <__pow5mult+0xac>)
 80091fc:	481c      	ldr	r0, [pc, #112]	; (8009270 <__pow5mult+0xb0>)
 80091fe:	31ff      	adds	r1, #255	; 0xff
 8009200:	f000 fc02 	bl	8009a08 <__assert_func>
 8009204:	6044      	str	r4, [r0, #4]
 8009206:	6084      	str	r4, [r0, #8]
 8009208:	6004      	str	r4, [r0, #0]
 800920a:	60c4      	str	r4, [r0, #12]
 800920c:	69fb      	ldr	r3, [r7, #28]
 800920e:	689c      	ldr	r4, [r3, #8]
 8009210:	9301      	str	r3, [sp, #4]
 8009212:	2c00      	cmp	r4, #0
 8009214:	d108      	bne.n	8009228 <__pow5mult+0x68>
 8009216:	0038      	movs	r0, r7
 8009218:	4916      	ldr	r1, [pc, #88]	; (8009274 <__pow5mult+0xb4>)
 800921a:	f7ff ff09 	bl	8009030 <__i2b>
 800921e:	9b01      	ldr	r3, [sp, #4]
 8009220:	0004      	movs	r4, r0
 8009222:	6098      	str	r0, [r3, #8]
 8009224:	2300      	movs	r3, #0
 8009226:	6003      	str	r3, [r0, #0]
 8009228:	2301      	movs	r3, #1
 800922a:	421d      	tst	r5, r3
 800922c:	d00a      	beq.n	8009244 <__pow5mult+0x84>
 800922e:	0031      	movs	r1, r6
 8009230:	0022      	movs	r2, r4
 8009232:	0038      	movs	r0, r7
 8009234:	f7ff ff14 	bl	8009060 <__multiply>
 8009238:	0031      	movs	r1, r6
 800923a:	9001      	str	r0, [sp, #4]
 800923c:	0038      	movs	r0, r7
 800923e:	f7ff fe47 	bl	8008ed0 <_Bfree>
 8009242:	9e01      	ldr	r6, [sp, #4]
 8009244:	106d      	asrs	r5, r5, #1
 8009246:	d00c      	beq.n	8009262 <__pow5mult+0xa2>
 8009248:	6820      	ldr	r0, [r4, #0]
 800924a:	2800      	cmp	r0, #0
 800924c:	d107      	bne.n	800925e <__pow5mult+0x9e>
 800924e:	0022      	movs	r2, r4
 8009250:	0021      	movs	r1, r4
 8009252:	0038      	movs	r0, r7
 8009254:	f7ff ff04 	bl	8009060 <__multiply>
 8009258:	2300      	movs	r3, #0
 800925a:	6020      	str	r0, [r4, #0]
 800925c:	6003      	str	r3, [r0, #0]
 800925e:	0004      	movs	r4, r0
 8009260:	e7e2      	b.n	8009228 <__pow5mult+0x68>
 8009262:	0030      	movs	r0, r6
 8009264:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009266:	46c0      	nop			; (mov r8, r8)
 8009268:	0800ac00 	.word	0x0800ac00
 800926c:	0800aa35 	.word	0x0800aa35
 8009270:	0800aab5 	.word	0x0800aab5
 8009274:	00000271 	.word	0x00000271

08009278 <__lshift>:
 8009278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800927a:	000c      	movs	r4, r1
 800927c:	0017      	movs	r7, r2
 800927e:	6923      	ldr	r3, [r4, #16]
 8009280:	1155      	asrs	r5, r2, #5
 8009282:	b087      	sub	sp, #28
 8009284:	18eb      	adds	r3, r5, r3
 8009286:	9302      	str	r3, [sp, #8]
 8009288:	3301      	adds	r3, #1
 800928a:	9301      	str	r3, [sp, #4]
 800928c:	6849      	ldr	r1, [r1, #4]
 800928e:	68a3      	ldr	r3, [r4, #8]
 8009290:	9004      	str	r0, [sp, #16]
 8009292:	9a01      	ldr	r2, [sp, #4]
 8009294:	4293      	cmp	r3, r2
 8009296:	db10      	blt.n	80092ba <__lshift+0x42>
 8009298:	9804      	ldr	r0, [sp, #16]
 800929a:	f7ff fdd5 	bl	8008e48 <_Balloc>
 800929e:	2300      	movs	r3, #0
 80092a0:	0002      	movs	r2, r0
 80092a2:	0006      	movs	r6, r0
 80092a4:	0019      	movs	r1, r3
 80092a6:	3214      	adds	r2, #20
 80092a8:	4298      	cmp	r0, r3
 80092aa:	d10c      	bne.n	80092c6 <__lshift+0x4e>
 80092ac:	31df      	adds	r1, #223	; 0xdf
 80092ae:	0032      	movs	r2, r6
 80092b0:	4b26      	ldr	r3, [pc, #152]	; (800934c <__lshift+0xd4>)
 80092b2:	4827      	ldr	r0, [pc, #156]	; (8009350 <__lshift+0xd8>)
 80092b4:	31ff      	adds	r1, #255	; 0xff
 80092b6:	f000 fba7 	bl	8009a08 <__assert_func>
 80092ba:	3101      	adds	r1, #1
 80092bc:	005b      	lsls	r3, r3, #1
 80092be:	e7e8      	b.n	8009292 <__lshift+0x1a>
 80092c0:	0098      	lsls	r0, r3, #2
 80092c2:	5011      	str	r1, [r2, r0]
 80092c4:	3301      	adds	r3, #1
 80092c6:	42ab      	cmp	r3, r5
 80092c8:	dbfa      	blt.n	80092c0 <__lshift+0x48>
 80092ca:	43eb      	mvns	r3, r5
 80092cc:	17db      	asrs	r3, r3, #31
 80092ce:	401d      	ands	r5, r3
 80092d0:	211f      	movs	r1, #31
 80092d2:	0023      	movs	r3, r4
 80092d4:	0038      	movs	r0, r7
 80092d6:	00ad      	lsls	r5, r5, #2
 80092d8:	1955      	adds	r5, r2, r5
 80092da:	6922      	ldr	r2, [r4, #16]
 80092dc:	3314      	adds	r3, #20
 80092de:	0092      	lsls	r2, r2, #2
 80092e0:	4008      	ands	r0, r1
 80092e2:	4684      	mov	ip, r0
 80092e4:	189a      	adds	r2, r3, r2
 80092e6:	420f      	tst	r7, r1
 80092e8:	d02a      	beq.n	8009340 <__lshift+0xc8>
 80092ea:	3101      	adds	r1, #1
 80092ec:	1a09      	subs	r1, r1, r0
 80092ee:	9105      	str	r1, [sp, #20]
 80092f0:	2100      	movs	r1, #0
 80092f2:	9503      	str	r5, [sp, #12]
 80092f4:	4667      	mov	r7, ip
 80092f6:	6818      	ldr	r0, [r3, #0]
 80092f8:	40b8      	lsls	r0, r7
 80092fa:	4308      	orrs	r0, r1
 80092fc:	9903      	ldr	r1, [sp, #12]
 80092fe:	c101      	stmia	r1!, {r0}
 8009300:	9103      	str	r1, [sp, #12]
 8009302:	9805      	ldr	r0, [sp, #20]
 8009304:	cb02      	ldmia	r3!, {r1}
 8009306:	40c1      	lsrs	r1, r0
 8009308:	429a      	cmp	r2, r3
 800930a:	d8f3      	bhi.n	80092f4 <__lshift+0x7c>
 800930c:	0020      	movs	r0, r4
 800930e:	3015      	adds	r0, #21
 8009310:	2304      	movs	r3, #4
 8009312:	4282      	cmp	r2, r0
 8009314:	d304      	bcc.n	8009320 <__lshift+0xa8>
 8009316:	1b13      	subs	r3, r2, r4
 8009318:	3b15      	subs	r3, #21
 800931a:	089b      	lsrs	r3, r3, #2
 800931c:	3301      	adds	r3, #1
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	50e9      	str	r1, [r5, r3]
 8009322:	2900      	cmp	r1, #0
 8009324:	d002      	beq.n	800932c <__lshift+0xb4>
 8009326:	9b02      	ldr	r3, [sp, #8]
 8009328:	3302      	adds	r3, #2
 800932a:	9301      	str	r3, [sp, #4]
 800932c:	9b01      	ldr	r3, [sp, #4]
 800932e:	9804      	ldr	r0, [sp, #16]
 8009330:	3b01      	subs	r3, #1
 8009332:	0021      	movs	r1, r4
 8009334:	6133      	str	r3, [r6, #16]
 8009336:	f7ff fdcb 	bl	8008ed0 <_Bfree>
 800933a:	0030      	movs	r0, r6
 800933c:	b007      	add	sp, #28
 800933e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009340:	cb02      	ldmia	r3!, {r1}
 8009342:	c502      	stmia	r5!, {r1}
 8009344:	429a      	cmp	r2, r3
 8009346:	d8fb      	bhi.n	8009340 <__lshift+0xc8>
 8009348:	e7f0      	b.n	800932c <__lshift+0xb4>
 800934a:	46c0      	nop			; (mov r8, r8)
 800934c:	0800aaa4 	.word	0x0800aaa4
 8009350:	0800aab5 	.word	0x0800aab5

08009354 <__mcmp>:
 8009354:	b530      	push	{r4, r5, lr}
 8009356:	690b      	ldr	r3, [r1, #16]
 8009358:	6904      	ldr	r4, [r0, #16]
 800935a:	0002      	movs	r2, r0
 800935c:	1ae0      	subs	r0, r4, r3
 800935e:	429c      	cmp	r4, r3
 8009360:	d10e      	bne.n	8009380 <__mcmp+0x2c>
 8009362:	3214      	adds	r2, #20
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	3114      	adds	r1, #20
 8009368:	0014      	movs	r4, r2
 800936a:	18c9      	adds	r1, r1, r3
 800936c:	18d2      	adds	r2, r2, r3
 800936e:	3a04      	subs	r2, #4
 8009370:	3904      	subs	r1, #4
 8009372:	6815      	ldr	r5, [r2, #0]
 8009374:	680b      	ldr	r3, [r1, #0]
 8009376:	429d      	cmp	r5, r3
 8009378:	d003      	beq.n	8009382 <__mcmp+0x2e>
 800937a:	2001      	movs	r0, #1
 800937c:	429d      	cmp	r5, r3
 800937e:	d303      	bcc.n	8009388 <__mcmp+0x34>
 8009380:	bd30      	pop	{r4, r5, pc}
 8009382:	4294      	cmp	r4, r2
 8009384:	d3f3      	bcc.n	800936e <__mcmp+0x1a>
 8009386:	e7fb      	b.n	8009380 <__mcmp+0x2c>
 8009388:	4240      	negs	r0, r0
 800938a:	e7f9      	b.n	8009380 <__mcmp+0x2c>

0800938c <__mdiff>:
 800938c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800938e:	000e      	movs	r6, r1
 8009390:	0007      	movs	r7, r0
 8009392:	0011      	movs	r1, r2
 8009394:	0030      	movs	r0, r6
 8009396:	b087      	sub	sp, #28
 8009398:	0014      	movs	r4, r2
 800939a:	f7ff ffdb 	bl	8009354 <__mcmp>
 800939e:	1e05      	subs	r5, r0, #0
 80093a0:	d110      	bne.n	80093c4 <__mdiff+0x38>
 80093a2:	0001      	movs	r1, r0
 80093a4:	0038      	movs	r0, r7
 80093a6:	f7ff fd4f 	bl	8008e48 <_Balloc>
 80093aa:	1e02      	subs	r2, r0, #0
 80093ac:	d104      	bne.n	80093b8 <__mdiff+0x2c>
 80093ae:	4b3f      	ldr	r3, [pc, #252]	; (80094ac <__mdiff+0x120>)
 80093b0:	483f      	ldr	r0, [pc, #252]	; (80094b0 <__mdiff+0x124>)
 80093b2:	4940      	ldr	r1, [pc, #256]	; (80094b4 <__mdiff+0x128>)
 80093b4:	f000 fb28 	bl	8009a08 <__assert_func>
 80093b8:	2301      	movs	r3, #1
 80093ba:	6145      	str	r5, [r0, #20]
 80093bc:	6103      	str	r3, [r0, #16]
 80093be:	0010      	movs	r0, r2
 80093c0:	b007      	add	sp, #28
 80093c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093c4:	2301      	movs	r3, #1
 80093c6:	9301      	str	r3, [sp, #4]
 80093c8:	2800      	cmp	r0, #0
 80093ca:	db04      	blt.n	80093d6 <__mdiff+0x4a>
 80093cc:	0023      	movs	r3, r4
 80093ce:	0034      	movs	r4, r6
 80093d0:	001e      	movs	r6, r3
 80093d2:	2300      	movs	r3, #0
 80093d4:	9301      	str	r3, [sp, #4]
 80093d6:	0038      	movs	r0, r7
 80093d8:	6861      	ldr	r1, [r4, #4]
 80093da:	f7ff fd35 	bl	8008e48 <_Balloc>
 80093de:	1e02      	subs	r2, r0, #0
 80093e0:	d103      	bne.n	80093ea <__mdiff+0x5e>
 80093e2:	4b32      	ldr	r3, [pc, #200]	; (80094ac <__mdiff+0x120>)
 80093e4:	4832      	ldr	r0, [pc, #200]	; (80094b0 <__mdiff+0x124>)
 80093e6:	4934      	ldr	r1, [pc, #208]	; (80094b8 <__mdiff+0x12c>)
 80093e8:	e7e4      	b.n	80093b4 <__mdiff+0x28>
 80093ea:	9b01      	ldr	r3, [sp, #4]
 80093ec:	2700      	movs	r7, #0
 80093ee:	60c3      	str	r3, [r0, #12]
 80093f0:	6920      	ldr	r0, [r4, #16]
 80093f2:	3414      	adds	r4, #20
 80093f4:	0083      	lsls	r3, r0, #2
 80093f6:	18e3      	adds	r3, r4, r3
 80093f8:	0021      	movs	r1, r4
 80093fa:	9401      	str	r4, [sp, #4]
 80093fc:	0034      	movs	r4, r6
 80093fe:	9302      	str	r3, [sp, #8]
 8009400:	6933      	ldr	r3, [r6, #16]
 8009402:	3414      	adds	r4, #20
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	18e3      	adds	r3, r4, r3
 8009408:	9303      	str	r3, [sp, #12]
 800940a:	0013      	movs	r3, r2
 800940c:	3314      	adds	r3, #20
 800940e:	469c      	mov	ip, r3
 8009410:	9305      	str	r3, [sp, #20]
 8009412:	9104      	str	r1, [sp, #16]
 8009414:	9b04      	ldr	r3, [sp, #16]
 8009416:	cc02      	ldmia	r4!, {r1}
 8009418:	cb20      	ldmia	r3!, {r5}
 800941a:	9304      	str	r3, [sp, #16]
 800941c:	b2ab      	uxth	r3, r5
 800941e:	19df      	adds	r7, r3, r7
 8009420:	b28b      	uxth	r3, r1
 8009422:	1afb      	subs	r3, r7, r3
 8009424:	0c09      	lsrs	r1, r1, #16
 8009426:	0c2d      	lsrs	r5, r5, #16
 8009428:	1a6d      	subs	r5, r5, r1
 800942a:	1419      	asrs	r1, r3, #16
 800942c:	1869      	adds	r1, r5, r1
 800942e:	b29b      	uxth	r3, r3
 8009430:	140f      	asrs	r7, r1, #16
 8009432:	0409      	lsls	r1, r1, #16
 8009434:	4319      	orrs	r1, r3
 8009436:	4663      	mov	r3, ip
 8009438:	c302      	stmia	r3!, {r1}
 800943a:	469c      	mov	ip, r3
 800943c:	9b03      	ldr	r3, [sp, #12]
 800943e:	42a3      	cmp	r3, r4
 8009440:	d8e8      	bhi.n	8009414 <__mdiff+0x88>
 8009442:	0031      	movs	r1, r6
 8009444:	9c03      	ldr	r4, [sp, #12]
 8009446:	3115      	adds	r1, #21
 8009448:	2304      	movs	r3, #4
 800944a:	428c      	cmp	r4, r1
 800944c:	d304      	bcc.n	8009458 <__mdiff+0xcc>
 800944e:	1ba3      	subs	r3, r4, r6
 8009450:	3b15      	subs	r3, #21
 8009452:	089b      	lsrs	r3, r3, #2
 8009454:	3301      	adds	r3, #1
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	9901      	ldr	r1, [sp, #4]
 800945a:	18cd      	adds	r5, r1, r3
 800945c:	9905      	ldr	r1, [sp, #20]
 800945e:	002e      	movs	r6, r5
 8009460:	18cb      	adds	r3, r1, r3
 8009462:	469c      	mov	ip, r3
 8009464:	9902      	ldr	r1, [sp, #8]
 8009466:	428e      	cmp	r6, r1
 8009468:	d310      	bcc.n	800948c <__mdiff+0x100>
 800946a:	9e02      	ldr	r6, [sp, #8]
 800946c:	1ee9      	subs	r1, r5, #3
 800946e:	2400      	movs	r4, #0
 8009470:	428e      	cmp	r6, r1
 8009472:	d304      	bcc.n	800947e <__mdiff+0xf2>
 8009474:	0031      	movs	r1, r6
 8009476:	3103      	adds	r1, #3
 8009478:	1b49      	subs	r1, r1, r5
 800947a:	0889      	lsrs	r1, r1, #2
 800947c:	008c      	lsls	r4, r1, #2
 800947e:	191b      	adds	r3, r3, r4
 8009480:	3b04      	subs	r3, #4
 8009482:	6819      	ldr	r1, [r3, #0]
 8009484:	2900      	cmp	r1, #0
 8009486:	d00f      	beq.n	80094a8 <__mdiff+0x11c>
 8009488:	6110      	str	r0, [r2, #16]
 800948a:	e798      	b.n	80093be <__mdiff+0x32>
 800948c:	ce02      	ldmia	r6!, {r1}
 800948e:	b28c      	uxth	r4, r1
 8009490:	19e4      	adds	r4, r4, r7
 8009492:	0c0f      	lsrs	r7, r1, #16
 8009494:	1421      	asrs	r1, r4, #16
 8009496:	1879      	adds	r1, r7, r1
 8009498:	b2a4      	uxth	r4, r4
 800949a:	140f      	asrs	r7, r1, #16
 800949c:	0409      	lsls	r1, r1, #16
 800949e:	4321      	orrs	r1, r4
 80094a0:	4664      	mov	r4, ip
 80094a2:	c402      	stmia	r4!, {r1}
 80094a4:	46a4      	mov	ip, r4
 80094a6:	e7dd      	b.n	8009464 <__mdiff+0xd8>
 80094a8:	3801      	subs	r0, #1
 80094aa:	e7e9      	b.n	8009480 <__mdiff+0xf4>
 80094ac:	0800aaa4 	.word	0x0800aaa4
 80094b0:	0800aab5 	.word	0x0800aab5
 80094b4:	00000237 	.word	0x00000237
 80094b8:	00000245 	.word	0x00000245

080094bc <__d2b>:
 80094bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094be:	2101      	movs	r1, #1
 80094c0:	0014      	movs	r4, r2
 80094c2:	001d      	movs	r5, r3
 80094c4:	9f08      	ldr	r7, [sp, #32]
 80094c6:	f7ff fcbf 	bl	8008e48 <_Balloc>
 80094ca:	1e06      	subs	r6, r0, #0
 80094cc:	d105      	bne.n	80094da <__d2b+0x1e>
 80094ce:	0032      	movs	r2, r6
 80094d0:	4b24      	ldr	r3, [pc, #144]	; (8009564 <__d2b+0xa8>)
 80094d2:	4825      	ldr	r0, [pc, #148]	; (8009568 <__d2b+0xac>)
 80094d4:	4925      	ldr	r1, [pc, #148]	; (800956c <__d2b+0xb0>)
 80094d6:	f000 fa97 	bl	8009a08 <__assert_func>
 80094da:	032b      	lsls	r3, r5, #12
 80094dc:	006d      	lsls	r5, r5, #1
 80094de:	0b1b      	lsrs	r3, r3, #12
 80094e0:	0d6d      	lsrs	r5, r5, #21
 80094e2:	d125      	bne.n	8009530 <__d2b+0x74>
 80094e4:	9301      	str	r3, [sp, #4]
 80094e6:	2c00      	cmp	r4, #0
 80094e8:	d028      	beq.n	800953c <__d2b+0x80>
 80094ea:	4668      	mov	r0, sp
 80094ec:	9400      	str	r4, [sp, #0]
 80094ee:	f7ff fd71 	bl	8008fd4 <__lo0bits>
 80094f2:	9b01      	ldr	r3, [sp, #4]
 80094f4:	9900      	ldr	r1, [sp, #0]
 80094f6:	2800      	cmp	r0, #0
 80094f8:	d01e      	beq.n	8009538 <__d2b+0x7c>
 80094fa:	2220      	movs	r2, #32
 80094fc:	001c      	movs	r4, r3
 80094fe:	1a12      	subs	r2, r2, r0
 8009500:	4094      	lsls	r4, r2
 8009502:	0022      	movs	r2, r4
 8009504:	40c3      	lsrs	r3, r0
 8009506:	430a      	orrs	r2, r1
 8009508:	6172      	str	r2, [r6, #20]
 800950a:	9301      	str	r3, [sp, #4]
 800950c:	9c01      	ldr	r4, [sp, #4]
 800950e:	61b4      	str	r4, [r6, #24]
 8009510:	1e63      	subs	r3, r4, #1
 8009512:	419c      	sbcs	r4, r3
 8009514:	3401      	adds	r4, #1
 8009516:	6134      	str	r4, [r6, #16]
 8009518:	2d00      	cmp	r5, #0
 800951a:	d017      	beq.n	800954c <__d2b+0x90>
 800951c:	2435      	movs	r4, #53	; 0x35
 800951e:	4b14      	ldr	r3, [pc, #80]	; (8009570 <__d2b+0xb4>)
 8009520:	18ed      	adds	r5, r5, r3
 8009522:	182d      	adds	r5, r5, r0
 8009524:	603d      	str	r5, [r7, #0]
 8009526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009528:	1a24      	subs	r4, r4, r0
 800952a:	601c      	str	r4, [r3, #0]
 800952c:	0030      	movs	r0, r6
 800952e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009530:	2280      	movs	r2, #128	; 0x80
 8009532:	0352      	lsls	r2, r2, #13
 8009534:	4313      	orrs	r3, r2
 8009536:	e7d5      	b.n	80094e4 <__d2b+0x28>
 8009538:	6171      	str	r1, [r6, #20]
 800953a:	e7e7      	b.n	800950c <__d2b+0x50>
 800953c:	a801      	add	r0, sp, #4
 800953e:	f7ff fd49 	bl	8008fd4 <__lo0bits>
 8009542:	9b01      	ldr	r3, [sp, #4]
 8009544:	2401      	movs	r4, #1
 8009546:	6173      	str	r3, [r6, #20]
 8009548:	3020      	adds	r0, #32
 800954a:	e7e4      	b.n	8009516 <__d2b+0x5a>
 800954c:	4b09      	ldr	r3, [pc, #36]	; (8009574 <__d2b+0xb8>)
 800954e:	18c0      	adds	r0, r0, r3
 8009550:	4b09      	ldr	r3, [pc, #36]	; (8009578 <__d2b+0xbc>)
 8009552:	6038      	str	r0, [r7, #0]
 8009554:	18e3      	adds	r3, r4, r3
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	18f3      	adds	r3, r6, r3
 800955a:	6958      	ldr	r0, [r3, #20]
 800955c:	f7ff fd20 	bl	8008fa0 <__hi0bits>
 8009560:	0164      	lsls	r4, r4, #5
 8009562:	e7e0      	b.n	8009526 <__d2b+0x6a>
 8009564:	0800aaa4 	.word	0x0800aaa4
 8009568:	0800aab5 	.word	0x0800aab5
 800956c:	0000030f 	.word	0x0000030f
 8009570:	fffffbcd 	.word	0xfffffbcd
 8009574:	fffffbce 	.word	0xfffffbce
 8009578:	3fffffff 	.word	0x3fffffff

0800957c <__ssputs_r>:
 800957c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800957e:	b085      	sub	sp, #20
 8009580:	9301      	str	r3, [sp, #4]
 8009582:	9203      	str	r2, [sp, #12]
 8009584:	688e      	ldr	r6, [r1, #8]
 8009586:	9a01      	ldr	r2, [sp, #4]
 8009588:	0007      	movs	r7, r0
 800958a:	000c      	movs	r4, r1
 800958c:	680b      	ldr	r3, [r1, #0]
 800958e:	4296      	cmp	r6, r2
 8009590:	d831      	bhi.n	80095f6 <__ssputs_r+0x7a>
 8009592:	898a      	ldrh	r2, [r1, #12]
 8009594:	2190      	movs	r1, #144	; 0x90
 8009596:	00c9      	lsls	r1, r1, #3
 8009598:	420a      	tst	r2, r1
 800959a:	d029      	beq.n	80095f0 <__ssputs_r+0x74>
 800959c:	2003      	movs	r0, #3
 800959e:	6921      	ldr	r1, [r4, #16]
 80095a0:	1a5b      	subs	r3, r3, r1
 80095a2:	9302      	str	r3, [sp, #8]
 80095a4:	6963      	ldr	r3, [r4, #20]
 80095a6:	4343      	muls	r3, r0
 80095a8:	0fdd      	lsrs	r5, r3, #31
 80095aa:	18ed      	adds	r5, r5, r3
 80095ac:	9b01      	ldr	r3, [sp, #4]
 80095ae:	9802      	ldr	r0, [sp, #8]
 80095b0:	3301      	adds	r3, #1
 80095b2:	181b      	adds	r3, r3, r0
 80095b4:	106d      	asrs	r5, r5, #1
 80095b6:	42ab      	cmp	r3, r5
 80095b8:	d900      	bls.n	80095bc <__ssputs_r+0x40>
 80095ba:	001d      	movs	r5, r3
 80095bc:	0552      	lsls	r2, r2, #21
 80095be:	d529      	bpl.n	8009614 <__ssputs_r+0x98>
 80095c0:	0029      	movs	r1, r5
 80095c2:	0038      	movs	r0, r7
 80095c4:	f7ff fbae 	bl	8008d24 <_malloc_r>
 80095c8:	1e06      	subs	r6, r0, #0
 80095ca:	d02d      	beq.n	8009628 <__ssputs_r+0xac>
 80095cc:	9a02      	ldr	r2, [sp, #8]
 80095ce:	6921      	ldr	r1, [r4, #16]
 80095d0:	f000 fa10 	bl	80099f4 <memcpy>
 80095d4:	89a2      	ldrh	r2, [r4, #12]
 80095d6:	4b19      	ldr	r3, [pc, #100]	; (800963c <__ssputs_r+0xc0>)
 80095d8:	401a      	ands	r2, r3
 80095da:	2380      	movs	r3, #128	; 0x80
 80095dc:	4313      	orrs	r3, r2
 80095de:	81a3      	strh	r3, [r4, #12]
 80095e0:	9b02      	ldr	r3, [sp, #8]
 80095e2:	6126      	str	r6, [r4, #16]
 80095e4:	18f6      	adds	r6, r6, r3
 80095e6:	6026      	str	r6, [r4, #0]
 80095e8:	6165      	str	r5, [r4, #20]
 80095ea:	9e01      	ldr	r6, [sp, #4]
 80095ec:	1aed      	subs	r5, r5, r3
 80095ee:	60a5      	str	r5, [r4, #8]
 80095f0:	9b01      	ldr	r3, [sp, #4]
 80095f2:	429e      	cmp	r6, r3
 80095f4:	d900      	bls.n	80095f8 <__ssputs_r+0x7c>
 80095f6:	9e01      	ldr	r6, [sp, #4]
 80095f8:	0032      	movs	r2, r6
 80095fa:	9903      	ldr	r1, [sp, #12]
 80095fc:	6820      	ldr	r0, [r4, #0]
 80095fe:	f000 f9d4 	bl	80099aa <memmove>
 8009602:	2000      	movs	r0, #0
 8009604:	68a3      	ldr	r3, [r4, #8]
 8009606:	1b9b      	subs	r3, r3, r6
 8009608:	60a3      	str	r3, [r4, #8]
 800960a:	6823      	ldr	r3, [r4, #0]
 800960c:	199b      	adds	r3, r3, r6
 800960e:	6023      	str	r3, [r4, #0]
 8009610:	b005      	add	sp, #20
 8009612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009614:	002a      	movs	r2, r5
 8009616:	0038      	movs	r0, r7
 8009618:	f000 fa53 	bl	8009ac2 <_realloc_r>
 800961c:	1e06      	subs	r6, r0, #0
 800961e:	d1df      	bne.n	80095e0 <__ssputs_r+0x64>
 8009620:	0038      	movs	r0, r7
 8009622:	6921      	ldr	r1, [r4, #16]
 8009624:	f7ff fb08 	bl	8008c38 <_free_r>
 8009628:	230c      	movs	r3, #12
 800962a:	2001      	movs	r0, #1
 800962c:	603b      	str	r3, [r7, #0]
 800962e:	89a2      	ldrh	r2, [r4, #12]
 8009630:	3334      	adds	r3, #52	; 0x34
 8009632:	4313      	orrs	r3, r2
 8009634:	81a3      	strh	r3, [r4, #12]
 8009636:	4240      	negs	r0, r0
 8009638:	e7ea      	b.n	8009610 <__ssputs_r+0x94>
 800963a:	46c0      	nop			; (mov r8, r8)
 800963c:	fffffb7f 	.word	0xfffffb7f

08009640 <_svfiprintf_r>:
 8009640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009642:	b0a1      	sub	sp, #132	; 0x84
 8009644:	9003      	str	r0, [sp, #12]
 8009646:	001d      	movs	r5, r3
 8009648:	898b      	ldrh	r3, [r1, #12]
 800964a:	000f      	movs	r7, r1
 800964c:	0016      	movs	r6, r2
 800964e:	061b      	lsls	r3, r3, #24
 8009650:	d511      	bpl.n	8009676 <_svfiprintf_r+0x36>
 8009652:	690b      	ldr	r3, [r1, #16]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d10e      	bne.n	8009676 <_svfiprintf_r+0x36>
 8009658:	2140      	movs	r1, #64	; 0x40
 800965a:	f7ff fb63 	bl	8008d24 <_malloc_r>
 800965e:	6038      	str	r0, [r7, #0]
 8009660:	6138      	str	r0, [r7, #16]
 8009662:	2800      	cmp	r0, #0
 8009664:	d105      	bne.n	8009672 <_svfiprintf_r+0x32>
 8009666:	230c      	movs	r3, #12
 8009668:	9a03      	ldr	r2, [sp, #12]
 800966a:	3801      	subs	r0, #1
 800966c:	6013      	str	r3, [r2, #0]
 800966e:	b021      	add	sp, #132	; 0x84
 8009670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009672:	2340      	movs	r3, #64	; 0x40
 8009674:	617b      	str	r3, [r7, #20]
 8009676:	2300      	movs	r3, #0
 8009678:	ac08      	add	r4, sp, #32
 800967a:	6163      	str	r3, [r4, #20]
 800967c:	3320      	adds	r3, #32
 800967e:	7663      	strb	r3, [r4, #25]
 8009680:	3310      	adds	r3, #16
 8009682:	76a3      	strb	r3, [r4, #26]
 8009684:	9507      	str	r5, [sp, #28]
 8009686:	0035      	movs	r5, r6
 8009688:	782b      	ldrb	r3, [r5, #0]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d001      	beq.n	8009692 <_svfiprintf_r+0x52>
 800968e:	2b25      	cmp	r3, #37	; 0x25
 8009690:	d148      	bne.n	8009724 <_svfiprintf_r+0xe4>
 8009692:	1bab      	subs	r3, r5, r6
 8009694:	9305      	str	r3, [sp, #20]
 8009696:	42b5      	cmp	r5, r6
 8009698:	d00b      	beq.n	80096b2 <_svfiprintf_r+0x72>
 800969a:	0032      	movs	r2, r6
 800969c:	0039      	movs	r1, r7
 800969e:	9803      	ldr	r0, [sp, #12]
 80096a0:	f7ff ff6c 	bl	800957c <__ssputs_r>
 80096a4:	3001      	adds	r0, #1
 80096a6:	d100      	bne.n	80096aa <_svfiprintf_r+0x6a>
 80096a8:	e0af      	b.n	800980a <_svfiprintf_r+0x1ca>
 80096aa:	6963      	ldr	r3, [r4, #20]
 80096ac:	9a05      	ldr	r2, [sp, #20]
 80096ae:	189b      	adds	r3, r3, r2
 80096b0:	6163      	str	r3, [r4, #20]
 80096b2:	782b      	ldrb	r3, [r5, #0]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d100      	bne.n	80096ba <_svfiprintf_r+0x7a>
 80096b8:	e0a7      	b.n	800980a <_svfiprintf_r+0x1ca>
 80096ba:	2201      	movs	r2, #1
 80096bc:	2300      	movs	r3, #0
 80096be:	4252      	negs	r2, r2
 80096c0:	6062      	str	r2, [r4, #4]
 80096c2:	a904      	add	r1, sp, #16
 80096c4:	3254      	adds	r2, #84	; 0x54
 80096c6:	1852      	adds	r2, r2, r1
 80096c8:	1c6e      	adds	r6, r5, #1
 80096ca:	6023      	str	r3, [r4, #0]
 80096cc:	60e3      	str	r3, [r4, #12]
 80096ce:	60a3      	str	r3, [r4, #8]
 80096d0:	7013      	strb	r3, [r2, #0]
 80096d2:	65a3      	str	r3, [r4, #88]	; 0x58
 80096d4:	4b55      	ldr	r3, [pc, #340]	; (800982c <_svfiprintf_r+0x1ec>)
 80096d6:	2205      	movs	r2, #5
 80096d8:	0018      	movs	r0, r3
 80096da:	7831      	ldrb	r1, [r6, #0]
 80096dc:	9305      	str	r3, [sp, #20]
 80096de:	f7fe fc02 	bl	8007ee6 <memchr>
 80096e2:	1c75      	adds	r5, r6, #1
 80096e4:	2800      	cmp	r0, #0
 80096e6:	d11f      	bne.n	8009728 <_svfiprintf_r+0xe8>
 80096e8:	6822      	ldr	r2, [r4, #0]
 80096ea:	06d3      	lsls	r3, r2, #27
 80096ec:	d504      	bpl.n	80096f8 <_svfiprintf_r+0xb8>
 80096ee:	2353      	movs	r3, #83	; 0x53
 80096f0:	a904      	add	r1, sp, #16
 80096f2:	185b      	adds	r3, r3, r1
 80096f4:	2120      	movs	r1, #32
 80096f6:	7019      	strb	r1, [r3, #0]
 80096f8:	0713      	lsls	r3, r2, #28
 80096fa:	d504      	bpl.n	8009706 <_svfiprintf_r+0xc6>
 80096fc:	2353      	movs	r3, #83	; 0x53
 80096fe:	a904      	add	r1, sp, #16
 8009700:	185b      	adds	r3, r3, r1
 8009702:	212b      	movs	r1, #43	; 0x2b
 8009704:	7019      	strb	r1, [r3, #0]
 8009706:	7833      	ldrb	r3, [r6, #0]
 8009708:	2b2a      	cmp	r3, #42	; 0x2a
 800970a:	d016      	beq.n	800973a <_svfiprintf_r+0xfa>
 800970c:	0035      	movs	r5, r6
 800970e:	2100      	movs	r1, #0
 8009710:	200a      	movs	r0, #10
 8009712:	68e3      	ldr	r3, [r4, #12]
 8009714:	782a      	ldrb	r2, [r5, #0]
 8009716:	1c6e      	adds	r6, r5, #1
 8009718:	3a30      	subs	r2, #48	; 0x30
 800971a:	2a09      	cmp	r2, #9
 800971c:	d94e      	bls.n	80097bc <_svfiprintf_r+0x17c>
 800971e:	2900      	cmp	r1, #0
 8009720:	d111      	bne.n	8009746 <_svfiprintf_r+0x106>
 8009722:	e017      	b.n	8009754 <_svfiprintf_r+0x114>
 8009724:	3501      	adds	r5, #1
 8009726:	e7af      	b.n	8009688 <_svfiprintf_r+0x48>
 8009728:	9b05      	ldr	r3, [sp, #20]
 800972a:	6822      	ldr	r2, [r4, #0]
 800972c:	1ac0      	subs	r0, r0, r3
 800972e:	2301      	movs	r3, #1
 8009730:	4083      	lsls	r3, r0
 8009732:	4313      	orrs	r3, r2
 8009734:	002e      	movs	r6, r5
 8009736:	6023      	str	r3, [r4, #0]
 8009738:	e7cc      	b.n	80096d4 <_svfiprintf_r+0x94>
 800973a:	9b07      	ldr	r3, [sp, #28]
 800973c:	1d19      	adds	r1, r3, #4
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	9107      	str	r1, [sp, #28]
 8009742:	2b00      	cmp	r3, #0
 8009744:	db01      	blt.n	800974a <_svfiprintf_r+0x10a>
 8009746:	930b      	str	r3, [sp, #44]	; 0x2c
 8009748:	e004      	b.n	8009754 <_svfiprintf_r+0x114>
 800974a:	425b      	negs	r3, r3
 800974c:	60e3      	str	r3, [r4, #12]
 800974e:	2302      	movs	r3, #2
 8009750:	4313      	orrs	r3, r2
 8009752:	6023      	str	r3, [r4, #0]
 8009754:	782b      	ldrb	r3, [r5, #0]
 8009756:	2b2e      	cmp	r3, #46	; 0x2e
 8009758:	d10a      	bne.n	8009770 <_svfiprintf_r+0x130>
 800975a:	786b      	ldrb	r3, [r5, #1]
 800975c:	2b2a      	cmp	r3, #42	; 0x2a
 800975e:	d135      	bne.n	80097cc <_svfiprintf_r+0x18c>
 8009760:	9b07      	ldr	r3, [sp, #28]
 8009762:	3502      	adds	r5, #2
 8009764:	1d1a      	adds	r2, r3, #4
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	9207      	str	r2, [sp, #28]
 800976a:	2b00      	cmp	r3, #0
 800976c:	db2b      	blt.n	80097c6 <_svfiprintf_r+0x186>
 800976e:	9309      	str	r3, [sp, #36]	; 0x24
 8009770:	4e2f      	ldr	r6, [pc, #188]	; (8009830 <_svfiprintf_r+0x1f0>)
 8009772:	2203      	movs	r2, #3
 8009774:	0030      	movs	r0, r6
 8009776:	7829      	ldrb	r1, [r5, #0]
 8009778:	f7fe fbb5 	bl	8007ee6 <memchr>
 800977c:	2800      	cmp	r0, #0
 800977e:	d006      	beq.n	800978e <_svfiprintf_r+0x14e>
 8009780:	2340      	movs	r3, #64	; 0x40
 8009782:	1b80      	subs	r0, r0, r6
 8009784:	4083      	lsls	r3, r0
 8009786:	6822      	ldr	r2, [r4, #0]
 8009788:	3501      	adds	r5, #1
 800978a:	4313      	orrs	r3, r2
 800978c:	6023      	str	r3, [r4, #0]
 800978e:	7829      	ldrb	r1, [r5, #0]
 8009790:	2206      	movs	r2, #6
 8009792:	4828      	ldr	r0, [pc, #160]	; (8009834 <_svfiprintf_r+0x1f4>)
 8009794:	1c6e      	adds	r6, r5, #1
 8009796:	7621      	strb	r1, [r4, #24]
 8009798:	f7fe fba5 	bl	8007ee6 <memchr>
 800979c:	2800      	cmp	r0, #0
 800979e:	d03c      	beq.n	800981a <_svfiprintf_r+0x1da>
 80097a0:	4b25      	ldr	r3, [pc, #148]	; (8009838 <_svfiprintf_r+0x1f8>)
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d125      	bne.n	80097f2 <_svfiprintf_r+0x1b2>
 80097a6:	2207      	movs	r2, #7
 80097a8:	9b07      	ldr	r3, [sp, #28]
 80097aa:	3307      	adds	r3, #7
 80097ac:	4393      	bics	r3, r2
 80097ae:	3308      	adds	r3, #8
 80097b0:	9307      	str	r3, [sp, #28]
 80097b2:	6963      	ldr	r3, [r4, #20]
 80097b4:	9a04      	ldr	r2, [sp, #16]
 80097b6:	189b      	adds	r3, r3, r2
 80097b8:	6163      	str	r3, [r4, #20]
 80097ba:	e764      	b.n	8009686 <_svfiprintf_r+0x46>
 80097bc:	4343      	muls	r3, r0
 80097be:	0035      	movs	r5, r6
 80097c0:	2101      	movs	r1, #1
 80097c2:	189b      	adds	r3, r3, r2
 80097c4:	e7a6      	b.n	8009714 <_svfiprintf_r+0xd4>
 80097c6:	2301      	movs	r3, #1
 80097c8:	425b      	negs	r3, r3
 80097ca:	e7d0      	b.n	800976e <_svfiprintf_r+0x12e>
 80097cc:	2300      	movs	r3, #0
 80097ce:	200a      	movs	r0, #10
 80097d0:	001a      	movs	r2, r3
 80097d2:	3501      	adds	r5, #1
 80097d4:	6063      	str	r3, [r4, #4]
 80097d6:	7829      	ldrb	r1, [r5, #0]
 80097d8:	1c6e      	adds	r6, r5, #1
 80097da:	3930      	subs	r1, #48	; 0x30
 80097dc:	2909      	cmp	r1, #9
 80097de:	d903      	bls.n	80097e8 <_svfiprintf_r+0x1a8>
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d0c5      	beq.n	8009770 <_svfiprintf_r+0x130>
 80097e4:	9209      	str	r2, [sp, #36]	; 0x24
 80097e6:	e7c3      	b.n	8009770 <_svfiprintf_r+0x130>
 80097e8:	4342      	muls	r2, r0
 80097ea:	0035      	movs	r5, r6
 80097ec:	2301      	movs	r3, #1
 80097ee:	1852      	adds	r2, r2, r1
 80097f0:	e7f1      	b.n	80097d6 <_svfiprintf_r+0x196>
 80097f2:	aa07      	add	r2, sp, #28
 80097f4:	9200      	str	r2, [sp, #0]
 80097f6:	0021      	movs	r1, r4
 80097f8:	003a      	movs	r2, r7
 80097fa:	4b10      	ldr	r3, [pc, #64]	; (800983c <_svfiprintf_r+0x1fc>)
 80097fc:	9803      	ldr	r0, [sp, #12]
 80097fe:	f7fd fde5 	bl	80073cc <_printf_float>
 8009802:	9004      	str	r0, [sp, #16]
 8009804:	9b04      	ldr	r3, [sp, #16]
 8009806:	3301      	adds	r3, #1
 8009808:	d1d3      	bne.n	80097b2 <_svfiprintf_r+0x172>
 800980a:	89bb      	ldrh	r3, [r7, #12]
 800980c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800980e:	065b      	lsls	r3, r3, #25
 8009810:	d400      	bmi.n	8009814 <_svfiprintf_r+0x1d4>
 8009812:	e72c      	b.n	800966e <_svfiprintf_r+0x2e>
 8009814:	2001      	movs	r0, #1
 8009816:	4240      	negs	r0, r0
 8009818:	e729      	b.n	800966e <_svfiprintf_r+0x2e>
 800981a:	aa07      	add	r2, sp, #28
 800981c:	9200      	str	r2, [sp, #0]
 800981e:	0021      	movs	r1, r4
 8009820:	003a      	movs	r2, r7
 8009822:	4b06      	ldr	r3, [pc, #24]	; (800983c <_svfiprintf_r+0x1fc>)
 8009824:	9803      	ldr	r0, [sp, #12]
 8009826:	f7fe f897 	bl	8007958 <_printf_i>
 800982a:	e7ea      	b.n	8009802 <_svfiprintf_r+0x1c2>
 800982c:	0800ac0c 	.word	0x0800ac0c
 8009830:	0800ac12 	.word	0x0800ac12
 8009834:	0800ac16 	.word	0x0800ac16
 8009838:	080073cd 	.word	0x080073cd
 800983c:	0800957d 	.word	0x0800957d

08009840 <__sflush_r>:
 8009840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009842:	898b      	ldrh	r3, [r1, #12]
 8009844:	0005      	movs	r5, r0
 8009846:	000c      	movs	r4, r1
 8009848:	071a      	lsls	r2, r3, #28
 800984a:	d45c      	bmi.n	8009906 <__sflush_r+0xc6>
 800984c:	684a      	ldr	r2, [r1, #4]
 800984e:	2a00      	cmp	r2, #0
 8009850:	dc04      	bgt.n	800985c <__sflush_r+0x1c>
 8009852:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8009854:	2a00      	cmp	r2, #0
 8009856:	dc01      	bgt.n	800985c <__sflush_r+0x1c>
 8009858:	2000      	movs	r0, #0
 800985a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800985c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800985e:	2f00      	cmp	r7, #0
 8009860:	d0fa      	beq.n	8009858 <__sflush_r+0x18>
 8009862:	2200      	movs	r2, #0
 8009864:	2080      	movs	r0, #128	; 0x80
 8009866:	682e      	ldr	r6, [r5, #0]
 8009868:	602a      	str	r2, [r5, #0]
 800986a:	001a      	movs	r2, r3
 800986c:	0140      	lsls	r0, r0, #5
 800986e:	6a21      	ldr	r1, [r4, #32]
 8009870:	4002      	ands	r2, r0
 8009872:	4203      	tst	r3, r0
 8009874:	d034      	beq.n	80098e0 <__sflush_r+0xa0>
 8009876:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009878:	89a3      	ldrh	r3, [r4, #12]
 800987a:	075b      	lsls	r3, r3, #29
 800987c:	d506      	bpl.n	800988c <__sflush_r+0x4c>
 800987e:	6863      	ldr	r3, [r4, #4]
 8009880:	1ac0      	subs	r0, r0, r3
 8009882:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009884:	2b00      	cmp	r3, #0
 8009886:	d001      	beq.n	800988c <__sflush_r+0x4c>
 8009888:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800988a:	1ac0      	subs	r0, r0, r3
 800988c:	0002      	movs	r2, r0
 800988e:	2300      	movs	r3, #0
 8009890:	0028      	movs	r0, r5
 8009892:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009894:	6a21      	ldr	r1, [r4, #32]
 8009896:	47b8      	blx	r7
 8009898:	89a2      	ldrh	r2, [r4, #12]
 800989a:	1c43      	adds	r3, r0, #1
 800989c:	d106      	bne.n	80098ac <__sflush_r+0x6c>
 800989e:	6829      	ldr	r1, [r5, #0]
 80098a0:	291d      	cmp	r1, #29
 80098a2:	d82c      	bhi.n	80098fe <__sflush_r+0xbe>
 80098a4:	4b2a      	ldr	r3, [pc, #168]	; (8009950 <__sflush_r+0x110>)
 80098a6:	410b      	asrs	r3, r1
 80098a8:	07db      	lsls	r3, r3, #31
 80098aa:	d428      	bmi.n	80098fe <__sflush_r+0xbe>
 80098ac:	2300      	movs	r3, #0
 80098ae:	6063      	str	r3, [r4, #4]
 80098b0:	6923      	ldr	r3, [r4, #16]
 80098b2:	6023      	str	r3, [r4, #0]
 80098b4:	04d2      	lsls	r2, r2, #19
 80098b6:	d505      	bpl.n	80098c4 <__sflush_r+0x84>
 80098b8:	1c43      	adds	r3, r0, #1
 80098ba:	d102      	bne.n	80098c2 <__sflush_r+0x82>
 80098bc:	682b      	ldr	r3, [r5, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d100      	bne.n	80098c4 <__sflush_r+0x84>
 80098c2:	6560      	str	r0, [r4, #84]	; 0x54
 80098c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098c6:	602e      	str	r6, [r5, #0]
 80098c8:	2900      	cmp	r1, #0
 80098ca:	d0c5      	beq.n	8009858 <__sflush_r+0x18>
 80098cc:	0023      	movs	r3, r4
 80098ce:	3344      	adds	r3, #68	; 0x44
 80098d0:	4299      	cmp	r1, r3
 80098d2:	d002      	beq.n	80098da <__sflush_r+0x9a>
 80098d4:	0028      	movs	r0, r5
 80098d6:	f7ff f9af 	bl	8008c38 <_free_r>
 80098da:	2000      	movs	r0, #0
 80098dc:	6360      	str	r0, [r4, #52]	; 0x34
 80098de:	e7bc      	b.n	800985a <__sflush_r+0x1a>
 80098e0:	2301      	movs	r3, #1
 80098e2:	0028      	movs	r0, r5
 80098e4:	47b8      	blx	r7
 80098e6:	1c43      	adds	r3, r0, #1
 80098e8:	d1c6      	bne.n	8009878 <__sflush_r+0x38>
 80098ea:	682b      	ldr	r3, [r5, #0]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d0c3      	beq.n	8009878 <__sflush_r+0x38>
 80098f0:	2b1d      	cmp	r3, #29
 80098f2:	d001      	beq.n	80098f8 <__sflush_r+0xb8>
 80098f4:	2b16      	cmp	r3, #22
 80098f6:	d101      	bne.n	80098fc <__sflush_r+0xbc>
 80098f8:	602e      	str	r6, [r5, #0]
 80098fa:	e7ad      	b.n	8009858 <__sflush_r+0x18>
 80098fc:	89a2      	ldrh	r2, [r4, #12]
 80098fe:	2340      	movs	r3, #64	; 0x40
 8009900:	4313      	orrs	r3, r2
 8009902:	81a3      	strh	r3, [r4, #12]
 8009904:	e7a9      	b.n	800985a <__sflush_r+0x1a>
 8009906:	690e      	ldr	r6, [r1, #16]
 8009908:	2e00      	cmp	r6, #0
 800990a:	d0a5      	beq.n	8009858 <__sflush_r+0x18>
 800990c:	680f      	ldr	r7, [r1, #0]
 800990e:	600e      	str	r6, [r1, #0]
 8009910:	1bba      	subs	r2, r7, r6
 8009912:	9201      	str	r2, [sp, #4]
 8009914:	2200      	movs	r2, #0
 8009916:	079b      	lsls	r3, r3, #30
 8009918:	d100      	bne.n	800991c <__sflush_r+0xdc>
 800991a:	694a      	ldr	r2, [r1, #20]
 800991c:	60a2      	str	r2, [r4, #8]
 800991e:	9b01      	ldr	r3, [sp, #4]
 8009920:	2b00      	cmp	r3, #0
 8009922:	dd99      	ble.n	8009858 <__sflush_r+0x18>
 8009924:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009926:	0032      	movs	r2, r6
 8009928:	001f      	movs	r7, r3
 800992a:	0028      	movs	r0, r5
 800992c:	9b01      	ldr	r3, [sp, #4]
 800992e:	6a21      	ldr	r1, [r4, #32]
 8009930:	47b8      	blx	r7
 8009932:	2800      	cmp	r0, #0
 8009934:	dc06      	bgt.n	8009944 <__sflush_r+0x104>
 8009936:	2340      	movs	r3, #64	; 0x40
 8009938:	2001      	movs	r0, #1
 800993a:	89a2      	ldrh	r2, [r4, #12]
 800993c:	4240      	negs	r0, r0
 800993e:	4313      	orrs	r3, r2
 8009940:	81a3      	strh	r3, [r4, #12]
 8009942:	e78a      	b.n	800985a <__sflush_r+0x1a>
 8009944:	9b01      	ldr	r3, [sp, #4]
 8009946:	1836      	adds	r6, r6, r0
 8009948:	1a1b      	subs	r3, r3, r0
 800994a:	9301      	str	r3, [sp, #4]
 800994c:	e7e7      	b.n	800991e <__sflush_r+0xde>
 800994e:	46c0      	nop			; (mov r8, r8)
 8009950:	dfbffffe 	.word	0xdfbffffe

08009954 <_fflush_r>:
 8009954:	690b      	ldr	r3, [r1, #16]
 8009956:	b570      	push	{r4, r5, r6, lr}
 8009958:	0005      	movs	r5, r0
 800995a:	000c      	movs	r4, r1
 800995c:	2b00      	cmp	r3, #0
 800995e:	d102      	bne.n	8009966 <_fflush_r+0x12>
 8009960:	2500      	movs	r5, #0
 8009962:	0028      	movs	r0, r5
 8009964:	bd70      	pop	{r4, r5, r6, pc}
 8009966:	2800      	cmp	r0, #0
 8009968:	d004      	beq.n	8009974 <_fflush_r+0x20>
 800996a:	6a03      	ldr	r3, [r0, #32]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d101      	bne.n	8009974 <_fflush_r+0x20>
 8009970:	f7fe f992 	bl	8007c98 <__sinit>
 8009974:	220c      	movs	r2, #12
 8009976:	5ea3      	ldrsh	r3, [r4, r2]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d0f1      	beq.n	8009960 <_fflush_r+0xc>
 800997c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800997e:	07d2      	lsls	r2, r2, #31
 8009980:	d404      	bmi.n	800998c <_fflush_r+0x38>
 8009982:	059b      	lsls	r3, r3, #22
 8009984:	d402      	bmi.n	800998c <_fflush_r+0x38>
 8009986:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009988:	f7fe faab 	bl	8007ee2 <__retarget_lock_acquire_recursive>
 800998c:	0028      	movs	r0, r5
 800998e:	0021      	movs	r1, r4
 8009990:	f7ff ff56 	bl	8009840 <__sflush_r>
 8009994:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009996:	0005      	movs	r5, r0
 8009998:	07db      	lsls	r3, r3, #31
 800999a:	d4e2      	bmi.n	8009962 <_fflush_r+0xe>
 800999c:	89a3      	ldrh	r3, [r4, #12]
 800999e:	059b      	lsls	r3, r3, #22
 80099a0:	d4df      	bmi.n	8009962 <_fflush_r+0xe>
 80099a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099a4:	f7fe fa9e 	bl	8007ee4 <__retarget_lock_release_recursive>
 80099a8:	e7db      	b.n	8009962 <_fflush_r+0xe>

080099aa <memmove>:
 80099aa:	b510      	push	{r4, lr}
 80099ac:	4288      	cmp	r0, r1
 80099ae:	d902      	bls.n	80099b6 <memmove+0xc>
 80099b0:	188b      	adds	r3, r1, r2
 80099b2:	4298      	cmp	r0, r3
 80099b4:	d303      	bcc.n	80099be <memmove+0x14>
 80099b6:	2300      	movs	r3, #0
 80099b8:	e007      	b.n	80099ca <memmove+0x20>
 80099ba:	5c8b      	ldrb	r3, [r1, r2]
 80099bc:	5483      	strb	r3, [r0, r2]
 80099be:	3a01      	subs	r2, #1
 80099c0:	d2fb      	bcs.n	80099ba <memmove+0x10>
 80099c2:	bd10      	pop	{r4, pc}
 80099c4:	5ccc      	ldrb	r4, [r1, r3]
 80099c6:	54c4      	strb	r4, [r0, r3]
 80099c8:	3301      	adds	r3, #1
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d1fa      	bne.n	80099c4 <memmove+0x1a>
 80099ce:	e7f8      	b.n	80099c2 <memmove+0x18>

080099d0 <_sbrk_r>:
 80099d0:	2300      	movs	r3, #0
 80099d2:	b570      	push	{r4, r5, r6, lr}
 80099d4:	4d06      	ldr	r5, [pc, #24]	; (80099f0 <_sbrk_r+0x20>)
 80099d6:	0004      	movs	r4, r0
 80099d8:	0008      	movs	r0, r1
 80099da:	602b      	str	r3, [r5, #0]
 80099dc:	f7f9 feb6 	bl	800374c <_sbrk>
 80099e0:	1c43      	adds	r3, r0, #1
 80099e2:	d103      	bne.n	80099ec <_sbrk_r+0x1c>
 80099e4:	682b      	ldr	r3, [r5, #0]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d000      	beq.n	80099ec <_sbrk_r+0x1c>
 80099ea:	6023      	str	r3, [r4, #0]
 80099ec:	bd70      	pop	{r4, r5, r6, pc}
 80099ee:	46c0      	nop			; (mov r8, r8)
 80099f0:	20000510 	.word	0x20000510

080099f4 <memcpy>:
 80099f4:	2300      	movs	r3, #0
 80099f6:	b510      	push	{r4, lr}
 80099f8:	429a      	cmp	r2, r3
 80099fa:	d100      	bne.n	80099fe <memcpy+0xa>
 80099fc:	bd10      	pop	{r4, pc}
 80099fe:	5ccc      	ldrb	r4, [r1, r3]
 8009a00:	54c4      	strb	r4, [r0, r3]
 8009a02:	3301      	adds	r3, #1
 8009a04:	e7f8      	b.n	80099f8 <memcpy+0x4>
	...

08009a08 <__assert_func>:
 8009a08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009a0a:	0014      	movs	r4, r2
 8009a0c:	001a      	movs	r2, r3
 8009a0e:	4b09      	ldr	r3, [pc, #36]	; (8009a34 <__assert_func+0x2c>)
 8009a10:	0005      	movs	r5, r0
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	000e      	movs	r6, r1
 8009a16:	68d8      	ldr	r0, [r3, #12]
 8009a18:	4b07      	ldr	r3, [pc, #28]	; (8009a38 <__assert_func+0x30>)
 8009a1a:	2c00      	cmp	r4, #0
 8009a1c:	d101      	bne.n	8009a22 <__assert_func+0x1a>
 8009a1e:	4b07      	ldr	r3, [pc, #28]	; (8009a3c <__assert_func+0x34>)
 8009a20:	001c      	movs	r4, r3
 8009a22:	4907      	ldr	r1, [pc, #28]	; (8009a40 <__assert_func+0x38>)
 8009a24:	9301      	str	r3, [sp, #4]
 8009a26:	9402      	str	r4, [sp, #8]
 8009a28:	002b      	movs	r3, r5
 8009a2a:	9600      	str	r6, [sp, #0]
 8009a2c:	f000 f886 	bl	8009b3c <fiprintf>
 8009a30:	f000 f894 	bl	8009b5c <abort>
 8009a34:	200000f4 	.word	0x200000f4
 8009a38:	0800ac27 	.word	0x0800ac27
 8009a3c:	0800ac62 	.word	0x0800ac62
 8009a40:	0800ac34 	.word	0x0800ac34

08009a44 <_calloc_r>:
 8009a44:	b570      	push	{r4, r5, r6, lr}
 8009a46:	0c0b      	lsrs	r3, r1, #16
 8009a48:	0c15      	lsrs	r5, r2, #16
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d11e      	bne.n	8009a8c <_calloc_r+0x48>
 8009a4e:	2d00      	cmp	r5, #0
 8009a50:	d10c      	bne.n	8009a6c <_calloc_r+0x28>
 8009a52:	b289      	uxth	r1, r1
 8009a54:	b294      	uxth	r4, r2
 8009a56:	434c      	muls	r4, r1
 8009a58:	0021      	movs	r1, r4
 8009a5a:	f7ff f963 	bl	8008d24 <_malloc_r>
 8009a5e:	1e05      	subs	r5, r0, #0
 8009a60:	d01b      	beq.n	8009a9a <_calloc_r+0x56>
 8009a62:	0022      	movs	r2, r4
 8009a64:	2100      	movs	r1, #0
 8009a66:	f7fe f9b7 	bl	8007dd8 <memset>
 8009a6a:	e016      	b.n	8009a9a <_calloc_r+0x56>
 8009a6c:	1c2b      	adds	r3, r5, #0
 8009a6e:	1c0c      	adds	r4, r1, #0
 8009a70:	b289      	uxth	r1, r1
 8009a72:	b292      	uxth	r2, r2
 8009a74:	434a      	muls	r2, r1
 8009a76:	b2a1      	uxth	r1, r4
 8009a78:	b29c      	uxth	r4, r3
 8009a7a:	434c      	muls	r4, r1
 8009a7c:	0c13      	lsrs	r3, r2, #16
 8009a7e:	18e4      	adds	r4, r4, r3
 8009a80:	0c23      	lsrs	r3, r4, #16
 8009a82:	d107      	bne.n	8009a94 <_calloc_r+0x50>
 8009a84:	0424      	lsls	r4, r4, #16
 8009a86:	b292      	uxth	r2, r2
 8009a88:	4314      	orrs	r4, r2
 8009a8a:	e7e5      	b.n	8009a58 <_calloc_r+0x14>
 8009a8c:	2d00      	cmp	r5, #0
 8009a8e:	d101      	bne.n	8009a94 <_calloc_r+0x50>
 8009a90:	1c14      	adds	r4, r2, #0
 8009a92:	e7ed      	b.n	8009a70 <_calloc_r+0x2c>
 8009a94:	230c      	movs	r3, #12
 8009a96:	2500      	movs	r5, #0
 8009a98:	6003      	str	r3, [r0, #0]
 8009a9a:	0028      	movs	r0, r5
 8009a9c:	bd70      	pop	{r4, r5, r6, pc}

08009a9e <__ascii_mbtowc>:
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	2900      	cmp	r1, #0
 8009aa2:	d100      	bne.n	8009aa6 <__ascii_mbtowc+0x8>
 8009aa4:	a901      	add	r1, sp, #4
 8009aa6:	1e10      	subs	r0, r2, #0
 8009aa8:	d006      	beq.n	8009ab8 <__ascii_mbtowc+0x1a>
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d006      	beq.n	8009abc <__ascii_mbtowc+0x1e>
 8009aae:	7813      	ldrb	r3, [r2, #0]
 8009ab0:	600b      	str	r3, [r1, #0]
 8009ab2:	7810      	ldrb	r0, [r2, #0]
 8009ab4:	1e43      	subs	r3, r0, #1
 8009ab6:	4198      	sbcs	r0, r3
 8009ab8:	b002      	add	sp, #8
 8009aba:	4770      	bx	lr
 8009abc:	2002      	movs	r0, #2
 8009abe:	4240      	negs	r0, r0
 8009ac0:	e7fa      	b.n	8009ab8 <__ascii_mbtowc+0x1a>

08009ac2 <_realloc_r>:
 8009ac2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ac4:	0007      	movs	r7, r0
 8009ac6:	000e      	movs	r6, r1
 8009ac8:	0014      	movs	r4, r2
 8009aca:	2900      	cmp	r1, #0
 8009acc:	d105      	bne.n	8009ada <_realloc_r+0x18>
 8009ace:	0011      	movs	r1, r2
 8009ad0:	f7ff f928 	bl	8008d24 <_malloc_r>
 8009ad4:	0005      	movs	r5, r0
 8009ad6:	0028      	movs	r0, r5
 8009ad8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009ada:	2a00      	cmp	r2, #0
 8009adc:	d103      	bne.n	8009ae6 <_realloc_r+0x24>
 8009ade:	f7ff f8ab 	bl	8008c38 <_free_r>
 8009ae2:	0025      	movs	r5, r4
 8009ae4:	e7f7      	b.n	8009ad6 <_realloc_r+0x14>
 8009ae6:	f000 f840 	bl	8009b6a <_malloc_usable_size_r>
 8009aea:	9001      	str	r0, [sp, #4]
 8009aec:	4284      	cmp	r4, r0
 8009aee:	d803      	bhi.n	8009af8 <_realloc_r+0x36>
 8009af0:	0035      	movs	r5, r6
 8009af2:	0843      	lsrs	r3, r0, #1
 8009af4:	42a3      	cmp	r3, r4
 8009af6:	d3ee      	bcc.n	8009ad6 <_realloc_r+0x14>
 8009af8:	0021      	movs	r1, r4
 8009afa:	0038      	movs	r0, r7
 8009afc:	f7ff f912 	bl	8008d24 <_malloc_r>
 8009b00:	1e05      	subs	r5, r0, #0
 8009b02:	d0e8      	beq.n	8009ad6 <_realloc_r+0x14>
 8009b04:	9b01      	ldr	r3, [sp, #4]
 8009b06:	0022      	movs	r2, r4
 8009b08:	429c      	cmp	r4, r3
 8009b0a:	d900      	bls.n	8009b0e <_realloc_r+0x4c>
 8009b0c:	001a      	movs	r2, r3
 8009b0e:	0031      	movs	r1, r6
 8009b10:	0028      	movs	r0, r5
 8009b12:	f7ff ff6f 	bl	80099f4 <memcpy>
 8009b16:	0031      	movs	r1, r6
 8009b18:	0038      	movs	r0, r7
 8009b1a:	f7ff f88d 	bl	8008c38 <_free_r>
 8009b1e:	e7da      	b.n	8009ad6 <_realloc_r+0x14>

08009b20 <__ascii_wctomb>:
 8009b20:	0003      	movs	r3, r0
 8009b22:	1e08      	subs	r0, r1, #0
 8009b24:	d005      	beq.n	8009b32 <__ascii_wctomb+0x12>
 8009b26:	2aff      	cmp	r2, #255	; 0xff
 8009b28:	d904      	bls.n	8009b34 <__ascii_wctomb+0x14>
 8009b2a:	228a      	movs	r2, #138	; 0x8a
 8009b2c:	2001      	movs	r0, #1
 8009b2e:	601a      	str	r2, [r3, #0]
 8009b30:	4240      	negs	r0, r0
 8009b32:	4770      	bx	lr
 8009b34:	2001      	movs	r0, #1
 8009b36:	700a      	strb	r2, [r1, #0]
 8009b38:	e7fb      	b.n	8009b32 <__ascii_wctomb+0x12>
	...

08009b3c <fiprintf>:
 8009b3c:	b40e      	push	{r1, r2, r3}
 8009b3e:	b517      	push	{r0, r1, r2, r4, lr}
 8009b40:	4c05      	ldr	r4, [pc, #20]	; (8009b58 <fiprintf+0x1c>)
 8009b42:	ab05      	add	r3, sp, #20
 8009b44:	cb04      	ldmia	r3!, {r2}
 8009b46:	0001      	movs	r1, r0
 8009b48:	6820      	ldr	r0, [r4, #0]
 8009b4a:	9301      	str	r3, [sp, #4]
 8009b4c:	f000 f83c 	bl	8009bc8 <_vfiprintf_r>
 8009b50:	bc1e      	pop	{r1, r2, r3, r4}
 8009b52:	bc08      	pop	{r3}
 8009b54:	b003      	add	sp, #12
 8009b56:	4718      	bx	r3
 8009b58:	200000f4 	.word	0x200000f4

08009b5c <abort>:
 8009b5c:	2006      	movs	r0, #6
 8009b5e:	b510      	push	{r4, lr}
 8009b60:	f000 fa1e 	bl	8009fa0 <raise>
 8009b64:	2001      	movs	r0, #1
 8009b66:	f7f9 fd7f 	bl	8003668 <_exit>

08009b6a <_malloc_usable_size_r>:
 8009b6a:	1f0b      	subs	r3, r1, #4
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	1f18      	subs	r0, r3, #4
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	da01      	bge.n	8009b78 <_malloc_usable_size_r+0xe>
 8009b74:	580b      	ldr	r3, [r1, r0]
 8009b76:	18c0      	adds	r0, r0, r3
 8009b78:	4770      	bx	lr

08009b7a <__sfputc_r>:
 8009b7a:	6893      	ldr	r3, [r2, #8]
 8009b7c:	b510      	push	{r4, lr}
 8009b7e:	3b01      	subs	r3, #1
 8009b80:	6093      	str	r3, [r2, #8]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	da04      	bge.n	8009b90 <__sfputc_r+0x16>
 8009b86:	6994      	ldr	r4, [r2, #24]
 8009b88:	42a3      	cmp	r3, r4
 8009b8a:	db07      	blt.n	8009b9c <__sfputc_r+0x22>
 8009b8c:	290a      	cmp	r1, #10
 8009b8e:	d005      	beq.n	8009b9c <__sfputc_r+0x22>
 8009b90:	6813      	ldr	r3, [r2, #0]
 8009b92:	1c58      	adds	r0, r3, #1
 8009b94:	6010      	str	r0, [r2, #0]
 8009b96:	7019      	strb	r1, [r3, #0]
 8009b98:	0008      	movs	r0, r1
 8009b9a:	bd10      	pop	{r4, pc}
 8009b9c:	f000 f930 	bl	8009e00 <__swbuf_r>
 8009ba0:	0001      	movs	r1, r0
 8009ba2:	e7f9      	b.n	8009b98 <__sfputc_r+0x1e>

08009ba4 <__sfputs_r>:
 8009ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ba6:	0006      	movs	r6, r0
 8009ba8:	000f      	movs	r7, r1
 8009baa:	0014      	movs	r4, r2
 8009bac:	18d5      	adds	r5, r2, r3
 8009bae:	42ac      	cmp	r4, r5
 8009bb0:	d101      	bne.n	8009bb6 <__sfputs_r+0x12>
 8009bb2:	2000      	movs	r0, #0
 8009bb4:	e007      	b.n	8009bc6 <__sfputs_r+0x22>
 8009bb6:	7821      	ldrb	r1, [r4, #0]
 8009bb8:	003a      	movs	r2, r7
 8009bba:	0030      	movs	r0, r6
 8009bbc:	f7ff ffdd 	bl	8009b7a <__sfputc_r>
 8009bc0:	3401      	adds	r4, #1
 8009bc2:	1c43      	adds	r3, r0, #1
 8009bc4:	d1f3      	bne.n	8009bae <__sfputs_r+0xa>
 8009bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009bc8 <_vfiprintf_r>:
 8009bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bca:	b0a1      	sub	sp, #132	; 0x84
 8009bcc:	000f      	movs	r7, r1
 8009bce:	0015      	movs	r5, r2
 8009bd0:	001e      	movs	r6, r3
 8009bd2:	9003      	str	r0, [sp, #12]
 8009bd4:	2800      	cmp	r0, #0
 8009bd6:	d004      	beq.n	8009be2 <_vfiprintf_r+0x1a>
 8009bd8:	6a03      	ldr	r3, [r0, #32]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d101      	bne.n	8009be2 <_vfiprintf_r+0x1a>
 8009bde:	f7fe f85b 	bl	8007c98 <__sinit>
 8009be2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009be4:	07db      	lsls	r3, r3, #31
 8009be6:	d405      	bmi.n	8009bf4 <_vfiprintf_r+0x2c>
 8009be8:	89bb      	ldrh	r3, [r7, #12]
 8009bea:	059b      	lsls	r3, r3, #22
 8009bec:	d402      	bmi.n	8009bf4 <_vfiprintf_r+0x2c>
 8009bee:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009bf0:	f7fe f977 	bl	8007ee2 <__retarget_lock_acquire_recursive>
 8009bf4:	89bb      	ldrh	r3, [r7, #12]
 8009bf6:	071b      	lsls	r3, r3, #28
 8009bf8:	d502      	bpl.n	8009c00 <_vfiprintf_r+0x38>
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d113      	bne.n	8009c28 <_vfiprintf_r+0x60>
 8009c00:	0039      	movs	r1, r7
 8009c02:	9803      	ldr	r0, [sp, #12]
 8009c04:	f000 f93e 	bl	8009e84 <__swsetup_r>
 8009c08:	2800      	cmp	r0, #0
 8009c0a:	d00d      	beq.n	8009c28 <_vfiprintf_r+0x60>
 8009c0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c0e:	07db      	lsls	r3, r3, #31
 8009c10:	d503      	bpl.n	8009c1a <_vfiprintf_r+0x52>
 8009c12:	2001      	movs	r0, #1
 8009c14:	4240      	negs	r0, r0
 8009c16:	b021      	add	sp, #132	; 0x84
 8009c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c1a:	89bb      	ldrh	r3, [r7, #12]
 8009c1c:	059b      	lsls	r3, r3, #22
 8009c1e:	d4f8      	bmi.n	8009c12 <_vfiprintf_r+0x4a>
 8009c20:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009c22:	f7fe f95f 	bl	8007ee4 <__retarget_lock_release_recursive>
 8009c26:	e7f4      	b.n	8009c12 <_vfiprintf_r+0x4a>
 8009c28:	2300      	movs	r3, #0
 8009c2a:	ac08      	add	r4, sp, #32
 8009c2c:	6163      	str	r3, [r4, #20]
 8009c2e:	3320      	adds	r3, #32
 8009c30:	7663      	strb	r3, [r4, #25]
 8009c32:	3310      	adds	r3, #16
 8009c34:	76a3      	strb	r3, [r4, #26]
 8009c36:	9607      	str	r6, [sp, #28]
 8009c38:	002e      	movs	r6, r5
 8009c3a:	7833      	ldrb	r3, [r6, #0]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d001      	beq.n	8009c44 <_vfiprintf_r+0x7c>
 8009c40:	2b25      	cmp	r3, #37	; 0x25
 8009c42:	d148      	bne.n	8009cd6 <_vfiprintf_r+0x10e>
 8009c44:	1b73      	subs	r3, r6, r5
 8009c46:	9305      	str	r3, [sp, #20]
 8009c48:	42ae      	cmp	r6, r5
 8009c4a:	d00b      	beq.n	8009c64 <_vfiprintf_r+0x9c>
 8009c4c:	002a      	movs	r2, r5
 8009c4e:	0039      	movs	r1, r7
 8009c50:	9803      	ldr	r0, [sp, #12]
 8009c52:	f7ff ffa7 	bl	8009ba4 <__sfputs_r>
 8009c56:	3001      	adds	r0, #1
 8009c58:	d100      	bne.n	8009c5c <_vfiprintf_r+0x94>
 8009c5a:	e0af      	b.n	8009dbc <_vfiprintf_r+0x1f4>
 8009c5c:	6963      	ldr	r3, [r4, #20]
 8009c5e:	9a05      	ldr	r2, [sp, #20]
 8009c60:	189b      	adds	r3, r3, r2
 8009c62:	6163      	str	r3, [r4, #20]
 8009c64:	7833      	ldrb	r3, [r6, #0]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d100      	bne.n	8009c6c <_vfiprintf_r+0xa4>
 8009c6a:	e0a7      	b.n	8009dbc <_vfiprintf_r+0x1f4>
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	2300      	movs	r3, #0
 8009c70:	4252      	negs	r2, r2
 8009c72:	6062      	str	r2, [r4, #4]
 8009c74:	a904      	add	r1, sp, #16
 8009c76:	3254      	adds	r2, #84	; 0x54
 8009c78:	1852      	adds	r2, r2, r1
 8009c7a:	1c75      	adds	r5, r6, #1
 8009c7c:	6023      	str	r3, [r4, #0]
 8009c7e:	60e3      	str	r3, [r4, #12]
 8009c80:	60a3      	str	r3, [r4, #8]
 8009c82:	7013      	strb	r3, [r2, #0]
 8009c84:	65a3      	str	r3, [r4, #88]	; 0x58
 8009c86:	4b59      	ldr	r3, [pc, #356]	; (8009dec <_vfiprintf_r+0x224>)
 8009c88:	2205      	movs	r2, #5
 8009c8a:	0018      	movs	r0, r3
 8009c8c:	7829      	ldrb	r1, [r5, #0]
 8009c8e:	9305      	str	r3, [sp, #20]
 8009c90:	f7fe f929 	bl	8007ee6 <memchr>
 8009c94:	1c6e      	adds	r6, r5, #1
 8009c96:	2800      	cmp	r0, #0
 8009c98:	d11f      	bne.n	8009cda <_vfiprintf_r+0x112>
 8009c9a:	6822      	ldr	r2, [r4, #0]
 8009c9c:	06d3      	lsls	r3, r2, #27
 8009c9e:	d504      	bpl.n	8009caa <_vfiprintf_r+0xe2>
 8009ca0:	2353      	movs	r3, #83	; 0x53
 8009ca2:	a904      	add	r1, sp, #16
 8009ca4:	185b      	adds	r3, r3, r1
 8009ca6:	2120      	movs	r1, #32
 8009ca8:	7019      	strb	r1, [r3, #0]
 8009caa:	0713      	lsls	r3, r2, #28
 8009cac:	d504      	bpl.n	8009cb8 <_vfiprintf_r+0xf0>
 8009cae:	2353      	movs	r3, #83	; 0x53
 8009cb0:	a904      	add	r1, sp, #16
 8009cb2:	185b      	adds	r3, r3, r1
 8009cb4:	212b      	movs	r1, #43	; 0x2b
 8009cb6:	7019      	strb	r1, [r3, #0]
 8009cb8:	782b      	ldrb	r3, [r5, #0]
 8009cba:	2b2a      	cmp	r3, #42	; 0x2a
 8009cbc:	d016      	beq.n	8009cec <_vfiprintf_r+0x124>
 8009cbe:	002e      	movs	r6, r5
 8009cc0:	2100      	movs	r1, #0
 8009cc2:	200a      	movs	r0, #10
 8009cc4:	68e3      	ldr	r3, [r4, #12]
 8009cc6:	7832      	ldrb	r2, [r6, #0]
 8009cc8:	1c75      	adds	r5, r6, #1
 8009cca:	3a30      	subs	r2, #48	; 0x30
 8009ccc:	2a09      	cmp	r2, #9
 8009cce:	d94e      	bls.n	8009d6e <_vfiprintf_r+0x1a6>
 8009cd0:	2900      	cmp	r1, #0
 8009cd2:	d111      	bne.n	8009cf8 <_vfiprintf_r+0x130>
 8009cd4:	e017      	b.n	8009d06 <_vfiprintf_r+0x13e>
 8009cd6:	3601      	adds	r6, #1
 8009cd8:	e7af      	b.n	8009c3a <_vfiprintf_r+0x72>
 8009cda:	9b05      	ldr	r3, [sp, #20]
 8009cdc:	6822      	ldr	r2, [r4, #0]
 8009cde:	1ac0      	subs	r0, r0, r3
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	4083      	lsls	r3, r0
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	0035      	movs	r5, r6
 8009ce8:	6023      	str	r3, [r4, #0]
 8009cea:	e7cc      	b.n	8009c86 <_vfiprintf_r+0xbe>
 8009cec:	9b07      	ldr	r3, [sp, #28]
 8009cee:	1d19      	adds	r1, r3, #4
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	9107      	str	r1, [sp, #28]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	db01      	blt.n	8009cfc <_vfiprintf_r+0x134>
 8009cf8:	930b      	str	r3, [sp, #44]	; 0x2c
 8009cfa:	e004      	b.n	8009d06 <_vfiprintf_r+0x13e>
 8009cfc:	425b      	negs	r3, r3
 8009cfe:	60e3      	str	r3, [r4, #12]
 8009d00:	2302      	movs	r3, #2
 8009d02:	4313      	orrs	r3, r2
 8009d04:	6023      	str	r3, [r4, #0]
 8009d06:	7833      	ldrb	r3, [r6, #0]
 8009d08:	2b2e      	cmp	r3, #46	; 0x2e
 8009d0a:	d10a      	bne.n	8009d22 <_vfiprintf_r+0x15a>
 8009d0c:	7873      	ldrb	r3, [r6, #1]
 8009d0e:	2b2a      	cmp	r3, #42	; 0x2a
 8009d10:	d135      	bne.n	8009d7e <_vfiprintf_r+0x1b6>
 8009d12:	9b07      	ldr	r3, [sp, #28]
 8009d14:	3602      	adds	r6, #2
 8009d16:	1d1a      	adds	r2, r3, #4
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	9207      	str	r2, [sp, #28]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	db2b      	blt.n	8009d78 <_vfiprintf_r+0x1b0>
 8009d20:	9309      	str	r3, [sp, #36]	; 0x24
 8009d22:	4d33      	ldr	r5, [pc, #204]	; (8009df0 <_vfiprintf_r+0x228>)
 8009d24:	2203      	movs	r2, #3
 8009d26:	0028      	movs	r0, r5
 8009d28:	7831      	ldrb	r1, [r6, #0]
 8009d2a:	f7fe f8dc 	bl	8007ee6 <memchr>
 8009d2e:	2800      	cmp	r0, #0
 8009d30:	d006      	beq.n	8009d40 <_vfiprintf_r+0x178>
 8009d32:	2340      	movs	r3, #64	; 0x40
 8009d34:	1b40      	subs	r0, r0, r5
 8009d36:	4083      	lsls	r3, r0
 8009d38:	6822      	ldr	r2, [r4, #0]
 8009d3a:	3601      	adds	r6, #1
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	6023      	str	r3, [r4, #0]
 8009d40:	7831      	ldrb	r1, [r6, #0]
 8009d42:	2206      	movs	r2, #6
 8009d44:	482b      	ldr	r0, [pc, #172]	; (8009df4 <_vfiprintf_r+0x22c>)
 8009d46:	1c75      	adds	r5, r6, #1
 8009d48:	7621      	strb	r1, [r4, #24]
 8009d4a:	f7fe f8cc 	bl	8007ee6 <memchr>
 8009d4e:	2800      	cmp	r0, #0
 8009d50:	d043      	beq.n	8009dda <_vfiprintf_r+0x212>
 8009d52:	4b29      	ldr	r3, [pc, #164]	; (8009df8 <_vfiprintf_r+0x230>)
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d125      	bne.n	8009da4 <_vfiprintf_r+0x1dc>
 8009d58:	2207      	movs	r2, #7
 8009d5a:	9b07      	ldr	r3, [sp, #28]
 8009d5c:	3307      	adds	r3, #7
 8009d5e:	4393      	bics	r3, r2
 8009d60:	3308      	adds	r3, #8
 8009d62:	9307      	str	r3, [sp, #28]
 8009d64:	6963      	ldr	r3, [r4, #20]
 8009d66:	9a04      	ldr	r2, [sp, #16]
 8009d68:	189b      	adds	r3, r3, r2
 8009d6a:	6163      	str	r3, [r4, #20]
 8009d6c:	e764      	b.n	8009c38 <_vfiprintf_r+0x70>
 8009d6e:	4343      	muls	r3, r0
 8009d70:	002e      	movs	r6, r5
 8009d72:	2101      	movs	r1, #1
 8009d74:	189b      	adds	r3, r3, r2
 8009d76:	e7a6      	b.n	8009cc6 <_vfiprintf_r+0xfe>
 8009d78:	2301      	movs	r3, #1
 8009d7a:	425b      	negs	r3, r3
 8009d7c:	e7d0      	b.n	8009d20 <_vfiprintf_r+0x158>
 8009d7e:	2300      	movs	r3, #0
 8009d80:	200a      	movs	r0, #10
 8009d82:	001a      	movs	r2, r3
 8009d84:	3601      	adds	r6, #1
 8009d86:	6063      	str	r3, [r4, #4]
 8009d88:	7831      	ldrb	r1, [r6, #0]
 8009d8a:	1c75      	adds	r5, r6, #1
 8009d8c:	3930      	subs	r1, #48	; 0x30
 8009d8e:	2909      	cmp	r1, #9
 8009d90:	d903      	bls.n	8009d9a <_vfiprintf_r+0x1d2>
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d0c5      	beq.n	8009d22 <_vfiprintf_r+0x15a>
 8009d96:	9209      	str	r2, [sp, #36]	; 0x24
 8009d98:	e7c3      	b.n	8009d22 <_vfiprintf_r+0x15a>
 8009d9a:	4342      	muls	r2, r0
 8009d9c:	002e      	movs	r6, r5
 8009d9e:	2301      	movs	r3, #1
 8009da0:	1852      	adds	r2, r2, r1
 8009da2:	e7f1      	b.n	8009d88 <_vfiprintf_r+0x1c0>
 8009da4:	aa07      	add	r2, sp, #28
 8009da6:	9200      	str	r2, [sp, #0]
 8009da8:	0021      	movs	r1, r4
 8009daa:	003a      	movs	r2, r7
 8009dac:	4b13      	ldr	r3, [pc, #76]	; (8009dfc <_vfiprintf_r+0x234>)
 8009dae:	9803      	ldr	r0, [sp, #12]
 8009db0:	f7fd fb0c 	bl	80073cc <_printf_float>
 8009db4:	9004      	str	r0, [sp, #16]
 8009db6:	9b04      	ldr	r3, [sp, #16]
 8009db8:	3301      	adds	r3, #1
 8009dba:	d1d3      	bne.n	8009d64 <_vfiprintf_r+0x19c>
 8009dbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009dbe:	07db      	lsls	r3, r3, #31
 8009dc0:	d405      	bmi.n	8009dce <_vfiprintf_r+0x206>
 8009dc2:	89bb      	ldrh	r3, [r7, #12]
 8009dc4:	059b      	lsls	r3, r3, #22
 8009dc6:	d402      	bmi.n	8009dce <_vfiprintf_r+0x206>
 8009dc8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009dca:	f7fe f88b 	bl	8007ee4 <__retarget_lock_release_recursive>
 8009dce:	89bb      	ldrh	r3, [r7, #12]
 8009dd0:	065b      	lsls	r3, r3, #25
 8009dd2:	d500      	bpl.n	8009dd6 <_vfiprintf_r+0x20e>
 8009dd4:	e71d      	b.n	8009c12 <_vfiprintf_r+0x4a>
 8009dd6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009dd8:	e71d      	b.n	8009c16 <_vfiprintf_r+0x4e>
 8009dda:	aa07      	add	r2, sp, #28
 8009ddc:	9200      	str	r2, [sp, #0]
 8009dde:	0021      	movs	r1, r4
 8009de0:	003a      	movs	r2, r7
 8009de2:	4b06      	ldr	r3, [pc, #24]	; (8009dfc <_vfiprintf_r+0x234>)
 8009de4:	9803      	ldr	r0, [sp, #12]
 8009de6:	f7fd fdb7 	bl	8007958 <_printf_i>
 8009dea:	e7e3      	b.n	8009db4 <_vfiprintf_r+0x1ec>
 8009dec:	0800ac0c 	.word	0x0800ac0c
 8009df0:	0800ac12 	.word	0x0800ac12
 8009df4:	0800ac16 	.word	0x0800ac16
 8009df8:	080073cd 	.word	0x080073cd
 8009dfc:	08009ba5 	.word	0x08009ba5

08009e00 <__swbuf_r>:
 8009e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e02:	0006      	movs	r6, r0
 8009e04:	000d      	movs	r5, r1
 8009e06:	0014      	movs	r4, r2
 8009e08:	2800      	cmp	r0, #0
 8009e0a:	d004      	beq.n	8009e16 <__swbuf_r+0x16>
 8009e0c:	6a03      	ldr	r3, [r0, #32]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d101      	bne.n	8009e16 <__swbuf_r+0x16>
 8009e12:	f7fd ff41 	bl	8007c98 <__sinit>
 8009e16:	69a3      	ldr	r3, [r4, #24]
 8009e18:	60a3      	str	r3, [r4, #8]
 8009e1a:	89a3      	ldrh	r3, [r4, #12]
 8009e1c:	071b      	lsls	r3, r3, #28
 8009e1e:	d528      	bpl.n	8009e72 <__swbuf_r+0x72>
 8009e20:	6923      	ldr	r3, [r4, #16]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d025      	beq.n	8009e72 <__swbuf_r+0x72>
 8009e26:	6923      	ldr	r3, [r4, #16]
 8009e28:	6820      	ldr	r0, [r4, #0]
 8009e2a:	b2ef      	uxtb	r7, r5
 8009e2c:	1ac0      	subs	r0, r0, r3
 8009e2e:	6963      	ldr	r3, [r4, #20]
 8009e30:	b2ed      	uxtb	r5, r5
 8009e32:	4283      	cmp	r3, r0
 8009e34:	dc05      	bgt.n	8009e42 <__swbuf_r+0x42>
 8009e36:	0021      	movs	r1, r4
 8009e38:	0030      	movs	r0, r6
 8009e3a:	f7ff fd8b 	bl	8009954 <_fflush_r>
 8009e3e:	2800      	cmp	r0, #0
 8009e40:	d11d      	bne.n	8009e7e <__swbuf_r+0x7e>
 8009e42:	68a3      	ldr	r3, [r4, #8]
 8009e44:	3001      	adds	r0, #1
 8009e46:	3b01      	subs	r3, #1
 8009e48:	60a3      	str	r3, [r4, #8]
 8009e4a:	6823      	ldr	r3, [r4, #0]
 8009e4c:	1c5a      	adds	r2, r3, #1
 8009e4e:	6022      	str	r2, [r4, #0]
 8009e50:	701f      	strb	r7, [r3, #0]
 8009e52:	6963      	ldr	r3, [r4, #20]
 8009e54:	4283      	cmp	r3, r0
 8009e56:	d004      	beq.n	8009e62 <__swbuf_r+0x62>
 8009e58:	89a3      	ldrh	r3, [r4, #12]
 8009e5a:	07db      	lsls	r3, r3, #31
 8009e5c:	d507      	bpl.n	8009e6e <__swbuf_r+0x6e>
 8009e5e:	2d0a      	cmp	r5, #10
 8009e60:	d105      	bne.n	8009e6e <__swbuf_r+0x6e>
 8009e62:	0021      	movs	r1, r4
 8009e64:	0030      	movs	r0, r6
 8009e66:	f7ff fd75 	bl	8009954 <_fflush_r>
 8009e6a:	2800      	cmp	r0, #0
 8009e6c:	d107      	bne.n	8009e7e <__swbuf_r+0x7e>
 8009e6e:	0028      	movs	r0, r5
 8009e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e72:	0021      	movs	r1, r4
 8009e74:	0030      	movs	r0, r6
 8009e76:	f000 f805 	bl	8009e84 <__swsetup_r>
 8009e7a:	2800      	cmp	r0, #0
 8009e7c:	d0d3      	beq.n	8009e26 <__swbuf_r+0x26>
 8009e7e:	2501      	movs	r5, #1
 8009e80:	426d      	negs	r5, r5
 8009e82:	e7f4      	b.n	8009e6e <__swbuf_r+0x6e>

08009e84 <__swsetup_r>:
 8009e84:	4b30      	ldr	r3, [pc, #192]	; (8009f48 <__swsetup_r+0xc4>)
 8009e86:	b570      	push	{r4, r5, r6, lr}
 8009e88:	0005      	movs	r5, r0
 8009e8a:	6818      	ldr	r0, [r3, #0]
 8009e8c:	000c      	movs	r4, r1
 8009e8e:	2800      	cmp	r0, #0
 8009e90:	d004      	beq.n	8009e9c <__swsetup_r+0x18>
 8009e92:	6a03      	ldr	r3, [r0, #32]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d101      	bne.n	8009e9c <__swsetup_r+0x18>
 8009e98:	f7fd fefe 	bl	8007c98 <__sinit>
 8009e9c:	230c      	movs	r3, #12
 8009e9e:	5ee2      	ldrsh	r2, [r4, r3]
 8009ea0:	b293      	uxth	r3, r2
 8009ea2:	0711      	lsls	r1, r2, #28
 8009ea4:	d423      	bmi.n	8009eee <__swsetup_r+0x6a>
 8009ea6:	06d9      	lsls	r1, r3, #27
 8009ea8:	d407      	bmi.n	8009eba <__swsetup_r+0x36>
 8009eaa:	2309      	movs	r3, #9
 8009eac:	2001      	movs	r0, #1
 8009eae:	602b      	str	r3, [r5, #0]
 8009eb0:	3337      	adds	r3, #55	; 0x37
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	81a3      	strh	r3, [r4, #12]
 8009eb6:	4240      	negs	r0, r0
 8009eb8:	bd70      	pop	{r4, r5, r6, pc}
 8009eba:	075b      	lsls	r3, r3, #29
 8009ebc:	d513      	bpl.n	8009ee6 <__swsetup_r+0x62>
 8009ebe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ec0:	2900      	cmp	r1, #0
 8009ec2:	d008      	beq.n	8009ed6 <__swsetup_r+0x52>
 8009ec4:	0023      	movs	r3, r4
 8009ec6:	3344      	adds	r3, #68	; 0x44
 8009ec8:	4299      	cmp	r1, r3
 8009eca:	d002      	beq.n	8009ed2 <__swsetup_r+0x4e>
 8009ecc:	0028      	movs	r0, r5
 8009ece:	f7fe feb3 	bl	8008c38 <_free_r>
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	6363      	str	r3, [r4, #52]	; 0x34
 8009ed6:	2224      	movs	r2, #36	; 0x24
 8009ed8:	89a3      	ldrh	r3, [r4, #12]
 8009eda:	4393      	bics	r3, r2
 8009edc:	81a3      	strh	r3, [r4, #12]
 8009ede:	2300      	movs	r3, #0
 8009ee0:	6063      	str	r3, [r4, #4]
 8009ee2:	6923      	ldr	r3, [r4, #16]
 8009ee4:	6023      	str	r3, [r4, #0]
 8009ee6:	2308      	movs	r3, #8
 8009ee8:	89a2      	ldrh	r2, [r4, #12]
 8009eea:	4313      	orrs	r3, r2
 8009eec:	81a3      	strh	r3, [r4, #12]
 8009eee:	6923      	ldr	r3, [r4, #16]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d10b      	bne.n	8009f0c <__swsetup_r+0x88>
 8009ef4:	21a0      	movs	r1, #160	; 0xa0
 8009ef6:	2280      	movs	r2, #128	; 0x80
 8009ef8:	89a3      	ldrh	r3, [r4, #12]
 8009efa:	0089      	lsls	r1, r1, #2
 8009efc:	0092      	lsls	r2, r2, #2
 8009efe:	400b      	ands	r3, r1
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d003      	beq.n	8009f0c <__swsetup_r+0x88>
 8009f04:	0021      	movs	r1, r4
 8009f06:	0028      	movs	r0, r5
 8009f08:	f000 f892 	bl	800a030 <__smakebuf_r>
 8009f0c:	220c      	movs	r2, #12
 8009f0e:	5ea3      	ldrsh	r3, [r4, r2]
 8009f10:	2001      	movs	r0, #1
 8009f12:	001a      	movs	r2, r3
 8009f14:	b299      	uxth	r1, r3
 8009f16:	4002      	ands	r2, r0
 8009f18:	4203      	tst	r3, r0
 8009f1a:	d00f      	beq.n	8009f3c <__swsetup_r+0xb8>
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	60a2      	str	r2, [r4, #8]
 8009f20:	6962      	ldr	r2, [r4, #20]
 8009f22:	4252      	negs	r2, r2
 8009f24:	61a2      	str	r2, [r4, #24]
 8009f26:	2000      	movs	r0, #0
 8009f28:	6922      	ldr	r2, [r4, #16]
 8009f2a:	4282      	cmp	r2, r0
 8009f2c:	d1c4      	bne.n	8009eb8 <__swsetup_r+0x34>
 8009f2e:	0609      	lsls	r1, r1, #24
 8009f30:	d5c2      	bpl.n	8009eb8 <__swsetup_r+0x34>
 8009f32:	2240      	movs	r2, #64	; 0x40
 8009f34:	4313      	orrs	r3, r2
 8009f36:	81a3      	strh	r3, [r4, #12]
 8009f38:	3801      	subs	r0, #1
 8009f3a:	e7bd      	b.n	8009eb8 <__swsetup_r+0x34>
 8009f3c:	0788      	lsls	r0, r1, #30
 8009f3e:	d400      	bmi.n	8009f42 <__swsetup_r+0xbe>
 8009f40:	6962      	ldr	r2, [r4, #20]
 8009f42:	60a2      	str	r2, [r4, #8]
 8009f44:	e7ef      	b.n	8009f26 <__swsetup_r+0xa2>
 8009f46:	46c0      	nop			; (mov r8, r8)
 8009f48:	200000f4 	.word	0x200000f4

08009f4c <_raise_r>:
 8009f4c:	b570      	push	{r4, r5, r6, lr}
 8009f4e:	0004      	movs	r4, r0
 8009f50:	000d      	movs	r5, r1
 8009f52:	291f      	cmp	r1, #31
 8009f54:	d904      	bls.n	8009f60 <_raise_r+0x14>
 8009f56:	2316      	movs	r3, #22
 8009f58:	6003      	str	r3, [r0, #0]
 8009f5a:	2001      	movs	r0, #1
 8009f5c:	4240      	negs	r0, r0
 8009f5e:	bd70      	pop	{r4, r5, r6, pc}
 8009f60:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d004      	beq.n	8009f70 <_raise_r+0x24>
 8009f66:	008a      	lsls	r2, r1, #2
 8009f68:	189b      	adds	r3, r3, r2
 8009f6a:	681a      	ldr	r2, [r3, #0]
 8009f6c:	2a00      	cmp	r2, #0
 8009f6e:	d108      	bne.n	8009f82 <_raise_r+0x36>
 8009f70:	0020      	movs	r0, r4
 8009f72:	f000 f831 	bl	8009fd8 <_getpid_r>
 8009f76:	002a      	movs	r2, r5
 8009f78:	0001      	movs	r1, r0
 8009f7a:	0020      	movs	r0, r4
 8009f7c:	f000 f81a 	bl	8009fb4 <_kill_r>
 8009f80:	e7ed      	b.n	8009f5e <_raise_r+0x12>
 8009f82:	2000      	movs	r0, #0
 8009f84:	2a01      	cmp	r2, #1
 8009f86:	d0ea      	beq.n	8009f5e <_raise_r+0x12>
 8009f88:	1c51      	adds	r1, r2, #1
 8009f8a:	d103      	bne.n	8009f94 <_raise_r+0x48>
 8009f8c:	2316      	movs	r3, #22
 8009f8e:	3001      	adds	r0, #1
 8009f90:	6023      	str	r3, [r4, #0]
 8009f92:	e7e4      	b.n	8009f5e <_raise_r+0x12>
 8009f94:	2400      	movs	r4, #0
 8009f96:	0028      	movs	r0, r5
 8009f98:	601c      	str	r4, [r3, #0]
 8009f9a:	4790      	blx	r2
 8009f9c:	0020      	movs	r0, r4
 8009f9e:	e7de      	b.n	8009f5e <_raise_r+0x12>

08009fa0 <raise>:
 8009fa0:	b510      	push	{r4, lr}
 8009fa2:	4b03      	ldr	r3, [pc, #12]	; (8009fb0 <raise+0x10>)
 8009fa4:	0001      	movs	r1, r0
 8009fa6:	6818      	ldr	r0, [r3, #0]
 8009fa8:	f7ff ffd0 	bl	8009f4c <_raise_r>
 8009fac:	bd10      	pop	{r4, pc}
 8009fae:	46c0      	nop			; (mov r8, r8)
 8009fb0:	200000f4 	.word	0x200000f4

08009fb4 <_kill_r>:
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	b570      	push	{r4, r5, r6, lr}
 8009fb8:	4d06      	ldr	r5, [pc, #24]	; (8009fd4 <_kill_r+0x20>)
 8009fba:	0004      	movs	r4, r0
 8009fbc:	0008      	movs	r0, r1
 8009fbe:	0011      	movs	r1, r2
 8009fc0:	602b      	str	r3, [r5, #0]
 8009fc2:	f7f9 fb41 	bl	8003648 <_kill>
 8009fc6:	1c43      	adds	r3, r0, #1
 8009fc8:	d103      	bne.n	8009fd2 <_kill_r+0x1e>
 8009fca:	682b      	ldr	r3, [r5, #0]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d000      	beq.n	8009fd2 <_kill_r+0x1e>
 8009fd0:	6023      	str	r3, [r4, #0]
 8009fd2:	bd70      	pop	{r4, r5, r6, pc}
 8009fd4:	20000510 	.word	0x20000510

08009fd8 <_getpid_r>:
 8009fd8:	b510      	push	{r4, lr}
 8009fda:	f7f9 fb2f 	bl	800363c <_getpid>
 8009fde:	bd10      	pop	{r4, pc}

08009fe0 <__swhatbuf_r>:
 8009fe0:	b570      	push	{r4, r5, r6, lr}
 8009fe2:	000e      	movs	r6, r1
 8009fe4:	001d      	movs	r5, r3
 8009fe6:	230e      	movs	r3, #14
 8009fe8:	5ec9      	ldrsh	r1, [r1, r3]
 8009fea:	0014      	movs	r4, r2
 8009fec:	b096      	sub	sp, #88	; 0x58
 8009fee:	2900      	cmp	r1, #0
 8009ff0:	da0c      	bge.n	800a00c <__swhatbuf_r+0x2c>
 8009ff2:	89b2      	ldrh	r2, [r6, #12]
 8009ff4:	2380      	movs	r3, #128	; 0x80
 8009ff6:	0011      	movs	r1, r2
 8009ff8:	4019      	ands	r1, r3
 8009ffa:	421a      	tst	r2, r3
 8009ffc:	d013      	beq.n	800a026 <__swhatbuf_r+0x46>
 8009ffe:	2100      	movs	r1, #0
 800a000:	3b40      	subs	r3, #64	; 0x40
 800a002:	2000      	movs	r0, #0
 800a004:	6029      	str	r1, [r5, #0]
 800a006:	6023      	str	r3, [r4, #0]
 800a008:	b016      	add	sp, #88	; 0x58
 800a00a:	bd70      	pop	{r4, r5, r6, pc}
 800a00c:	466a      	mov	r2, sp
 800a00e:	f000 f84d 	bl	800a0ac <_fstat_r>
 800a012:	2800      	cmp	r0, #0
 800a014:	dbed      	blt.n	8009ff2 <__swhatbuf_r+0x12>
 800a016:	23f0      	movs	r3, #240	; 0xf0
 800a018:	9901      	ldr	r1, [sp, #4]
 800a01a:	021b      	lsls	r3, r3, #8
 800a01c:	4019      	ands	r1, r3
 800a01e:	4b03      	ldr	r3, [pc, #12]	; (800a02c <__swhatbuf_r+0x4c>)
 800a020:	18c9      	adds	r1, r1, r3
 800a022:	424b      	negs	r3, r1
 800a024:	4159      	adcs	r1, r3
 800a026:	2380      	movs	r3, #128	; 0x80
 800a028:	00db      	lsls	r3, r3, #3
 800a02a:	e7ea      	b.n	800a002 <__swhatbuf_r+0x22>
 800a02c:	ffffe000 	.word	0xffffe000

0800a030 <__smakebuf_r>:
 800a030:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a032:	2602      	movs	r6, #2
 800a034:	898b      	ldrh	r3, [r1, #12]
 800a036:	0005      	movs	r5, r0
 800a038:	000c      	movs	r4, r1
 800a03a:	4233      	tst	r3, r6
 800a03c:	d006      	beq.n	800a04c <__smakebuf_r+0x1c>
 800a03e:	0023      	movs	r3, r4
 800a040:	3347      	adds	r3, #71	; 0x47
 800a042:	6023      	str	r3, [r4, #0]
 800a044:	6123      	str	r3, [r4, #16]
 800a046:	2301      	movs	r3, #1
 800a048:	6163      	str	r3, [r4, #20]
 800a04a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a04c:	466a      	mov	r2, sp
 800a04e:	ab01      	add	r3, sp, #4
 800a050:	f7ff ffc6 	bl	8009fe0 <__swhatbuf_r>
 800a054:	9900      	ldr	r1, [sp, #0]
 800a056:	0007      	movs	r7, r0
 800a058:	0028      	movs	r0, r5
 800a05a:	f7fe fe63 	bl	8008d24 <_malloc_r>
 800a05e:	2800      	cmp	r0, #0
 800a060:	d108      	bne.n	800a074 <__smakebuf_r+0x44>
 800a062:	220c      	movs	r2, #12
 800a064:	5ea3      	ldrsh	r3, [r4, r2]
 800a066:	059a      	lsls	r2, r3, #22
 800a068:	d4ef      	bmi.n	800a04a <__smakebuf_r+0x1a>
 800a06a:	2203      	movs	r2, #3
 800a06c:	4393      	bics	r3, r2
 800a06e:	431e      	orrs	r6, r3
 800a070:	81a6      	strh	r6, [r4, #12]
 800a072:	e7e4      	b.n	800a03e <__smakebuf_r+0xe>
 800a074:	2380      	movs	r3, #128	; 0x80
 800a076:	89a2      	ldrh	r2, [r4, #12]
 800a078:	6020      	str	r0, [r4, #0]
 800a07a:	4313      	orrs	r3, r2
 800a07c:	81a3      	strh	r3, [r4, #12]
 800a07e:	9b00      	ldr	r3, [sp, #0]
 800a080:	6120      	str	r0, [r4, #16]
 800a082:	6163      	str	r3, [r4, #20]
 800a084:	9b01      	ldr	r3, [sp, #4]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d00c      	beq.n	800a0a4 <__smakebuf_r+0x74>
 800a08a:	0028      	movs	r0, r5
 800a08c:	230e      	movs	r3, #14
 800a08e:	5ee1      	ldrsh	r1, [r4, r3]
 800a090:	f000 f81e 	bl	800a0d0 <_isatty_r>
 800a094:	2800      	cmp	r0, #0
 800a096:	d005      	beq.n	800a0a4 <__smakebuf_r+0x74>
 800a098:	2303      	movs	r3, #3
 800a09a:	89a2      	ldrh	r2, [r4, #12]
 800a09c:	439a      	bics	r2, r3
 800a09e:	3b02      	subs	r3, #2
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	81a3      	strh	r3, [r4, #12]
 800a0a4:	89a3      	ldrh	r3, [r4, #12]
 800a0a6:	433b      	orrs	r3, r7
 800a0a8:	81a3      	strh	r3, [r4, #12]
 800a0aa:	e7ce      	b.n	800a04a <__smakebuf_r+0x1a>

0800a0ac <_fstat_r>:
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	b570      	push	{r4, r5, r6, lr}
 800a0b0:	4d06      	ldr	r5, [pc, #24]	; (800a0cc <_fstat_r+0x20>)
 800a0b2:	0004      	movs	r4, r0
 800a0b4:	0008      	movs	r0, r1
 800a0b6:	0011      	movs	r1, r2
 800a0b8:	602b      	str	r3, [r5, #0]
 800a0ba:	f7f9 fb24 	bl	8003706 <_fstat>
 800a0be:	1c43      	adds	r3, r0, #1
 800a0c0:	d103      	bne.n	800a0ca <_fstat_r+0x1e>
 800a0c2:	682b      	ldr	r3, [r5, #0]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d000      	beq.n	800a0ca <_fstat_r+0x1e>
 800a0c8:	6023      	str	r3, [r4, #0]
 800a0ca:	bd70      	pop	{r4, r5, r6, pc}
 800a0cc:	20000510 	.word	0x20000510

0800a0d0 <_isatty_r>:
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	b570      	push	{r4, r5, r6, lr}
 800a0d4:	4d06      	ldr	r5, [pc, #24]	; (800a0f0 <_isatty_r+0x20>)
 800a0d6:	0004      	movs	r4, r0
 800a0d8:	0008      	movs	r0, r1
 800a0da:	602b      	str	r3, [r5, #0]
 800a0dc:	f7f9 fb21 	bl	8003722 <_isatty>
 800a0e0:	1c43      	adds	r3, r0, #1
 800a0e2:	d103      	bne.n	800a0ec <_isatty_r+0x1c>
 800a0e4:	682b      	ldr	r3, [r5, #0]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d000      	beq.n	800a0ec <_isatty_r+0x1c>
 800a0ea:	6023      	str	r3, [r4, #0]
 800a0ec:	bd70      	pop	{r4, r5, r6, pc}
 800a0ee:	46c0      	nop			; (mov r8, r8)
 800a0f0:	20000510 	.word	0x20000510

0800a0f4 <atan2>:
 800a0f4:	b510      	push	{r4, lr}
 800a0f6:	f000 fa97 	bl	800a628 <__ieee754_atan2>
 800a0fa:	bd10      	pop	{r4, pc}

0800a0fc <sqrt>:
 800a0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0fe:	0004      	movs	r4, r0
 800a100:	000d      	movs	r5, r1
 800a102:	f000 f9a5 	bl	800a450 <__ieee754_sqrt>
 800a106:	0022      	movs	r2, r4
 800a108:	0006      	movs	r6, r0
 800a10a:	000f      	movs	r7, r1
 800a10c:	002b      	movs	r3, r5
 800a10e:	0020      	movs	r0, r4
 800a110:	0029      	movs	r1, r5
 800a112:	f7f8 fb85 	bl	8002820 <__aeabi_dcmpun>
 800a116:	2800      	cmp	r0, #0
 800a118:	d113      	bne.n	800a142 <sqrt+0x46>
 800a11a:	2200      	movs	r2, #0
 800a11c:	2300      	movs	r3, #0
 800a11e:	0020      	movs	r0, r4
 800a120:	0029      	movs	r1, r5
 800a122:	f7f6 f991 	bl	8000448 <__aeabi_dcmplt>
 800a126:	2800      	cmp	r0, #0
 800a128:	d00b      	beq.n	800a142 <sqrt+0x46>
 800a12a:	f7fd feaf 	bl	8007e8c <__errno>
 800a12e:	2321      	movs	r3, #33	; 0x21
 800a130:	2200      	movs	r2, #0
 800a132:	6003      	str	r3, [r0, #0]
 800a134:	2300      	movs	r3, #0
 800a136:	0010      	movs	r0, r2
 800a138:	0019      	movs	r1, r3
 800a13a:	f7f7 f933 	bl	80013a4 <__aeabi_ddiv>
 800a13e:	0006      	movs	r6, r0
 800a140:	000f      	movs	r7, r1
 800a142:	0030      	movs	r0, r6
 800a144:	0039      	movs	r1, r7
 800a146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a148 <atan>:
 800a148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a14a:	4b98      	ldr	r3, [pc, #608]	; (800a3ac <atan+0x264>)
 800a14c:	b085      	sub	sp, #20
 800a14e:	004e      	lsls	r6, r1, #1
 800a150:	0004      	movs	r4, r0
 800a152:	000d      	movs	r5, r1
 800a154:	9103      	str	r1, [sp, #12]
 800a156:	0876      	lsrs	r6, r6, #1
 800a158:	429e      	cmp	r6, r3
 800a15a:	dd18      	ble.n	800a18e <atan+0x46>
 800a15c:	4b94      	ldr	r3, [pc, #592]	; (800a3b0 <atan+0x268>)
 800a15e:	429e      	cmp	r6, r3
 800a160:	dc02      	bgt.n	800a168 <atan+0x20>
 800a162:	d10a      	bne.n	800a17a <atan+0x32>
 800a164:	2800      	cmp	r0, #0
 800a166:	d008      	beq.n	800a17a <atan+0x32>
 800a168:	0022      	movs	r2, r4
 800a16a:	002b      	movs	r3, r5
 800a16c:	0020      	movs	r0, r4
 800a16e:	0029      	movs	r1, r5
 800a170:	f7f6 fdb8 	bl	8000ce4 <__aeabi_dadd>
 800a174:	0004      	movs	r4, r0
 800a176:	000d      	movs	r5, r1
 800a178:	e005      	b.n	800a186 <atan+0x3e>
 800a17a:	9b03      	ldr	r3, [sp, #12]
 800a17c:	4c8d      	ldr	r4, [pc, #564]	; (800a3b4 <atan+0x26c>)
 800a17e:	2b00      	cmp	r3, #0
 800a180:	dd00      	ble.n	800a184 <atan+0x3c>
 800a182:	e110      	b.n	800a3a6 <atan+0x25e>
 800a184:	4d8c      	ldr	r5, [pc, #560]	; (800a3b8 <atan+0x270>)
 800a186:	0020      	movs	r0, r4
 800a188:	0029      	movs	r1, r5
 800a18a:	b005      	add	sp, #20
 800a18c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a18e:	4b8b      	ldr	r3, [pc, #556]	; (800a3bc <atan+0x274>)
 800a190:	429e      	cmp	r6, r3
 800a192:	dc0f      	bgt.n	800a1b4 <atan+0x6c>
 800a194:	4b8a      	ldr	r3, [pc, #552]	; (800a3c0 <atan+0x278>)
 800a196:	429e      	cmp	r6, r3
 800a198:	dc09      	bgt.n	800a1ae <atan+0x66>
 800a19a:	4a8a      	ldr	r2, [pc, #552]	; (800a3c4 <atan+0x27c>)
 800a19c:	4b8a      	ldr	r3, [pc, #552]	; (800a3c8 <atan+0x280>)
 800a19e:	f7f6 fda1 	bl	8000ce4 <__aeabi_dadd>
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	4b89      	ldr	r3, [pc, #548]	; (800a3cc <atan+0x284>)
 800a1a6:	f7f6 f963 	bl	8000470 <__aeabi_dcmpgt>
 800a1aa:	2800      	cmp	r0, #0
 800a1ac:	d1eb      	bne.n	800a186 <atan+0x3e>
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	425b      	negs	r3, r3
 800a1b2:	e025      	b.n	800a200 <atan+0xb8>
 800a1b4:	f000 f948 	bl	800a448 <fabs>
 800a1b8:	4b85      	ldr	r3, [pc, #532]	; (800a3d0 <atan+0x288>)
 800a1ba:	0004      	movs	r4, r0
 800a1bc:	000d      	movs	r5, r1
 800a1be:	429e      	cmp	r6, r3
 800a1c0:	dd00      	ble.n	800a1c4 <atan+0x7c>
 800a1c2:	e0aa      	b.n	800a31a <atan+0x1d2>
 800a1c4:	4b83      	ldr	r3, [pc, #524]	; (800a3d4 <atan+0x28c>)
 800a1c6:	429e      	cmp	r6, r3
 800a1c8:	dd00      	ble.n	800a1cc <atan+0x84>
 800a1ca:	e090      	b.n	800a2ee <atan+0x1a6>
 800a1cc:	0002      	movs	r2, r0
 800a1ce:	000b      	movs	r3, r1
 800a1d0:	f7f6 fd88 	bl	8000ce4 <__aeabi_dadd>
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	4b7d      	ldr	r3, [pc, #500]	; (800a3cc <atan+0x284>)
 800a1d8:	f7f7 ffa0 	bl	800211c <__aeabi_dsub>
 800a1dc:	2380      	movs	r3, #128	; 0x80
 800a1de:	0006      	movs	r6, r0
 800a1e0:	000f      	movs	r7, r1
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	0020      	movs	r0, r4
 800a1e6:	0029      	movs	r1, r5
 800a1e8:	05db      	lsls	r3, r3, #23
 800a1ea:	f7f6 fd7b 	bl	8000ce4 <__aeabi_dadd>
 800a1ee:	000b      	movs	r3, r1
 800a1f0:	0002      	movs	r2, r0
 800a1f2:	0039      	movs	r1, r7
 800a1f4:	0030      	movs	r0, r6
 800a1f6:	f7f7 f8d5 	bl	80013a4 <__aeabi_ddiv>
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	0004      	movs	r4, r0
 800a1fe:	000d      	movs	r5, r1
 800a200:	0022      	movs	r2, r4
 800a202:	9302      	str	r3, [sp, #8]
 800a204:	0020      	movs	r0, r4
 800a206:	002b      	movs	r3, r5
 800a208:	0029      	movs	r1, r5
 800a20a:	f7f7 fcc5 	bl	8001b98 <__aeabi_dmul>
 800a20e:	0002      	movs	r2, r0
 800a210:	000b      	movs	r3, r1
 800a212:	9000      	str	r0, [sp, #0]
 800a214:	9101      	str	r1, [sp, #4]
 800a216:	f7f7 fcbf 	bl	8001b98 <__aeabi_dmul>
 800a21a:	0006      	movs	r6, r0
 800a21c:	000f      	movs	r7, r1
 800a21e:	4a6e      	ldr	r2, [pc, #440]	; (800a3d8 <atan+0x290>)
 800a220:	4b6e      	ldr	r3, [pc, #440]	; (800a3dc <atan+0x294>)
 800a222:	f7f7 fcb9 	bl	8001b98 <__aeabi_dmul>
 800a226:	4a6e      	ldr	r2, [pc, #440]	; (800a3e0 <atan+0x298>)
 800a228:	4b6e      	ldr	r3, [pc, #440]	; (800a3e4 <atan+0x29c>)
 800a22a:	f7f6 fd5b 	bl	8000ce4 <__aeabi_dadd>
 800a22e:	0032      	movs	r2, r6
 800a230:	003b      	movs	r3, r7
 800a232:	f7f7 fcb1 	bl	8001b98 <__aeabi_dmul>
 800a236:	4a6c      	ldr	r2, [pc, #432]	; (800a3e8 <atan+0x2a0>)
 800a238:	4b6c      	ldr	r3, [pc, #432]	; (800a3ec <atan+0x2a4>)
 800a23a:	f7f6 fd53 	bl	8000ce4 <__aeabi_dadd>
 800a23e:	0032      	movs	r2, r6
 800a240:	003b      	movs	r3, r7
 800a242:	f7f7 fca9 	bl	8001b98 <__aeabi_dmul>
 800a246:	4a6a      	ldr	r2, [pc, #424]	; (800a3f0 <atan+0x2a8>)
 800a248:	4b6a      	ldr	r3, [pc, #424]	; (800a3f4 <atan+0x2ac>)
 800a24a:	f7f6 fd4b 	bl	8000ce4 <__aeabi_dadd>
 800a24e:	0032      	movs	r2, r6
 800a250:	003b      	movs	r3, r7
 800a252:	f7f7 fca1 	bl	8001b98 <__aeabi_dmul>
 800a256:	4a68      	ldr	r2, [pc, #416]	; (800a3f8 <atan+0x2b0>)
 800a258:	4b68      	ldr	r3, [pc, #416]	; (800a3fc <atan+0x2b4>)
 800a25a:	f7f6 fd43 	bl	8000ce4 <__aeabi_dadd>
 800a25e:	0032      	movs	r2, r6
 800a260:	003b      	movs	r3, r7
 800a262:	f7f7 fc99 	bl	8001b98 <__aeabi_dmul>
 800a266:	4a66      	ldr	r2, [pc, #408]	; (800a400 <atan+0x2b8>)
 800a268:	4b66      	ldr	r3, [pc, #408]	; (800a404 <atan+0x2bc>)
 800a26a:	f7f6 fd3b 	bl	8000ce4 <__aeabi_dadd>
 800a26e:	9a00      	ldr	r2, [sp, #0]
 800a270:	9b01      	ldr	r3, [sp, #4]
 800a272:	f7f7 fc91 	bl	8001b98 <__aeabi_dmul>
 800a276:	4a64      	ldr	r2, [pc, #400]	; (800a408 <atan+0x2c0>)
 800a278:	9000      	str	r0, [sp, #0]
 800a27a:	9101      	str	r1, [sp, #4]
 800a27c:	4b63      	ldr	r3, [pc, #396]	; (800a40c <atan+0x2c4>)
 800a27e:	0030      	movs	r0, r6
 800a280:	0039      	movs	r1, r7
 800a282:	f7f7 fc89 	bl	8001b98 <__aeabi_dmul>
 800a286:	4a62      	ldr	r2, [pc, #392]	; (800a410 <atan+0x2c8>)
 800a288:	4b62      	ldr	r3, [pc, #392]	; (800a414 <atan+0x2cc>)
 800a28a:	f7f7 ff47 	bl	800211c <__aeabi_dsub>
 800a28e:	0032      	movs	r2, r6
 800a290:	003b      	movs	r3, r7
 800a292:	f7f7 fc81 	bl	8001b98 <__aeabi_dmul>
 800a296:	4a60      	ldr	r2, [pc, #384]	; (800a418 <atan+0x2d0>)
 800a298:	4b60      	ldr	r3, [pc, #384]	; (800a41c <atan+0x2d4>)
 800a29a:	f7f7 ff3f 	bl	800211c <__aeabi_dsub>
 800a29e:	0032      	movs	r2, r6
 800a2a0:	003b      	movs	r3, r7
 800a2a2:	f7f7 fc79 	bl	8001b98 <__aeabi_dmul>
 800a2a6:	4a5e      	ldr	r2, [pc, #376]	; (800a420 <atan+0x2d8>)
 800a2a8:	4b5e      	ldr	r3, [pc, #376]	; (800a424 <atan+0x2dc>)
 800a2aa:	f7f7 ff37 	bl	800211c <__aeabi_dsub>
 800a2ae:	0032      	movs	r2, r6
 800a2b0:	003b      	movs	r3, r7
 800a2b2:	f7f7 fc71 	bl	8001b98 <__aeabi_dmul>
 800a2b6:	4a5c      	ldr	r2, [pc, #368]	; (800a428 <atan+0x2e0>)
 800a2b8:	4b5c      	ldr	r3, [pc, #368]	; (800a42c <atan+0x2e4>)
 800a2ba:	f7f7 ff2f 	bl	800211c <__aeabi_dsub>
 800a2be:	0032      	movs	r2, r6
 800a2c0:	003b      	movs	r3, r7
 800a2c2:	f7f7 fc69 	bl	8001b98 <__aeabi_dmul>
 800a2c6:	0002      	movs	r2, r0
 800a2c8:	000b      	movs	r3, r1
 800a2ca:	9800      	ldr	r0, [sp, #0]
 800a2cc:	9901      	ldr	r1, [sp, #4]
 800a2ce:	f7f6 fd09 	bl	8000ce4 <__aeabi_dadd>
 800a2d2:	002b      	movs	r3, r5
 800a2d4:	0022      	movs	r2, r4
 800a2d6:	f7f7 fc5f 	bl	8001b98 <__aeabi_dmul>
 800a2da:	9b02      	ldr	r3, [sp, #8]
 800a2dc:	3301      	adds	r3, #1
 800a2de:	d143      	bne.n	800a368 <atan+0x220>
 800a2e0:	0002      	movs	r2, r0
 800a2e2:	000b      	movs	r3, r1
 800a2e4:	0020      	movs	r0, r4
 800a2e6:	0029      	movs	r1, r5
 800a2e8:	f7f7 ff18 	bl	800211c <__aeabi_dsub>
 800a2ec:	e742      	b.n	800a174 <atan+0x2c>
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	4b36      	ldr	r3, [pc, #216]	; (800a3cc <atan+0x284>)
 800a2f2:	f7f7 ff13 	bl	800211c <__aeabi_dsub>
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	0006      	movs	r6, r0
 800a2fa:	000f      	movs	r7, r1
 800a2fc:	0020      	movs	r0, r4
 800a2fe:	0029      	movs	r1, r5
 800a300:	4b32      	ldr	r3, [pc, #200]	; (800a3cc <atan+0x284>)
 800a302:	f7f6 fcef 	bl	8000ce4 <__aeabi_dadd>
 800a306:	000b      	movs	r3, r1
 800a308:	0002      	movs	r2, r0
 800a30a:	0039      	movs	r1, r7
 800a30c:	0030      	movs	r0, r6
 800a30e:	f7f7 f849 	bl	80013a4 <__aeabi_ddiv>
 800a312:	2301      	movs	r3, #1
 800a314:	0004      	movs	r4, r0
 800a316:	000d      	movs	r5, r1
 800a318:	e772      	b.n	800a200 <atan+0xb8>
 800a31a:	4b45      	ldr	r3, [pc, #276]	; (800a430 <atan+0x2e8>)
 800a31c:	429e      	cmp	r6, r3
 800a31e:	dc19      	bgt.n	800a354 <atan+0x20c>
 800a320:	2200      	movs	r2, #0
 800a322:	4b44      	ldr	r3, [pc, #272]	; (800a434 <atan+0x2ec>)
 800a324:	f7f7 fefa 	bl	800211c <__aeabi_dsub>
 800a328:	2200      	movs	r2, #0
 800a32a:	0006      	movs	r6, r0
 800a32c:	000f      	movs	r7, r1
 800a32e:	0020      	movs	r0, r4
 800a330:	0029      	movs	r1, r5
 800a332:	4b40      	ldr	r3, [pc, #256]	; (800a434 <atan+0x2ec>)
 800a334:	f7f7 fc30 	bl	8001b98 <__aeabi_dmul>
 800a338:	2200      	movs	r2, #0
 800a33a:	4b24      	ldr	r3, [pc, #144]	; (800a3cc <atan+0x284>)
 800a33c:	f7f6 fcd2 	bl	8000ce4 <__aeabi_dadd>
 800a340:	000b      	movs	r3, r1
 800a342:	0002      	movs	r2, r0
 800a344:	0039      	movs	r1, r7
 800a346:	0030      	movs	r0, r6
 800a348:	f7f7 f82c 	bl	80013a4 <__aeabi_ddiv>
 800a34c:	2302      	movs	r3, #2
 800a34e:	0004      	movs	r4, r0
 800a350:	000d      	movs	r5, r1
 800a352:	e755      	b.n	800a200 <atan+0xb8>
 800a354:	000b      	movs	r3, r1
 800a356:	0002      	movs	r2, r0
 800a358:	4937      	ldr	r1, [pc, #220]	; (800a438 <atan+0x2f0>)
 800a35a:	2000      	movs	r0, #0
 800a35c:	f7f7 f822 	bl	80013a4 <__aeabi_ddiv>
 800a360:	2303      	movs	r3, #3
 800a362:	0004      	movs	r4, r0
 800a364:	000d      	movs	r5, r1
 800a366:	e74b      	b.n	800a200 <atan+0xb8>
 800a368:	9b02      	ldr	r3, [sp, #8]
 800a36a:	4e34      	ldr	r6, [pc, #208]	; (800a43c <atan+0x2f4>)
 800a36c:	00db      	lsls	r3, r3, #3
 800a36e:	4f34      	ldr	r7, [pc, #208]	; (800a440 <atan+0x2f8>)
 800a370:	18f6      	adds	r6, r6, r3
 800a372:	18ff      	adds	r7, r7, r3
 800a374:	6832      	ldr	r2, [r6, #0]
 800a376:	6873      	ldr	r3, [r6, #4]
 800a378:	f7f7 fed0 	bl	800211c <__aeabi_dsub>
 800a37c:	0022      	movs	r2, r4
 800a37e:	002b      	movs	r3, r5
 800a380:	f7f7 fecc 	bl	800211c <__aeabi_dsub>
 800a384:	000b      	movs	r3, r1
 800a386:	0002      	movs	r2, r0
 800a388:	6838      	ldr	r0, [r7, #0]
 800a38a:	6879      	ldr	r1, [r7, #4]
 800a38c:	f7f7 fec6 	bl	800211c <__aeabi_dsub>
 800a390:	9b03      	ldr	r3, [sp, #12]
 800a392:	0004      	movs	r4, r0
 800a394:	000d      	movs	r5, r1
 800a396:	2b00      	cmp	r3, #0
 800a398:	db00      	blt.n	800a39c <atan+0x254>
 800a39a:	e6f4      	b.n	800a186 <atan+0x3e>
 800a39c:	2180      	movs	r1, #128	; 0x80
 800a39e:	0609      	lsls	r1, r1, #24
 800a3a0:	186b      	adds	r3, r5, r1
 800a3a2:	001d      	movs	r5, r3
 800a3a4:	e6ef      	b.n	800a186 <atan+0x3e>
 800a3a6:	4d27      	ldr	r5, [pc, #156]	; (800a444 <atan+0x2fc>)
 800a3a8:	e6ed      	b.n	800a186 <atan+0x3e>
 800a3aa:	46c0      	nop			; (mov r8, r8)
 800a3ac:	440fffff 	.word	0x440fffff
 800a3b0:	7ff00000 	.word	0x7ff00000
 800a3b4:	54442d18 	.word	0x54442d18
 800a3b8:	bff921fb 	.word	0xbff921fb
 800a3bc:	3fdbffff 	.word	0x3fdbffff
 800a3c0:	3e1fffff 	.word	0x3e1fffff
 800a3c4:	8800759c 	.word	0x8800759c
 800a3c8:	7e37e43c 	.word	0x7e37e43c
 800a3cc:	3ff00000 	.word	0x3ff00000
 800a3d0:	3ff2ffff 	.word	0x3ff2ffff
 800a3d4:	3fe5ffff 	.word	0x3fe5ffff
 800a3d8:	e322da11 	.word	0xe322da11
 800a3dc:	3f90ad3a 	.word	0x3f90ad3a
 800a3e0:	24760deb 	.word	0x24760deb
 800a3e4:	3fa97b4b 	.word	0x3fa97b4b
 800a3e8:	a0d03d51 	.word	0xa0d03d51
 800a3ec:	3fb10d66 	.word	0x3fb10d66
 800a3f0:	c54c206e 	.word	0xc54c206e
 800a3f4:	3fb745cd 	.word	0x3fb745cd
 800a3f8:	920083ff 	.word	0x920083ff
 800a3fc:	3fc24924 	.word	0x3fc24924
 800a400:	5555550d 	.word	0x5555550d
 800a404:	3fd55555 	.word	0x3fd55555
 800a408:	2c6a6c2f 	.word	0x2c6a6c2f
 800a40c:	bfa2b444 	.word	0xbfa2b444
 800a410:	52defd9a 	.word	0x52defd9a
 800a414:	3fadde2d 	.word	0x3fadde2d
 800a418:	af749a6d 	.word	0xaf749a6d
 800a41c:	3fb3b0f2 	.word	0x3fb3b0f2
 800a420:	fe231671 	.word	0xfe231671
 800a424:	3fbc71c6 	.word	0x3fbc71c6
 800a428:	9998ebc4 	.word	0x9998ebc4
 800a42c:	3fc99999 	.word	0x3fc99999
 800a430:	40037fff 	.word	0x40037fff
 800a434:	3ff80000 	.word	0x3ff80000
 800a438:	bff00000 	.word	0xbff00000
 800a43c:	0800ad88 	.word	0x0800ad88
 800a440:	0800ad68 	.word	0x0800ad68
 800a444:	3ff921fb 	.word	0x3ff921fb

0800a448 <fabs>:
 800a448:	0049      	lsls	r1, r1, #1
 800a44a:	084b      	lsrs	r3, r1, #1
 800a44c:	0019      	movs	r1, r3
 800a44e:	4770      	bx	lr

0800a450 <__ieee754_sqrt>:
 800a450:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a452:	000a      	movs	r2, r1
 800a454:	000c      	movs	r4, r1
 800a456:	496f      	ldr	r1, [pc, #444]	; (800a614 <__ieee754_sqrt+0x1c4>)
 800a458:	0005      	movs	r5, r0
 800a45a:	0003      	movs	r3, r0
 800a45c:	0008      	movs	r0, r1
 800a45e:	b087      	sub	sp, #28
 800a460:	4020      	ands	r0, r4
 800a462:	4288      	cmp	r0, r1
 800a464:	d111      	bne.n	800a48a <__ieee754_sqrt+0x3a>
 800a466:	002a      	movs	r2, r5
 800a468:	0023      	movs	r3, r4
 800a46a:	0028      	movs	r0, r5
 800a46c:	0021      	movs	r1, r4
 800a46e:	f7f7 fb93 	bl	8001b98 <__aeabi_dmul>
 800a472:	0002      	movs	r2, r0
 800a474:	000b      	movs	r3, r1
 800a476:	0028      	movs	r0, r5
 800a478:	0021      	movs	r1, r4
 800a47a:	f7f6 fc33 	bl	8000ce4 <__aeabi_dadd>
 800a47e:	0005      	movs	r5, r0
 800a480:	000c      	movs	r4, r1
 800a482:	0028      	movs	r0, r5
 800a484:	0021      	movs	r1, r4
 800a486:	b007      	add	sp, #28
 800a488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a48a:	2c00      	cmp	r4, #0
 800a48c:	dc12      	bgt.n	800a4b4 <__ieee754_sqrt+0x64>
 800a48e:	0061      	lsls	r1, r4, #1
 800a490:	0849      	lsrs	r1, r1, #1
 800a492:	4329      	orrs	r1, r5
 800a494:	d0f5      	beq.n	800a482 <__ieee754_sqrt+0x32>
 800a496:	2100      	movs	r1, #0
 800a498:	428c      	cmp	r4, r1
 800a49a:	d100      	bne.n	800a49e <__ieee754_sqrt+0x4e>
 800a49c:	e09f      	b.n	800a5de <__ieee754_sqrt+0x18e>
 800a49e:	002a      	movs	r2, r5
 800a4a0:	0023      	movs	r3, r4
 800a4a2:	0028      	movs	r0, r5
 800a4a4:	0021      	movs	r1, r4
 800a4a6:	f7f7 fe39 	bl	800211c <__aeabi_dsub>
 800a4aa:	0002      	movs	r2, r0
 800a4ac:	000b      	movs	r3, r1
 800a4ae:	f7f6 ff79 	bl	80013a4 <__aeabi_ddiv>
 800a4b2:	e7e4      	b.n	800a47e <__ieee754_sqrt+0x2e>
 800a4b4:	1521      	asrs	r1, r4, #20
 800a4b6:	d100      	bne.n	800a4ba <__ieee754_sqrt+0x6a>
 800a4b8:	e091      	b.n	800a5de <__ieee754_sqrt+0x18e>
 800a4ba:	4857      	ldr	r0, [pc, #348]	; (800a618 <__ieee754_sqrt+0x1c8>)
 800a4bc:	0312      	lsls	r2, r2, #12
 800a4be:	180c      	adds	r4, r1, r0
 800a4c0:	2080      	movs	r0, #128	; 0x80
 800a4c2:	0b12      	lsrs	r2, r2, #12
 800a4c4:	0340      	lsls	r0, r0, #13
 800a4c6:	4310      	orrs	r0, r2
 800a4c8:	07c9      	lsls	r1, r1, #31
 800a4ca:	d403      	bmi.n	800a4d4 <__ieee754_sqrt+0x84>
 800a4cc:	0fda      	lsrs	r2, r3, #31
 800a4ce:	0040      	lsls	r0, r0, #1
 800a4d0:	1810      	adds	r0, r2, r0
 800a4d2:	005b      	lsls	r3, r3, #1
 800a4d4:	2500      	movs	r5, #0
 800a4d6:	1062      	asrs	r2, r4, #1
 800a4d8:	0040      	lsls	r0, r0, #1
 800a4da:	2480      	movs	r4, #128	; 0x80
 800a4dc:	9205      	str	r2, [sp, #20]
 800a4de:	0fda      	lsrs	r2, r3, #31
 800a4e0:	1812      	adds	r2, r2, r0
 800a4e2:	0029      	movs	r1, r5
 800a4e4:	2016      	movs	r0, #22
 800a4e6:	005b      	lsls	r3, r3, #1
 800a4e8:	03a4      	lsls	r4, r4, #14
 800a4ea:	190e      	adds	r6, r1, r4
 800a4ec:	4296      	cmp	r6, r2
 800a4ee:	dc02      	bgt.n	800a4f6 <__ieee754_sqrt+0xa6>
 800a4f0:	1931      	adds	r1, r6, r4
 800a4f2:	1b92      	subs	r2, r2, r6
 800a4f4:	192d      	adds	r5, r5, r4
 800a4f6:	0fde      	lsrs	r6, r3, #31
 800a4f8:	0052      	lsls	r2, r2, #1
 800a4fa:	3801      	subs	r0, #1
 800a4fc:	18b2      	adds	r2, r6, r2
 800a4fe:	005b      	lsls	r3, r3, #1
 800a500:	0864      	lsrs	r4, r4, #1
 800a502:	2800      	cmp	r0, #0
 800a504:	d1f1      	bne.n	800a4ea <__ieee754_sqrt+0x9a>
 800a506:	2620      	movs	r6, #32
 800a508:	2780      	movs	r7, #128	; 0x80
 800a50a:	0004      	movs	r4, r0
 800a50c:	9604      	str	r6, [sp, #16]
 800a50e:	063f      	lsls	r7, r7, #24
 800a510:	183e      	adds	r6, r7, r0
 800a512:	46b4      	mov	ip, r6
 800a514:	428a      	cmp	r2, r1
 800a516:	dc02      	bgt.n	800a51e <__ieee754_sqrt+0xce>
 800a518:	d114      	bne.n	800a544 <__ieee754_sqrt+0xf4>
 800a51a:	429e      	cmp	r6, r3
 800a51c:	d812      	bhi.n	800a544 <__ieee754_sqrt+0xf4>
 800a51e:	4660      	mov	r0, ip
 800a520:	4666      	mov	r6, ip
 800a522:	19c0      	adds	r0, r0, r7
 800a524:	9100      	str	r1, [sp, #0]
 800a526:	2e00      	cmp	r6, #0
 800a528:	da03      	bge.n	800a532 <__ieee754_sqrt+0xe2>
 800a52a:	43c6      	mvns	r6, r0
 800a52c:	0ff6      	lsrs	r6, r6, #31
 800a52e:	198e      	adds	r6, r1, r6
 800a530:	9600      	str	r6, [sp, #0]
 800a532:	1a52      	subs	r2, r2, r1
 800a534:	4563      	cmp	r3, ip
 800a536:	4189      	sbcs	r1, r1
 800a538:	4249      	negs	r1, r1
 800a53a:	1a52      	subs	r2, r2, r1
 800a53c:	4661      	mov	r1, ip
 800a53e:	1a5b      	subs	r3, r3, r1
 800a540:	9900      	ldr	r1, [sp, #0]
 800a542:	19e4      	adds	r4, r4, r7
 800a544:	0fde      	lsrs	r6, r3, #31
 800a546:	0052      	lsls	r2, r2, #1
 800a548:	18b2      	adds	r2, r6, r2
 800a54a:	9e04      	ldr	r6, [sp, #16]
 800a54c:	005b      	lsls	r3, r3, #1
 800a54e:	3e01      	subs	r6, #1
 800a550:	087f      	lsrs	r7, r7, #1
 800a552:	9604      	str	r6, [sp, #16]
 800a554:	2e00      	cmp	r6, #0
 800a556:	d1db      	bne.n	800a510 <__ieee754_sqrt+0xc0>
 800a558:	431a      	orrs	r2, r3
 800a55a:	d01f      	beq.n	800a59c <__ieee754_sqrt+0x14c>
 800a55c:	4e2f      	ldr	r6, [pc, #188]	; (800a61c <__ieee754_sqrt+0x1cc>)
 800a55e:	4f30      	ldr	r7, [pc, #192]	; (800a620 <__ieee754_sqrt+0x1d0>)
 800a560:	6830      	ldr	r0, [r6, #0]
 800a562:	6871      	ldr	r1, [r6, #4]
 800a564:	683a      	ldr	r2, [r7, #0]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	9200      	str	r2, [sp, #0]
 800a56a:	9301      	str	r3, [sp, #4]
 800a56c:	6832      	ldr	r2, [r6, #0]
 800a56e:	6873      	ldr	r3, [r6, #4]
 800a570:	9202      	str	r2, [sp, #8]
 800a572:	9303      	str	r3, [sp, #12]
 800a574:	9a00      	ldr	r2, [sp, #0]
 800a576:	9b01      	ldr	r3, [sp, #4]
 800a578:	f7f7 fdd0 	bl	800211c <__aeabi_dsub>
 800a57c:	0002      	movs	r2, r0
 800a57e:	000b      	movs	r3, r1
 800a580:	9802      	ldr	r0, [sp, #8]
 800a582:	9903      	ldr	r1, [sp, #12]
 800a584:	f7f5 ff6a 	bl	800045c <__aeabi_dcmple>
 800a588:	2800      	cmp	r0, #0
 800a58a:	d007      	beq.n	800a59c <__ieee754_sqrt+0x14c>
 800a58c:	6830      	ldr	r0, [r6, #0]
 800a58e:	6871      	ldr	r1, [r6, #4]
 800a590:	683a      	ldr	r2, [r7, #0]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	1c67      	adds	r7, r4, #1
 800a596:	d127      	bne.n	800a5e8 <__ieee754_sqrt+0x198>
 800a598:	9c04      	ldr	r4, [sp, #16]
 800a59a:	3501      	adds	r5, #1
 800a59c:	4b21      	ldr	r3, [pc, #132]	; (800a624 <__ieee754_sqrt+0x1d4>)
 800a59e:	1069      	asrs	r1, r5, #1
 800a5a0:	18c9      	adds	r1, r1, r3
 800a5a2:	0864      	lsrs	r4, r4, #1
 800a5a4:	07ed      	lsls	r5, r5, #31
 800a5a6:	d502      	bpl.n	800a5ae <__ieee754_sqrt+0x15e>
 800a5a8:	2380      	movs	r3, #128	; 0x80
 800a5aa:	061b      	lsls	r3, r3, #24
 800a5ac:	431c      	orrs	r4, r3
 800a5ae:	9b05      	ldr	r3, [sp, #20]
 800a5b0:	0025      	movs	r5, r4
 800a5b2:	0518      	lsls	r0, r3, #20
 800a5b4:	1843      	adds	r3, r0, r1
 800a5b6:	001c      	movs	r4, r3
 800a5b8:	e763      	b.n	800a482 <__ieee754_sqrt+0x32>
 800a5ba:	0ada      	lsrs	r2, r3, #11
 800a5bc:	3815      	subs	r0, #21
 800a5be:	055b      	lsls	r3, r3, #21
 800a5c0:	2a00      	cmp	r2, #0
 800a5c2:	d0fa      	beq.n	800a5ba <__ieee754_sqrt+0x16a>
 800a5c4:	2480      	movs	r4, #128	; 0x80
 800a5c6:	0364      	lsls	r4, r4, #13
 800a5c8:	4222      	tst	r2, r4
 800a5ca:	d00a      	beq.n	800a5e2 <__ieee754_sqrt+0x192>
 800a5cc:	2420      	movs	r4, #32
 800a5ce:	001e      	movs	r6, r3
 800a5d0:	1a64      	subs	r4, r4, r1
 800a5d2:	40e6      	lsrs	r6, r4
 800a5d4:	1e4d      	subs	r5, r1, #1
 800a5d6:	408b      	lsls	r3, r1
 800a5d8:	4332      	orrs	r2, r6
 800a5da:	1b41      	subs	r1, r0, r5
 800a5dc:	e76d      	b.n	800a4ba <__ieee754_sqrt+0x6a>
 800a5de:	2000      	movs	r0, #0
 800a5e0:	e7ee      	b.n	800a5c0 <__ieee754_sqrt+0x170>
 800a5e2:	0052      	lsls	r2, r2, #1
 800a5e4:	3101      	adds	r1, #1
 800a5e6:	e7ef      	b.n	800a5c8 <__ieee754_sqrt+0x178>
 800a5e8:	f7f6 fb7c 	bl	8000ce4 <__aeabi_dadd>
 800a5ec:	6877      	ldr	r7, [r6, #4]
 800a5ee:	6836      	ldr	r6, [r6, #0]
 800a5f0:	0002      	movs	r2, r0
 800a5f2:	000b      	movs	r3, r1
 800a5f4:	0030      	movs	r0, r6
 800a5f6:	0039      	movs	r1, r7
 800a5f8:	f7f5 ff26 	bl	8000448 <__aeabi_dcmplt>
 800a5fc:	2800      	cmp	r0, #0
 800a5fe:	d004      	beq.n	800a60a <__ieee754_sqrt+0x1ba>
 800a600:	3402      	adds	r4, #2
 800a602:	4263      	negs	r3, r4
 800a604:	4163      	adcs	r3, r4
 800a606:	18ed      	adds	r5, r5, r3
 800a608:	e7c8      	b.n	800a59c <__ieee754_sqrt+0x14c>
 800a60a:	2301      	movs	r3, #1
 800a60c:	3401      	adds	r4, #1
 800a60e:	439c      	bics	r4, r3
 800a610:	e7c4      	b.n	800a59c <__ieee754_sqrt+0x14c>
 800a612:	46c0      	nop			; (mov r8, r8)
 800a614:	7ff00000 	.word	0x7ff00000
 800a618:	fffffc01 	.word	0xfffffc01
 800a61c:	20000268 	.word	0x20000268
 800a620:	20000270 	.word	0x20000270
 800a624:	3fe00000 	.word	0x3fe00000

0800a628 <__ieee754_atan2>:
 800a628:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a62a:	0016      	movs	r6, r2
 800a62c:	001d      	movs	r5, r3
 800a62e:	005a      	lsls	r2, r3, #1
 800a630:	9300      	str	r3, [sp, #0]
 800a632:	4273      	negs	r3, r6
 800a634:	4333      	orrs	r3, r6
 800a636:	4f45      	ldr	r7, [pc, #276]	; (800a74c <__ieee754_atan2+0x124>)
 800a638:	0852      	lsrs	r2, r2, #1
 800a63a:	0fdb      	lsrs	r3, r3, #31
 800a63c:	4313      	orrs	r3, r2
 800a63e:	42bb      	cmp	r3, r7
 800a640:	d809      	bhi.n	800a656 <__ieee754_atan2+0x2e>
 800a642:	4244      	negs	r4, r0
 800a644:	004b      	lsls	r3, r1, #1
 800a646:	4304      	orrs	r4, r0
 800a648:	085b      	lsrs	r3, r3, #1
 800a64a:	0fe4      	lsrs	r4, r4, #31
 800a64c:	9100      	str	r1, [sp, #0]
 800a64e:	9001      	str	r0, [sp, #4]
 800a650:	431c      	orrs	r4, r3
 800a652:	42bc      	cmp	r4, r7
 800a654:	d905      	bls.n	800a662 <__ieee754_atan2+0x3a>
 800a656:	0032      	movs	r2, r6
 800a658:	002b      	movs	r3, r5
 800a65a:	f7f6 fb43 	bl	8000ce4 <__aeabi_dadd>
 800a65e:	b003      	add	sp, #12
 800a660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a662:	4c3b      	ldr	r4, [pc, #236]	; (800a750 <__ieee754_atan2+0x128>)
 800a664:	192c      	adds	r4, r5, r4
 800a666:	4334      	orrs	r4, r6
 800a668:	d102      	bne.n	800a670 <__ieee754_atan2+0x48>
 800a66a:	f7ff fd6d 	bl	800a148 <atan>
 800a66e:	e7f6      	b.n	800a65e <__ieee754_atan2+0x36>
 800a670:	17ac      	asrs	r4, r5, #30
 800a672:	46a4      	mov	ip, r4
 800a674:	2402      	movs	r4, #2
 800a676:	4667      	mov	r7, ip
 800a678:	403c      	ands	r4, r7
 800a67a:	9f00      	ldr	r7, [sp, #0]
 800a67c:	0fff      	lsrs	r7, r7, #31
 800a67e:	433c      	orrs	r4, r7
 800a680:	9f01      	ldr	r7, [sp, #4]
 800a682:	431f      	orrs	r7, r3
 800a684:	d106      	bne.n	800a694 <__ieee754_atan2+0x6c>
 800a686:	2c02      	cmp	r4, #2
 800a688:	d057      	beq.n	800a73a <__ieee754_atan2+0x112>
 800a68a:	2c03      	cmp	r4, #3
 800a68c:	d1e7      	bne.n	800a65e <__ieee754_atan2+0x36>
 800a68e:	4831      	ldr	r0, [pc, #196]	; (800a754 <__ieee754_atan2+0x12c>)
 800a690:	4931      	ldr	r1, [pc, #196]	; (800a758 <__ieee754_atan2+0x130>)
 800a692:	e7e4      	b.n	800a65e <__ieee754_atan2+0x36>
 800a694:	0017      	movs	r7, r2
 800a696:	4337      	orrs	r7, r6
 800a698:	d105      	bne.n	800a6a6 <__ieee754_atan2+0x7e>
 800a69a:	9b00      	ldr	r3, [sp, #0]
 800a69c:	482d      	ldr	r0, [pc, #180]	; (800a754 <__ieee754_atan2+0x12c>)
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	da51      	bge.n	800a746 <__ieee754_atan2+0x11e>
 800a6a2:	492e      	ldr	r1, [pc, #184]	; (800a75c <__ieee754_atan2+0x134>)
 800a6a4:	e7db      	b.n	800a65e <__ieee754_atan2+0x36>
 800a6a6:	4f29      	ldr	r7, [pc, #164]	; (800a74c <__ieee754_atan2+0x124>)
 800a6a8:	42ba      	cmp	r2, r7
 800a6aa:	d110      	bne.n	800a6ce <__ieee754_atan2+0xa6>
 800a6ac:	3c01      	subs	r4, #1
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d105      	bne.n	800a6be <__ieee754_atan2+0x96>
 800a6b2:	4b2b      	ldr	r3, [pc, #172]	; (800a760 <__ieee754_atan2+0x138>)
 800a6b4:	2c02      	cmp	r4, #2
 800a6b6:	d905      	bls.n	800a6c4 <__ieee754_atan2+0x9c>
 800a6b8:	4826      	ldr	r0, [pc, #152]	; (800a754 <__ieee754_atan2+0x12c>)
 800a6ba:	492a      	ldr	r1, [pc, #168]	; (800a764 <__ieee754_atan2+0x13c>)
 800a6bc:	e7cf      	b.n	800a65e <__ieee754_atan2+0x36>
 800a6be:	2c02      	cmp	r4, #2
 800a6c0:	d83e      	bhi.n	800a740 <__ieee754_atan2+0x118>
 800a6c2:	4b29      	ldr	r3, [pc, #164]	; (800a768 <__ieee754_atan2+0x140>)
 800a6c4:	00e4      	lsls	r4, r4, #3
 800a6c6:	191b      	adds	r3, r3, r4
 800a6c8:	6818      	ldr	r0, [r3, #0]
 800a6ca:	6859      	ldr	r1, [r3, #4]
 800a6cc:	e7c7      	b.n	800a65e <__ieee754_atan2+0x36>
 800a6ce:	4f1f      	ldr	r7, [pc, #124]	; (800a74c <__ieee754_atan2+0x124>)
 800a6d0:	42bb      	cmp	r3, r7
 800a6d2:	d0e2      	beq.n	800a69a <__ieee754_atan2+0x72>
 800a6d4:	1a9b      	subs	r3, r3, r2
 800a6d6:	151b      	asrs	r3, r3, #20
 800a6d8:	2b3c      	cmp	r3, #60	; 0x3c
 800a6da:	dc18      	bgt.n	800a70e <__ieee754_atan2+0xe6>
 800a6dc:	2d00      	cmp	r5, #0
 800a6de:	da01      	bge.n	800a6e4 <__ieee754_atan2+0xbc>
 800a6e0:	333c      	adds	r3, #60	; 0x3c
 800a6e2:	db17      	blt.n	800a714 <__ieee754_atan2+0xec>
 800a6e4:	0032      	movs	r2, r6
 800a6e6:	002b      	movs	r3, r5
 800a6e8:	f7f6 fe5c 	bl	80013a4 <__aeabi_ddiv>
 800a6ec:	f7ff feac 	bl	800a448 <fabs>
 800a6f0:	f7ff fd2a 	bl	800a148 <atan>
 800a6f4:	2c01      	cmp	r4, #1
 800a6f6:	d010      	beq.n	800a71a <__ieee754_atan2+0xf2>
 800a6f8:	2c02      	cmp	r4, #2
 800a6fa:	d013      	beq.n	800a724 <__ieee754_atan2+0xfc>
 800a6fc:	2c00      	cmp	r4, #0
 800a6fe:	d0ae      	beq.n	800a65e <__ieee754_atan2+0x36>
 800a700:	4a1a      	ldr	r2, [pc, #104]	; (800a76c <__ieee754_atan2+0x144>)
 800a702:	4b1b      	ldr	r3, [pc, #108]	; (800a770 <__ieee754_atan2+0x148>)
 800a704:	f7f7 fd0a 	bl	800211c <__aeabi_dsub>
 800a708:	4a12      	ldr	r2, [pc, #72]	; (800a754 <__ieee754_atan2+0x12c>)
 800a70a:	4b1a      	ldr	r3, [pc, #104]	; (800a774 <__ieee754_atan2+0x14c>)
 800a70c:	e012      	b.n	800a734 <__ieee754_atan2+0x10c>
 800a70e:	4811      	ldr	r0, [pc, #68]	; (800a754 <__ieee754_atan2+0x12c>)
 800a710:	4919      	ldr	r1, [pc, #100]	; (800a778 <__ieee754_atan2+0x150>)
 800a712:	e7ef      	b.n	800a6f4 <__ieee754_atan2+0xcc>
 800a714:	2000      	movs	r0, #0
 800a716:	2100      	movs	r1, #0
 800a718:	e7ec      	b.n	800a6f4 <__ieee754_atan2+0xcc>
 800a71a:	2480      	movs	r4, #128	; 0x80
 800a71c:	0624      	lsls	r4, r4, #24
 800a71e:	190b      	adds	r3, r1, r4
 800a720:	0019      	movs	r1, r3
 800a722:	e79c      	b.n	800a65e <__ieee754_atan2+0x36>
 800a724:	4a11      	ldr	r2, [pc, #68]	; (800a76c <__ieee754_atan2+0x144>)
 800a726:	4b12      	ldr	r3, [pc, #72]	; (800a770 <__ieee754_atan2+0x148>)
 800a728:	f7f7 fcf8 	bl	800211c <__aeabi_dsub>
 800a72c:	0002      	movs	r2, r0
 800a72e:	000b      	movs	r3, r1
 800a730:	4808      	ldr	r0, [pc, #32]	; (800a754 <__ieee754_atan2+0x12c>)
 800a732:	4910      	ldr	r1, [pc, #64]	; (800a774 <__ieee754_atan2+0x14c>)
 800a734:	f7f7 fcf2 	bl	800211c <__aeabi_dsub>
 800a738:	e791      	b.n	800a65e <__ieee754_atan2+0x36>
 800a73a:	4806      	ldr	r0, [pc, #24]	; (800a754 <__ieee754_atan2+0x12c>)
 800a73c:	490d      	ldr	r1, [pc, #52]	; (800a774 <__ieee754_atan2+0x14c>)
 800a73e:	e78e      	b.n	800a65e <__ieee754_atan2+0x36>
 800a740:	2000      	movs	r0, #0
 800a742:	2100      	movs	r1, #0
 800a744:	e78b      	b.n	800a65e <__ieee754_atan2+0x36>
 800a746:	490c      	ldr	r1, [pc, #48]	; (800a778 <__ieee754_atan2+0x150>)
 800a748:	e789      	b.n	800a65e <__ieee754_atan2+0x36>
 800a74a:	46c0      	nop			; (mov r8, r8)
 800a74c:	7ff00000 	.word	0x7ff00000
 800a750:	c0100000 	.word	0xc0100000
 800a754:	54442d18 	.word	0x54442d18
 800a758:	c00921fb 	.word	0xc00921fb
 800a75c:	bff921fb 	.word	0xbff921fb
 800a760:	0800ada8 	.word	0x0800ada8
 800a764:	3fe921fb 	.word	0x3fe921fb
 800a768:	0800adc0 	.word	0x0800adc0
 800a76c:	33145c07 	.word	0x33145c07
 800a770:	3ca1a626 	.word	0x3ca1a626
 800a774:	400921fb 	.word	0x400921fb
 800a778:	3ff921fb 	.word	0x3ff921fb

0800a77c <_init>:
 800a77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a77e:	46c0      	nop			; (mov r8, r8)
 800a780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a782:	bc08      	pop	{r3}
 800a784:	469e      	mov	lr, r3
 800a786:	4770      	bx	lr

0800a788 <_fini>:
 800a788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a78a:	46c0      	nop			; (mov r8, r8)
 800a78c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a78e:	bc08      	pop	{r3}
 800a790:	469e      	mov	lr, r3
 800a792:	4770      	bx	lr
